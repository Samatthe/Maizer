
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f94  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a4  20000010  00008fa4  00020010  2**2
                  ALLOC
  3 .stack        00002004  200002b4  00009248  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037dbd  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003aeb  00000000  00000000  00057e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005056  00000000  00000000  0005b939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e10  00000000  00000000  0006098f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ca0  00000000  00000000  0006179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a7d5  00000000  00000000  0006243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011d71  00000000  00000000  0006cc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092721  00000000  00000000  0007e985  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003204  00000000  00000000  001110a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200022b8 	.word	0x200022b8
       4:	00004dc9 	.word	0x00004dc9
       8:	00004ec1 	.word	0x00004ec1
       c:	00004ec1 	.word	0x00004ec1
	...
      2c:	00004ec1 	.word	0x00004ec1
	...
      38:	00004ec1 	.word	0x00004ec1
      3c:	00004ec1 	.word	0x00004ec1
      40:	00004ec1 	.word	0x00004ec1
      44:	00004ec1 	.word	0x00004ec1
      48:	00004ec1 	.word	0x00004ec1
      4c:	00000ae1 	.word	0x00000ae1
      50:	00000f7d 	.word	0x00000f7d
      54:	00004ec1 	.word	0x00004ec1
      58:	00004ec1 	.word	0x00004ec1
      5c:	00004ec1 	.word	0x00004ec1
      60:	00004ec1 	.word	0x00004ec1
      64:	00003f79 	.word	0x00003f79
      68:	00003f91 	.word	0x00003f91
      6c:	00003fa9 	.word	0x00003fa9
      70:	00003fc1 	.word	0x00003fc1
      74:	00003fd9 	.word	0x00003fd9
      78:	00003ff1 	.word	0x00003ff1
      7c:	00002c8d 	.word	0x00002c8d
      80:	00002ca1 	.word	0x00002ca1
      84:	00002cb5 	.word	0x00002cb5
      88:	00002d45 	.word	0x00002d45
      8c:	00002d59 	.word	0x00002d59
      90:	00002d6d 	.word	0x00002d6d
	...
      9c:	00004ec1 	.word	0x00004ec1
      a0:	00004ec1 	.word	0x00004ec1
      a4:	00004ec1 	.word	0x00004ec1
      a8:	00004ec1 	.word	0x00004ec1
      ac:	00004ec1 	.word	0x00004ec1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00008f94 	.word	0x00008f94

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00008f94 	.word	0x00008f94
     10c:	00008f94 	.word	0x00008f94
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1bc:	4b06      	ldr	r3, [pc, #24]	; (1d8 <system_interrupt_enable+0x28>)
     1be:	1dfa      	adds	r2, r7, #7
     1c0:	7812      	ldrb	r2, [r2, #0]
     1c2:	0011      	movs	r1, r2
     1c4:	221f      	movs	r2, #31
     1c6:	400a      	ands	r2, r1
     1c8:	2101      	movs	r1, #1
     1ca:	4091      	lsls	r1, r2
     1cc:	000a      	movs	r2, r1
     1ce:	601a      	str	r2, [r3, #0]
}
     1d0:	46c0      	nop			; (mov r8, r8)
     1d2:	46bd      	mov	sp, r7
     1d4:	b002      	add	sp, #8
     1d6:	bd80      	pop	{r7, pc}
     1d8:	e000e100 	.word	0xe000e100

000001dc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b084      	sub	sp, #16
     1e0:	af00      	add	r7, sp, #0
     1e2:	0002      	movs	r2, r0
     1e4:	1dfb      	adds	r3, r7, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e8:	230f      	movs	r3, #15
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f4:	230f      	movs	r3, #15
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d10c      	bne.n	218 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <_extint_get_eic_from_channel+0x48>)
     200:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681b      	ldr	r3, [r3, #0]
     216:	e000      	b.n	21a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     218:	2300      	movs	r3, #0
	}
}
     21a:	0018      	movs	r0, r3
     21c:	46bd      	mov	sp, r7
     21e:	b004      	add	sp, #16
     220:	bd80      	pop	{r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	40001800 	.word	0x40001800

00000228 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     228:	b580      	push	{r7, lr}
     22a:	b082      	sub	sp, #8
     22c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22e:	4b0f      	ldr	r3, [pc, #60]	; (26c <extint_is_syncing+0x44>)
     230:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     232:	2300      	movs	r3, #0
     234:	607b      	str	r3, [r7, #4]
     236:	e011      	b.n	25c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     238:	687b      	ldr	r3, [r7, #4]
     23a:	009b      	lsls	r3, r3, #2
     23c:	2208      	movs	r2, #8
     23e:	4694      	mov	ip, r2
     240:	44bc      	add	ip, r7
     242:	4463      	add	r3, ip
     244:	3b08      	subs	r3, #8
     246:	681b      	ldr	r3, [r3, #0]
     248:	785b      	ldrb	r3, [r3, #1]
     24a:	b2db      	uxtb	r3, r3
     24c:	b25b      	sxtb	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	da01      	bge.n	256 <extint_is_syncing+0x2e>
			return true;
     252:	2301      	movs	r3, #1
     254:	e006      	b.n	264 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     256:	687b      	ldr	r3, [r7, #4]
     258:	3301      	adds	r3, #1
     25a:	607b      	str	r3, [r7, #4]
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2b00      	cmp	r3, #0
     260:	d0ea      	beq.n	238 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     262:	2300      	movs	r3, #0
}
     264:	0018      	movs	r0, r3
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2d      	ldr	r3, [pc, #180]	; (32c <_system_extint_init+0xbc>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2140      	movs	r1, #64	; 0x40
     27c:	2000      	movs	r0, #0
     27e:	4b2c      	ldr	r3, [pc, #176]	; (330 <_system_extint_init+0xc0>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	003b      	movs	r3, r7
     284:	0018      	movs	r0, r3
     286:	4b2b      	ldr	r3, [pc, #172]	; (334 <_system_extint_init+0xc4>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	003b      	movs	r3, r7
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	003b      	movs	r3, r7
     292:	0019      	movs	r1, r3
     294:	2005      	movs	r0, #5
     296:	4b28      	ldr	r3, [pc, #160]	; (338 <_system_extint_init+0xc8>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b27      	ldr	r3, [pc, #156]	; (33c <_system_extint_init+0xcc>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b17      	ldr	r3, [pc, #92]	; (340 <_system_extint_init+0xd0>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b12      	ldr	r3, [pc, #72]	; (344 <_system_extint_init+0xd4>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0b      	ldr	r3, [pc, #44]	; (348 <_system_extint_init+0xd8>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_system_extint_init+0xdc>)
     320:	4798      	blx	r3
}
     322:	46c0      	nop			; (mov r8, r8)
     324:	46bd      	mov	sp, r7
     326:	b004      	add	sp, #16
     328:	bd80      	pop	{r7, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	40001800 	.word	0x40001800
     330:	0000012d 	.word	0x0000012d
     334:	00000115 	.word	0x00000115
     338:	00004a55 	.word	0x00004a55
     33c:	00004a99 	.word	0x00004a99
     340:	00000229 	.word	0x00000229
     344:	20000088 	.word	0x20000088
     348:	000001b1 	.word	0x000001b1
     34c:	00000351 	.word	0x00000351

00000350 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     350:	b580      	push	{r7, lr}
     352:	b082      	sub	sp, #8
     354:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     356:	4b15      	ldr	r3, [pc, #84]	; (3ac <_extint_enable+0x5c>)
     358:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     35a:	2300      	movs	r3, #0
     35c:	607b      	str	r3, [r7, #4]
     35e:	e018      	b.n	392 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     360:	687b      	ldr	r3, [r7, #4]
     362:	009b      	lsls	r3, r3, #2
     364:	2208      	movs	r2, #8
     366:	4694      	mov	ip, r2
     368:	44bc      	add	ip, r7
     36a:	4463      	add	r3, ip
     36c:	3b08      	subs	r3, #8
     36e:	681a      	ldr	r2, [r3, #0]
     370:	687b      	ldr	r3, [r7, #4]
     372:	009b      	lsls	r3, r3, #2
     374:	2108      	movs	r1, #8
     376:	468c      	mov	ip, r1
     378:	44bc      	add	ip, r7
     37a:	4463      	add	r3, ip
     37c:	3b08      	subs	r3, #8
     37e:	681b      	ldr	r3, [r3, #0]
     380:	781b      	ldrb	r3, [r3, #0]
     382:	b2db      	uxtb	r3, r3
     384:	2102      	movs	r1, #2
     386:	430b      	orrs	r3, r1
     388:	b2db      	uxtb	r3, r3
     38a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	3301      	adds	r3, #1
     390:	607b      	str	r3, [r7, #4]
     392:	687b      	ldr	r3, [r7, #4]
     394:	2b00      	cmp	r3, #0
     396:	d0e3      	beq.n	360 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     398:	46c0      	nop			; (mov r8, r8)
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_extint_enable+0x60>)
     39c:	4798      	blx	r3
     39e:	1e03      	subs	r3, r0, #0
     3a0:	d1fb      	bne.n	39a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	46bd      	mov	sp, r7
     3a6:	b002      	add	sp, #8
     3a8:	bd80      	pop	{r7, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001800 	.word	0x40001800
     3b0:	00000229 	.word	0x00000229

000003b4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	2200      	movs	r2, #0
     3c0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2200      	movs	r2, #0
     3c6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	2201      	movs	r2, #1
     3cc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	2201      	movs	r2, #1
     3d2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2202      	movs	r2, #2
     3de:	72da      	strb	r2, [r3, #11]
}
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	46bd      	mov	sp, r7
     3e4:	b002      	add	sp, #8
     3e6:	bd80      	pop	{r7, pc}

000003e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b086      	sub	sp, #24
     3ec:	af00      	add	r7, sp, #0
     3ee:	0002      	movs	r2, r0
     3f0:	6039      	str	r1, [r7, #0]
     3f2:	1dfb      	adds	r3, r7, #7
     3f4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3f6:	2308      	movs	r3, #8
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	0018      	movs	r0, r3
     3fc:	4b36      	ldr	r3, [pc, #216]	; (4d8 <extint_chan_set_config+0xf0>)
     3fe:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     400:	683b      	ldr	r3, [r7, #0]
     402:	685b      	ldr	r3, [r3, #4]
     404:	b2da      	uxtb	r2, r3
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     40c:	2308      	movs	r3, #8
     40e:	18fb      	adds	r3, r7, r3
     410:	2200      	movs	r2, #0
     412:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     414:	683b      	ldr	r3, [r7, #0]
     416:	7a1a      	ldrb	r2, [r3, #8]
     418:	2308      	movs	r3, #8
     41a:	18fb      	adds	r3, r7, r3
     41c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     41e:	683b      	ldr	r3, [r7, #0]
     420:	681b      	ldr	r3, [r3, #0]
     422:	b2db      	uxtb	r3, r3
     424:	2208      	movs	r2, #8
     426:	18ba      	adds	r2, r7, r2
     428:	0011      	movs	r1, r2
     42a:	0018      	movs	r0, r3
     42c:	4b2b      	ldr	r3, [pc, #172]	; (4dc <extint_chan_set_config+0xf4>)
     42e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     430:	1dfb      	adds	r3, r7, #7
     432:	781b      	ldrb	r3, [r3, #0]
     434:	0018      	movs	r0, r3
     436:	4b2a      	ldr	r3, [pc, #168]	; (4e0 <extint_chan_set_config+0xf8>)
     438:	4798      	blx	r3
     43a:	0003      	movs	r3, r0
     43c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     43e:	1dfb      	adds	r3, r7, #7
     440:	781b      	ldrb	r3, [r3, #0]
     442:	2207      	movs	r2, #7
     444:	4013      	ands	r3, r2
     446:	009b      	lsls	r3, r3, #2
     448:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	7adb      	ldrb	r3, [r3, #11]
     44e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     450:	683b      	ldr	r3, [r7, #0]
     452:	7a9b      	ldrb	r3, [r3, #10]
     454:	2b00      	cmp	r3, #0
     456:	d003      	beq.n	460 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     458:	697b      	ldr	r3, [r7, #20]
     45a:	2208      	movs	r2, #8
     45c:	4313      	orrs	r3, r2
     45e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     460:	1dfb      	adds	r3, r7, #7
     462:	781b      	ldrb	r3, [r3, #0]
     464:	08db      	lsrs	r3, r3, #3
     466:	b2db      	uxtb	r3, r3
     468:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     46a:	1dfb      	adds	r3, r7, #7
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	08db      	lsrs	r3, r3, #3
     470:	b2db      	uxtb	r3, r3
     472:	001a      	movs	r2, r3
     474:	693b      	ldr	r3, [r7, #16]
     476:	3206      	adds	r2, #6
     478:	0092      	lsls	r2, r2, #2
     47a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47c:	210f      	movs	r1, #15
     47e:	68fa      	ldr	r2, [r7, #12]
     480:	4091      	lsls	r1, r2
     482:	000a      	movs	r2, r1
     484:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     486:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     488:	6979      	ldr	r1, [r7, #20]
     48a:	68fb      	ldr	r3, [r7, #12]
     48c:	4099      	lsls	r1, r3
     48e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     490:	431a      	orrs	r2, r3
     492:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     494:	693b      	ldr	r3, [r7, #16]
     496:	1d82      	adds	r2, r0, #6
     498:	0092      	lsls	r2, r2, #2
     49a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     49c:	683b      	ldr	r3, [r7, #0]
     49e:	7a5b      	ldrb	r3, [r3, #9]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d00a      	beq.n	4ba <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4a4:	693b      	ldr	r3, [r7, #16]
     4a6:	695a      	ldr	r2, [r3, #20]
     4a8:	1dfb      	adds	r3, r7, #7
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	2101      	movs	r1, #1
     4ae:	4099      	lsls	r1, r3
     4b0:	000b      	movs	r3, r1
     4b2:	431a      	orrs	r2, r3
     4b4:	693b      	ldr	r3, [r7, #16]
     4b6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     4b8:	e00a      	b.n	4d0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4ba:	693b      	ldr	r3, [r7, #16]
     4bc:	695b      	ldr	r3, [r3, #20]
     4be:	1dfa      	adds	r2, r7, #7
     4c0:	7812      	ldrb	r2, [r2, #0]
     4c2:	2101      	movs	r1, #1
     4c4:	4091      	lsls	r1, r2
     4c6:	000a      	movs	r2, r1
     4c8:	43d2      	mvns	r2, r2
     4ca:	401a      	ands	r2, r3
     4cc:	693b      	ldr	r3, [r7, #16]
     4ce:	615a      	str	r2, [r3, #20]
	}
}
     4d0:	46c0      	nop			; (mov r8, r8)
     4d2:	46bd      	mov	sp, r7
     4d4:	b006      	add	sp, #24
     4d6:	bd80      	pop	{r7, pc}
     4d8:	00000189 	.word	0x00000189
     4dc:	00004d41 	.word	0x00004d41
     4e0:	000001dd 	.word	0x000001dd

000004e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	2200      	movs	r2, #0
     4f0:	701a      	strb	r2, [r3, #0]
}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	46bd      	mov	sp, r7
     4f6:	b002      	add	sp, #8
     4f8:	bd80      	pop	{r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)

000004fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b082      	sub	sp, #8
     500:	af00      	add	r7, sp, #0
     502:	0002      	movs	r2, r0
     504:	6039      	str	r1, [r7, #0]
     506:	1dfb      	adds	r3, r7, #7
     508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     50a:	1dfb      	adds	r3, r7, #7
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	2b01      	cmp	r3, #1
     510:	d00a      	beq.n	528 <system_apb_clock_set_mask+0x2c>
     512:	2b02      	cmp	r3, #2
     514:	d00f      	beq.n	536 <system_apb_clock_set_mask+0x3a>
     516:	2b00      	cmp	r3, #0
     518:	d114      	bne.n	544 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     51a:	4b0e      	ldr	r3, [pc, #56]	; (554 <system_apb_clock_set_mask+0x58>)
     51c:	4a0d      	ldr	r2, [pc, #52]	; (554 <system_apb_clock_set_mask+0x58>)
     51e:	6991      	ldr	r1, [r2, #24]
     520:	683a      	ldr	r2, [r7, #0]
     522:	430a      	orrs	r2, r1
     524:	619a      	str	r2, [r3, #24]
			break;
     526:	e00f      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     528:	4b0a      	ldr	r3, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52a:	4a0a      	ldr	r2, [pc, #40]	; (554 <system_apb_clock_set_mask+0x58>)
     52c:	69d1      	ldr	r1, [r2, #28]
     52e:	683a      	ldr	r2, [r7, #0]
     530:	430a      	orrs	r2, r1
     532:	61da      	str	r2, [r3, #28]
			break;
     534:	e008      	b.n	548 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <system_apb_clock_set_mask+0x58>)
     538:	4a06      	ldr	r2, [pc, #24]	; (554 <system_apb_clock_set_mask+0x58>)
     53a:	6a11      	ldr	r1, [r2, #32]
     53c:	683a      	ldr	r2, [r7, #0]
     53e:	430a      	orrs	r2, r1
     540:	621a      	str	r2, [r3, #32]
			break;
     542:	e001      	b.n	548 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     544:	2317      	movs	r3, #23
     546:	e000      	b.n	54a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     548:	2300      	movs	r3, #0
}
     54a:	0018      	movs	r0, r3
     54c:	46bd      	mov	sp, r7
     54e:	b002      	add	sp, #8
     550:	bd80      	pop	{r7, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	40000400 	.word	0x40000400

00000558 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
     55e:	0002      	movs	r2, r0
     560:	1dfb      	adds	r3, r7, #7
     562:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <system_interrupt_enable+0x28>)
     566:	1dfa      	adds	r2, r7, #7
     568:	7812      	ldrb	r2, [r2, #0]
     56a:	0011      	movs	r1, r2
     56c:	221f      	movs	r2, #31
     56e:	400a      	ands	r2, r1
     570:	2101      	movs	r1, #1
     572:	4091      	lsls	r1, r2
     574:	000a      	movs	r2, r1
     576:	601a      	str	r2, [r3, #0]
}
     578:	46c0      	nop			; (mov r8, r8)
     57a:	46bd      	mov	sp, r7
     57c:	b002      	add	sp, #8
     57e:	bd80      	pop	{r7, pc}
     580:	e000e100 	.word	0xe000e100

00000584 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     584:	b580      	push	{r7, lr}
     586:	b082      	sub	sp, #8
     588:	af00      	add	r7, sp, #0
     58a:	0002      	movs	r2, r0
     58c:	1dfb      	adds	r3, r7, #7
     58e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     590:	4a07      	ldr	r2, [pc, #28]	; (5b0 <system_interrupt_disable+0x2c>)
     592:	1dfb      	adds	r3, r7, #7
     594:	781b      	ldrb	r3, [r3, #0]
     596:	0019      	movs	r1, r3
     598:	231f      	movs	r3, #31
     59a:	400b      	ands	r3, r1
     59c:	2101      	movs	r1, #1
     59e:	4099      	lsls	r1, r3
     5a0:	000b      	movs	r3, r1
     5a2:	0019      	movs	r1, r3
     5a4:	2380      	movs	r3, #128	; 0x80
     5a6:	50d1      	str	r1, [r2, r3]
}
     5a8:	46c0      	nop			; (mov r8, r8)
     5aa:	46bd      	mov	sp, r7
     5ac:	b002      	add	sp, #8
     5ae:	bd80      	pop	{r7, pc}
     5b0:	e000e100 	.word	0xe000e100

000005b4 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5b4:	b580      	push	{r7, lr}
     5b6:	b084      	sub	sp, #16
     5b8:	af00      	add	r7, sp, #0
     5ba:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	681b      	ldr	r3, [r3, #0]
     5c0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5c2:	68fb      	ldr	r3, [r7, #12]
     5c4:	7a9b      	ldrb	r3, [r3, #10]
     5c6:	b2db      	uxtb	r3, r3
     5c8:	b25b      	sxtb	r3, r3
     5ca:	2b00      	cmp	r3, #0
     5cc:	da01      	bge.n	5d2 <rtc_count_is_syncing+0x1e>
                return true;
     5ce:	2301      	movs	r3, #1
     5d0:	e000      	b.n	5d4 <rtc_count_is_syncing+0x20>
        }

        return false;
     5d2:	2300      	movs	r3, #0
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b004      	add	sp, #16
     5da:	bd80      	pop	{r7, pc}

000005dc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5dc:	b580      	push	{r7, lr}
     5de:	b084      	sub	sp, #16
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5ea:	2003      	movs	r0, #3
     5ec:	4b0a      	ldr	r3, [pc, #40]	; (618 <rtc_count_enable+0x3c>)
     5ee:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5f0:	46c0      	nop			; (mov r8, r8)
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	0018      	movs	r0, r3
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <rtc_count_enable+0x40>)
     5f8:	4798      	blx	r3
     5fa:	1e03      	subs	r3, r0, #0
     5fc:	d1f9      	bne.n	5f2 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5fe:	68fb      	ldr	r3, [r7, #12]
     600:	881b      	ldrh	r3, [r3, #0]
     602:	b29b      	uxth	r3, r3
     604:	2202      	movs	r2, #2
     606:	4313      	orrs	r3, r2
     608:	b29a      	uxth	r2, r3
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	801a      	strh	r2, [r3, #0]
}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	46bd      	mov	sp, r7
     612:	b004      	add	sp, #16
     614:	bd80      	pop	{r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000559 	.word	0x00000559
     61c:	000005b5 	.word	0x000005b5

00000620 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     62e:	2003      	movs	r0, #3
     630:	4b0a      	ldr	r3, [pc, #40]	; (65c <rtc_count_disable+0x3c>)
     632:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     634:	46c0      	nop			; (mov r8, r8)
     636:	687b      	ldr	r3, [r7, #4]
     638:	0018      	movs	r0, r3
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <rtc_count_disable+0x40>)
     63c:	4798      	blx	r3
     63e:	1e03      	subs	r3, r0, #0
     640:	d1f9      	bne.n	636 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     642:	68fb      	ldr	r3, [r7, #12]
     644:	881b      	ldrh	r3, [r3, #0]
     646:	b29b      	uxth	r3, r3
     648:	2202      	movs	r2, #2
     64a:	4393      	bics	r3, r2
     64c:	b29a      	uxth	r2, r3
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	801a      	strh	r2, [r3, #0]
}
     652:	46c0      	nop			; (mov r8, r8)
     654:	46bd      	mov	sp, r7
     656:	b004      	add	sp, #16
     658:	bd80      	pop	{r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00000585 	.word	0x00000585
     660:	000005b5 	.word	0x000005b5

00000664 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     664:	b580      	push	{r7, lr}
     666:	b084      	sub	sp, #16
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	681b      	ldr	r3, [r3, #0]
     670:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     672:	687b      	ldr	r3, [r7, #4]
     674:	0018      	movs	r0, r3
     676:	4b0d      	ldr	r3, [pc, #52]	; (6ac <rtc_count_reset+0x48>)
     678:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2200      	movs	r2, #0
     684:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     686:	46c0      	nop			; (mov r8, r8)
     688:	687b      	ldr	r3, [r7, #4]
     68a:	0018      	movs	r0, r3
     68c:	4b08      	ldr	r3, [pc, #32]	; (6b0 <rtc_count_reset+0x4c>)
     68e:	4798      	blx	r3
     690:	1e03      	subs	r3, r0, #0
     692:	d1f9      	bne.n	688 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	881b      	ldrh	r3, [r3, #0]
     698:	b29b      	uxth	r3, r3
     69a:	2201      	movs	r2, #1
     69c:	4313      	orrs	r3, r2
     69e:	b29a      	uxth	r2, r3
     6a0:	68fb      	ldr	r3, [r7, #12]
     6a2:	801a      	strh	r2, [r3, #0]
}
     6a4:	46c0      	nop			; (mov r8, r8)
     6a6:	46bd      	mov	sp, r7
     6a8:	b004      	add	sp, #16
     6aa:	bd80      	pop	{r7, pc}
     6ac:	00000621 	.word	0x00000621
     6b0:	000005b5 	.word	0x000005b5

000006b4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	b084      	sub	sp, #16
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
     6bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	681b      	ldr	r3, [r3, #0]
     6c2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6c4:	683b      	ldr	r3, [r7, #0]
     6c6:	881a      	ldrh	r2, [r3, #0]
     6c8:	68bb      	ldr	r3, [r7, #8]
     6ca:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	789b      	ldrb	r3, [r3, #2]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d03a      	beq.n	74a <_rtc_count_set_config+0x96>
     6d4:	2b01      	cmp	r3, #1
     6d6:	d000      	beq.n	6da <_rtc_count_set_config+0x26>
     6d8:	e06c      	b.n	7b4 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6da:	68bb      	ldr	r3, [r7, #8]
     6dc:	881b      	ldrh	r3, [r3, #0]
     6de:	b29a      	uxth	r2, r3
     6e0:	68bb      	ldr	r3, [r7, #8]
     6e2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	78db      	ldrb	r3, [r3, #3]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d007      	beq.n	6fc <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6ec:	68bb      	ldr	r3, [r7, #8]
     6ee:	881b      	ldrh	r3, [r3, #0]
     6f0:	b29b      	uxth	r3, r3
     6f2:	2280      	movs	r2, #128	; 0x80
     6f4:	4313      	orrs	r3, r2
     6f6:	b29a      	uxth	r2, r3
     6f8:	68bb      	ldr	r3, [r7, #8]
     6fa:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6fc:	230f      	movs	r3, #15
     6fe:	18fb      	adds	r3, r7, r3
     700:	2200      	movs	r2, #0
     702:	701a      	strb	r2, [r3, #0]
     704:	e01b      	b.n	73e <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
     706:	46c0      	nop			; (mov r8, r8)
     708:	687b      	ldr	r3, [r7, #4]
     70a:	0018      	movs	r0, r3
     70c:	4b33      	ldr	r3, [pc, #204]	; (7dc <_rtc_count_set_config+0x128>)
     70e:	4798      	blx	r3
     710:	1e03      	subs	r3, r0, #0
     712:	d1f9      	bne.n	708 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781a      	ldrb	r2, [r3, #0]
     71a:	683b      	ldr	r3, [r7, #0]
     71c:	3202      	adds	r2, #2
     71e:	0092      	lsls	r2, r2, #2
     720:	58d1      	ldr	r1, [r2, r3]
     722:	230f      	movs	r3, #15
     724:	18fb      	adds	r3, r7, r3
     726:	781a      	ldrb	r2, [r3, #0]
     728:	687b      	ldr	r3, [r7, #4]
     72a:	0018      	movs	r0, r3
     72c:	4b2c      	ldr	r3, [pc, #176]	; (7e0 <_rtc_count_set_config+0x12c>)
     72e:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     730:	230f      	movs	r3, #15
     732:	18fb      	adds	r3, r7, r3
     734:	781a      	ldrb	r2, [r3, #0]
     736:	230f      	movs	r3, #15
     738:	18fb      	adds	r3, r7, r3
     73a:	3201      	adds	r2, #1
     73c:	701a      	strb	r2, [r3, #0]
     73e:	230f      	movs	r3, #15
     740:	18fb      	adds	r3, r7, r3
     742:	781b      	ldrb	r3, [r3, #0]
     744:	2b00      	cmp	r3, #0
     746:	d0de      	beq.n	706 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     748:	e036      	b.n	7b8 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	881b      	ldrh	r3, [r3, #0]
     74e:	b29b      	uxth	r3, r3
     750:	2204      	movs	r2, #4
     752:	4313      	orrs	r3, r2
     754:	b29a      	uxth	r2, r3
     756:	68bb      	ldr	r3, [r7, #8]
     758:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	78db      	ldrb	r3, [r3, #3]
     75e:	2b00      	cmp	r3, #0
     760:	d001      	beq.n	766 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     762:	2317      	movs	r3, #23
     764:	e036      	b.n	7d4 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     766:	230e      	movs	r3, #14
     768:	18fb      	adds	r3, r7, r3
     76a:	2200      	movs	r2, #0
     76c:	701a      	strb	r2, [r3, #0]
     76e:	e01b      	b.n	7a8 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
     770:	46c0      	nop			; (mov r8, r8)
     772:	687b      	ldr	r3, [r7, #4]
     774:	0018      	movs	r0, r3
     776:	4b19      	ldr	r3, [pc, #100]	; (7dc <_rtc_count_set_config+0x128>)
     778:	4798      	blx	r3
     77a:	1e03      	subs	r3, r0, #0
     77c:	d1f9      	bne.n	772 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     77e:	230e      	movs	r3, #14
     780:	18fb      	adds	r3, r7, r3
     782:	781a      	ldrb	r2, [r3, #0]
     784:	683b      	ldr	r3, [r7, #0]
     786:	3202      	adds	r2, #2
     788:	0092      	lsls	r2, r2, #2
     78a:	58d1      	ldr	r1, [r2, r3]
     78c:	230e      	movs	r3, #14
     78e:	18fb      	adds	r3, r7, r3
     790:	781a      	ldrb	r2, [r3, #0]
     792:	687b      	ldr	r3, [r7, #4]
     794:	0018      	movs	r0, r3
     796:	4b12      	ldr	r3, [pc, #72]	; (7e0 <_rtc_count_set_config+0x12c>)
     798:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     79a:	230e      	movs	r3, #14
     79c:	18fb      	adds	r3, r7, r3
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	3201      	adds	r2, #1
     7a6:	701a      	strb	r2, [r3, #0]
     7a8:	230e      	movs	r3, #14
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2b01      	cmp	r3, #1
     7b0:	d9de      	bls.n	770 <_rtc_count_set_config+0xbc>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7b2:	e001      	b.n	7b8 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7b4:	2317      	movs	r3, #23
     7b6:	e00d      	b.n	7d4 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	791b      	ldrb	r3, [r3, #4]
     7bc:	2b00      	cmp	r3, #0
     7be:	d008      	beq.n	7d2 <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7c0:	68bb      	ldr	r3, [r7, #8]
     7c2:	885b      	ldrh	r3, [r3, #2]
     7c4:	b29b      	uxth	r3, r3
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	01d2      	lsls	r2, r2, #7
     7ca:	4313      	orrs	r3, r2
     7cc:	b29a      	uxth	r2, r3
     7ce:	68bb      	ldr	r3, [r7, #8]
     7d0:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7d2:	2300      	movs	r3, #0
}
     7d4:	0018      	movs	r0, r3
     7d6:	46bd      	mov	sp, r7
     7d8:	b004      	add	sp, #16
     7da:	bd80      	pop	{r7, pc}
     7dc:	000005b5 	.word	0x000005b5
     7e0:	0000093d 	.word	0x0000093d

000007e4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b086      	sub	sp, #24
     7e8:	af00      	add	r7, sp, #0
     7ea:	60f8      	str	r0, [r7, #12]
     7ec:	60b9      	str	r1, [r7, #8]
     7ee:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	68ba      	ldr	r2, [r7, #8]
     7f4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7f6:	2120      	movs	r1, #32
     7f8:	2000      	movs	r0, #0
     7fa:	4b17      	ldr	r3, [pc, #92]	; (858 <rtc_count_init+0x74>)
     7fc:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7fe:	2314      	movs	r3, #20
     800:	18fb      	adds	r3, r7, r3
     802:	0018      	movs	r0, r3
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <rtc_count_init+0x78>)
     806:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2202      	movs	r2, #2
     80e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     810:	2314      	movs	r3, #20
     812:	18fb      	adds	r3, r7, r3
     814:	0019      	movs	r1, r3
     816:	2004      	movs	r0, #4
     818:	4b11      	ldr	r3, [pc, #68]	; (860 <rtc_count_init+0x7c>)
     81a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     81c:	2004      	movs	r0, #4
     81e:	4b11      	ldr	r3, [pc, #68]	; (864 <rtc_count_init+0x80>)
     820:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     822:	68fb      	ldr	r3, [r7, #12]
     824:	0018      	movs	r0, r3
     826:	4b10      	ldr	r3, [pc, #64]	; (868 <rtc_count_init+0x84>)
     828:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	789a      	ldrb	r2, [r3, #2]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     832:	687b      	ldr	r3, [r7, #4]
     834:	791a      	ldrb	r2, [r3, #4]
     836:	68fb      	ldr	r3, [r7, #12]
     838:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <rtc_count_init+0x88>)
     83c:	68fa      	ldr	r2, [r7, #12]
     83e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     840:	687a      	ldr	r2, [r7, #4]
     842:	68fb      	ldr	r3, [r7, #12]
     844:	0011      	movs	r1, r2
     846:	0018      	movs	r0, r3
     848:	4b09      	ldr	r3, [pc, #36]	; (870 <rtc_count_init+0x8c>)
     84a:	4798      	blx	r3
     84c:	0003      	movs	r3, r0
}
     84e:	0018      	movs	r0, r3
     850:	46bd      	mov	sp, r7
     852:	b006      	add	sp, #24
     854:	bd80      	pop	{r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	000004fd 	.word	0x000004fd
     85c:	000004e5 	.word	0x000004e5
     860:	00004a55 	.word	0x00004a55
     864:	00004a99 	.word	0x00004a99
     868:	00000665 	.word	0x00000665
     86c:	200000c8 	.word	0x200000c8
     870:	000006b5 	.word	0x000006b5

00000874 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     884:	46c0      	nop			; (mov r8, r8)
     886:	687b      	ldr	r3, [r7, #4]
     888:	0018      	movs	r0, r3
     88a:	4b10      	ldr	r3, [pc, #64]	; (8cc <rtc_count_set_count+0x58>)
     88c:	4798      	blx	r3
     88e:	1e03      	subs	r3, r0, #0
     890:	d1f9      	bne.n	886 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     892:	687b      	ldr	r3, [r7, #4]
     894:	791b      	ldrb	r3, [r3, #4]
     896:	2b00      	cmp	r3, #0
     898:	d005      	beq.n	8a6 <rtc_count_set_count+0x32>
     89a:	2b01      	cmp	r3, #1
     89c:	d10e      	bne.n	8bc <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	683a      	ldr	r2, [r7, #0]
     8a2:	611a      	str	r2, [r3, #16]

			break;
     8a4:	e00c      	b.n	8c0 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	4a09      	ldr	r2, [pc, #36]	; (8d0 <rtc_count_set_count+0x5c>)
     8aa:	4293      	cmp	r3, r2
     8ac:	d901      	bls.n	8b2 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8ae:	2317      	movs	r3, #23
     8b0:	e007      	b.n	8c2 <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	b29a      	uxth	r2, r3
     8b6:	68fb      	ldr	r3, [r7, #12]
     8b8:	821a      	strh	r2, [r3, #16]

			break;
     8ba:	e001      	b.n	8c0 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8bc:	2317      	movs	r3, #23
     8be:	e000      	b.n	8c2 <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8c0:	2300      	movs	r3, #0
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b004      	add	sp, #16
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	000005b5 	.word	0x000005b5
     8d0:	0000ffff 	.word	0x0000ffff

000008d4 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b084      	sub	sp, #16
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	795b      	ldrb	r3, [r3, #5]
     8e6:	2201      	movs	r2, #1
     8e8:	4053      	eors	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2b00      	cmp	r3, #0
     8ee:	d009      	beq.n	904 <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8f0:	68bb      	ldr	r3, [r7, #8]
     8f2:	4a10      	ldr	r2, [pc, #64]	; (934 <rtc_count_get_count+0x60>)
     8f4:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	0018      	movs	r0, r3
     8fc:	4b0e      	ldr	r3, [pc, #56]	; (938 <rtc_count_get_count+0x64>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d1f9      	bne.n	8f8 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     904:	687b      	ldr	r3, [r7, #4]
     906:	791b      	ldrb	r3, [r3, #4]
     908:	2b00      	cmp	r3, #0
     90a:	d005      	beq.n	918 <rtc_count_get_count+0x44>
     90c:	2b01      	cmp	r3, #1
     90e:	d108      	bne.n	922 <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	691b      	ldr	r3, [r3, #16]
     914:	60fb      	str	r3, [r7, #12]

			break;
     916:	e007      	b.n	928 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     918:	68bb      	ldr	r3, [r7, #8]
     91a:	8a1b      	ldrh	r3, [r3, #16]
     91c:	b29b      	uxth	r3, r3
     91e:	60fb      	str	r3, [r7, #12]

			break;
     920:	e002      	b.n	928 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     922:	2300      	movs	r3, #0
     924:	60fb      	str	r3, [r7, #12]
			break;
     926:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     928:	68fb      	ldr	r3, [r7, #12]
}
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bd80      	pop	{r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	ffff8000 	.word	0xffff8000
     938:	000005b5 	.word	0x000005b5

0000093c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     93c:	b580      	push	{r7, lr}
     93e:	b086      	sub	sp, #24
     940:	af00      	add	r7, sp, #0
     942:	60f8      	str	r0, [r7, #12]
     944:	60b9      	str	r1, [r7, #8]
     946:	1dfb      	adds	r3, r7, #7
     948:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     950:	46c0      	nop			; (mov r8, r8)
     952:	68fb      	ldr	r3, [r7, #12]
     954:	0018      	movs	r0, r3
     956:	4b1a      	ldr	r3, [pc, #104]	; (9c0 <rtc_count_set_compare+0x84>)
     958:	4798      	blx	r3
     95a:	1e03      	subs	r3, r0, #0
     95c:	d1f9      	bne.n	952 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	791b      	ldrb	r3, [r3, #4]
     962:	2b00      	cmp	r3, #0
     964:	d00f      	beq.n	986 <rtc_count_set_compare+0x4a>
     966:	2b01      	cmp	r3, #1
     968:	d122      	bne.n	9b0 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     96a:	1dfb      	adds	r3, r7, #7
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	2b01      	cmp	r3, #1
     970:	d901      	bls.n	976 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     972:	2317      	movs	r3, #23
     974:	e01f      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     976:	1dfb      	adds	r3, r7, #7
     978:	781a      	ldrb	r2, [r3, #0]
     97a:	697b      	ldr	r3, [r7, #20]
     97c:	3206      	adds	r2, #6
     97e:	0092      	lsls	r2, r2, #2
     980:	68b9      	ldr	r1, [r7, #8]
     982:	50d1      	str	r1, [r2, r3]

			break;
     984:	e016      	b.n	9b4 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     986:	1dfb      	adds	r3, r7, #7
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	2b02      	cmp	r3, #2
     98c:	d901      	bls.n	992 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     98e:	2317      	movs	r3, #23
     990:	e011      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     992:	68bb      	ldr	r3, [r7, #8]
     994:	4a0b      	ldr	r2, [pc, #44]	; (9c4 <rtc_count_set_compare+0x88>)
     996:	4293      	cmp	r3, r2
     998:	d901      	bls.n	99e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e00b      	b.n	9b6 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     99e:	1dfb      	adds	r3, r7, #7
     9a0:	781a      	ldrb	r2, [r3, #0]
     9a2:	68bb      	ldr	r3, [r7, #8]
     9a4:	b299      	uxth	r1, r3
     9a6:	697b      	ldr	r3, [r7, #20]
     9a8:	320c      	adds	r2, #12
     9aa:	0052      	lsls	r2, r2, #1
     9ac:	52d1      	strh	r1, [r2, r3]

			break;
     9ae:	e001      	b.n	9b4 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9b0:	231a      	movs	r3, #26
     9b2:	e000      	b.n	9b6 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9b4:	2300      	movs	r3, #0
}
     9b6:	0018      	movs	r0, r3
     9b8:	46bd      	mov	sp, r7
     9ba:	b006      	add	sp, #24
     9bc:	bd80      	pop	{r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	000005b5 	.word	0x000005b5
     9c4:	0000ffff 	.word	0x0000ffff

000009c8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b084      	sub	sp, #16
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	000a      	movs	r2, r1
     9d2:	1cbb      	adds	r3, r7, #2
     9d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	791b      	ldrb	r3, [r3, #4]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d001      	beq.n	9e8 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9e4:	2315      	movs	r3, #21
     9e6:	e00b      	b.n	a00 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	0018      	movs	r0, r3
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <rtc_count_set_period+0x40>)
     9f0:	4798      	blx	r3
     9f2:	1e03      	subs	r3, r0, #0
     9f4:	d1f9      	bne.n	9ea <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9f6:	68fb      	ldr	r3, [r7, #12]
     9f8:	1cba      	adds	r2, r7, #2
     9fa:	8812      	ldrh	r2, [r2, #0]
     9fc:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9fe:	2300      	movs	r3, #0
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	b004      	add	sp, #16
     a06:	bd80      	pop	{r7, pc}
     a08:	000005b5 	.word	0x000005b5

00000a0c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b086      	sub	sp, #24
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a14:	4b31      	ldr	r3, [pc, #196]	; (adc <_rtc_interrupt_handler+0xd0>)
     a16:	687a      	ldr	r2, [r7, #4]
     a18:	0092      	lsls	r2, r2, #2
     a1a:	58d3      	ldr	r3, [r2, r3]
     a1c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a1e:	697b      	ldr	r3, [r7, #20]
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a24:	230e      	movs	r3, #14
     a26:	18fb      	adds	r3, r7, r3
     a28:	697a      	ldr	r2, [r7, #20]
     a2a:	8ad2      	ldrh	r2, [r2, #22]
     a2c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	8a9b      	ldrh	r3, [r3, #20]
     a32:	b29a      	uxth	r2, r3
     a34:	230e      	movs	r3, #14
     a36:	18fb      	adds	r3, r7, r3
     a38:	210e      	movs	r1, #14
     a3a:	1879      	adds	r1, r7, r1
     a3c:	8809      	ldrh	r1, [r1, #0]
     a3e:	400a      	ands	r2, r1
     a40:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a42:	693b      	ldr	r3, [r7, #16]
     a44:	7a1b      	ldrb	r3, [r3, #8]
     a46:	b2da      	uxtb	r2, r3
     a48:	230c      	movs	r3, #12
     a4a:	18fb      	adds	r3, r7, r3
     a4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a4e:	693b      	ldr	r3, [r7, #16]
     a50:	79db      	ldrb	r3, [r3, #7]
     a52:	b2db      	uxtb	r3, r3
     a54:	b29a      	uxth	r2, r3
     a56:	230c      	movs	r3, #12
     a58:	18fb      	adds	r3, r7, r3
     a5a:	210c      	movs	r1, #12
     a5c:	1879      	adds	r1, r7, r1
     a5e:	8809      	ldrh	r1, [r1, #0]
     a60:	400a      	ands	r2, r1
     a62:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a64:	230c      	movs	r3, #12
     a66:	18fb      	adds	r3, r7, r3
     a68:	881b      	ldrh	r3, [r3, #0]
     a6a:	2280      	movs	r2, #128	; 0x80
     a6c:	4013      	ands	r3, r2
     a6e:	d00c      	beq.n	a8a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a70:	230e      	movs	r3, #14
     a72:	18fb      	adds	r3, r7, r3
     a74:	881b      	ldrh	r3, [r3, #0]
     a76:	2204      	movs	r2, #4
     a78:	4013      	ands	r3, r2
     a7a:	d002      	beq.n	a82 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a7c:	697b      	ldr	r3, [r7, #20]
     a7e:	691b      	ldr	r3, [r3, #16]
     a80:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a82:	693b      	ldr	r3, [r7, #16]
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     a88:	e024      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a8a:	230c      	movs	r3, #12
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	881b      	ldrh	r3, [r3, #0]
     a90:	2201      	movs	r2, #1
     a92:	4013      	ands	r3, r2
     a94:	d00c      	beq.n	ab0 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a96:	230e      	movs	r3, #14
     a98:	18fb      	adds	r3, r7, r3
     a9a:	881b      	ldrh	r3, [r3, #0]
     a9c:	2201      	movs	r2, #1
     a9e:	4013      	ands	r3, r2
     aa0:	d002      	beq.n	aa8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     aa2:	697b      	ldr	r3, [r7, #20]
     aa4:	689b      	ldr	r3, [r3, #8]
     aa6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa8:	693b      	ldr	r3, [r7, #16]
     aaa:	2201      	movs	r2, #1
     aac:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     aae:	e011      	b.n	ad4 <_rtc_interrupt_handler+0xc8>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     ab0:	230c      	movs	r3, #12
     ab2:	18fb      	adds	r3, r7, r3
     ab4:	881b      	ldrh	r3, [r3, #0]
     ab6:	2202      	movs	r2, #2
     ab8:	4013      	ands	r3, r2
     aba:	d00b      	beq.n	ad4 <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     abc:	230e      	movs	r3, #14
     abe:	18fb      	adds	r3, r7, r3
     ac0:	881b      	ldrh	r3, [r3, #0]
     ac2:	2202      	movs	r2, #2
     ac4:	4013      	ands	r3, r2
     ac6:	d002      	beq.n	ace <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac8:	697b      	ldr	r3, [r7, #20]
     aca:	68db      	ldr	r3, [r3, #12]
     acc:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ace:	693b      	ldr	r3, [r7, #16]
     ad0:	2202      	movs	r2, #2
     ad2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     ad4:	46c0      	nop			; (mov r8, r8)
     ad6:	46bd      	mov	sp, r7
     ad8:	b006      	add	sp, #24
     ada:	bd80      	pop	{r7, pc}
     adc:	200000c8 	.word	0x200000c8

00000ae0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     ae4:	2000      	movs	r0, #0
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <RTC_Handler+0x10>)
     ae8:	4798      	blx	r3
}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	bd80      	pop	{r7, pc}
     af0:	00000a0d 	.word	0x00000a0d

00000af4 <system_pinmux_get_group_from_gpio_pin>:
     af4:	b580      	push	{r7, lr}
     af6:	b084      	sub	sp, #16
     af8:	af00      	add	r7, sp, #0
     afa:	0002      	movs	r2, r0
     afc:	1dfb      	adds	r3, r7, #7
     afe:	701a      	strb	r2, [r3, #0]
     b00:	230f      	movs	r3, #15
     b02:	18fb      	adds	r3, r7, r3
     b04:	1dfa      	adds	r2, r7, #7
     b06:	7812      	ldrb	r2, [r2, #0]
     b08:	09d2      	lsrs	r2, r2, #7
     b0a:	701a      	strb	r2, [r3, #0]
     b0c:	230e      	movs	r3, #14
     b0e:	18fb      	adds	r3, r7, r3
     b10:	1dfa      	adds	r2, r7, #7
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	0952      	lsrs	r2, r2, #5
     b16:	701a      	strb	r2, [r3, #0]
     b18:	4b0d      	ldr	r3, [pc, #52]	; (b50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     b1a:	60bb      	str	r3, [r7, #8]
     b1c:	230f      	movs	r3, #15
     b1e:	18fb      	adds	r3, r7, r3
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d10f      	bne.n	b46 <system_pinmux_get_group_from_gpio_pin+0x52>
     b26:	230f      	movs	r3, #15
     b28:	18fb      	adds	r3, r7, r3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	009b      	lsls	r3, r3, #2
     b2e:	2210      	movs	r2, #16
     b30:	4694      	mov	ip, r2
     b32:	44bc      	add	ip, r7
     b34:	4463      	add	r3, ip
     b36:	3b08      	subs	r3, #8
     b38:	681a      	ldr	r2, [r3, #0]
     b3a:	230e      	movs	r3, #14
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	01db      	lsls	r3, r3, #7
     b42:	18d3      	adds	r3, r2, r3
     b44:	e000      	b.n	b48 <system_pinmux_get_group_from_gpio_pin+0x54>
     b46:	2300      	movs	r3, #0
     b48:	0018      	movs	r0, r3
     b4a:	46bd      	mov	sp, r7
     b4c:	b004      	add	sp, #16
     b4e:	bd80      	pop	{r7, pc}
     b50:	41004400 	.word	0x41004400

00000b54 <port_get_group_from_gpio_pin>:
     b54:	b580      	push	{r7, lr}
     b56:	b082      	sub	sp, #8
     b58:	af00      	add	r7, sp, #0
     b5a:	0002      	movs	r2, r0
     b5c:	1dfb      	adds	r3, r7, #7
     b5e:	701a      	strb	r2, [r3, #0]
     b60:	1dfb      	adds	r3, r7, #7
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	0018      	movs	r0, r3
     b66:	4b03      	ldr	r3, [pc, #12]	; (b74 <port_get_group_from_gpio_pin+0x20>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
     b6c:	0018      	movs	r0, r3
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}
     b74:	00000af5 	.word	0x00000af5

00000b78 <port_pin_get_input_level>:
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	0002      	movs	r2, r0
     b80:	1dfb      	adds	r3, r7, #7
     b82:	701a      	strb	r2, [r3, #0]
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	0018      	movs	r0, r3
     b8a:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <port_pin_get_input_level+0x40>)
     b8c:	4798      	blx	r3
     b8e:	0003      	movs	r3, r0
     b90:	60fb      	str	r3, [r7, #12]
     b92:	1dfb      	adds	r3, r7, #7
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	221f      	movs	r2, #31
     b98:	4013      	ands	r3, r2
     b9a:	2201      	movs	r2, #1
     b9c:	409a      	lsls	r2, r3
     b9e:	0013      	movs	r3, r2
     ba0:	60bb      	str	r3, [r7, #8]
     ba2:	68fb      	ldr	r3, [r7, #12]
     ba4:	6a1b      	ldr	r3, [r3, #32]
     ba6:	68ba      	ldr	r2, [r7, #8]
     ba8:	4013      	ands	r3, r2
     baa:	1e5a      	subs	r2, r3, #1
     bac:	4193      	sbcs	r3, r2
     bae:	b2db      	uxtb	r3, r3
     bb0:	0018      	movs	r0, r3
     bb2:	46bd      	mov	sp, r7
     bb4:	b004      	add	sp, #16
     bb6:	bd80      	pop	{r7, pc}
     bb8:	00000b55 	.word	0x00000b55

00000bbc <init_wheel>:
     bbc:	b580      	push	{r7, lr}
     bbe:	af00      	add	r7, sp, #0
     bc0:	4b10      	ldr	r3, [pc, #64]	; (c04 <init_wheel+0x48>)
     bc2:	2200      	movs	r2, #0
     bc4:	701a      	strb	r2, [r3, #0]
     bc6:	4b0f      	ldr	r3, [pc, #60]	; (c04 <init_wheel+0x48>)
     bc8:	2200      	movs	r2, #0
     bca:	705a      	strb	r2, [r3, #1]
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <init_wheel+0x48>)
     bce:	2200      	movs	r2, #0
     bd0:	709a      	strb	r2, [r3, #2]
     bd2:	4b0c      	ldr	r3, [pc, #48]	; (c04 <init_wheel+0x48>)
     bd4:	2200      	movs	r2, #0
     bd6:	70da      	strb	r2, [r3, #3]
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <init_wheel+0x48>)
     bda:	2200      	movs	r2, #0
     bdc:	711a      	strb	r2, [r3, #4]
     bde:	4b09      	ldr	r3, [pc, #36]	; (c04 <init_wheel+0x48>)
     be0:	2200      	movs	r2, #0
     be2:	715a      	strb	r2, [r3, #5]
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <init_wheel+0x48>)
     be6:	2200      	movs	r2, #0
     be8:	719a      	strb	r2, [r3, #6]
     bea:	4b06      	ldr	r3, [pc, #24]	; (c04 <init_wheel+0x48>)
     bec:	2200      	movs	r2, #0
     bee:	71da      	strb	r2, [r3, #7]
     bf0:	4b04      	ldr	r3, [pc, #16]	; (c04 <init_wheel+0x48>)
     bf2:	2200      	movs	r2, #0
     bf4:	811a      	strh	r2, [r3, #8]
     bf6:	4b03      	ldr	r3, [pc, #12]	; (c04 <init_wheel+0x48>)
     bf8:	2200      	movs	r2, #0
     bfa:	815a      	strh	r2, [r3, #10]
     bfc:	46c0      	nop			; (mov r8, r8)
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	200000cc 	.word	0x200000cc

00000c08 <update_values>:
     c08:	b5b0      	push	{r4, r5, r7, lr}
     c0a:	af00      	add	r7, sp, #0
     c0c:	2000      	movs	r0, #0
     c0e:	4b1b      	ldr	r3, [pc, #108]	; (c7c <update_values+0x74>)
     c10:	4798      	blx	r3
     c12:	0003      	movs	r3, r0
     c14:	001a      	movs	r2, r3
     c16:	4b1a      	ldr	r3, [pc, #104]	; (c80 <update_values+0x78>)
     c18:	709a      	strb	r2, [r3, #2]
     c1a:	2001      	movs	r0, #1
     c1c:	4b17      	ldr	r3, [pc, #92]	; (c7c <update_values+0x74>)
     c1e:	4798      	blx	r3
     c20:	0003      	movs	r3, r0
     c22:	001a      	movs	r2, r3
     c24:	4b16      	ldr	r3, [pc, #88]	; (c80 <update_values+0x78>)
     c26:	70da      	strb	r2, [r3, #3]
     c28:	2002      	movs	r0, #2
     c2a:	4b14      	ldr	r3, [pc, #80]	; (c7c <update_values+0x74>)
     c2c:	4798      	blx	r3
     c2e:	0003      	movs	r3, r0
     c30:	001a      	movs	r2, r3
     c32:	4b13      	ldr	r3, [pc, #76]	; (c80 <update_values+0x78>)
     c34:	701a      	strb	r2, [r3, #0]
     c36:	2003      	movs	r0, #3
     c38:	4b10      	ldr	r3, [pc, #64]	; (c7c <update_values+0x74>)
     c3a:	4798      	blx	r3
     c3c:	0003      	movs	r3, r0
     c3e:	001a      	movs	r2, r3
     c40:	4b0f      	ldr	r3, [pc, #60]	; (c80 <update_values+0x78>)
     c42:	705a      	strb	r2, [r3, #1]
     c44:	4a0f      	ldr	r2, [pc, #60]	; (c84 <update_values+0x7c>)
     c46:	4910      	ldr	r1, [pc, #64]	; (c88 <update_values+0x80>)
     c48:	4810      	ldr	r0, [pc, #64]	; (c8c <update_values+0x84>)
     c4a:	2300      	movs	r3, #0
     c4c:	4c10      	ldr	r4, [pc, #64]	; (c90 <update_values+0x88>)
     c4e:	47a0      	blx	r4
     c50:	4a0c      	ldr	r2, [pc, #48]	; (c84 <update_values+0x7c>)
     c52:	4910      	ldr	r1, [pc, #64]	; (c94 <update_values+0x8c>)
     c54:	4810      	ldr	r0, [pc, #64]	; (c98 <update_values+0x90>)
     c56:	2301      	movs	r3, #1
     c58:	4c0d      	ldr	r4, [pc, #52]	; (c90 <update_values+0x88>)
     c5a:	47a0      	blx	r4
     c5c:	4a0f      	ldr	r2, [pc, #60]	; (c9c <update_values+0x94>)
     c5e:	4910      	ldr	r1, [pc, #64]	; (ca0 <update_values+0x98>)
     c60:	4807      	ldr	r0, [pc, #28]	; (c80 <update_values+0x78>)
     c62:	2301      	movs	r3, #1
     c64:	4c0a      	ldr	r4, [pc, #40]	; (c90 <update_values+0x88>)
     c66:	47a0      	blx	r4
     c68:	4a0c      	ldr	r2, [pc, #48]	; (c9c <update_values+0x94>)
     c6a:	490e      	ldr	r1, [pc, #56]	; (ca4 <update_values+0x9c>)
     c6c:	480e      	ldr	r0, [pc, #56]	; (ca8 <update_values+0xa0>)
     c6e:	2300      	movs	r3, #0
     c70:	4c07      	ldr	r4, [pc, #28]	; (c90 <update_values+0x88>)
     c72:	47a0      	blx	r4
     c74:	46c0      	nop			; (mov r8, r8)
     c76:	46bd      	mov	sp, r7
     c78:	bdb0      	pop	{r4, r5, r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000d09 	.word	0x00000d09
     c80:	200000cc 	.word	0x200000cc
     c84:	200000d4 	.word	0x200000d4
     c88:	200000d0 	.word	0x200000d0
     c8c:	200000ce 	.word	0x200000ce
     c90:	00000cad 	.word	0x00000cad
     c94:	200000d1 	.word	0x200000d1
     c98:	200000cf 	.word	0x200000cf
     c9c:	200000d6 	.word	0x200000d6
     ca0:	200000d2 	.word	0x200000d2
     ca4:	200000d3 	.word	0x200000d3
     ca8:	200000cd 	.word	0x200000cd

00000cac <saveValues>:
     cac:	b580      	push	{r7, lr}
     cae:	b084      	sub	sp, #16
     cb0:	af00      	add	r7, sp, #0
     cb2:	60f8      	str	r0, [r7, #12]
     cb4:	60b9      	str	r1, [r7, #8]
     cb6:	607a      	str	r2, [r7, #4]
     cb8:	001a      	movs	r2, r3
     cba:	1cfb      	adds	r3, r7, #3
     cbc:	701a      	strb	r2, [r3, #0]
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	781a      	ldrb	r2, [r3, #0]
     cc2:	68bb      	ldr	r3, [r7, #8]
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	429a      	cmp	r2, r3
     cc8:	d01a      	beq.n	d00 <saveValues+0x54>
     cca:	1cfb      	adds	r3, r7, #3
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	d009      	beq.n	ce6 <saveValues+0x3a>
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	2200      	movs	r2, #0
     cd6:	5e9b      	ldrsh	r3, [r3, r2]
     cd8:	b29b      	uxth	r3, r3
     cda:	3301      	adds	r3, #1
     cdc:	b29b      	uxth	r3, r3
     cde:	b21a      	sxth	r2, r3
     ce0:	687b      	ldr	r3, [r7, #4]
     ce2:	801a      	strh	r2, [r3, #0]
     ce4:	e008      	b.n	cf8 <saveValues+0x4c>
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	2200      	movs	r2, #0
     cea:	5e9b      	ldrsh	r3, [r3, r2]
     cec:	b29b      	uxth	r3, r3
     cee:	3b01      	subs	r3, #1
     cf0:	b29b      	uxth	r3, r3
     cf2:	b21a      	sxth	r2, r3
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	801a      	strh	r2, [r3, #0]
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	781a      	ldrb	r2, [r3, #0]
     cfc:	68bb      	ldr	r3, [r7, #8]
     cfe:	701a      	strb	r2, [r3, #0]
     d00:	46c0      	nop			; (mov r8, r8)
     d02:	46bd      	mov	sp, r7
     d04:	b004      	add	sp, #16
     d06:	bd80      	pop	{r7, pc}

00000d08 <getState>:
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	0002      	movs	r2, r0
     d10:	1dfb      	adds	r3, r7, #7
     d12:	701a      	strb	r2, [r3, #0]
     d14:	1dfb      	adds	r3, r7, #7
     d16:	781b      	ldrb	r3, [r3, #0]
     d18:	2b01      	cmp	r3, #1
     d1a:	d00d      	beq.n	d38 <getState+0x30>
     d1c:	dc02      	bgt.n	d24 <getState+0x1c>
     d1e:	2b00      	cmp	r3, #0
     d20:	d005      	beq.n	d2e <getState+0x26>
     d22:	e018      	b.n	d56 <getState+0x4e>
     d24:	2b02      	cmp	r3, #2
     d26:	d00c      	beq.n	d42 <getState+0x3a>
     d28:	2b03      	cmp	r3, #3
     d2a:	d00f      	beq.n	d4c <getState+0x44>
     d2c:	e013      	b.n	d56 <getState+0x4e>
     d2e:	200a      	movs	r0, #10
     d30:	4b0b      	ldr	r3, [pc, #44]	; (d60 <getState+0x58>)
     d32:	4798      	blx	r3
     d34:	0003      	movs	r3, r0
     d36:	e00e      	b.n	d56 <getState+0x4e>
     d38:	200b      	movs	r0, #11
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <getState+0x58>)
     d3c:	4798      	blx	r3
     d3e:	0003      	movs	r3, r0
     d40:	e009      	b.n	d56 <getState+0x4e>
     d42:	2006      	movs	r0, #6
     d44:	4b06      	ldr	r3, [pc, #24]	; (d60 <getState+0x58>)
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	e004      	b.n	d56 <getState+0x4e>
     d4c:	2009      	movs	r0, #9
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <getState+0x58>)
     d50:	4798      	blx	r3
     d52:	0003      	movs	r3, r0
     d54:	e7ff      	b.n	d56 <getState+0x4e>
     d56:	0018      	movs	r0, r3
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00000b79 	.word	0x00000b79

00000d64 <getScroll>:
     d64:	b580      	push	{r7, lr}
     d66:	b084      	sub	sp, #16
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	6039      	str	r1, [r7, #0]
     d6e:	4b24      	ldr	r3, [pc, #144]	; (e00 <getScroll+0x9c>)
     d70:	2208      	movs	r2, #8
     d72:	5e9a      	ldrsh	r2, [r3, r2]
     d74:	230f      	movs	r3, #15
     d76:	18fb      	adds	r3, r7, r3
     d78:	701a      	strb	r2, [r3, #0]
     d7a:	4b21      	ldr	r3, [pc, #132]	; (e00 <getScroll+0x9c>)
     d7c:	220a      	movs	r2, #10
     d7e:	5e9a      	ldrsh	r2, [r3, r2]
     d80:	230e      	movs	r3, #14
     d82:	18fb      	adds	r3, r7, r3
     d84:	701a      	strb	r2, [r3, #0]
     d86:	230f      	movs	r3, #15
     d88:	18fb      	adds	r3, r7, r3
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	b25b      	sxtb	r3, r3
     d8e:	2b64      	cmp	r3, #100	; 0x64
     d90:	dd03      	ble.n	d9a <getScroll+0x36>
     d92:	230f      	movs	r3, #15
     d94:	18fb      	adds	r3, r7, r3
     d96:	2264      	movs	r2, #100	; 0x64
     d98:	701a      	strb	r2, [r3, #0]
     d9a:	230f      	movs	r3, #15
     d9c:	18fb      	adds	r3, r7, r3
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	b25b      	sxtb	r3, r3
     da2:	3364      	adds	r3, #100	; 0x64
     da4:	da03      	bge.n	dae <getScroll+0x4a>
     da6:	230f      	movs	r3, #15
     da8:	18fb      	adds	r3, r7, r3
     daa:	229c      	movs	r2, #156	; 0x9c
     dac:	701a      	strb	r2, [r3, #0]
     dae:	230e      	movs	r3, #14
     db0:	18fb      	adds	r3, r7, r3
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	b25b      	sxtb	r3, r3
     db6:	2b64      	cmp	r3, #100	; 0x64
     db8:	dd03      	ble.n	dc2 <getScroll+0x5e>
     dba:	230e      	movs	r3, #14
     dbc:	18fb      	adds	r3, r7, r3
     dbe:	2264      	movs	r2, #100	; 0x64
     dc0:	701a      	strb	r2, [r3, #0]
     dc2:	230e      	movs	r3, #14
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	781b      	ldrb	r3, [r3, #0]
     dc8:	b25b      	sxtb	r3, r3
     dca:	3364      	adds	r3, #100	; 0x64
     dcc:	da03      	bge.n	dd6 <getScroll+0x72>
     dce:	230e      	movs	r3, #14
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	229c      	movs	r2, #156	; 0x9c
     dd4:	701a      	strb	r2, [r3, #0]
     dd6:	4b0a      	ldr	r3, [pc, #40]	; (e00 <getScroll+0x9c>)
     dd8:	2200      	movs	r2, #0
     dda:	811a      	strh	r2, [r3, #8]
     ddc:	4b08      	ldr	r3, [pc, #32]	; (e00 <getScroll+0x9c>)
     dde:	2200      	movs	r2, #0
     de0:	815a      	strh	r2, [r3, #10]
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	220f      	movs	r2, #15
     de6:	18ba      	adds	r2, r7, r2
     de8:	7812      	ldrb	r2, [r2, #0]
     dea:	701a      	strb	r2, [r3, #0]
     dec:	683b      	ldr	r3, [r7, #0]
     dee:	220e      	movs	r2, #14
     df0:	18ba      	adds	r2, r7, r2
     df2:	7812      	ldrb	r2, [r2, #0]
     df4:	701a      	strb	r2, [r3, #0]
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	46bd      	mov	sp, r7
     dfa:	b004      	add	sp, #16
     dfc:	bd80      	pop	{r7, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	200000cc 	.word	0x200000cc

00000e04 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	0002      	movs	r2, r0
     e0c:	1dfb      	adds	r3, r7, #7
     e0e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     e10:	230f      	movs	r3, #15
     e12:	18fb      	adds	r3, r7, r3
     e14:	1dfa      	adds	r2, r7, #7
     e16:	7812      	ldrb	r2, [r2, #0]
     e18:	0952      	lsrs	r2, r2, #5
     e1a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     e1c:	230f      	movs	r3, #15
     e1e:	18fb      	adds	r3, r7, r3
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	d10c      	bne.n	e40 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     e26:	4b09      	ldr	r3, [pc, #36]	; (e4c <_extint_get_eic_from_channel+0x48>)
     e28:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     e2a:	230f      	movs	r3, #15
     e2c:	18fb      	adds	r3, r7, r3
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	009b      	lsls	r3, r3, #2
     e32:	2210      	movs	r2, #16
     e34:	4694      	mov	ip, r2
     e36:	44bc      	add	ip, r7
     e38:	4463      	add	r3, ip
     e3a:	3b08      	subs	r3, #8
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	e000      	b.n	e42 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     e40:	2300      	movs	r3, #0
	}
}
     e42:	0018      	movs	r0, r3
     e44:	46bd      	mov	sp, r7
     e46:	b004      	add	sp, #16
     e48:	bd80      	pop	{r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	40001800 	.word	0x40001800

00000e50 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     e50:	b580      	push	{r7, lr}
     e52:	b084      	sub	sp, #16
     e54:	af00      	add	r7, sp, #0
     e56:	0002      	movs	r2, r0
     e58:	1dfb      	adds	r3, r7, #7
     e5a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     e5c:	1dfb      	adds	r3, r7, #7
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	0018      	movs	r0, r3
     e62:	4b0b      	ldr	r3, [pc, #44]	; (e90 <extint_chan_is_detected+0x40>)
     e64:	4798      	blx	r3
     e66:	0003      	movs	r3, r0
     e68:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     e6a:	1dfb      	adds	r3, r7, #7
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	221f      	movs	r2, #31
     e70:	4013      	ands	r3, r2
     e72:	2201      	movs	r2, #1
     e74:	409a      	lsls	r2, r3
     e76:	0013      	movs	r3, r2
     e78:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     e7a:	68fb      	ldr	r3, [r7, #12]
     e7c:	691b      	ldr	r3, [r3, #16]
     e7e:	68ba      	ldr	r2, [r7, #8]
     e80:	4013      	ands	r3, r2
     e82:	1e5a      	subs	r2, r3, #1
     e84:	4193      	sbcs	r3, r2
     e86:	b2db      	uxtb	r3, r3
}
     e88:	0018      	movs	r0, r3
     e8a:	46bd      	mov	sp, r7
     e8c:	b004      	add	sp, #16
     e8e:	bd80      	pop	{r7, pc}
     e90:	00000e05 	.word	0x00000e05

00000e94 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     e94:	b580      	push	{r7, lr}
     e96:	b084      	sub	sp, #16
     e98:	af00      	add	r7, sp, #0
     e9a:	0002      	movs	r2, r0
     e9c:	1dfb      	adds	r3, r7, #7
     e9e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     ea0:	1dfb      	adds	r3, r7, #7
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	0018      	movs	r0, r3
     ea6:	4b09      	ldr	r3, [pc, #36]	; (ecc <extint_chan_clear_detected+0x38>)
     ea8:	4798      	blx	r3
     eaa:	0003      	movs	r3, r0
     eac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     eae:	1dfb      	adds	r3, r7, #7
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	221f      	movs	r2, #31
     eb4:	4013      	ands	r3, r2
     eb6:	2201      	movs	r2, #1
     eb8:	409a      	lsls	r2, r3
     eba:	0013      	movs	r3, r2
     ebc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     ebe:	68fb      	ldr	r3, [r7, #12]
     ec0:	68ba      	ldr	r2, [r7, #8]
     ec2:	611a      	str	r2, [r3, #16]
}
     ec4:	46c0      	nop			; (mov r8, r8)
     ec6:	46bd      	mov	sp, r7
     ec8:	b004      	add	sp, #16
     eca:	bd80      	pop	{r7, pc}
     ecc:	00000e05 	.word	0x00000e05

00000ed0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
     ed8:	0008      	movs	r0, r1
     eda:	0011      	movs	r1, r2
     edc:	1cfb      	adds	r3, r7, #3
     ede:	1c02      	adds	r2, r0, #0
     ee0:	701a      	strb	r2, [r3, #0]
     ee2:	1cbb      	adds	r3, r7, #2
     ee4:	1c0a      	adds	r2, r1, #0
     ee6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     ee8:	1cbb      	adds	r3, r7, #2
     eea:	781b      	ldrb	r3, [r3, #0]
     eec:	2b00      	cmp	r3, #0
     eee:	d001      	beq.n	ef4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ef0:	2317      	movs	r3, #23
     ef2:	e019      	b.n	f28 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     ef4:	1cfb      	adds	r3, r7, #3
     ef6:	781a      	ldrb	r2, [r3, #0]
     ef8:	4b0d      	ldr	r3, [pc, #52]	; (f30 <extint_register_callback+0x60>)
     efa:	0092      	lsls	r2, r2, #2
     efc:	58d3      	ldr	r3, [r2, r3]
     efe:	2b00      	cmp	r3, #0
     f00:	d107      	bne.n	f12 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     f02:	1cfb      	adds	r3, r7, #3
     f04:	781a      	ldrb	r2, [r3, #0]
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <extint_register_callback+0x60>)
     f08:	0092      	lsls	r2, r2, #2
     f0a:	6879      	ldr	r1, [r7, #4]
     f0c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     f0e:	2300      	movs	r3, #0
     f10:	e00a      	b.n	f28 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     f12:	1cfb      	adds	r3, r7, #3
     f14:	781a      	ldrb	r2, [r3, #0]
     f16:	4b06      	ldr	r3, [pc, #24]	; (f30 <extint_register_callback+0x60>)
     f18:	0092      	lsls	r2, r2, #2
     f1a:	58d2      	ldr	r2, [r2, r3]
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	429a      	cmp	r2, r3
     f20:	d101      	bne.n	f26 <extint_register_callback+0x56>
		return STATUS_OK;
     f22:	2300      	movs	r3, #0
     f24:	e000      	b.n	f28 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     f26:	231d      	movs	r3, #29
}
     f28:	0018      	movs	r0, r3
     f2a:	46bd      	mov	sp, r7
     f2c:	b002      	add	sp, #8
     f2e:	bd80      	pop	{r7, pc}
     f30:	20000088 	.word	0x20000088

00000f34 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
     f3a:	0002      	movs	r2, r0
     f3c:	1dfb      	adds	r3, r7, #7
     f3e:	701a      	strb	r2, [r3, #0]
     f40:	1dbb      	adds	r3, r7, #6
     f42:	1c0a      	adds	r2, r1, #0
     f44:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     f46:	1dbb      	adds	r3, r7, #6
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d10e      	bne.n	f6c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     f4e:	1dfb      	adds	r3, r7, #7
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	0018      	movs	r0, r3
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <extint_chan_enable_callback+0x44>)
     f56:	4798      	blx	r3
     f58:	0003      	movs	r3, r0
     f5a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     f5c:	1dfb      	adds	r3, r7, #7
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2201      	movs	r2, #1
     f62:	409a      	lsls	r2, r3
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f68:	2300      	movs	r3, #0
     f6a:	e000      	b.n	f6e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f6c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     f6e:	0018      	movs	r0, r3
     f70:	46bd      	mov	sp, r7
     f72:	b004      	add	sp, #16
     f74:	bd80      	pop	{r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	00000e05 	.word	0x00000e05

00000f7c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     f80:	4b15      	ldr	r3, [pc, #84]	; (fd8 <EIC_Handler+0x5c>)
     f82:	2200      	movs	r2, #0
     f84:	701a      	strb	r2, [r3, #0]
     f86:	e020      	b.n	fca <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     f88:	4b13      	ldr	r3, [pc, #76]	; (fd8 <EIC_Handler+0x5c>)
     f8a:	781b      	ldrb	r3, [r3, #0]
     f8c:	0018      	movs	r0, r3
     f8e:	4b13      	ldr	r3, [pc, #76]	; (fdc <EIC_Handler+0x60>)
     f90:	4798      	blx	r3
     f92:	1e03      	subs	r3, r0, #0
     f94:	d013      	beq.n	fbe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     f96:	4b10      	ldr	r3, [pc, #64]	; (fd8 <EIC_Handler+0x5c>)
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	0018      	movs	r0, r3
     f9c:	4b10      	ldr	r3, [pc, #64]	; (fe0 <EIC_Handler+0x64>)
     f9e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     fa0:	4b0d      	ldr	r3, [pc, #52]	; (fd8 <EIC_Handler+0x5c>)
     fa2:	781b      	ldrb	r3, [r3, #0]
     fa4:	001a      	movs	r2, r3
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <EIC_Handler+0x68>)
     fa8:	0092      	lsls	r2, r2, #2
     faa:	58d3      	ldr	r3, [r2, r3]
     fac:	2b00      	cmp	r3, #0
     fae:	d006      	beq.n	fbe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     fb0:	4b09      	ldr	r3, [pc, #36]	; (fd8 <EIC_Handler+0x5c>)
     fb2:	781b      	ldrb	r3, [r3, #0]
     fb4:	001a      	movs	r2, r3
     fb6:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <EIC_Handler+0x68>)
     fb8:	0092      	lsls	r2, r2, #2
     fba:	58d3      	ldr	r3, [r2, r3]
     fbc:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <EIC_Handler+0x5c>)
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	3301      	adds	r3, #1
     fc4:	b2da      	uxtb	r2, r3
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <EIC_Handler+0x5c>)
     fc8:	701a      	strb	r2, [r3, #0]
     fca:	4b03      	ldr	r3, [pc, #12]	; (fd8 <EIC_Handler+0x5c>)
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	2b0f      	cmp	r3, #15
     fd0:	d9da      	bls.n	f88 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	46bd      	mov	sp, r7
     fd6:	bd80      	pop	{r7, pc}
     fd8:	200000d8 	.word	0x200000d8
     fdc:	00000e51 	.word	0x00000e51
     fe0:	00000e95 	.word	0x00000e95
     fe4:	20000088 	.word	0x20000088

00000fe8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     fe8:	b580      	push	{r7, lr}
     fea:	b082      	sub	sp, #8
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2200      	movs	r2, #0
     ff4:	701a      	strb	r2, [r3, #0]
}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	46bd      	mov	sp, r7
     ffa:	b002      	add	sp, #8
     ffc:	bd80      	pop	{r7, pc}
     ffe:	46c0      	nop			; (mov r8, r8)

00001000 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1000:	b580      	push	{r7, lr}
    1002:	b082      	sub	sp, #8
    1004:	af00      	add	r7, sp, #0
    1006:	0002      	movs	r2, r0
    1008:	6039      	str	r1, [r7, #0]
    100a:	1dfb      	adds	r3, r7, #7
    100c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    100e:	1dfb      	adds	r3, r7, #7
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	2b01      	cmp	r3, #1
    1014:	d00a      	beq.n	102c <system_apb_clock_set_mask+0x2c>
    1016:	2b02      	cmp	r3, #2
    1018:	d00f      	beq.n	103a <system_apb_clock_set_mask+0x3a>
    101a:	2b00      	cmp	r3, #0
    101c:	d114      	bne.n	1048 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    101e:	4b0e      	ldr	r3, [pc, #56]	; (1058 <system_apb_clock_set_mask+0x58>)
    1020:	4a0d      	ldr	r2, [pc, #52]	; (1058 <system_apb_clock_set_mask+0x58>)
    1022:	6991      	ldr	r1, [r2, #24]
    1024:	683a      	ldr	r2, [r7, #0]
    1026:	430a      	orrs	r2, r1
    1028:	619a      	str	r2, [r3, #24]
			break;
    102a:	e00f      	b.n	104c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    102c:	4b0a      	ldr	r3, [pc, #40]	; (1058 <system_apb_clock_set_mask+0x58>)
    102e:	4a0a      	ldr	r2, [pc, #40]	; (1058 <system_apb_clock_set_mask+0x58>)
    1030:	69d1      	ldr	r1, [r2, #28]
    1032:	683a      	ldr	r2, [r7, #0]
    1034:	430a      	orrs	r2, r1
    1036:	61da      	str	r2, [r3, #28]
			break;
    1038:	e008      	b.n	104c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <system_apb_clock_set_mask+0x58>)
    103c:	4a06      	ldr	r2, [pc, #24]	; (1058 <system_apb_clock_set_mask+0x58>)
    103e:	6a11      	ldr	r1, [r2, #32]
    1040:	683a      	ldr	r2, [r7, #0]
    1042:	430a      	orrs	r2, r1
    1044:	621a      	str	r2, [r3, #32]
			break;
    1046:	e001      	b.n	104c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1048:	2317      	movs	r3, #23
    104a:	e000      	b.n	104e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    104c:	2300      	movs	r3, #0
}
    104e:	0018      	movs	r0, r3
    1050:	46bd      	mov	sp, r7
    1052:	b002      	add	sp, #8
    1054:	bd80      	pop	{r7, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	40000400 	.word	0x40000400

0000105c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    105c:	b580      	push	{r7, lr}
    105e:	b082      	sub	sp, #8
    1060:	af00      	add	r7, sp, #0
    1062:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	2280      	movs	r2, #128	; 0x80
    1068:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	2200      	movs	r2, #0
    106e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	2201      	movs	r2, #1
    1074:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	2200      	movs	r2, #0
    107a:	70da      	strb	r2, [r3, #3]
}
    107c:	46c0      	nop			; (mov r8, r8)
    107e:	46bd      	mov	sp, r7
    1080:	b002      	add	sp, #8
    1082:	bd80      	pop	{r7, pc}

00001084 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1084:	b580      	push	{r7, lr}
    1086:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1088:	4b05      	ldr	r3, [pc, #20]	; (10a0 <system_is_debugger_present+0x1c>)
    108a:	789b      	ldrb	r3, [r3, #2]
    108c:	b2db      	uxtb	r3, r3
    108e:	001a      	movs	r2, r3
    1090:	2302      	movs	r3, #2
    1092:	4013      	ands	r3, r2
    1094:	1e5a      	subs	r2, r3, #1
    1096:	4193      	sbcs	r3, r2
    1098:	b2db      	uxtb	r3, r3
}
    109a:	0018      	movs	r0, r3
    109c:	46bd      	mov	sp, r7
    109e:	bd80      	pop	{r7, pc}
    10a0:	41002000 	.word	0x41002000

000010a4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b084      	sub	sp, #16
    10a8:	af00      	add	r7, sp, #0
    10aa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	69db      	ldr	r3, [r3, #28]
    10b6:	2207      	movs	r2, #7
    10b8:	4013      	ands	r3, r2
    10ba:	1e5a      	subs	r2, r3, #1
    10bc:	4193      	sbcs	r3, r2
    10be:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    10c0:	0018      	movs	r0, r3
    10c2:	46bd      	mov	sp, r7
    10c4:	b004      	add	sp, #16
    10c6:	bd80      	pop	{r7, pc}

000010c8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    10d0:	46c0      	nop			; (mov r8, r8)
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	0018      	movs	r0, r3
    10d6:	4b04      	ldr	r3, [pc, #16]	; (10e8 <_i2c_master_wait_for_sync+0x20>)
    10d8:	4798      	blx	r3
    10da:	1e03      	subs	r3, r0, #0
    10dc:	d1f9      	bne.n	10d2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	46bd      	mov	sp, r7
    10e2:	b002      	add	sp, #8
    10e4:	bd80      	pop	{r7, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	000010a5 	.word	0x000010a5

000010ec <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    10ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ee:	b095      	sub	sp, #84	; 0x54
    10f0:	af00      	add	r7, sp, #0
    10f2:	60f8      	str	r0, [r7, #12]
    10f4:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    10f6:	2300      	movs	r3, #0
    10f8:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    10fa:	2300      	movs	r3, #0
    10fc:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    10fe:	2300      	movs	r3, #0
    1100:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    1102:	233b      	movs	r3, #59	; 0x3b
    1104:	2208      	movs	r2, #8
    1106:	4694      	mov	ip, r2
    1108:	44bc      	add	ip, r7
    110a:	4463      	add	r3, ip
    110c:	2200      	movs	r2, #0
    110e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	681b      	ldr	r3, [r3, #0]
    1114:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    1116:	68fb      	ldr	r3, [r7, #12]
    1118:	681b      	ldr	r3, [r3, #0]
    111a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    111c:	2323      	movs	r3, #35	; 0x23
    111e:	2208      	movs	r2, #8
    1120:	18ba      	adds	r2, r7, r2
    1122:	18d4      	adds	r4, r2, r3
    1124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1126:	0018      	movs	r0, r3
    1128:	4bdb      	ldr	r3, [pc, #876]	; (1498 <_i2c_master_set_config+0x3ac>)
    112a:	4798      	blx	r3
    112c:	0003      	movs	r3, r0
    112e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1130:	230c      	movs	r3, #12
    1132:	2208      	movs	r2, #8
    1134:	4694      	mov	ip, r2
    1136:	44bc      	add	ip, r7
    1138:	4463      	add	r3, ip
    113a:	0018      	movs	r0, r3
    113c:	4bd7      	ldr	r3, [pc, #860]	; (149c <_i2c_master_set_config+0x3b0>)
    113e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1140:	68bb      	ldr	r3, [r7, #8]
    1142:	69db      	ldr	r3, [r3, #28]
    1144:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    1146:	68bb      	ldr	r3, [r7, #8]
    1148:	6a1b      	ldr	r3, [r3, #32]
    114a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    114e:	2b00      	cmp	r3, #0
    1150:	d106      	bne.n	1160 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1154:	2100      	movs	r1, #0
    1156:	0018      	movs	r0, r3
    1158:	4bd1      	ldr	r3, [pc, #836]	; (14a0 <_i2c_master_set_config+0x3b4>)
    115a:	4798      	blx	r3
    115c:	0003      	movs	r3, r0
    115e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1162:	b2da      	uxtb	r2, r3
    1164:	230c      	movs	r3, #12
    1166:	2108      	movs	r1, #8
    1168:	468c      	mov	ip, r1
    116a:	44bc      	add	ip, r7
    116c:	4463      	add	r3, ip
    116e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1170:	230c      	movs	r3, #12
    1172:	2208      	movs	r2, #8
    1174:	4694      	mov	ip, r2
    1176:	44bc      	add	ip, r7
    1178:	4463      	add	r3, ip
    117a:	2202      	movs	r2, #2
    117c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    117e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1180:	0c1b      	lsrs	r3, r3, #16
    1182:	b2db      	uxtb	r3, r3
    1184:	220c      	movs	r2, #12
    1186:	2108      	movs	r1, #8
    1188:	468c      	mov	ip, r1
    118a:	44bc      	add	ip, r7
    118c:	4462      	add	r2, ip
    118e:	0011      	movs	r1, r2
    1190:	0018      	movs	r0, r3
    1192:	4bc4      	ldr	r3, [pc, #784]	; (14a4 <_i2c_master_set_config+0x3b8>)
    1194:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1198:	2b00      	cmp	r3, #0
    119a:	d106      	bne.n	11aa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    119e:	2101      	movs	r1, #1
    11a0:	0018      	movs	r0, r3
    11a2:	4bbf      	ldr	r3, [pc, #764]	; (14a0 <_i2c_master_set_config+0x3b4>)
    11a4:	4798      	blx	r3
    11a6:	0003      	movs	r3, r0
    11a8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    11aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ac:	b2da      	uxtb	r2, r3
    11ae:	230c      	movs	r3, #12
    11b0:	2108      	movs	r1, #8
    11b2:	468c      	mov	ip, r1
    11b4:	44bc      	add	ip, r7
    11b6:	4463      	add	r3, ip
    11b8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    11ba:	230c      	movs	r3, #12
    11bc:	2208      	movs	r2, #8
    11be:	4694      	mov	ip, r2
    11c0:	44bc      	add	ip, r7
    11c2:	4463      	add	r3, ip
    11c4:	2202      	movs	r2, #2
    11c6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    11c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11ca:	0c1b      	lsrs	r3, r3, #16
    11cc:	b2db      	uxtb	r3, r3
    11ce:	220c      	movs	r2, #12
    11d0:	2108      	movs	r1, #8
    11d2:	468c      	mov	ip, r1
    11d4:	44bc      	add	ip, r7
    11d6:	4462      	add	r2, ip
    11d8:	0011      	movs	r1, r2
    11da:	0018      	movs	r0, r3
    11dc:	4bb1      	ldr	r3, [pc, #708]	; (14a4 <_i2c_master_set_config+0x3b8>)
    11de:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    11e0:	68bb      	ldr	r3, [r7, #8]
    11e2:	8a9a      	ldrh	r2, [r3, #20]
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	8ada      	ldrh	r2, [r3, #22]
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    11f0:	68bb      	ldr	r3, [r7, #8]
    11f2:	7e1b      	ldrb	r3, [r3, #24]
    11f4:	2b00      	cmp	r3, #0
    11f6:	d103      	bne.n	1200 <_i2c_master_set_config+0x114>
    11f8:	4bab      	ldr	r3, [pc, #684]	; (14a8 <_i2c_master_set_config+0x3bc>)
    11fa:	4798      	blx	r3
    11fc:	1e03      	subs	r3, r0, #0
    11fe:	d002      	beq.n	1206 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1200:	2380      	movs	r3, #128	; 0x80
    1202:	64fb      	str	r3, [r7, #76]	; 0x4c
    1204:	e001      	b.n	120a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1206:	2300      	movs	r3, #0
    1208:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    120a:	68bb      	ldr	r3, [r7, #8]
    120c:	691b      	ldr	r3, [r3, #16]
    120e:	2b00      	cmp	r3, #0
    1210:	d004      	beq.n	121c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1212:	68bb      	ldr	r3, [r7, #8]
    1214:	691b      	ldr	r3, [r3, #16]
    1216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1218:	4313      	orrs	r3, r2
    121a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    121c:	68bb      	ldr	r3, [r7, #8]
    121e:	689b      	ldr	r3, [r3, #8]
    1220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1222:	4313      	orrs	r3, r2
    1224:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1226:	68bb      	ldr	r3, [r7, #8]
    1228:	2224      	movs	r2, #36	; 0x24
    122a:	5c9b      	ldrb	r3, [r3, r2]
    122c:	2b00      	cmp	r3, #0
    122e:	d004      	beq.n	123a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1232:	2280      	movs	r2, #128	; 0x80
    1234:	05d2      	lsls	r2, r2, #23
    1236:	4313      	orrs	r3, r2
    1238:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    123e:	2b00      	cmp	r3, #0
    1240:	d004      	beq.n	124c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1242:	68bb      	ldr	r3, [r7, #8]
    1244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1248:	4313      	orrs	r3, r2
    124a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    124c:	68bb      	ldr	r3, [r7, #8]
    124e:	222c      	movs	r2, #44	; 0x2c
    1250:	5c9b      	ldrb	r3, [r3, r2]
    1252:	2b00      	cmp	r3, #0
    1254:	d105      	bne.n	1262 <_i2c_master_set_config+0x176>
    1256:	68bb      	ldr	r3, [r7, #8]
    1258:	689a      	ldr	r2, [r3, #8]
    125a:	2380      	movs	r3, #128	; 0x80
    125c:	049b      	lsls	r3, r3, #18
    125e:	429a      	cmp	r2, r3
    1260:	d104      	bne.n	126c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1264:	2280      	movs	r2, #128	; 0x80
    1266:	0512      	lsls	r2, r2, #20
    1268:	4313      	orrs	r3, r2
    126a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    126c:	68bb      	ldr	r3, [r7, #8]
    126e:	222d      	movs	r2, #45	; 0x2d
    1270:	5c9b      	ldrb	r3, [r3, r2]
    1272:	2b00      	cmp	r3, #0
    1274:	d004      	beq.n	1280 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1278:	2280      	movs	r2, #128	; 0x80
    127a:	0412      	lsls	r2, r2, #16
    127c:	4313      	orrs	r3, r2
    127e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1280:	68bb      	ldr	r3, [r7, #8]
    1282:	222e      	movs	r2, #46	; 0x2e
    1284:	5c9b      	ldrb	r3, [r3, r2]
    1286:	2b00      	cmp	r3, #0
    1288:	d004      	beq.n	1294 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    128a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    128c:	2280      	movs	r2, #128	; 0x80
    128e:	03d2      	lsls	r2, r2, #15
    1290:	4313      	orrs	r3, r2
    1292:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1296:	681a      	ldr	r2, [r3, #0]
    1298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    129a:	431a      	orrs	r2, r3
    129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    129e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    12a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12a2:	2280      	movs	r2, #128	; 0x80
    12a4:	0052      	lsls	r2, r2, #1
    12a6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    12a8:	2323      	movs	r3, #35	; 0x23
    12aa:	2208      	movs	r2, #8
    12ac:	4694      	mov	ip, r2
    12ae:	44bc      	add	ip, r7
    12b0:	4463      	add	r3, ip
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	3314      	adds	r3, #20
    12b6:	b2db      	uxtb	r3, r3
    12b8:	0018      	movs	r0, r3
    12ba:	4b7c      	ldr	r3, [pc, #496]	; (14ac <_i2c_master_set_config+0x3c0>)
    12bc:	4798      	blx	r3
    12be:	0003      	movs	r3, r0
    12c0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    12c2:	68bb      	ldr	r3, [r7, #8]
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	22fa      	movs	r2, #250	; 0xfa
    12c8:	0092      	lsls	r2, r2, #2
    12ca:	4353      	muls	r3, r2
    12cc:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    12ce:	68bb      	ldr	r3, [r7, #8]
    12d0:	685b      	ldr	r3, [r3, #4]
    12d2:	22fa      	movs	r2, #250	; 0xfa
    12d4:	0092      	lsls	r2, r2, #2
    12d6:	4353      	muls	r3, r2
    12d8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    12da:	68bb      	ldr	r3, [r7, #8]
    12dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    12de:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    12e0:	4b73      	ldr	r3, [pc, #460]	; (14b0 <_i2c_master_set_config+0x3c4>)
    12e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    12e4:	4798      	blx	r3
    12e6:	0005      	movs	r5, r0
    12e8:	000e      	movs	r6, r1
    12ea:	4b71      	ldr	r3, [pc, #452]	; (14b0 <_i2c_master_set_config+0x3c4>)
    12ec:	6a38      	ldr	r0, [r7, #32]
    12ee:	4798      	blx	r3
    12f0:	6038      	str	r0, [r7, #0]
    12f2:	6079      	str	r1, [r7, #4]
    12f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12f6:	69ba      	ldr	r2, [r7, #24]
    12f8:	435a      	muls	r2, r3
    12fa:	4b6d      	ldr	r3, [pc, #436]	; (14b0 <_i2c_master_set_config+0x3c4>)
    12fc:	0010      	movs	r0, r2
    12fe:	4798      	blx	r3
    1300:	4c6c      	ldr	r4, [pc, #432]	; (14b4 <_i2c_master_set_config+0x3c8>)
    1302:	4a6d      	ldr	r2, [pc, #436]	; (14b8 <_i2c_master_set_config+0x3cc>)
    1304:	4b6d      	ldr	r3, [pc, #436]	; (14bc <_i2c_master_set_config+0x3d0>)
    1306:	47a0      	blx	r4
    1308:	0003      	movs	r3, r0
    130a:	000c      	movs	r4, r1
    130c:	0018      	movs	r0, r3
    130e:	0021      	movs	r1, r4
    1310:	4c6b      	ldr	r4, [pc, #428]	; (14c0 <_i2c_master_set_config+0x3d4>)
    1312:	2200      	movs	r2, #0
    1314:	4b6b      	ldr	r3, [pc, #428]	; (14c4 <_i2c_master_set_config+0x3d8>)
    1316:	47a0      	blx	r4
    1318:	0003      	movs	r3, r0
    131a:	000c      	movs	r4, r1
    131c:	001a      	movs	r2, r3
    131e:	0023      	movs	r3, r4
    1320:	4c64      	ldr	r4, [pc, #400]	; (14b4 <_i2c_master_set_config+0x3c8>)
    1322:	6838      	ldr	r0, [r7, #0]
    1324:	6879      	ldr	r1, [r7, #4]
    1326:	47a0      	blx	r4
    1328:	0003      	movs	r3, r0
    132a:	000c      	movs	r4, r1
    132c:	001a      	movs	r2, r3
    132e:	0023      	movs	r3, r4
    1330:	4c65      	ldr	r4, [pc, #404]	; (14c8 <_i2c_master_set_config+0x3dc>)
    1332:	0028      	movs	r0, r5
    1334:	0031      	movs	r1, r6
    1336:	47a0      	blx	r4
    1338:	0003      	movs	r3, r0
    133a:	000c      	movs	r4, r1
    133c:	001d      	movs	r5, r3
    133e:	0026      	movs	r6, r4
    1340:	6a3b      	ldr	r3, [r7, #32]
    1342:	005a      	lsls	r2, r3, #1
    1344:	4b5a      	ldr	r3, [pc, #360]	; (14b0 <_i2c_master_set_config+0x3c4>)
    1346:	0010      	movs	r0, r2
    1348:	4798      	blx	r3
    134a:	0002      	movs	r2, r0
    134c:	000b      	movs	r3, r1
    134e:	4c5c      	ldr	r4, [pc, #368]	; (14c0 <_i2c_master_set_config+0x3d4>)
    1350:	0028      	movs	r0, r5
    1352:	0031      	movs	r1, r6
    1354:	47a0      	blx	r4
    1356:	0003      	movs	r3, r0
    1358:	000c      	movs	r4, r1
    135a:	0018      	movs	r0, r3
    135c:	0021      	movs	r1, r4
    135e:	4c5a      	ldr	r4, [pc, #360]	; (14c8 <_i2c_master_set_config+0x3dc>)
    1360:	2200      	movs	r2, #0
    1362:	4b5a      	ldr	r3, [pc, #360]	; (14cc <_i2c_master_set_config+0x3e0>)
    1364:	47a0      	blx	r4
    1366:	0003      	movs	r3, r0
    1368:	000c      	movs	r4, r1
    136a:	001d      	movs	r5, r3
    136c:	0026      	movs	r6, r4
    136e:	6a3b      	ldr	r3, [r7, #32]
    1370:	005a      	lsls	r2, r3, #1
    1372:	4b4f      	ldr	r3, [pc, #316]	; (14b0 <_i2c_master_set_config+0x3c4>)
    1374:	0010      	movs	r0, r2
    1376:	4798      	blx	r3
    1378:	0002      	movs	r2, r0
    137a:	000b      	movs	r3, r1
    137c:	4c54      	ldr	r4, [pc, #336]	; (14d0 <_i2c_master_set_config+0x3e4>)
    137e:	0028      	movs	r0, r5
    1380:	0031      	movs	r1, r6
    1382:	47a0      	blx	r4
    1384:	0003      	movs	r3, r0
    1386:	000c      	movs	r4, r1
    1388:	0019      	movs	r1, r3
    138a:	0022      	movs	r2, r4
    138c:	4b51      	ldr	r3, [pc, #324]	; (14d4 <_i2c_master_set_config+0x3e8>)
    138e:	0008      	movs	r0, r1
    1390:	0011      	movs	r1, r2
    1392:	4798      	blx	r3
    1394:	0003      	movs	r3, r0
    1396:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1398:	68bb      	ldr	r3, [r7, #8]
    139a:	689a      	ldr	r2, [r3, #8]
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	049b      	lsls	r3, r3, #18
    13a0:	429a      	cmp	r2, r3
    13a2:	d145      	bne.n	1430 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    13a4:	4b42      	ldr	r3, [pc, #264]	; (14b0 <_i2c_master_set_config+0x3c4>)
    13a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    13a8:	4798      	blx	r3
    13aa:	4c45      	ldr	r4, [pc, #276]	; (14c0 <_i2c_master_set_config+0x3d4>)
    13ac:	0002      	movs	r2, r0
    13ae:	000b      	movs	r3, r1
    13b0:	47a0      	blx	r4
    13b2:	0003      	movs	r3, r0
    13b4:	000c      	movs	r4, r1
    13b6:	001d      	movs	r5, r3
    13b8:	0026      	movs	r6, r4
    13ba:	4b3d      	ldr	r3, [pc, #244]	; (14b0 <_i2c_master_set_config+0x3c4>)
    13bc:	69f8      	ldr	r0, [r7, #28]
    13be:	4798      	blx	r3
    13c0:	4c3c      	ldr	r4, [pc, #240]	; (14b4 <_i2c_master_set_config+0x3c8>)
    13c2:	2200      	movs	r2, #0
    13c4:	4b44      	ldr	r3, [pc, #272]	; (14d8 <_i2c_master_set_config+0x3ec>)
    13c6:	47a0      	blx	r4
    13c8:	0003      	movs	r3, r0
    13ca:	000c      	movs	r4, r1
    13cc:	001a      	movs	r2, r3
    13ce:	0023      	movs	r3, r4
    13d0:	4c3f      	ldr	r4, [pc, #252]	; (14d0 <_i2c_master_set_config+0x3e4>)
    13d2:	0028      	movs	r0, r5
    13d4:	0031      	movs	r1, r6
    13d6:	47a0      	blx	r4
    13d8:	0003      	movs	r3, r0
    13da:	000c      	movs	r4, r1
    13dc:	0018      	movs	r0, r3
    13de:	0021      	movs	r1, r4
    13e0:	4c39      	ldr	r4, [pc, #228]	; (14c8 <_i2c_master_set_config+0x3dc>)
    13e2:	2200      	movs	r2, #0
    13e4:	4b39      	ldr	r3, [pc, #228]	; (14cc <_i2c_master_set_config+0x3e0>)
    13e6:	47a0      	blx	r4
    13e8:	0003      	movs	r3, r0
    13ea:	000c      	movs	r4, r1
    13ec:	0019      	movs	r1, r3
    13ee:	0022      	movs	r2, r4
    13f0:	4b38      	ldr	r3, [pc, #224]	; (14d4 <_i2c_master_set_config+0x3e8>)
    13f2:	0008      	movs	r0, r1
    13f4:	0011      	movs	r1, r2
    13f6:	4798      	blx	r3
    13f8:	0003      	movs	r3, r0
    13fa:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    13fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13fe:	2b00      	cmp	r3, #0
    1400:	d009      	beq.n	1416 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1402:	4b36      	ldr	r3, [pc, #216]	; (14dc <_i2c_master_set_config+0x3f0>)
    1404:	69f9      	ldr	r1, [r7, #28]
    1406:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1408:	4798      	blx	r3
    140a:	0003      	movs	r3, r0
    140c:	1e9a      	subs	r2, r3, #2
    140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1410:	1ad3      	subs	r3, r2, r3
    1412:	64bb      	str	r3, [r7, #72]	; 0x48
    1414:	e00c      	b.n	1430 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1416:	69fb      	ldr	r3, [r7, #28]
    1418:	005a      	lsls	r2, r3, #1
    141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    141c:	18d3      	adds	r3, r2, r3
    141e:	1e5a      	subs	r2, r3, #1
    1420:	69fb      	ldr	r3, [r7, #28]
    1422:	0059      	lsls	r1, r3, #1
    1424:	4b2d      	ldr	r3, [pc, #180]	; (14dc <_i2c_master_set_config+0x3f0>)
    1426:	0010      	movs	r0, r2
    1428:	4798      	blx	r3
    142a:	0003      	movs	r3, r0
    142c:	3b01      	subs	r3, #1
    142e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1432:	2bff      	cmp	r3, #255	; 0xff
    1434:	dc08      	bgt.n	1448 <_i2c_master_set_config+0x35c>
    1436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1438:	2b00      	cmp	r3, #0
    143a:	db05      	blt.n	1448 <_i2c_master_set_config+0x35c>
    143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    143e:	2bff      	cmp	r3, #255	; 0xff
    1440:	dc02      	bgt.n	1448 <_i2c_master_set_config+0x35c>
    1442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1444:	2b00      	cmp	r3, #0
    1446:	da06      	bge.n	1456 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1448:	233b      	movs	r3, #59	; 0x3b
    144a:	2208      	movs	r2, #8
    144c:	4694      	mov	ip, r2
    144e:	44bc      	add	ip, r7
    1450:	4463      	add	r3, ip
    1452:	2240      	movs	r2, #64	; 0x40
    1454:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1456:	233b      	movs	r3, #59	; 0x3b
    1458:	2208      	movs	r2, #8
    145a:	4694      	mov	ip, r2
    145c:	44bc      	add	ip, r7
    145e:	4463      	add	r3, ip
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2b40      	cmp	r3, #64	; 0x40
    1464:	d00e      	beq.n	1484 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1468:	22ff      	movs	r2, #255	; 0xff
    146a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    146c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    146e:	041b      	lsls	r3, r3, #16
    1470:	0019      	movs	r1, r3
    1472:	23ff      	movs	r3, #255	; 0xff
    1474:	041b      	lsls	r3, r3, #16
    1476:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1478:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    147a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    147c:	0612      	lsls	r2, r2, #24
    147e:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1482:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    1484:	233b      	movs	r3, #59	; 0x3b
    1486:	2208      	movs	r2, #8
    1488:	4694      	mov	ip, r2
    148a:	44bc      	add	ip, r7
    148c:	4463      	add	r3, ip
    148e:	781b      	ldrb	r3, [r3, #0]
}
    1490:	0018      	movs	r0, r3
    1492:	46bd      	mov	sp, r7
    1494:	b015      	add	sp, #84	; 0x54
    1496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1498:	00003e5d 	.word	0x00003e5d
    149c:	0000105d 	.word	0x0000105d
    14a0:	00003ca1 	.word	0x00003ca1
    14a4:	00004d41 	.word	0x00004d41
    14a8:	00001085 	.word	0x00001085
    14ac:	00004b79 	.word	0x00004b79
    14b0:	00008ce9 	.word	0x00008ce9
    14b4:	000080e1 	.word	0x000080e1
    14b8:	e826d695 	.word	0xe826d695
    14bc:	3e112e0b 	.word	0x3e112e0b
    14c0:	0000745d 	.word	0x0000745d
    14c4:	40240000 	.word	0x40240000
    14c8:	000085d5 	.word	0x000085d5
    14cc:	3ff00000 	.word	0x3ff00000
    14d0:	00007ab5 	.word	0x00007ab5
    14d4:	00008c7d 	.word	0x00008c7d
    14d8:	40080000 	.word	0x40080000
    14dc:	00007345 	.word	0x00007345

000014e0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    14e0:	b590      	push	{r4, r7, lr}
    14e2:	b08b      	sub	sp, #44	; 0x2c
    14e4:	af00      	add	r7, sp, #0
    14e6:	60f8      	str	r0, [r7, #12]
    14e8:	60b9      	str	r1, [r7, #8]
    14ea:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	68ba      	ldr	r2, [r7, #8]
    14f0:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14f8:	68fb      	ldr	r3, [r7, #12]
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	0018      	movs	r0, r3
    14fe:	4b3b      	ldr	r3, [pc, #236]	; (15ec <i2c_master_init+0x10c>)
    1500:	4798      	blx	r3
    1502:	0003      	movs	r3, r0
    1504:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1506:	6a3b      	ldr	r3, [r7, #32]
    1508:	3302      	adds	r3, #2
    150a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    150c:	6a3b      	ldr	r3, [r7, #32]
    150e:	3314      	adds	r3, #20
    1510:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1512:	2201      	movs	r2, #1
    1514:	69fb      	ldr	r3, [r7, #28]
    1516:	409a      	lsls	r2, r3
    1518:	0013      	movs	r3, r2
    151a:	0019      	movs	r1, r3
    151c:	2002      	movs	r0, #2
    151e:	4b34      	ldr	r3, [pc, #208]	; (15f0 <i2c_master_init+0x110>)
    1520:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1522:	2314      	movs	r3, #20
    1524:	18fb      	adds	r3, r7, r3
    1526:	0018      	movs	r0, r3
    1528:	4b32      	ldr	r3, [pc, #200]	; (15f4 <i2c_master_init+0x114>)
    152a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	7b1a      	ldrb	r2, [r3, #12]
    1530:	2314      	movs	r3, #20
    1532:	18fb      	adds	r3, r7, r3
    1534:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1536:	69bb      	ldr	r3, [r7, #24]
    1538:	b2db      	uxtb	r3, r3
    153a:	2214      	movs	r2, #20
    153c:	18ba      	adds	r2, r7, r2
    153e:	0011      	movs	r1, r2
    1540:	0018      	movs	r0, r3
    1542:	4b2d      	ldr	r3, [pc, #180]	; (15f8 <i2c_master_init+0x118>)
    1544:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1546:	69bb      	ldr	r3, [r7, #24]
    1548:	b2db      	uxtb	r3, r3
    154a:	0018      	movs	r0, r3
    154c:	4b2b      	ldr	r3, [pc, #172]	; (15fc <i2c_master_init+0x11c>)
    154e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	7b1b      	ldrb	r3, [r3, #12]
    1554:	2100      	movs	r1, #0
    1556:	0018      	movs	r0, r3
    1558:	4b29      	ldr	r3, [pc, #164]	; (1600 <i2c_master_init+0x120>)
    155a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	2202      	movs	r2, #2
    1562:	4013      	ands	r3, r2
    1564:	d001      	beq.n	156a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1566:	231c      	movs	r3, #28
    1568:	e03b      	b.n	15e2 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	2201      	movs	r2, #1
    1570:	4013      	ands	r3, r2
    1572:	d001      	beq.n	1578 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1574:	2305      	movs	r3, #5
    1576:	e034      	b.n	15e2 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	2217      	movs	r2, #23
    157e:	18bc      	adds	r4, r7, r2
    1580:	0018      	movs	r0, r3
    1582:	4b1a      	ldr	r3, [pc, #104]	; (15ec <i2c_master_init+0x10c>)
    1584:	4798      	blx	r3
    1586:	0003      	movs	r3, r0
    1588:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    158a:	4a1e      	ldr	r2, [pc, #120]	; (1604 <i2c_master_init+0x124>)
    158c:	2317      	movs	r3, #23
    158e:	18fb      	adds	r3, r7, r3
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	0011      	movs	r1, r2
    1594:	0018      	movs	r0, r3
    1596:	4b1c      	ldr	r3, [pc, #112]	; (1608 <i2c_master_init+0x128>)
    1598:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    159a:	2317      	movs	r3, #23
    159c:	18fb      	adds	r3, r7, r3
    159e:	781a      	ldrb	r2, [r3, #0]
    15a0:	4b1a      	ldr	r3, [pc, #104]	; (160c <i2c_master_init+0x12c>)
    15a2:	0092      	lsls	r2, r2, #2
    15a4:	68f9      	ldr	r1, [r7, #12]
    15a6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	2200      	movs	r2, #0
    15ac:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	2200      	movs	r2, #0
    15b2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	2200      	movs	r2, #0
    15b8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	2200      	movs	r2, #0
    15be:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	2225      	movs	r2, #37	; 0x25
    15c4:	2100      	movs	r1, #0
    15c6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    15c8:	68fb      	ldr	r3, [r7, #12]
    15ca:	2200      	movs	r2, #0
    15cc:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    15ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15d0:	2214      	movs	r2, #20
    15d2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    15d4:	687a      	ldr	r2, [r7, #4]
    15d6:	68fb      	ldr	r3, [r7, #12]
    15d8:	0011      	movs	r1, r2
    15da:	0018      	movs	r0, r3
    15dc:	4b0c      	ldr	r3, [pc, #48]	; (1610 <i2c_master_init+0x130>)
    15de:	4798      	blx	r3
    15e0:	0003      	movs	r3, r0
}
    15e2:	0018      	movs	r0, r3
    15e4:	46bd      	mov	sp, r7
    15e6:	b00b      	add	sp, #44	; 0x2c
    15e8:	bd90      	pop	{r4, r7, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	00003e5d 	.word	0x00003e5d
    15f0:	00001001 	.word	0x00001001
    15f4:	00000fe9 	.word	0x00000fe9
    15f8:	00004a55 	.word	0x00004a55
    15fc:	00004a99 	.word	0x00004a99
    1600:	00003c15 	.word	0x00003c15
    1604:	00001e05 	.word	0x00001e05
    1608:	00003ec1 	.word	0x00003ec1
    160c:	200000f8 	.word	0x200000f8
    1610:	000010ed 	.word	0x000010ed

00001614 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1614:	b580      	push	{r7, lr}
    1616:	b084      	sub	sp, #16
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1622:	68fb      	ldr	r3, [r7, #12]
    1624:	7e1b      	ldrb	r3, [r3, #24]
    1626:	b2db      	uxtb	r3, r3
    1628:	001a      	movs	r2, r3
    162a:	2302      	movs	r3, #2
    162c:	4013      	ands	r3, r2
    162e:	d00b      	beq.n	1648 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	2202      	movs	r2, #2
    1634:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	8b5b      	ldrh	r3, [r3, #26]
    163a:	b29b      	uxth	r3, r3
    163c:	001a      	movs	r2, r3
    163e:	2302      	movs	r3, #2
    1640:	4013      	ands	r3, r2
    1642:	d011      	beq.n	1668 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1644:	2341      	movs	r3, #65	; 0x41
    1646:	e010      	b.n	166a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	8b5b      	ldrh	r3, [r3, #26]
    164c:	b29b      	uxth	r3, r3
    164e:	001a      	movs	r2, r3
    1650:	2304      	movs	r3, #4
    1652:	4013      	ands	r3, r2
    1654:	d008      	beq.n	1668 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	685b      	ldr	r3, [r3, #4]
    165a:	22c0      	movs	r2, #192	; 0xc0
    165c:	0292      	lsls	r2, r2, #10
    165e:	431a      	orrs	r2, r3
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1664:	2318      	movs	r3, #24
    1666:	e000      	b.n	166a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1668:	2300      	movs	r3, #0
}
    166a:	0018      	movs	r0, r3
    166c:	46bd      	mov	sp, r7
    166e:	b004      	add	sp, #16
    1670:	bd80      	pop	{r7, pc}
    1672:	46c0      	nop			; (mov r8, r8)

00001674 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1674:	b580      	push	{r7, lr}
    1676:	b084      	sub	sp, #16
    1678:	af00      	add	r7, sp, #0
    167a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1682:	230e      	movs	r3, #14
    1684:	18fb      	adds	r3, r7, r3
    1686:	2200      	movs	r2, #0
    1688:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    168a:	e00f      	b.n	16ac <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    168c:	230e      	movs	r3, #14
    168e:	18fb      	adds	r3, r7, r3
    1690:	220e      	movs	r2, #14
    1692:	18ba      	adds	r2, r7, r2
    1694:	8812      	ldrh	r2, [r2, #0]
    1696:	3201      	adds	r2, #1
    1698:	801a      	strh	r2, [r3, #0]
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	891b      	ldrh	r3, [r3, #8]
    169e:	220e      	movs	r2, #14
    16a0:	18ba      	adds	r2, r7, r2
    16a2:	8812      	ldrh	r2, [r2, #0]
    16a4:	429a      	cmp	r2, r3
    16a6:	d301      	bcc.n	16ac <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    16a8:	2312      	movs	r3, #18
    16aa:	e00e      	b.n	16ca <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16ac:	68bb      	ldr	r3, [r7, #8]
    16ae:	7e1b      	ldrb	r3, [r3, #24]
    16b0:	b2db      	uxtb	r3, r3
    16b2:	001a      	movs	r2, r3
    16b4:	2301      	movs	r3, #1
    16b6:	4013      	ands	r3, r2
    16b8:	d106      	bne.n	16c8 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    16ba:	68bb      	ldr	r3, [r7, #8]
    16bc:	7e1b      	ldrb	r3, [r3, #24]
    16be:	b2db      	uxtb	r3, r3
    16c0:	001a      	movs	r2, r3
    16c2:	2302      	movs	r3, #2
    16c4:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16c6:	d0e1      	beq.n	168c <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    16c8:	2300      	movs	r3, #0
}
    16ca:	0018      	movs	r0, r3
    16cc:	46bd      	mov	sp, r7
    16ce:	b004      	add	sp, #16
    16d0:	bd80      	pop	{r7, pc}
    16d2:	46c0      	nop			; (mov r8, r8)

000016d4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    16d4:	b590      	push	{r4, r7, lr}
    16d6:	b085      	sub	sp, #20
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
    16dc:	000a      	movs	r2, r1
    16de:	1cfb      	adds	r3, r7, #3
    16e0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16e8:	68fb      	ldr	r3, [r7, #12]
    16ea:	685b      	ldr	r3, [r3, #4]
    16ec:	2280      	movs	r2, #128	; 0x80
    16ee:	02d2      	lsls	r2, r2, #11
    16f0:	431a      	orrs	r2, r3
    16f2:	68fb      	ldr	r3, [r7, #12]
    16f4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    16f6:	1cfb      	adds	r3, r7, #3
    16f8:	781a      	ldrb	r2, [r3, #0]
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    16fe:	230b      	movs	r3, #11
    1700:	18fc      	adds	r4, r7, r3
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	0018      	movs	r0, r3
    1706:	4b07      	ldr	r3, [pc, #28]	; (1724 <_i2c_master_send_hs_master_code+0x50>)
    1708:	4798      	blx	r3
    170a:	0003      	movs	r3, r0
    170c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    170e:	68fb      	ldr	r3, [r7, #12]
    1710:	2201      	movs	r2, #1
    1712:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1714:	230b      	movs	r3, #11
    1716:	18fb      	adds	r3, r7, r3
    1718:	781b      	ldrb	r3, [r3, #0]
}
    171a:	0018      	movs	r0, r3
    171c:	46bd      	mov	sp, r7
    171e:	b005      	add	sp, #20
    1720:	bd90      	pop	{r4, r7, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	00001675 	.word	0x00001675

00001728 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1728:	b590      	push	{r4, r7, lr}
    172a:	b087      	sub	sp, #28
    172c:	af00      	add	r7, sp, #0
    172e:	6078      	str	r0, [r7, #4]
    1730:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1738:	2314      	movs	r3, #20
    173a:	18fb      	adds	r3, r7, r3
    173c:	683a      	ldr	r2, [r7, #0]
    173e:	8852      	ldrh	r2, [r2, #2]
    1740:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1742:	2312      	movs	r3, #18
    1744:	18fb      	adds	r3, r7, r3
    1746:	2200      	movs	r2, #0
    1748:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    174a:	68fb      	ldr	r3, [r7, #12]
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	011b      	lsls	r3, r3, #4
    1750:	0fdb      	lsrs	r3, r3, #31
    1752:	b2db      	uxtb	r3, r3
    1754:	001a      	movs	r2, r3
    1756:	230b      	movs	r3, #11
    1758:	18fb      	adds	r3, r7, r3
    175a:	1e51      	subs	r1, r2, #1
    175c:	418a      	sbcs	r2, r1
    175e:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1760:	683b      	ldr	r3, [r7, #0]
    1762:	7a5b      	ldrb	r3, [r3, #9]
    1764:	2b00      	cmp	r3, #0
    1766:	d006      	beq.n	1776 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1768:	683b      	ldr	r3, [r7, #0]
    176a:	7a9a      	ldrb	r2, [r3, #10]
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	0011      	movs	r1, r2
    1770:	0018      	movs	r0, r3
    1772:	4b85      	ldr	r3, [pc, #532]	; (1988 <_i2c_master_read_packet+0x260>)
    1774:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	685b      	ldr	r3, [r3, #4]
    177a:	4a84      	ldr	r2, [pc, #528]	; (198c <_i2c_master_read_packet+0x264>)
    177c:	401a      	ands	r2, r3
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1782:	683b      	ldr	r3, [r7, #0]
    1784:	7a1b      	ldrb	r3, [r3, #8]
    1786:	2b00      	cmp	r3, #0
    1788:	d042      	beq.n	1810 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    178a:	683b      	ldr	r3, [r7, #0]
    178c:	881b      	ldrh	r3, [r3, #0]
    178e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	7a5b      	ldrb	r3, [r3, #9]
    1794:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1796:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1798:	001a      	movs	r2, r3
    179a:	2380      	movs	r3, #128	; 0x80
    179c:	021b      	lsls	r3, r3, #8
    179e:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    17a4:	2317      	movs	r3, #23
    17a6:	18fc      	adds	r4, r7, r3
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	0018      	movs	r0, r3
    17ac:	4b78      	ldr	r3, [pc, #480]	; (1990 <_i2c_master_read_packet+0x268>)
    17ae:	4798      	blx	r3
    17b0:	0003      	movs	r3, r0
    17b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	685b      	ldr	r3, [r3, #4]
    17b8:	4a74      	ldr	r2, [pc, #464]	; (198c <_i2c_master_read_packet+0x264>)
    17ba:	401a      	ands	r2, r3
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    17c0:	2317      	movs	r3, #23
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	781b      	ldrb	r3, [r3, #0]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d107      	bne.n	17da <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    17ca:	2317      	movs	r3, #23
    17cc:	18fc      	adds	r4, r7, r3
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	0018      	movs	r0, r3
    17d2:	4b70      	ldr	r3, [pc, #448]	; (1994 <_i2c_master_read_packet+0x26c>)
    17d4:	4798      	blx	r3
    17d6:	0003      	movs	r3, r0
    17d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    17da:	2317      	movs	r3, #23
    17dc:	18fb      	adds	r3, r7, r3
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d111      	bne.n	1808 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17e4:	683b      	ldr	r3, [r7, #0]
    17e6:	881b      	ldrh	r3, [r3, #0]
    17e8:	0a1b      	lsrs	r3, r3, #8
    17ea:	b29b      	uxth	r3, r3
    17ec:	2278      	movs	r2, #120	; 0x78
    17ee:	4313      	orrs	r3, r2
    17f0:	b29b      	uxth	r3, r3
    17f2:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17f4:	683b      	ldr	r3, [r7, #0]
    17f6:	7a5b      	ldrb	r3, [r3, #9]
    17f8:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17fa:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17fc:	2201      	movs	r2, #1
    17fe:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1800:	001a      	movs	r2, r3
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	625a      	str	r2, [r3, #36]	; 0x24
    1806:	e00f      	b.n	1828 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1808:	2317      	movs	r3, #23
    180a:	18fb      	adds	r3, r7, r3
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	e0b6      	b.n	197e <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1810:	683b      	ldr	r3, [r7, #0]
    1812:	881b      	ldrh	r3, [r3, #0]
    1814:	005b      	lsls	r3, r3, #1
    1816:	2201      	movs	r2, #1
    1818:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    181a:	683b      	ldr	r3, [r7, #0]
    181c:	7a5b      	ldrb	r3, [r3, #9]
    181e:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1820:	4313      	orrs	r3, r2
    1822:	001a      	movs	r2, r3
    1824:	68fb      	ldr	r3, [r7, #12]
    1826:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1828:	2317      	movs	r3, #23
    182a:	18fc      	adds	r4, r7, r3
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	0018      	movs	r0, r3
    1830:	4b57      	ldr	r3, [pc, #348]	; (1990 <_i2c_master_read_packet+0x268>)
    1832:	4798      	blx	r3
    1834:	0003      	movs	r3, r0
    1836:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1838:	230b      	movs	r3, #11
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d00b      	beq.n	185a <_i2c_master_read_packet+0x132>
    1842:	683b      	ldr	r3, [r7, #0]
    1844:	885b      	ldrh	r3, [r3, #2]
    1846:	2b01      	cmp	r3, #1
    1848:	d107      	bne.n	185a <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	685b      	ldr	r3, [r3, #4]
    184e:	2280      	movs	r2, #128	; 0x80
    1850:	02d2      	lsls	r2, r2, #11
    1852:	431a      	orrs	r2, r3
    1854:	68fb      	ldr	r3, [r7, #12]
    1856:	605a      	str	r2, [r3, #4]
    1858:	e005      	b.n	1866 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	685b      	ldr	r3, [r3, #4]
    185e:	4a4b      	ldr	r2, [pc, #300]	; (198c <_i2c_master_read_packet+0x264>)
    1860:	401a      	ands	r2, r3
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1866:	2317      	movs	r3, #23
    1868:	18fb      	adds	r3, r7, r3
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	2b00      	cmp	r3, #0
    186e:	d107      	bne.n	1880 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1870:	2317      	movs	r3, #23
    1872:	18fc      	adds	r4, r7, r3
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	0018      	movs	r0, r3
    1878:	4b46      	ldr	r3, [pc, #280]	; (1994 <_i2c_master_read_packet+0x26c>)
    187a:	4798      	blx	r3
    187c:	0003      	movs	r3, r0
    187e:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1880:	2317      	movs	r3, #23
    1882:	18fb      	adds	r3, r7, r3
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	2b00      	cmp	r3, #0
    1888:	d000      	beq.n	188c <_i2c_master_read_packet+0x164>
    188a:	e075      	b.n	1978 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    188c:	e04b      	b.n	1926 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	8b5b      	ldrh	r3, [r3, #26]
    1892:	b29b      	uxth	r3, r3
    1894:	001a      	movs	r2, r3
    1896:	2320      	movs	r3, #32
    1898:	4013      	ands	r3, r2
    189a:	d101      	bne.n	18a0 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    189c:	2341      	movs	r3, #65	; 0x41
    189e:	e06e      	b.n	197e <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	7adb      	ldrb	r3, [r3, #11]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d01e      	beq.n	18e6 <_i2c_master_read_packet+0x1be>
    18a8:	230b      	movs	r3, #11
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	2201      	movs	r2, #1
    18b0:	4053      	eors	r3, r2
    18b2:	b2db      	uxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	d004      	beq.n	18c2 <_i2c_master_read_packet+0x19a>
    18b8:	2314      	movs	r3, #20
    18ba:	18fb      	adds	r3, r7, r3
    18bc:	881b      	ldrh	r3, [r3, #0]
    18be:	2b00      	cmp	r3, #0
    18c0:	d009      	beq.n	18d6 <_i2c_master_read_packet+0x1ae>
    18c2:	230b      	movs	r3, #11
    18c4:	18fb      	adds	r3, r7, r3
    18c6:	781b      	ldrb	r3, [r3, #0]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d00c      	beq.n	18e6 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    18cc:	2314      	movs	r3, #20
    18ce:	18fb      	adds	r3, r7, r3
    18d0:	881b      	ldrh	r3, [r3, #0]
    18d2:	2b01      	cmp	r3, #1
    18d4:	d107      	bne.n	18e6 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18d6:	68fb      	ldr	r3, [r7, #12]
    18d8:	685b      	ldr	r3, [r3, #4]
    18da:	2280      	movs	r2, #128	; 0x80
    18dc:	02d2      	lsls	r2, r2, #11
    18de:	431a      	orrs	r2, r3
    18e0:	68fb      	ldr	r3, [r7, #12]
    18e2:	605a      	str	r2, [r3, #4]
    18e4:	e01a      	b.n	191c <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	0018      	movs	r0, r3
    18ea:	4b2b      	ldr	r3, [pc, #172]	; (1998 <_i2c_master_read_packet+0x270>)
    18ec:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    18ee:	683b      	ldr	r3, [r7, #0]
    18f0:	685a      	ldr	r2, [r3, #4]
    18f2:	2312      	movs	r3, #18
    18f4:	18fb      	adds	r3, r7, r3
    18f6:	881b      	ldrh	r3, [r3, #0]
    18f8:	2112      	movs	r1, #18
    18fa:	1879      	adds	r1, r7, r1
    18fc:	1c58      	adds	r0, r3, #1
    18fe:	8008      	strh	r0, [r1, #0]
    1900:	18d3      	adds	r3, r2, r3
    1902:	68fa      	ldr	r2, [r7, #12]
    1904:	2128      	movs	r1, #40	; 0x28
    1906:	5c52      	ldrb	r2, [r2, r1]
    1908:	b2d2      	uxtb	r2, r2
    190a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    190c:	2317      	movs	r3, #23
    190e:	18fc      	adds	r4, r7, r3
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	0018      	movs	r0, r3
    1914:	4b1e      	ldr	r3, [pc, #120]	; (1990 <_i2c_master_read_packet+0x268>)
    1916:	4798      	blx	r3
    1918:	0003      	movs	r3, r0
    191a:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    191c:	2317      	movs	r3, #23
    191e:	18fb      	adds	r3, r7, r3
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d109      	bne.n	193a <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    1926:	2314      	movs	r3, #20
    1928:	18fb      	adds	r3, r7, r3
    192a:	881b      	ldrh	r3, [r3, #0]
    192c:	2214      	movs	r2, #20
    192e:	18ba      	adds	r2, r7, r2
    1930:	1e59      	subs	r1, r3, #1
    1932:	8011      	strh	r1, [r2, #0]
    1934:	2b00      	cmp	r3, #0
    1936:	d1aa      	bne.n	188e <_i2c_master_read_packet+0x166>
    1938:	e000      	b.n	193c <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    193a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	7a9b      	ldrb	r3, [r3, #10]
    1940:	2b00      	cmp	r3, #0
    1942:	d00a      	beq.n	195a <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	0018      	movs	r0, r3
    1948:	4b13      	ldr	r3, [pc, #76]	; (1998 <_i2c_master_read_packet+0x270>)
    194a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	685b      	ldr	r3, [r3, #4]
    1950:	22c0      	movs	r2, #192	; 0xc0
    1952:	0292      	lsls	r2, r2, #10
    1954:	431a      	orrs	r2, r3
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	0018      	movs	r0, r3
    195e:	4b0e      	ldr	r3, [pc, #56]	; (1998 <_i2c_master_read_packet+0x270>)
    1960:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1962:	683b      	ldr	r3, [r7, #0]
    1964:	685a      	ldr	r2, [r3, #4]
    1966:	2312      	movs	r3, #18
    1968:	18fb      	adds	r3, r7, r3
    196a:	881b      	ldrh	r3, [r3, #0]
    196c:	18d3      	adds	r3, r2, r3
    196e:	68fa      	ldr	r2, [r7, #12]
    1970:	2128      	movs	r1, #40	; 0x28
    1972:	5c52      	ldrb	r2, [r2, r1]
    1974:	b2d2      	uxtb	r2, r2
    1976:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1978:	2317      	movs	r3, #23
    197a:	18fb      	adds	r3, r7, r3
    197c:	781b      	ldrb	r3, [r3, #0]
}
    197e:	0018      	movs	r0, r3
    1980:	46bd      	mov	sp, r7
    1982:	b007      	add	sp, #28
    1984:	bd90      	pop	{r4, r7, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000016d5 	.word	0x000016d5
    198c:	fffbffff 	.word	0xfffbffff
    1990:	00001675 	.word	0x00001675
    1994:	00001615 	.word	0x00001615
    1998:	000010c9 	.word	0x000010c9

0000199c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    199c:	b580      	push	{r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	8b9b      	ldrh	r3, [r3, #28]
    19aa:	b29b      	uxth	r3, r3
    19ac:	2b00      	cmp	r3, #0
    19ae:	d001      	beq.n	19b4 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    19b0:	2305      	movs	r3, #5
    19b2:	e00c      	b.n	19ce <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	2201      	movs	r2, #1
    19b8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	2201      	movs	r2, #1
    19be:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    19c0:	683a      	ldr	r2, [r7, #0]
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	0011      	movs	r1, r2
    19c6:	0018      	movs	r0, r3
    19c8:	4b03      	ldr	r3, [pc, #12]	; (19d8 <i2c_master_read_packet_wait+0x3c>)
    19ca:	4798      	blx	r3
    19cc:	0003      	movs	r3, r0
}
    19ce:	0018      	movs	r0, r3
    19d0:	46bd      	mov	sp, r7
    19d2:	b002      	add	sp, #8
    19d4:	bd80      	pop	{r7, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	00001729 	.word	0x00001729

000019dc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19dc:	b590      	push	{r4, r7, lr}
    19de:	b087      	sub	sp, #28
    19e0:	af00      	add	r7, sp, #0
    19e2:	6078      	str	r0, [r7, #4]
    19e4:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    19ec:	2314      	movs	r3, #20
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	683a      	ldr	r2, [r7, #0]
    19f2:	8852      	ldrh	r2, [r2, #2]
    19f4:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	0018      	movs	r0, r3
    19fa:	4b51      	ldr	r3, [pc, #324]	; (1b40 <_i2c_master_write_packet+0x164>)
    19fc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    19fe:	683b      	ldr	r3, [r7, #0]
    1a00:	7a5b      	ldrb	r3, [r3, #9]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d006      	beq.n	1a14 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1a06:	683b      	ldr	r3, [r7, #0]
    1a08:	7a9a      	ldrb	r2, [r3, #10]
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	0011      	movs	r1, r2
    1a0e:	0018      	movs	r0, r3
    1a10:	4b4c      	ldr	r3, [pc, #304]	; (1b44 <_i2c_master_write_packet+0x168>)
    1a12:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	685b      	ldr	r3, [r3, #4]
    1a18:	4a4b      	ldr	r2, [pc, #300]	; (1b48 <_i2c_master_write_packet+0x16c>)
    1a1a:	401a      	ands	r2, r3
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1a20:	683b      	ldr	r3, [r7, #0]
    1a22:	7a1b      	ldrb	r3, [r3, #8]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d00d      	beq.n	1a44 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	881b      	ldrh	r3, [r3, #0]
    1a2c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a2e:	683b      	ldr	r3, [r7, #0]
    1a30:	7a5b      	ldrb	r3, [r3, #9]
    1a32:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a34:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a36:	001a      	movs	r2, r3
    1a38:	2380      	movs	r3, #128	; 0x80
    1a3a:	021b      	lsls	r3, r3, #8
    1a3c:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	625a      	str	r2, [r3, #36]	; 0x24
    1a42:	e009      	b.n	1a58 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a44:	683b      	ldr	r3, [r7, #0]
    1a46:	881b      	ldrh	r3, [r3, #0]
    1a48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1a4a:	683b      	ldr	r3, [r7, #0]
    1a4c:	7a5b      	ldrb	r3, [r3, #9]
    1a4e:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a50:	4313      	orrs	r3, r2
    1a52:	001a      	movs	r2, r3
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1a58:	2317      	movs	r3, #23
    1a5a:	18fc      	adds	r4, r7, r3
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	0018      	movs	r0, r3
    1a60:	4b3a      	ldr	r3, [pc, #232]	; (1b4c <_i2c_master_write_packet+0x170>)
    1a62:	4798      	blx	r3
    1a64:	0003      	movs	r3, r0
    1a66:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1a68:	2317      	movs	r3, #23
    1a6a:	18fb      	adds	r3, r7, r3
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d107      	bne.n	1a82 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1a72:	2317      	movs	r3, #23
    1a74:	18fc      	adds	r4, r7, r3
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	0018      	movs	r0, r3
    1a7a:	4b35      	ldr	r3, [pc, #212]	; (1b50 <_i2c_master_write_packet+0x174>)
    1a7c:	4798      	blx	r3
    1a7e:	0003      	movs	r3, r0
    1a80:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1a82:	2317      	movs	r3, #23
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d152      	bne.n	1b32 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1a8c:	2312      	movs	r3, #18
    1a8e:	18fb      	adds	r3, r7, r3
    1a90:	2200      	movs	r2, #0
    1a92:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1a94:	e033      	b.n	1afe <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	8b5b      	ldrh	r3, [r3, #26]
    1a9a:	b29b      	uxth	r3, r3
    1a9c:	001a      	movs	r2, r3
    1a9e:	2320      	movs	r3, #32
    1aa0:	4013      	ands	r3, r2
    1aa2:	d101      	bne.n	1aa8 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1aa4:	2341      	movs	r3, #65	; 0x41
    1aa6:	e047      	b.n	1b38 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	0018      	movs	r0, r3
    1aac:	4b24      	ldr	r3, [pc, #144]	; (1b40 <_i2c_master_write_packet+0x164>)
    1aae:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1ab0:	683b      	ldr	r3, [r7, #0]
    1ab2:	685a      	ldr	r2, [r3, #4]
    1ab4:	2312      	movs	r3, #18
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	881b      	ldrh	r3, [r3, #0]
    1aba:	2112      	movs	r1, #18
    1abc:	1879      	adds	r1, r7, r1
    1abe:	1c58      	adds	r0, r3, #1
    1ac0:	8008      	strh	r0, [r1, #0]
    1ac2:	18d3      	adds	r3, r2, r3
    1ac4:	7819      	ldrb	r1, [r3, #0]
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	2228      	movs	r2, #40	; 0x28
    1aca:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1acc:	2317      	movs	r3, #23
    1ace:	18fc      	adds	r4, r7, r3
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b1d      	ldr	r3, [pc, #116]	; (1b4c <_i2c_master_write_packet+0x170>)
    1ad6:	4798      	blx	r3
    1ad8:	0003      	movs	r3, r0
    1ada:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1adc:	2317      	movs	r3, #23
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d115      	bne.n	1b12 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	8b5b      	ldrh	r3, [r3, #26]
    1aea:	b29b      	uxth	r3, r3
    1aec:	001a      	movs	r2, r3
    1aee:	2304      	movs	r3, #4
    1af0:	4013      	ands	r3, r2
    1af2:	d004      	beq.n	1afe <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1af4:	2317      	movs	r3, #23
    1af6:	18fb      	adds	r3, r7, r3
    1af8:	221e      	movs	r2, #30
    1afa:	701a      	strb	r2, [r3, #0]
				break;
    1afc:	e00a      	b.n	1b14 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    1afe:	2314      	movs	r3, #20
    1b00:	18fb      	adds	r3, r7, r3
    1b02:	881b      	ldrh	r3, [r3, #0]
    1b04:	2214      	movs	r2, #20
    1b06:	18ba      	adds	r2, r7, r2
    1b08:	1e59      	subs	r1, r3, #1
    1b0a:	8011      	strh	r1, [r2, #0]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d1c2      	bne.n	1a96 <_i2c_master_write_packet+0xba>
    1b10:	e000      	b.n	1b14 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    1b12:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	7a9b      	ldrb	r3, [r3, #10]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d00a      	beq.n	1b32 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	0018      	movs	r0, r3
    1b20:	4b07      	ldr	r3, [pc, #28]	; (1b40 <_i2c_master_write_packet+0x164>)
    1b22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	685b      	ldr	r3, [r3, #4]
    1b28:	22c0      	movs	r2, #192	; 0xc0
    1b2a:	0292      	lsls	r2, r2, #10
    1b2c:	431a      	orrs	r2, r3
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1b32:	2317      	movs	r3, #23
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	781b      	ldrb	r3, [r3, #0]
}
    1b38:	0018      	movs	r0, r3
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b007      	add	sp, #28
    1b3e:	bd90      	pop	{r4, r7, pc}
    1b40:	000010c9 	.word	0x000010c9
    1b44:	000016d5 	.word	0x000016d5
    1b48:	fffbffff 	.word	0xfffbffff
    1b4c:	00001675 	.word	0x00001675
    1b50:	00001615 	.word	0x00001615

00001b54 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b54:	b580      	push	{r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
    1b5c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	8b9b      	ldrh	r3, [r3, #28]
    1b62:	b29b      	uxth	r3, r3
    1b64:	2b00      	cmp	r3, #0
    1b66:	d001      	beq.n	1b6c <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    1b68:	2305      	movs	r3, #5
    1b6a:	e00c      	b.n	1b86 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	2201      	movs	r2, #1
    1b70:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	2201      	movs	r2, #1
    1b76:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1b78:	683a      	ldr	r2, [r7, #0]
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	0011      	movs	r1, r2
    1b7e:	0018      	movs	r0, r3
    1b80:	4b03      	ldr	r3, [pc, #12]	; (1b90 <i2c_master_write_packet_wait+0x3c>)
    1b82:	4798      	blx	r3
    1b84:	0003      	movs	r3, r0
}
    1b86:	0018      	movs	r0, r3
    1b88:	46bd      	mov	sp, r7
    1b8a:	b002      	add	sp, #8
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	000019dd 	.word	0x000019dd

00001b94 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1ba2:	68fb      	ldr	r3, [r7, #12]
    1ba4:	69db      	ldr	r3, [r3, #28]
    1ba6:	2207      	movs	r2, #7
    1ba8:	4013      	ands	r3, r2
    1baa:	1e5a      	subs	r2, r3, #1
    1bac:	4193      	sbcs	r3, r2
    1bae:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1bb0:	0018      	movs	r0, r3
    1bb2:	46bd      	mov	sp, r7
    1bb4:	b004      	add	sp, #16
    1bb6:	bd80      	pop	{r7, pc}

00001bb8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b082      	sub	sp, #8
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1bc0:	46c0      	nop			; (mov r8, r8)
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	0018      	movs	r0, r3
    1bc6:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <_i2c_master_wait_for_sync+0x20>)
    1bc8:	4798      	blx	r3
    1bca:	1e03      	subs	r3, r0, #0
    1bcc:	d1f9      	bne.n	1bc2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	46bd      	mov	sp, r7
    1bd2:	b002      	add	sp, #8
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00001b95 	.word	0x00001b95

00001bdc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	b084      	sub	sp, #16
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1bea:	68fb      	ldr	r3, [r7, #12]
    1bec:	681b      	ldr	r3, [r3, #0]
    1bee:	011b      	lsls	r3, r3, #4
    1bf0:	0fdb      	lsrs	r3, r3, #31
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	001a      	movs	r2, r3
    1bf6:	230b      	movs	r3, #11
    1bf8:	18fb      	adds	r3, r7, r3
    1bfa:	1e51      	subs	r1, r2, #1
    1bfc:	418a      	sbcs	r2, r1
    1bfe:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1c00:	2308      	movs	r3, #8
    1c02:	18fb      	adds	r3, r7, r3
    1c04:	687a      	ldr	r2, [r7, #4]
    1c06:	8b52      	ldrh	r2, [r2, #26]
    1c08:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	8b9b      	ldrh	r3, [r3, #28]
    1c0e:	b29a      	uxth	r2, r3
    1c10:	2308      	movs	r3, #8
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	2108      	movs	r1, #8
    1c16:	1879      	adds	r1, r7, r1
    1c18:	8809      	ldrh	r1, [r1, #0]
    1c1a:	1a8a      	subs	r2, r1, r2
    1c1c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	8b9b      	ldrh	r3, [r3, #28]
    1c22:	b29b      	uxth	r3, r3
    1c24:	3b01      	subs	r3, #1
    1c26:	b29a      	uxth	r2, r3
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1c2c:	230b      	movs	r3, #11
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d010      	beq.n	1c58 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	7adb      	ldrb	r3, [r3, #11]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d01c      	beq.n	1c78 <_i2c_master_read+0x9c>
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	8b9b      	ldrh	r3, [r3, #28]
    1c42:	b29b      	uxth	r3, r3
    1c44:	2b01      	cmp	r3, #1
    1c46:	d117      	bne.n	1c78 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c48:	68fb      	ldr	r3, [r7, #12]
    1c4a:	685b      	ldr	r3, [r3, #4]
    1c4c:	2280      	movs	r2, #128	; 0x80
    1c4e:	02d2      	lsls	r2, r2, #11
    1c50:	431a      	orrs	r2, r3
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	605a      	str	r2, [r3, #4]
    1c56:	e00f      	b.n	1c78 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	7adb      	ldrb	r3, [r3, #11]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d00b      	beq.n	1c78 <_i2c_master_read+0x9c>
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	8b9b      	ldrh	r3, [r3, #28]
    1c64:	b29b      	uxth	r3, r3
    1c66:	2b00      	cmp	r3, #0
    1c68:	d106      	bne.n	1c78 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c6a:	68fb      	ldr	r3, [r7, #12]
    1c6c:	685b      	ldr	r3, [r3, #4]
    1c6e:	2280      	movs	r2, #128	; 0x80
    1c70:	02d2      	lsls	r2, r2, #11
    1c72:	431a      	orrs	r2, r3
    1c74:	68fb      	ldr	r3, [r7, #12]
    1c76:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	8b9b      	ldrh	r3, [r3, #28]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d10e      	bne.n	1ca0 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	7a9b      	ldrb	r3, [r3, #10]
    1c86:	2b00      	cmp	r3, #0
    1c88:	d00a      	beq.n	1ca0 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	0018      	movs	r0, r3
    1c8e:	4b0e      	ldr	r3, [pc, #56]	; (1cc8 <_i2c_master_read+0xec>)
    1c90:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c92:	68fb      	ldr	r3, [r7, #12]
    1c94:	685b      	ldr	r3, [r3, #4]
    1c96:	22c0      	movs	r2, #192	; 0xc0
    1c98:	0292      	lsls	r2, r2, #10
    1c9a:	431a      	orrs	r2, r3
    1c9c:	68fb      	ldr	r3, [r7, #12]
    1c9e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <_i2c_master_read+0xec>)
    1ca6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	6a1a      	ldr	r2, [r3, #32]
    1cac:	2308      	movs	r3, #8
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	881b      	ldrh	r3, [r3, #0]
    1cb2:	18d3      	adds	r3, r2, r3
    1cb4:	68fa      	ldr	r2, [r7, #12]
    1cb6:	2128      	movs	r1, #40	; 0x28
    1cb8:	5c52      	ldrb	r2, [r2, r1]
    1cba:	b2d2      	uxtb	r2, r2
    1cbc:	701a      	strb	r2, [r3, #0]
}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	46bd      	mov	sp, r7
    1cc2:	b004      	add	sp, #16
    1cc4:	bd80      	pop	{r7, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	00001bb9 	.word	0x00001bb9

00001ccc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b084      	sub	sp, #16
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	681b      	ldr	r3, [r3, #0]
    1cd8:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	8b5b      	ldrh	r3, [r3, #26]
    1cde:	b29b      	uxth	r3, r3
    1ce0:	001a      	movs	r2, r3
    1ce2:	2304      	movs	r3, #4
    1ce4:	4013      	ands	r3, r2
    1ce6:	d004      	beq.n	1cf2 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	2225      	movs	r2, #37	; 0x25
    1cec:	211e      	movs	r1, #30
    1cee:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1cf0:	e024      	b.n	1d3c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1cf2:	230a      	movs	r3, #10
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	687a      	ldr	r2, [r7, #4]
    1cf8:	8b52      	ldrh	r2, [r2, #26]
    1cfa:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	8b9b      	ldrh	r3, [r3, #28]
    1d00:	b29a      	uxth	r2, r3
    1d02:	230a      	movs	r3, #10
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	210a      	movs	r1, #10
    1d08:	1879      	adds	r1, r7, r1
    1d0a:	8809      	ldrh	r1, [r1, #0]
    1d0c:	1a8a      	subs	r2, r1, r2
    1d0e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	8b9b      	ldrh	r3, [r3, #28]
    1d14:	b29b      	uxth	r3, r3
    1d16:	3b01      	subs	r3, #1
    1d18:	b29a      	uxth	r2, r3
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	0018      	movs	r0, r3
    1d22:	4b08      	ldr	r3, [pc, #32]	; (1d44 <_i2c_master_write+0x78>)
    1d24:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	6a1a      	ldr	r2, [r3, #32]
    1d2a:	230a      	movs	r3, #10
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	881b      	ldrh	r3, [r3, #0]
    1d30:	18d3      	adds	r3, r2, r3
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	b2d9      	uxtb	r1, r3
    1d36:	68fb      	ldr	r3, [r7, #12]
    1d38:	2228      	movs	r2, #40	; 0x28
    1d3a:	5499      	strb	r1, [r3, r2]
}
    1d3c:	46bd      	mov	sp, r7
    1d3e:	b004      	add	sp, #16
    1d40:	bd80      	pop	{r7, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	00001bb9 	.word	0x00001bb9

00001d48 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	b084      	sub	sp, #16
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1d56:	68fb      	ldr	r3, [r7, #12]
    1d58:	7e1b      	ldrb	r3, [r3, #24]
    1d5a:	b2db      	uxtb	r3, r3
    1d5c:	001a      	movs	r2, r3
    1d5e:	2301      	movs	r3, #1
    1d60:	4013      	ands	r3, r2
    1d62:	d02b      	beq.n	1dbc <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1d64:	68fb      	ldr	r3, [r7, #12]
    1d66:	2201      	movs	r2, #1
    1d68:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1d6a:	68fb      	ldr	r3, [r7, #12]
    1d6c:	8b5b      	ldrh	r3, [r3, #26]
    1d6e:	b29b      	uxth	r3, r3
    1d70:	001a      	movs	r2, r3
    1d72:	2302      	movs	r3, #2
    1d74:	4013      	ands	r3, r2
    1d76:	d004      	beq.n	1d82 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	2225      	movs	r2, #37	; 0x25
    1d7c:	2141      	movs	r1, #65	; 0x41
    1d7e:	5499      	strb	r1, [r3, r2]
    1d80:	e01c      	b.n	1dbc <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	8b5b      	ldrh	r3, [r3, #26]
    1d86:	b29b      	uxth	r3, r3
    1d88:	001a      	movs	r2, r3
    1d8a:	2304      	movs	r3, #4
    1d8c:	4013      	ands	r3, r2
    1d8e:	d015      	beq.n	1dbc <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	2225      	movs	r2, #37	; 0x25
    1d94:	2118      	movs	r1, #24
    1d96:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	2200      	movs	r2, #0
    1d9c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	7a9b      	ldrb	r3, [r3, #10]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d00a      	beq.n	1dbc <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	0018      	movs	r0, r3
    1daa:	4b13      	ldr	r3, [pc, #76]	; (1df8 <_i2c_master_async_address_response+0xb0>)
    1dac:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	685b      	ldr	r3, [r3, #4]
    1db2:	22c0      	movs	r2, #192	; 0xc0
    1db4:	0292      	lsls	r2, r2, #10
    1db6:	431a      	orrs	r2, r3
    1db8:	68fb      	ldr	r3, [r7, #12]
    1dba:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	8b9b      	ldrh	r3, [r3, #28]
    1dc0:	b29a      	uxth	r2, r3
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	2225      	movs	r2, #37	; 0x25
    1dca:	5c9b      	ldrb	r3, [r3, r2]
    1dcc:	b2db      	uxtb	r3, r3
    1dce:	2b05      	cmp	r3, #5
    1dd0:	d10e      	bne.n	1df0 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	2224      	movs	r2, #36	; 0x24
    1dd6:	5c9b      	ldrb	r3, [r3, r2]
    1dd8:	b2db      	uxtb	r3, r3
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d104      	bne.n	1de8 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	0018      	movs	r0, r3
    1de2:	4b06      	ldr	r3, [pc, #24]	; (1dfc <_i2c_master_async_address_response+0xb4>)
    1de4:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1de6:	e003      	b.n	1df0 <_i2c_master_async_address_response+0xa8>
	if (module->status == STATUS_BUSY) {
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	0018      	movs	r0, r3
    1dec:	4b04      	ldr	r3, [pc, #16]	; (1e00 <_i2c_master_async_address_response+0xb8>)
    1dee:	4798      	blx	r3
		}
	}
}
    1df0:	46c0      	nop			; (mov r8, r8)
    1df2:	46bd      	mov	sp, r7
    1df4:	b004      	add	sp, #16
    1df6:	bd80      	pop	{r7, pc}
    1df8:	00001bb9 	.word	0x00001bb9
    1dfc:	00001ccd 	.word	0x00001ccd
    1e00:	00001bdd 	.word	0x00001bdd

00001e04 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b086      	sub	sp, #24
    1e08:	af00      	add	r7, sp, #0
    1e0a:	0002      	movs	r2, r0
    1e0c:	1dfb      	adds	r3, r7, #7
    1e0e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1e10:	1dfb      	adds	r3, r7, #7
    1e12:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1e14:	4b93      	ldr	r3, [pc, #588]	; (2064 <STACK_SIZE+0x64>)
    1e16:	0092      	lsls	r2, r2, #2
    1e18:	58d3      	ldr	r3, [r2, r3]
    1e1a:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e1c:	697b      	ldr	r3, [r7, #20]
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1e22:	693b      	ldr	r3, [r7, #16]
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	011b      	lsls	r3, r3, #4
    1e28:	0fdb      	lsrs	r3, r3, #31
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	001a      	movs	r2, r3
    1e2e:	230f      	movs	r3, #15
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	1e51      	subs	r1, r2, #1
    1e34:	418a      	sbcs	r2, r1
    1e36:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1e38:	230e      	movs	r3, #14
    1e3a:	18fb      	adds	r3, r7, r3
    1e3c:	697a      	ldr	r2, [r7, #20]
    1e3e:	7e52      	ldrb	r2, [r2, #25]
    1e40:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1e42:	697b      	ldr	r3, [r7, #20]
    1e44:	7e1b      	ldrb	r3, [r3, #24]
    1e46:	b2da      	uxtb	r2, r3
    1e48:	230e      	movs	r3, #14
    1e4a:	18fb      	adds	r3, r7, r3
    1e4c:	210e      	movs	r1, #14
    1e4e:	1879      	adds	r1, r7, r1
    1e50:	7809      	ldrb	r1, [r1, #0]
    1e52:	400a      	ands	r2, r1
    1e54:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1e56:	697b      	ldr	r3, [r7, #20]
    1e58:	8b5b      	ldrh	r3, [r3, #26]
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d109      	bne.n	1e74 <_i2c_master_interrupt_handler+0x70>
    1e60:	697b      	ldr	r3, [r7, #20]
    1e62:	8b9b      	ldrh	r3, [r3, #28]
    1e64:	b29b      	uxth	r3, r3
    1e66:	2b00      	cmp	r3, #0
    1e68:	d004      	beq.n	1e74 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1e6a:	697b      	ldr	r3, [r7, #20]
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b7e      	ldr	r3, [pc, #504]	; (2068 <STACK_SIZE+0x68>)
    1e70:	4798      	blx	r3
    1e72:	e070      	b.n	1f56 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e74:	697b      	ldr	r3, [r7, #20]
    1e76:	8b5b      	ldrh	r3, [r3, #26]
    1e78:	b29b      	uxth	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d039      	beq.n	1ef2 <_i2c_master_interrupt_handler+0xee>
    1e7e:	697b      	ldr	r3, [r7, #20]
    1e80:	8b9b      	ldrh	r3, [r3, #28]
    1e82:	b29b      	uxth	r3, r3
    1e84:	2b00      	cmp	r3, #0
    1e86:	d134      	bne.n	1ef2 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1e88:	697b      	ldr	r3, [r7, #20]
    1e8a:	2225      	movs	r2, #37	; 0x25
    1e8c:	5c9b      	ldrb	r3, [r3, r2]
    1e8e:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e90:	2b05      	cmp	r3, #5
    1e92:	d12e      	bne.n	1ef2 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1e94:	697b      	ldr	r3, [r7, #20]
    1e96:	2224      	movs	r2, #36	; 0x24
    1e98:	5c9b      	ldrb	r3, [r3, r2]
    1e9a:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d128      	bne.n	1ef2 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1ea0:	693b      	ldr	r3, [r7, #16]
    1ea2:	2203      	movs	r2, #3
    1ea4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1ea6:	697b      	ldr	r3, [r7, #20]
    1ea8:	2200      	movs	r2, #0
    1eaa:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1eac:	697b      	ldr	r3, [r7, #20]
    1eae:	2225      	movs	r2, #37	; 0x25
    1eb0:	2100      	movs	r1, #0
    1eb2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1eb4:	697b      	ldr	r3, [r7, #20]
    1eb6:	7a9b      	ldrb	r3, [r3, #10]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d00b      	beq.n	1ed4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1ebc:	697b      	ldr	r3, [r7, #20]
    1ebe:	0018      	movs	r0, r3
    1ec0:	4b6a      	ldr	r3, [pc, #424]	; (206c <STACK_SIZE+0x6c>)
    1ec2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1ec4:	693b      	ldr	r3, [r7, #16]
    1ec6:	685b      	ldr	r3, [r3, #4]
    1ec8:	22c0      	movs	r2, #192	; 0xc0
    1eca:	0292      	lsls	r2, r2, #10
    1ecc:	431a      	orrs	r2, r3
    1ece:	693b      	ldr	r3, [r7, #16]
    1ed0:	605a      	str	r2, [r3, #4]
    1ed2:	e002      	b.n	1eda <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1ed4:	693b      	ldr	r3, [r7, #16]
    1ed6:	2201      	movs	r2, #1
    1ed8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1eda:	230e      	movs	r3, #14
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	2201      	movs	r2, #1
    1ee2:	4013      	ands	r3, r2
    1ee4:	d037      	beq.n	1f56 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ee6:	697b      	ldr	r3, [r7, #20]
    1ee8:	68db      	ldr	r3, [r3, #12]
    1eea:	697a      	ldr	r2, [r7, #20]
    1eec:	0010      	movs	r0, r2
    1eee:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1ef0:	e031      	b.n	1f56 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1ef2:	697b      	ldr	r3, [r7, #20]
    1ef4:	8b5b      	ldrh	r3, [r3, #26]
    1ef6:	b29b      	uxth	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d02c      	beq.n	1f56 <_i2c_master_interrupt_handler+0x152>
    1efc:	697b      	ldr	r3, [r7, #20]
    1efe:	8b9b      	ldrh	r3, [r3, #28]
    1f00:	b29b      	uxth	r3, r3
    1f02:	2b00      	cmp	r3, #0
    1f04:	d027      	beq.n	1f56 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f06:	693b      	ldr	r3, [r7, #16]
    1f08:	8b5b      	ldrh	r3, [r3, #26]
    1f0a:	b29b      	uxth	r3, r3
    1f0c:	001a      	movs	r2, r3
    1f0e:	2320      	movs	r3, #32
    1f10:	4013      	ands	r3, r2
    1f12:	d111      	bne.n	1f38 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f14:	230f      	movs	r3, #15
    1f16:	18fb      	adds	r3, r7, r3
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	2201      	movs	r2, #1
    1f1c:	4053      	eors	r3, r2
    1f1e:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f20:	2b00      	cmp	r3, #0
    1f22:	d104      	bne.n	1f2e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f24:	697b      	ldr	r3, [r7, #20]
    1f26:	8b9b      	ldrh	r3, [r3, #28]
    1f28:	b29b      	uxth	r3, r3
    1f2a:	2b01      	cmp	r3, #1
    1f2c:	d004      	beq.n	1f38 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2225      	movs	r2, #37	; 0x25
    1f32:	2141      	movs	r1, #65	; 0x41
    1f34:	5499      	strb	r1, [r3, r2]
    1f36:	e00e      	b.n	1f56 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1f38:	697b      	ldr	r3, [r7, #20]
    1f3a:	2224      	movs	r2, #36	; 0x24
    1f3c:	5c9b      	ldrb	r3, [r3, r2]
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	2b00      	cmp	r3, #0
    1f42:	d104      	bne.n	1f4e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1f44:	697b      	ldr	r3, [r7, #20]
    1f46:	0018      	movs	r0, r3
    1f48:	4b49      	ldr	r3, [pc, #292]	; (2070 <STACK_SIZE+0x70>)
    1f4a:	4798      	blx	r3
    1f4c:	e003      	b.n	1f56 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1f4e:	697b      	ldr	r3, [r7, #20]
    1f50:	0018      	movs	r0, r3
    1f52:	4b48      	ldr	r3, [pc, #288]	; (2074 <STACK_SIZE+0x74>)
    1f54:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f56:	697b      	ldr	r3, [r7, #20]
    1f58:	8b5b      	ldrh	r3, [r3, #26]
    1f5a:	b29b      	uxth	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d047      	beq.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
    1f60:	697b      	ldr	r3, [r7, #20]
    1f62:	8b9b      	ldrh	r3, [r3, #28]
    1f64:	b29b      	uxth	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	d142      	bne.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1f6a:	697b      	ldr	r3, [r7, #20]
    1f6c:	2225      	movs	r2, #37	; 0x25
    1f6e:	5c9b      	ldrb	r3, [r3, r2]
    1f70:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f72:	2b05      	cmp	r3, #5
    1f74:	d13c      	bne.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1f76:	697b      	ldr	r3, [r7, #20]
    1f78:	2224      	movs	r2, #36	; 0x24
    1f7a:	5c9b      	ldrb	r3, [r3, r2]
    1f7c:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    1f7e:	2b01      	cmp	r3, #1
    1f80:	d136      	bne.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1f82:	693b      	ldr	r3, [r7, #16]
    1f84:	7e1b      	ldrb	r3, [r3, #24]
    1f86:	b2db      	uxtb	r3, r3
    1f88:	001a      	movs	r2, r3
    1f8a:	2302      	movs	r3, #2
    1f8c:	4013      	ands	r3, r2
    1f8e:	d002      	beq.n	1f96 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f90:	693b      	ldr	r3, [r7, #16]
    1f92:	2202      	movs	r2, #2
    1f94:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1f96:	693b      	ldr	r3, [r7, #16]
    1f98:	2203      	movs	r2, #3
    1f9a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1f9c:	697b      	ldr	r3, [r7, #20]
    1f9e:	2200      	movs	r2, #0
    1fa0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1fa2:	697b      	ldr	r3, [r7, #20]
    1fa4:	2225      	movs	r2, #37	; 0x25
    1fa6:	2100      	movs	r1, #0
    1fa8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1faa:	230e      	movs	r3, #14
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	2202      	movs	r2, #2
    1fb2:	4013      	ands	r3, r2
    1fb4:	d00b      	beq.n	1fce <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1fb6:	697b      	ldr	r3, [r7, #20]
    1fb8:	2224      	movs	r2, #36	; 0x24
    1fba:	5c9b      	ldrb	r3, [r3, r2]
    1fbc:	b2db      	uxtb	r3, r3
    1fbe:	2b01      	cmp	r3, #1
    1fc0:	d105      	bne.n	1fce <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1fc2:	697b      	ldr	r3, [r7, #20]
    1fc4:	691b      	ldr	r3, [r3, #16]
    1fc6:	697a      	ldr	r2, [r7, #20]
    1fc8:	0010      	movs	r0, r2
    1fca:	4798      	blx	r3
    1fcc:	e010      	b.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1fce:	230e      	movs	r3, #14
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	2201      	movs	r2, #1
    1fd6:	4013      	ands	r3, r2
    1fd8:	d00a      	beq.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1fda:	697b      	ldr	r3, [r7, #20]
    1fdc:	2224      	movs	r2, #36	; 0x24
    1fde:	5c9b      	ldrb	r3, [r3, r2]
    1fe0:	b2db      	uxtb	r3, r3
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d104      	bne.n	1ff0 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1fe6:	697b      	ldr	r3, [r7, #20]
    1fe8:	68db      	ldr	r3, [r3, #12]
    1fea:	697a      	ldr	r2, [r7, #20]
    1fec:	0010      	movs	r0, r2
    1fee:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1ff0:	697b      	ldr	r3, [r7, #20]
    1ff2:	2225      	movs	r2, #37	; 0x25
    1ff4:	5c9b      	ldrb	r3, [r3, r2]
    1ff6:	b2db      	uxtb	r3, r3
    1ff8:	2b05      	cmp	r3, #5
    1ffa:	d02e      	beq.n	205a <STACK_SIZE+0x5a>
    1ffc:	697b      	ldr	r3, [r7, #20]
    1ffe:	2225      	movs	r2, #37	; 0x25
    2000:	5c9b      	ldrb	r3, [r3, r2]
    2002:	b2db      	uxtb	r3, r3
    2004:	2b00      	cmp	r3, #0
    2006:	d028      	beq.n	205a <STACK_SIZE+0x5a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    2008:	693b      	ldr	r3, [r7, #16]
    200a:	2203      	movs	r2, #3
    200c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    200e:	697b      	ldr	r3, [r7, #20]
    2010:	2200      	movs	r2, #0
    2012:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	2200      	movs	r2, #0
    2018:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    201a:	697b      	ldr	r3, [r7, #20]
    201c:	2225      	movs	r2, #37	; 0x25
    201e:	5c9b      	ldrb	r3, [r3, r2]
    2020:	b2db      	uxtb	r3, r3
    2022:	2b41      	cmp	r3, #65	; 0x41
    2024:	d00e      	beq.n	2044 <STACK_SIZE+0x44>
				module->send_stop) {
    2026:	697b      	ldr	r3, [r7, #20]
    2028:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    202a:	2b00      	cmp	r3, #0
    202c:	d00a      	beq.n	2044 <STACK_SIZE+0x44>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    202e:	697b      	ldr	r3, [r7, #20]
    2030:	0018      	movs	r0, r3
    2032:	4b0e      	ldr	r3, [pc, #56]	; (206c <STACK_SIZE+0x6c>)
    2034:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    2036:	693b      	ldr	r3, [r7, #16]
    2038:	685b      	ldr	r3, [r3, #4]
    203a:	22e0      	movs	r2, #224	; 0xe0
    203c:	02d2      	lsls	r2, r2, #11
    203e:	431a      	orrs	r2, r3
    2040:	693b      	ldr	r3, [r7, #16]
    2042:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    2044:	230e      	movs	r3, #14
    2046:	18fb      	adds	r3, r7, r3
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	2204      	movs	r2, #4
    204c:	4013      	ands	r3, r2
    204e:	d004      	beq.n	205a <STACK_SIZE+0x5a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2050:	697b      	ldr	r3, [r7, #20]
    2052:	695b      	ldr	r3, [r3, #20]
    2054:	697a      	ldr	r2, [r7, #20]
    2056:	0010      	movs	r0, r2
    2058:	4798      	blx	r3
		}
	}
}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46bd      	mov	sp, r7
    205e:	b006      	add	sp, #24
    2060:	bd80      	pop	{r7, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	200000f8 	.word	0x200000f8
    2068:	00001d49 	.word	0x00001d49
    206c:	00001bb9 	.word	0x00001bb9
    2070:	00001ccd 	.word	0x00001ccd
    2074:	00001bdd 	.word	0x00001bdd

00002078 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	2200      	movs	r2, #0
    2084:	701a      	strb	r2, [r3, #0]
}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	46bd      	mov	sp, r7
    208a:	b002      	add	sp, #8
    208c:	bd80      	pop	{r7, pc}
    208e:	46c0      	nop			; (mov r8, r8)

00002090 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2090:	b580      	push	{r7, lr}
    2092:	b082      	sub	sp, #8
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	6039      	str	r1, [r7, #0]
    209a:	1dfb      	adds	r3, r7, #7
    209c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    209e:	1dfb      	adds	r3, r7, #7
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	2b01      	cmp	r3, #1
    20a4:	d00a      	beq.n	20bc <system_apb_clock_set_mask+0x2c>
    20a6:	2b02      	cmp	r3, #2
    20a8:	d00f      	beq.n	20ca <system_apb_clock_set_mask+0x3a>
    20aa:	2b00      	cmp	r3, #0
    20ac:	d114      	bne.n	20d8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20b0:	4a0d      	ldr	r2, [pc, #52]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20b2:	6991      	ldr	r1, [r2, #24]
    20b4:	683a      	ldr	r2, [r7, #0]
    20b6:	430a      	orrs	r2, r1
    20b8:	619a      	str	r2, [r3, #24]
			break;
    20ba:	e00f      	b.n	20dc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    20bc:	4b0a      	ldr	r3, [pc, #40]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20be:	4a0a      	ldr	r2, [pc, #40]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20c0:	69d1      	ldr	r1, [r2, #28]
    20c2:	683a      	ldr	r2, [r7, #0]
    20c4:	430a      	orrs	r2, r1
    20c6:	61da      	str	r2, [r3, #28]
			break;
    20c8:	e008      	b.n	20dc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20ca:	4b07      	ldr	r3, [pc, #28]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20cc:	4a06      	ldr	r2, [pc, #24]	; (20e8 <system_apb_clock_set_mask+0x58>)
    20ce:	6a11      	ldr	r1, [r2, #32]
    20d0:	683a      	ldr	r2, [r7, #0]
    20d2:	430a      	orrs	r2, r1
    20d4:	621a      	str	r2, [r3, #32]
			break;
    20d6:	e001      	b.n	20dc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    20d8:	2317      	movs	r3, #23
    20da:	e000      	b.n	20de <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    20dc:	2300      	movs	r3, #0
}
    20de:	0018      	movs	r0, r3
    20e0:	46bd      	mov	sp, r7
    20e2:	b002      	add	sp, #8
    20e4:	bd80      	pop	{r7, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	40000400 	.word	0x40000400

000020ec <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b082      	sub	sp, #8
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	2280      	movs	r2, #128	; 0x80
    20f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	2200      	movs	r2, #0
    20fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	2201      	movs	r2, #1
    2104:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	2200      	movs	r2, #0
    210a:	70da      	strb	r2, [r3, #3]
}
    210c:	46c0      	nop			; (mov r8, r8)
    210e:	46bd      	mov	sp, r7
    2110:	b002      	add	sp, #8
    2112:	bd80      	pop	{r7, pc}

00002114 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    2114:	b580      	push	{r7, lr}
    2116:	b084      	sub	sp, #16
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    211c:	2300      	movs	r3, #0
    211e:	60fb      	str	r3, [r7, #12]
    2120:	e00c      	b.n	213c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    2122:	4b0a      	ldr	r3, [pc, #40]	; (214c <_tcc_get_inst_index+0x38>)
    2124:	68fa      	ldr	r2, [r7, #12]
    2126:	0092      	lsls	r2, r2, #2
    2128:	58d2      	ldr	r2, [r2, r3]
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	429a      	cmp	r2, r3
    212e:	d102      	bne.n	2136 <_tcc_get_inst_index+0x22>
			return i;
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	b2db      	uxtb	r3, r3
    2134:	e006      	b.n	2144 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	3301      	adds	r3, #1
    213a:	60fb      	str	r3, [r7, #12]
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	2b02      	cmp	r3, #2
    2140:	d9ef      	bls.n	2122 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2142:	2300      	movs	r3, #0
}
    2144:	0018      	movs	r0, r3
    2146:	46bd      	mov	sp, r7
    2148:	b004      	add	sp, #16
    214a:	bd80      	pop	{r7, pc}
    214c:	00008e04 	.word	0x00008e04

00002150 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2150:	b590      	push	{r4, r7, lr}
    2152:	b085      	sub	sp, #20
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
    2158:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    215a:	230f      	movs	r3, #15
    215c:	18fc      	adds	r4, r7, r3
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	0018      	movs	r0, r3
    2162:	4bad      	ldr	r3, [pc, #692]	; (2418 <tcc_get_config_defaults+0x2c8>)
    2164:	4798      	blx	r3
    2166:	0003      	movs	r3, r0
    2168:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	2200      	movs	r2, #0
    216e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2170:	230f      	movs	r3, #15
    2172:	18fb      	adds	r3, r7, r3
    2174:	781a      	ldrb	r2, [r3, #0]
    2176:	4ba9      	ldr	r3, [pc, #676]	; (241c <tcc_get_config_defaults+0x2cc>)
    2178:	0092      	lsls	r2, r2, #2
    217a:	58d2      	ldr	r2, [r2, r3]
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    2180:	687b      	ldr	r3, [r7, #4]
    2182:	2200      	movs	r2, #0
    2184:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	2200      	movs	r2, #0
    218a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	2200      	movs	r2, #0
    2190:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	2200      	movs	r2, #0
    2196:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	2200      	movs	r2, #0
    219c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	2200      	movs	r2, #0
    21a2:	61da      	str	r2, [r3, #28]
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	2200      	movs	r2, #0
    21a8:	621a      	str	r2, [r3, #32]
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2200      	movs	r2, #0
    21ae:	625a      	str	r2, [r3, #36]	; 0x24
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2200      	movs	r2, #0
    21b4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	2200      	movs	r2, #0
    21ba:	751a      	strb	r2, [r3, #20]
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2200      	movs	r2, #0
    21c0:	755a      	strb	r2, [r3, #21]
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	2200      	movs	r2, #0
    21c6:	759a      	strb	r2, [r3, #22]
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2200      	movs	r2, #0
    21cc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	2200      	movs	r2, #0
    21d2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	2200      	movs	r2, #0
    21d8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	2200      	movs	r2, #0
    21de:	741a      	strb	r2, [r3, #16]
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	2200      	movs	r2, #0
    21e4:	745a      	strb	r2, [r3, #17]
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	2200      	movs	r2, #0
    21ea:	749a      	strb	r2, [r3, #18]
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	2200      	movs	r2, #0
    21f0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	222c      	movs	r2, #44	; 0x2c
    21f6:	2100      	movs	r1, #0
    21f8:	5499      	strb	r1, [r3, r2]
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	222d      	movs	r2, #45	; 0x2d
    21fe:	2100      	movs	r1, #0
    2200:	5499      	strb	r1, [r3, r2]
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	222e      	movs	r2, #46	; 0x2e
    2206:	2100      	movs	r1, #0
    2208:	5499      	strb	r1, [r3, r2]
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	222f      	movs	r2, #47	; 0x2f
    220e:	2100      	movs	r1, #0
    2210:	5499      	strb	r1, [r3, r2]
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	2230      	movs	r2, #48	; 0x30
    2216:	2100      	movs	r1, #0
    2218:	5499      	strb	r1, [r3, r2]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2231      	movs	r2, #49	; 0x31
    221e:	2100      	movs	r1, #0
    2220:	5499      	strb	r1, [r3, r2]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	2232      	movs	r2, #50	; 0x32
    2226:	2100      	movs	r1, #0
    2228:	5499      	strb	r1, [r3, r2]
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2233      	movs	r2, #51	; 0x33
    222e:	2100      	movs	r1, #0
    2230:	5499      	strb	r1, [r3, r2]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2234      	movs	r2, #52	; 0x34
    2236:	2100      	movs	r1, #0
    2238:	5499      	strb	r1, [r3, r2]
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	2235      	movs	r2, #53	; 0x35
    223e:	2100      	movs	r1, #0
    2240:	5499      	strb	r1, [r3, r2]
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	2236      	movs	r2, #54	; 0x36
    2246:	2100      	movs	r1, #0
    2248:	5499      	strb	r1, [r3, r2]
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2237      	movs	r2, #55	; 0x37
    224e:	2100      	movs	r1, #0
    2250:	5499      	strb	r1, [r3, r2]
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	2238      	movs	r2, #56	; 0x38
    2256:	2100      	movs	r1, #0
    2258:	5499      	strb	r1, [r3, r2]
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	2239      	movs	r2, #57	; 0x39
    225e:	2100      	movs	r1, #0
    2260:	5499      	strb	r1, [r3, r2]
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	223a      	movs	r2, #58	; 0x3a
    2266:	2100      	movs	r1, #0
    2268:	5499      	strb	r1, [r3, r2]
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	223b      	movs	r2, #59	; 0x3b
    226e:	2100      	movs	r1, #0
    2270:	5499      	strb	r1, [r3, r2]
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	223c      	movs	r2, #60	; 0x3c
    2276:	2100      	movs	r1, #0
    2278:	5499      	strb	r1, [r3, r2]
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	223d      	movs	r2, #61	; 0x3d
    227e:	2100      	movs	r1, #0
    2280:	5499      	strb	r1, [r3, r2]
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	223e      	movs	r2, #62	; 0x3e
    2286:	2100      	movs	r1, #0
    2288:	5499      	strb	r1, [r3, r2]
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	223f      	movs	r2, #63	; 0x3f
    228e:	2100      	movs	r1, #0
    2290:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	2240      	movs	r2, #64	; 0x40
    2296:	2100      	movs	r1, #0
    2298:	5499      	strb	r1, [r3, r2]
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	2241      	movs	r2, #65	; 0x41
    229e:	2100      	movs	r1, #0
    22a0:	5499      	strb	r1, [r3, r2]
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	2242      	movs	r2, #66	; 0x42
    22a6:	2100      	movs	r1, #0
    22a8:	5499      	strb	r1, [r3, r2]
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	2243      	movs	r2, #67	; 0x43
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	2244      	movs	r2, #68	; 0x44
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	2245      	movs	r2, #69	; 0x45
    22be:	2100      	movs	r1, #0
    22c0:	5499      	strb	r1, [r3, r2]
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	2246      	movs	r2, #70	; 0x46
    22c6:	2100      	movs	r1, #0
    22c8:	5499      	strb	r1, [r3, r2]
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	2247      	movs	r2, #71	; 0x47
    22ce:	2100      	movs	r1, #0
    22d0:	5499      	strb	r1, [r3, r2]
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	2248      	movs	r2, #72	; 0x48
    22d6:	2100      	movs	r1, #0
    22d8:	5499      	strb	r1, [r3, r2]
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	2249      	movs	r2, #73	; 0x49
    22de:	2100      	movs	r1, #0
    22e0:	5499      	strb	r1, [r3, r2]
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	224a      	movs	r2, #74	; 0x4a
    22e6:	2100      	movs	r1, #0
    22e8:	5499      	strb	r1, [r3, r2]
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	224b      	movs	r2, #75	; 0x4b
    22ee:	2100      	movs	r1, #0
    22f0:	5499      	strb	r1, [r3, r2]
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	224c      	movs	r2, #76	; 0x4c
    22f6:	2100      	movs	r1, #0
    22f8:	5499      	strb	r1, [r3, r2]
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	224d      	movs	r2, #77	; 0x4d
    22fe:	2100      	movs	r1, #0
    2300:	5499      	strb	r1, [r3, r2]
    2302:	687b      	ldr	r3, [r7, #4]
    2304:	224e      	movs	r2, #78	; 0x4e
    2306:	2100      	movs	r1, #0
    2308:	5499      	strb	r1, [r3, r2]
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	224f      	movs	r2, #79	; 0x4f
    230e:	2100      	movs	r1, #0
    2310:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	2250      	movs	r2, #80	; 0x50
    2316:	2100      	movs	r1, #0
    2318:	5499      	strb	r1, [r3, r2]
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	2251      	movs	r2, #81	; 0x51
    231e:	2100      	movs	r1, #0
    2320:	5499      	strb	r1, [r3, r2]
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	2252      	movs	r2, #82	; 0x52
    2326:	2100      	movs	r1, #0
    2328:	5499      	strb	r1, [r3, r2]
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	2253      	movs	r2, #83	; 0x53
    232e:	2100      	movs	r1, #0
    2330:	5499      	strb	r1, [r3, r2]
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	2254      	movs	r2, #84	; 0x54
    2336:	2100      	movs	r1, #0
    2338:	5499      	strb	r1, [r3, r2]
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2255      	movs	r2, #85	; 0x55
    233e:	2100      	movs	r1, #0
    2340:	5499      	strb	r1, [r3, r2]
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	2256      	movs	r2, #86	; 0x56
    2346:	2100      	movs	r1, #0
    2348:	5499      	strb	r1, [r3, r2]
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	2257      	movs	r2, #87	; 0x57
    234e:	2100      	movs	r1, #0
    2350:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	2298      	movs	r2, #152	; 0x98
    2356:	2100      	movs	r1, #0
    2358:	5499      	strb	r1, [r3, r2]
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	2200      	movs	r2, #0
    235e:	659a      	str	r2, [r3, #88]	; 0x58
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	2200      	movs	r2, #0
    2364:	679a      	str	r2, [r3, #120]	; 0x78
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	2299      	movs	r2, #153	; 0x99
    236a:	2100      	movs	r1, #0
    236c:	5499      	strb	r1, [r3, r2]
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	2200      	movs	r2, #0
    2372:	65da      	str	r2, [r3, #92]	; 0x5c
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	2200      	movs	r2, #0
    2378:	67da      	str	r2, [r3, #124]	; 0x7c
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	229a      	movs	r2, #154	; 0x9a
    237e:	2100      	movs	r1, #0
    2380:	5499      	strb	r1, [r3, r2]
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	2200      	movs	r2, #0
    2386:	661a      	str	r2, [r3, #96]	; 0x60
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	2280      	movs	r2, #128	; 0x80
    238c:	2100      	movs	r1, #0
    238e:	5099      	str	r1, [r3, r2]
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	229b      	movs	r2, #155	; 0x9b
    2394:	2100      	movs	r1, #0
    2396:	5499      	strb	r1, [r3, r2]
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	2200      	movs	r2, #0
    239c:	665a      	str	r2, [r3, #100]	; 0x64
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	2284      	movs	r2, #132	; 0x84
    23a2:	2100      	movs	r1, #0
    23a4:	5099      	str	r1, [r3, r2]
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	229c      	movs	r2, #156	; 0x9c
    23aa:	2100      	movs	r1, #0
    23ac:	5499      	strb	r1, [r3, r2]
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	2200      	movs	r2, #0
    23b2:	669a      	str	r2, [r3, #104]	; 0x68
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	2288      	movs	r2, #136	; 0x88
    23b8:	2100      	movs	r1, #0
    23ba:	5099      	str	r1, [r3, r2]
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	229d      	movs	r2, #157	; 0x9d
    23c0:	2100      	movs	r1, #0
    23c2:	5499      	strb	r1, [r3, r2]
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2200      	movs	r2, #0
    23c8:	66da      	str	r2, [r3, #108]	; 0x6c
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	228c      	movs	r2, #140	; 0x8c
    23ce:	2100      	movs	r1, #0
    23d0:	5099      	str	r1, [r3, r2]
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	229e      	movs	r2, #158	; 0x9e
    23d6:	2100      	movs	r1, #0
    23d8:	5499      	strb	r1, [r3, r2]
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	2200      	movs	r2, #0
    23de:	671a      	str	r2, [r3, #112]	; 0x70
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	2290      	movs	r2, #144	; 0x90
    23e4:	2100      	movs	r1, #0
    23e6:	5099      	str	r1, [r3, r2]
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	229f      	movs	r2, #159	; 0x9f
    23ec:	2100      	movs	r1, #0
    23ee:	5499      	strb	r1, [r3, r2]
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	2200      	movs	r2, #0
    23f4:	675a      	str	r2, [r3, #116]	; 0x74
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	2294      	movs	r2, #148	; 0x94
    23fa:	2100      	movs	r1, #0
    23fc:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	22a0      	movs	r2, #160	; 0xa0
    2402:	2101      	movs	r1, #1
    2404:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	22a1      	movs	r2, #161	; 0xa1
    240a:	2100      	movs	r1, #0
    240c:	5499      	strb	r1, [r3, r2]
}
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	46bd      	mov	sp, r7
    2412:	b005      	add	sp, #20
    2414:	bd90      	pop	{r4, r7, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	00002115 	.word	0x00002115
    241c:	00008e20 	.word	0x00008e20

00002420 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2420:	b580      	push	{r7, lr}
    2422:	b086      	sub	sp, #24
    2424:	af00      	add	r7, sp, #0
    2426:	60b9      	str	r1, [r7, #8]
    2428:	607a      	str	r2, [r7, #4]
    242a:	230f      	movs	r3, #15
    242c:	18fb      	adds	r3, r7, r3
    242e:	1c02      	adds	r2, r0, #0
    2430:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    2432:	2300      	movs	r3, #0
    2434:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2436:	2300      	movs	r3, #0
    2438:	613b      	str	r3, [r7, #16]
    243a:	e01d      	b.n	2478 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    243c:	68ba      	ldr	r2, [r7, #8]
    243e:	693b      	ldr	r3, [r7, #16]
    2440:	18d3      	adds	r3, r2, r3
    2442:	3310      	adds	r3, #16
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	2b01      	cmp	r3, #1
    2448:	d113      	bne.n	2472 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    244a:	230f      	movs	r3, #15
    244c:	18fb      	adds	r3, r7, r3
    244e:	781b      	ldrb	r3, [r3, #0]
    2450:	4a1b      	ldr	r2, [pc, #108]	; (24c0 <_tcc_build_ctrla+0xa0>)
    2452:	5cd3      	ldrb	r3, [r2, r3]
    2454:	1e1a      	subs	r2, r3, #0
    2456:	693b      	ldr	r3, [r7, #16]
    2458:	429a      	cmp	r2, r3
    245a:	da01      	bge.n	2460 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    245c:	2317      	movs	r3, #23
    245e:	e02a      	b.n	24b6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2460:	2380      	movs	r3, #128	; 0x80
    2462:	045a      	lsls	r2, r3, #17
    2464:	693b      	ldr	r3, [r7, #16]
    2466:	409a      	lsls	r2, r3
    2468:	0013      	movs	r3, r2
    246a:	001a      	movs	r2, r3
    246c:	697b      	ldr	r3, [r7, #20]
    246e:	4313      	orrs	r3, r2
    2470:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2472:	693b      	ldr	r3, [r7, #16]
    2474:	3301      	adds	r3, #1
    2476:	613b      	str	r3, [r7, #16]
    2478:	693b      	ldr	r3, [r7, #16]
    247a:	2b03      	cmp	r3, #3
    247c:	ddde      	ble.n	243c <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	22a1      	movs	r2, #161	; 0xa1
    2482:	5c9b      	ldrb	r3, [r3, r2]
    2484:	2b00      	cmp	r3, #0
    2486:	d004      	beq.n	2492 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2488:	697b      	ldr	r3, [r7, #20]
    248a:	2280      	movs	r2, #128	; 0x80
    248c:	0112      	lsls	r2, r2, #4
    248e:	4313      	orrs	r3, r2
    2490:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2492:	68bb      	ldr	r3, [r7, #8]
    2494:	7b1b      	ldrb	r3, [r3, #12]
    2496:	031b      	lsls	r3, r3, #12
    2498:	001a      	movs	r2, r3
    249a:	697b      	ldr	r3, [r7, #20]
    249c:	4313      	orrs	r3, r2
    249e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    24a0:	68bb      	ldr	r3, [r7, #8]
    24a2:	7adb      	ldrb	r3, [r3, #11]
    24a4:	021b      	lsls	r3, r3, #8
    24a6:	001a      	movs	r2, r3
    24a8:	697b      	ldr	r3, [r7, #20]
    24aa:	4313      	orrs	r3, r2
    24ac:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	697a      	ldr	r2, [r7, #20]
    24b2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    24b4:	2300      	movs	r3, #0
}
    24b6:	0018      	movs	r0, r3
    24b8:	46bd      	mov	sp, r7
    24ba:	b006      	add	sp, #24
    24bc:	bd80      	pop	{r7, pc}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	00008e2c 	.word	0x00008e2c

000024c4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b086      	sub	sp, #24
    24c8:	af00      	add	r7, sp, #0
    24ca:	60b9      	str	r1, [r7, #8]
    24cc:	607a      	str	r2, [r7, #4]
    24ce:	230f      	movs	r3, #15
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	1c02      	adds	r2, r0, #0
    24d4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    24d6:	2317      	movs	r3, #23
    24d8:	18fb      	adds	r3, r7, r3
    24da:	2200      	movs	r2, #0
    24dc:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    24de:	68bb      	ldr	r3, [r7, #8]
    24e0:	7a1b      	ldrb	r3, [r3, #8]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d007      	beq.n	24f6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    24e6:	2317      	movs	r3, #23
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	2217      	movs	r2, #23
    24ec:	18ba      	adds	r2, r7, r2
    24ee:	7812      	ldrb	r2, [r2, #0]
    24f0:	2104      	movs	r1, #4
    24f2:	430a      	orrs	r2, r1
    24f4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    24f6:	68bb      	ldr	r3, [r7, #8]
    24f8:	7a5b      	ldrb	r3, [r3, #9]
    24fa:	2b01      	cmp	r3, #1
    24fc:	d107      	bne.n	250e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    24fe:	2317      	movs	r3, #23
    2500:	18fb      	adds	r3, r7, r3
    2502:	2217      	movs	r2, #23
    2504:	18ba      	adds	r2, r7, r2
    2506:	7812      	ldrb	r2, [r2, #0]
    2508:	2101      	movs	r1, #1
    250a:	430a      	orrs	r2, r1
    250c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	2217      	movs	r2, #23
    2512:	18ba      	adds	r2, r7, r2
    2514:	7812      	ldrb	r2, [r2, #0]
    2516:	701a      	strb	r2, [r3, #0]
}
    2518:	46c0      	nop			; (mov r8, r8)
    251a:	46bd      	mov	sp, r7
    251c:	b006      	add	sp, #24
    251e:	bd80      	pop	{r7, pc}

00002520 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2520:	b580      	push	{r7, lr}
    2522:	b088      	sub	sp, #32
    2524:	af00      	add	r7, sp, #0
    2526:	60b9      	str	r1, [r7, #8]
    2528:	607a      	str	r2, [r7, #4]
    252a:	230f      	movs	r3, #15
    252c:	18fb      	adds	r3, r7, r3
    252e:	1c02      	adds	r2, r0, #0
    2530:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    2532:	230f      	movs	r3, #15
    2534:	18fb      	adds	r3, r7, r3
    2536:	781a      	ldrb	r2, [r3, #0]
    2538:	231b      	movs	r3, #27
    253a:	18fb      	adds	r3, r7, r3
    253c:	493e      	ldr	r1, [pc, #248]	; (2638 <_tcc_build_faults+0x118>)
    253e:	5c8a      	ldrb	r2, [r1, r2]
    2540:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2542:	2300      	movs	r3, #0
    2544:	61fb      	str	r3, [r7, #28]
    2546:	e06e      	b.n	2626 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    2548:	69fa      	ldr	r2, [r7, #28]
    254a:	0013      	movs	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	189b      	adds	r3, r3, r2
    2550:	005b      	lsls	r3, r3, #1
    2552:	3328      	adds	r3, #40	; 0x28
    2554:	68ba      	ldr	r2, [r7, #8]
    2556:	18d3      	adds	r3, r2, r3
    2558:	3304      	adds	r3, #4
    255a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    255c:	697b      	ldr	r3, [r7, #20]
    255e:	7a5b      	ldrb	r3, [r3, #9]
    2560:	221b      	movs	r2, #27
    2562:	18ba      	adds	r2, r7, r2
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	429a      	cmp	r2, r3
    2568:	d801      	bhi.n	256e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    256a:	2317      	movs	r3, #23
    256c:	e05f      	b.n	262e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    256e:	697b      	ldr	r3, [r7, #20]
    2570:	781b      	ldrb	r3, [r3, #0]
    2572:	2b0f      	cmp	r3, #15
    2574:	d901      	bls.n	257a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    2576:	2317      	movs	r3, #23
    2578:	e059      	b.n	262e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    257a:	697b      	ldr	r3, [r7, #20]
    257c:	781b      	ldrb	r3, [r3, #0]
    257e:	061b      	lsls	r3, r3, #24
    2580:	001a      	movs	r2, r3
    2582:	23f0      	movs	r3, #240	; 0xf0
    2584:	051b      	lsls	r3, r3, #20
    2586:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2588:	697b      	ldr	r3, [r7, #20]
    258a:	785b      	ldrb	r3, [r3, #1]
    258c:	041b      	lsls	r3, r3, #16
    258e:	0019      	movs	r1, r3
    2590:	23ff      	movs	r3, #255	; 0xff
    2592:	041b      	lsls	r3, r3, #16
    2594:	400b      	ands	r3, r1
    2596:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2598:	697b      	ldr	r3, [r7, #20]
    259a:	789b      	ldrb	r3, [r3, #2]
    259c:	2b00      	cmp	r3, #0
    259e:	d001      	beq.n	25a4 <_tcc_build_faults+0x84>
    25a0:	2380      	movs	r3, #128	; 0x80
    25a2:	e000      	b.n	25a6 <_tcc_build_faults+0x86>
    25a4:	2300      	movs	r3, #0
    25a6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    25a8:	697b      	ldr	r3, [r7, #20]
    25aa:	78db      	ldrb	r3, [r3, #3]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d001      	beq.n	25b4 <_tcc_build_faults+0x94>
    25b0:	2308      	movs	r3, #8
    25b2:	e000      	b.n	25b6 <_tcc_build_faults+0x96>
    25b4:	2300      	movs	r3, #0
    25b6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    25b8:	697b      	ldr	r3, [r7, #20]
    25ba:	791b      	ldrb	r3, [r3, #4]
    25bc:	2b00      	cmp	r3, #0
    25be:	d001      	beq.n	25c4 <_tcc_build_faults+0xa4>
    25c0:	2310      	movs	r3, #16
    25c2:	e000      	b.n	25c6 <_tcc_build_faults+0xa6>
    25c4:	2300      	movs	r3, #0
    25c6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    25c8:	697b      	ldr	r3, [r7, #20]
    25ca:	795b      	ldrb	r3, [r3, #5]
    25cc:	0019      	movs	r1, r3
    25ce:	2303      	movs	r3, #3
    25d0:	400b      	ands	r3, r1
    25d2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    25d4:	697b      	ldr	r3, [r7, #20]
    25d6:	799b      	ldrb	r3, [r3, #6]
    25d8:	015b      	lsls	r3, r3, #5
    25da:	0019      	movs	r1, r3
    25dc:	2360      	movs	r3, #96	; 0x60
    25de:	400b      	ands	r3, r1
    25e0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    25e2:	697b      	ldr	r3, [r7, #20]
    25e4:	79db      	ldrb	r3, [r3, #7]
    25e6:	021b      	lsls	r3, r3, #8
    25e8:	0019      	movs	r1, r3
    25ea:	23c0      	movs	r3, #192	; 0xc0
    25ec:	009b      	lsls	r3, r3, #2
    25ee:	400b      	ands	r3, r1
    25f0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    25f2:	697b      	ldr	r3, [r7, #20]
    25f4:	7a1b      	ldrb	r3, [r3, #8]
    25f6:	031b      	lsls	r3, r3, #12
    25f8:	0019      	movs	r1, r3
    25fa:	23e0      	movs	r3, #224	; 0xe0
    25fc:	01db      	lsls	r3, r3, #7
    25fe:	400b      	ands	r3, r1
    2600:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2602:	697b      	ldr	r3, [r7, #20]
    2604:	7a5b      	ldrb	r3, [r3, #9]
    2606:	029b      	lsls	r3, r3, #10
    2608:	0019      	movs	r1, r3
    260a:	23c0      	movs	r3, #192	; 0xc0
    260c:	011b      	lsls	r3, r3, #4
    260e:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2610:	4313      	orrs	r3, r2
    2612:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    2614:	69fb      	ldr	r3, [r7, #28]
    2616:	009b      	lsls	r3, r3, #2
    2618:	687a      	ldr	r2, [r7, #4]
    261a:	18d3      	adds	r3, r2, r3
    261c:	693a      	ldr	r2, [r7, #16]
    261e:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2620:	69fb      	ldr	r3, [r7, #28]
    2622:	3301      	adds	r3, #1
    2624:	61fb      	str	r3, [r7, #28]
    2626:	69fb      	ldr	r3, [r7, #28]
    2628:	2b01      	cmp	r3, #1
    262a:	dd8d      	ble.n	2548 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    262c:	2300      	movs	r3, #0
}
    262e:	0018      	movs	r0, r3
    2630:	46bd      	mov	sp, r7
    2632:	b008      	add	sp, #32
    2634:	bd80      	pop	{r7, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	00008e2c 	.word	0x00008e2c

0000263c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    263c:	b580      	push	{r7, lr}
    263e:	b088      	sub	sp, #32
    2640:	af00      	add	r7, sp, #0
    2642:	60b9      	str	r1, [r7, #8]
    2644:	607a      	str	r2, [r7, #4]
    2646:	230f      	movs	r3, #15
    2648:	18fb      	adds	r3, r7, r3
    264a:	1c02      	adds	r2, r0, #0
    264c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    264e:	230f      	movs	r3, #15
    2650:	18fb      	adds	r3, r7, r3
    2652:	781a      	ldrb	r2, [r3, #0]
    2654:	2317      	movs	r3, #23
    2656:	18fb      	adds	r3, r7, r3
    2658:	492d      	ldr	r1, [pc, #180]	; (2710 <_tcc_build_drvctrl+0xd4>)
    265a:	5c8a      	ldrb	r2, [r1, r2]
    265c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    265e:	2300      	movs	r3, #0
    2660:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2662:	2300      	movs	r3, #0
    2664:	61fb      	str	r3, [r7, #28]
    2666:	e048      	b.n	26fa <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    2668:	68ba      	ldr	r2, [r7, #8]
    266a:	2150      	movs	r1, #80	; 0x50
    266c:	69fb      	ldr	r3, [r7, #28]
    266e:	18d3      	adds	r3, r2, r3
    2670:	185b      	adds	r3, r3, r1
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	2b00      	cmp	r3, #0
    2676:	d010      	beq.n	269a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    2678:	2317      	movs	r3, #23
    267a:	18fb      	adds	r3, r7, r3
    267c:	781a      	ldrb	r2, [r3, #0]
    267e:	69fb      	ldr	r3, [r7, #28]
    2680:	429a      	cmp	r2, r3
    2682:	d801      	bhi.n	2688 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    2684:	2317      	movs	r3, #23
    2686:	e03f      	b.n	2708 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2688:	2380      	movs	r3, #128	; 0x80
    268a:	025a      	lsls	r2, r3, #9
    268c:	69fb      	ldr	r3, [r7, #28]
    268e:	409a      	lsls	r2, r3
    2690:	0013      	movs	r3, r2
    2692:	001a      	movs	r2, r3
    2694:	69bb      	ldr	r3, [r7, #24]
    2696:	4313      	orrs	r3, r2
    2698:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    269a:	68ba      	ldr	r2, [r7, #8]
    269c:	69fb      	ldr	r3, [r7, #28]
    269e:	331c      	adds	r3, #28
    26a0:	005b      	lsls	r3, r3, #1
    26a2:	18d3      	adds	r3, r2, r3
    26a4:	3309      	adds	r3, #9
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d023      	beq.n	26f4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    26ac:	2317      	movs	r3, #23
    26ae:	18fb      	adds	r3, r7, r3
    26b0:	781a      	ldrb	r2, [r3, #0]
    26b2:	69fb      	ldr	r3, [r7, #28]
    26b4:	429a      	cmp	r2, r3
    26b6:	d801      	bhi.n	26bc <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    26b8:	2317      	movs	r3, #23
    26ba:	e025      	b.n	2708 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    26bc:	68ba      	ldr	r2, [r7, #8]
    26be:	69fb      	ldr	r3, [r7, #28]
    26c0:	331c      	adds	r3, #28
    26c2:	005b      	lsls	r3, r3, #1
    26c4:	18d3      	adds	r3, r2, r3
    26c6:	3309      	adds	r3, #9
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	2b02      	cmp	r3, #2
    26cc:	d10a      	bne.n	26e4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    26ce:	2302      	movs	r3, #2
    26d0:	33ff      	adds	r3, #255	; 0xff
    26d2:	001a      	movs	r2, r3
    26d4:	69fb      	ldr	r3, [r7, #28]
    26d6:	409a      	lsls	r2, r3
    26d8:	0013      	movs	r3, r2
    26da:	001a      	movs	r2, r3
    26dc:	69bb      	ldr	r3, [r7, #24]
    26de:	4313      	orrs	r3, r2
    26e0:	61bb      	str	r3, [r7, #24]
    26e2:	e007      	b.n	26f4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    26e4:	2201      	movs	r2, #1
    26e6:	69fb      	ldr	r3, [r7, #28]
    26e8:	409a      	lsls	r2, r3
    26ea:	0013      	movs	r3, r2
    26ec:	001a      	movs	r2, r3
    26ee:	69bb      	ldr	r3, [r7, #24]
    26f0:	4313      	orrs	r3, r2
    26f2:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    26f4:	69fb      	ldr	r3, [r7, #28]
    26f6:	3301      	adds	r3, #1
    26f8:	61fb      	str	r3, [r7, #28]
    26fa:	69fb      	ldr	r3, [r7, #28]
    26fc:	2b07      	cmp	r3, #7
    26fe:	d9b3      	bls.n	2668 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	69ba      	ldr	r2, [r7, #24]
    2704:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    2706:	2300      	movs	r3, #0
}
    2708:	0018      	movs	r0, r3
    270a:	46bd      	mov	sp, r7
    270c:	b008      	add	sp, #32
    270e:	bd80      	pop	{r7, pc}
    2710:	00008e30 	.word	0x00008e30

00002714 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    2714:	b580      	push	{r7, lr}
    2716:	b088      	sub	sp, #32
    2718:	af00      	add	r7, sp, #0
    271a:	60b9      	str	r1, [r7, #8]
    271c:	607a      	str	r2, [r7, #4]
    271e:	230f      	movs	r3, #15
    2720:	18fb      	adds	r3, r7, r3
    2722:	1c02      	adds	r2, r0, #0
    2724:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    2726:	230f      	movs	r3, #15
    2728:	18fb      	adds	r3, r7, r3
    272a:	781a      	ldrb	r2, [r3, #0]
    272c:	2317      	movs	r3, #23
    272e:	18fb      	adds	r3, r7, r3
    2730:	491d      	ldr	r1, [pc, #116]	; (27a8 <_tcc_build_waves+0x94>)
    2732:	5c8a      	ldrb	r2, [r1, r2]
    2734:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    2736:	68bb      	ldr	r3, [r7, #8]
    2738:	3310      	adds	r3, #16
    273a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    273c:	693b      	ldr	r3, [r7, #16]
    273e:	7a5b      	ldrb	r3, [r3, #9]
    2740:	011b      	lsls	r3, r3, #4
    2742:	001a      	movs	r2, r3
    2744:	2330      	movs	r3, #48	; 0x30
    2746:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2748:	693b      	ldr	r3, [r7, #16]
    274a:	7a1b      	ldrb	r3, [r3, #8]
    274c:	0019      	movs	r1, r3
    274e:	2307      	movs	r3, #7
    2750:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2752:	4313      	orrs	r3, r2
    2754:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2756:	2300      	movs	r3, #0
    2758:	61fb      	str	r3, [r7, #28]
    275a:	e01a      	b.n	2792 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    275c:	693a      	ldr	r2, [r7, #16]
    275e:	69fb      	ldr	r3, [r7, #28]
    2760:	18d3      	adds	r3, r2, r3
    2762:	3304      	adds	r3, #4
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	2b00      	cmp	r3, #0
    2768:	d010      	beq.n	278c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    276a:	2317      	movs	r3, #23
    276c:	18fb      	adds	r3, r7, r3
    276e:	781a      	ldrb	r2, [r3, #0]
    2770:	69fb      	ldr	r3, [r7, #28]
    2772:	429a      	cmp	r2, r3
    2774:	dc01      	bgt.n	277a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    2776:	2317      	movs	r3, #23
    2778:	e012      	b.n	27a0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	025a      	lsls	r2, r3, #9
    277e:	69fb      	ldr	r3, [r7, #28]
    2780:	409a      	lsls	r2, r3
    2782:	0013      	movs	r3, r2
    2784:	001a      	movs	r2, r3
    2786:	69bb      	ldr	r3, [r7, #24]
    2788:	4313      	orrs	r3, r2
    278a:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    278c:	69fb      	ldr	r3, [r7, #28]
    278e:	3301      	adds	r3, #1
    2790:	61fb      	str	r3, [r7, #28]
    2792:	69fb      	ldr	r3, [r7, #28]
    2794:	2b03      	cmp	r3, #3
    2796:	dde1      	ble.n	275c <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	69ba      	ldr	r2, [r7, #24]
    279c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    279e:	2300      	movs	r3, #0
}
    27a0:	0018      	movs	r0, r3
    27a2:	46bd      	mov	sp, r7
    27a4:	b008      	add	sp, #32
    27a6:	bd80      	pop	{r7, pc}
    27a8:	00008e2c 	.word	0x00008e2c

000027ac <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    27ac:	b590      	push	{r4, r7, lr}
    27ae:	b091      	sub	sp, #68	; 0x44
    27b0:	af00      	add	r7, sp, #0
    27b2:	60f8      	str	r0, [r7, #12]
    27b4:	60b9      	str	r1, [r7, #8]
    27b6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    27b8:	233b      	movs	r3, #59	; 0x3b
    27ba:	18fc      	adds	r4, r7, r3
    27bc:	68bb      	ldr	r3, [r7, #8]
    27be:	0018      	movs	r0, r3
    27c0:	4bc4      	ldr	r3, [pc, #784]	; (2ad4 <tcc_init+0x328>)
    27c2:	4798      	blx	r3
    27c4:	0003      	movs	r3, r0
    27c6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    27c8:	233b      	movs	r3, #59	; 0x3b
    27ca:	18fb      	adds	r3, r7, r3
    27cc:	781a      	ldrb	r2, [r3, #0]
    27ce:	4bc2      	ldr	r3, [pc, #776]	; (2ad8 <tcc_init+0x32c>)
    27d0:	0092      	lsls	r2, r2, #2
    27d2:	58d3      	ldr	r3, [r2, r3]
    27d4:	0019      	movs	r1, r3
    27d6:	2002      	movs	r0, #2
    27d8:	4bc0      	ldr	r3, [pc, #768]	; (2adc <tcc_init+0x330>)
    27da:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    27dc:	68bb      	ldr	r3, [r7, #8]
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	2202      	movs	r2, #2
    27e2:	4013      	ands	r3, r2
    27e4:	d001      	beq.n	27ea <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    27e6:	231c      	movs	r3, #28
    27e8:	e1be      	b.n	2b68 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    27ea:	68bb      	ldr	r3, [r7, #8]
    27ec:	681b      	ldr	r3, [r3, #0]
    27ee:	2201      	movs	r2, #1
    27f0:	4013      	ands	r3, r2
    27f2:	d001      	beq.n	27f8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    27f4:	231c      	movs	r3, #28
    27f6:	e1b7      	b.n	2b68 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    27f8:	233b      	movs	r3, #59	; 0x3b
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	781a      	ldrb	r2, [r3, #0]
    27fe:	4bb8      	ldr	r3, [pc, #736]	; (2ae0 <tcc_init+0x334>)
    2800:	0092      	lsls	r2, r2, #2
    2802:	58d3      	ldr	r3, [r2, r3]
    2804:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	681a      	ldr	r2, [r3, #0]
    280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    280c:	429a      	cmp	r2, r3
    280e:	d804      	bhi.n	281a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	685a      	ldr	r2, [r3, #4]
    2814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2816:	429a      	cmp	r2, r3
    2818:	d901      	bls.n	281e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    281a:	2317      	movs	r3, #23
    281c:	e1a4      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    281e:	2300      	movs	r3, #0
    2820:	63fb      	str	r3, [r7, #60]	; 0x3c
    2822:	e00e      	b.n	2842 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    2824:	687a      	ldr	r2, [r7, #4]
    2826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2828:	3306      	adds	r3, #6
    282a:	009b      	lsls	r3, r3, #2
    282c:	18d3      	adds	r3, r2, r3
    282e:	3304      	adds	r3, #4
    2830:	681a      	ldr	r2, [r3, #0]
    2832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2834:	429a      	cmp	r2, r3
    2836:	d901      	bls.n	283c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    2838:	2317      	movs	r3, #23
    283a:	e195      	b.n	2b68 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    283e:	3301      	adds	r3, #1
    2840:	63fb      	str	r3, [r7, #60]	; 0x3c
    2842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2844:	2b03      	cmp	r3, #3
    2846:	dded      	ble.n	2824 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2848:	2300      	movs	r3, #0
    284a:	63fb      	str	r3, [r7, #60]	; 0x3c
    284c:	e019      	b.n	2882 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    284e:	687a      	ldr	r2, [r7, #4]
    2850:	2198      	movs	r1, #152	; 0x98
    2852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2854:	18d3      	adds	r3, r2, r3
    2856:	185b      	adds	r3, r3, r1
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	2201      	movs	r2, #1
    285c:	4053      	eors	r3, r2
    285e:	b2db      	uxtb	r3, r3
    2860:	2b00      	cmp	r3, #0
    2862:	d10a      	bne.n	287a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    2864:	233b      	movs	r3, #59	; 0x3b
    2866:	18fb      	adds	r3, r7, r3
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	4a9e      	ldr	r2, [pc, #632]	; (2ae4 <tcc_init+0x338>)
    286c:	5cd3      	ldrb	r3, [r2, r3]
    286e:	1e1a      	subs	r2, r3, #0
    2870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2872:	429a      	cmp	r2, r3
    2874:	dc02      	bgt.n	287c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    2876:	2317      	movs	r3, #23
    2878:	e176      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    287a:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    287c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    287e:	3301      	adds	r3, #1
    2880:	63fb      	str	r3, [r7, #60]	; 0x3c
    2882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2884:	2b07      	cmp	r3, #7
    2886:	dde2      	ble.n	284e <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    2888:	2300      	movs	r3, #0
    288a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    288c:	2333      	movs	r3, #51	; 0x33
    288e:	18fc      	adds	r4, r7, r3
    2890:	232c      	movs	r3, #44	; 0x2c
    2892:	18fa      	adds	r2, r7, r3
    2894:	6879      	ldr	r1, [r7, #4]
    2896:	233b      	movs	r3, #59	; 0x3b
    2898:	18fb      	adds	r3, r7, r3
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	0018      	movs	r0, r3
    289e:	4b92      	ldr	r3, [pc, #584]	; (2ae8 <tcc_init+0x33c>)
    28a0:	4798      	blx	r3
    28a2:	0003      	movs	r3, r0
    28a4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    28a6:	2333      	movs	r3, #51	; 0x33
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	2b00      	cmp	r3, #0
    28ae:	d003      	beq.n	28b8 <tcc_init+0x10c>
		return status;
    28b0:	2333      	movs	r3, #51	; 0x33
    28b2:	18fb      	adds	r3, r7, r3
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	e157      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    28b8:	232b      	movs	r3, #43	; 0x2b
    28ba:	18fa      	adds	r2, r7, r3
    28bc:	6879      	ldr	r1, [r7, #4]
    28be:	233b      	movs	r3, #59	; 0x3b
    28c0:	18fb      	adds	r3, r7, r3
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	0018      	movs	r0, r3
    28c6:	4b89      	ldr	r3, [pc, #548]	; (2aec <tcc_init+0x340>)
    28c8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    28ca:	2333      	movs	r3, #51	; 0x33
    28cc:	18fc      	adds	r4, r7, r3
    28ce:	2320      	movs	r3, #32
    28d0:	18fa      	adds	r2, r7, r3
    28d2:	6879      	ldr	r1, [r7, #4]
    28d4:	233b      	movs	r3, #59	; 0x3b
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	0018      	movs	r0, r3
    28dc:	4b84      	ldr	r3, [pc, #528]	; (2af0 <tcc_init+0x344>)
    28de:	4798      	blx	r3
    28e0:	0003      	movs	r3, r0
    28e2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    28e4:	2333      	movs	r3, #51	; 0x33
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d003      	beq.n	28f6 <tcc_init+0x14a>
		return status;
    28ee:	2333      	movs	r3, #51	; 0x33
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	e138      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    28f6:	2300      	movs	r3, #0
    28f8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    28fa:	2333      	movs	r3, #51	; 0x33
    28fc:	18fc      	adds	r4, r7, r3
    28fe:	231c      	movs	r3, #28
    2900:	18fa      	adds	r2, r7, r3
    2902:	6879      	ldr	r1, [r7, #4]
    2904:	233b      	movs	r3, #59	; 0x3b
    2906:	18fb      	adds	r3, r7, r3
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	0018      	movs	r0, r3
    290c:	4b79      	ldr	r3, [pc, #484]	; (2af4 <tcc_init+0x348>)
    290e:	4798      	blx	r3
    2910:	0003      	movs	r3, r0
    2912:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2914:	2333      	movs	r3, #51	; 0x33
    2916:	18fb      	adds	r3, r7, r3
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	d003      	beq.n	2926 <tcc_init+0x17a>
		return status;
    291e:	2333      	movs	r3, #51	; 0x33
    2920:	18fb      	adds	r3, r7, r3
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	e120      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    2926:	2333      	movs	r3, #51	; 0x33
    2928:	18fc      	adds	r4, r7, r3
    292a:	2318      	movs	r3, #24
    292c:	18fa      	adds	r2, r7, r3
    292e:	6879      	ldr	r1, [r7, #4]
    2930:	233b      	movs	r3, #59	; 0x3b
    2932:	18fb      	adds	r3, r7, r3
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	0018      	movs	r0, r3
    2938:	4b6f      	ldr	r3, [pc, #444]	; (2af8 <tcc_init+0x34c>)
    293a:	4798      	blx	r3
    293c:	0003      	movs	r3, r0
    293e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    2940:	2333      	movs	r3, #51	; 0x33
    2942:	18fb      	adds	r3, r7, r3
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	2b00      	cmp	r3, #0
    2948:	d003      	beq.n	2952 <tcc_init+0x1a6>
		return status;
    294a:	2333      	movs	r3, #51	; 0x33
    294c:	18fb      	adds	r3, r7, r3
    294e:	781b      	ldrb	r3, [r3, #0]
    2950:	e10a      	b.n	2b68 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2952:	2300      	movs	r3, #0
    2954:	63fb      	str	r3, [r7, #60]	; 0x3c
    2956:	e009      	b.n	296c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    2958:	68fa      	ldr	r2, [r7, #12]
    295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    295c:	009b      	lsls	r3, r3, #2
    295e:	18d3      	adds	r3, r2, r3
    2960:	3304      	adds	r3, #4
    2962:	2200      	movs	r2, #0
    2964:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2968:	3301      	adds	r3, #1
    296a:	63fb      	str	r3, [r7, #60]	; 0x3c
    296c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    296e:	2b0b      	cmp	r3, #11
    2970:	ddf2      	ble.n	2958 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    2972:	68fb      	ldr	r3, [r7, #12]
    2974:	2200      	movs	r2, #0
    2976:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	2200      	movs	r2, #0
    297c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    297e:	233b      	movs	r3, #59	; 0x3b
    2980:	18fb      	adds	r3, r7, r3
    2982:	781a      	ldrb	r2, [r3, #0]
    2984:	4b5d      	ldr	r3, [pc, #372]	; (2afc <tcc_init+0x350>)
    2986:	0092      	lsls	r2, r2, #2
    2988:	68f9      	ldr	r1, [r7, #12]
    298a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	68ba      	ldr	r2, [r7, #8]
    2990:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	22a0      	movs	r2, #160	; 0xa0
    2996:	5c99      	ldrb	r1, [r3, r2]
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	223c      	movs	r2, #60	; 0x3c
    299c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    299e:	2314      	movs	r3, #20
    29a0:	18fb      	adds	r3, r7, r3
    29a2:	0018      	movs	r0, r3
    29a4:	4b56      	ldr	r3, [pc, #344]	; (2b00 <tcc_init+0x354>)
    29a6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	7a9a      	ldrb	r2, [r3, #10]
    29ac:	2314      	movs	r3, #20
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    29b2:	233b      	movs	r3, #59	; 0x3b
    29b4:	18fb      	adds	r3, r7, r3
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	4a52      	ldr	r2, [pc, #328]	; (2b04 <tcc_init+0x358>)
    29ba:	5cd3      	ldrb	r3, [r2, r3]
    29bc:	2214      	movs	r2, #20
    29be:	18ba      	adds	r2, r7, r2
    29c0:	0011      	movs	r1, r2
    29c2:	0018      	movs	r0, r3
    29c4:	4b50      	ldr	r3, [pc, #320]	; (2b08 <tcc_init+0x35c>)
    29c6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    29c8:	233b      	movs	r3, #59	; 0x3b
    29ca:	18fb      	adds	r3, r7, r3
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	4a4d      	ldr	r2, [pc, #308]	; (2b04 <tcc_init+0x358>)
    29d0:	5cd3      	ldrb	r3, [r2, r3]
    29d2:	0018      	movs	r0, r3
    29d4:	4b4d      	ldr	r3, [pc, #308]	; (2b0c <tcc_init+0x360>)
    29d6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    29d8:	2300      	movs	r3, #0
    29da:	63fb      	str	r3, [r7, #60]	; 0x3c
    29dc:	e02d      	b.n	2a3a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    29de:	687a      	ldr	r2, [r7, #4]
    29e0:	2198      	movs	r1, #152	; 0x98
    29e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    29e4:	18d3      	adds	r3, r2, r3
    29e6:	185b      	adds	r3, r3, r1
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	2201      	movs	r2, #1
    29ec:	4053      	eors	r3, r2
    29ee:	b2db      	uxtb	r3, r3
    29f0:	2b00      	cmp	r3, #0
    29f2:	d11e      	bne.n	2a32 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    29f4:	2310      	movs	r3, #16
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	0018      	movs	r0, r3
    29fa:	4b45      	ldr	r3, [pc, #276]	; (2b10 <tcc_init+0x364>)
    29fc:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a02:	321e      	adds	r2, #30
    2a04:	0092      	lsls	r2, r2, #2
    2a06:	58d3      	ldr	r3, [r2, r3]
    2a08:	b2da      	uxtb	r2, r3
    2a0a:	2310      	movs	r3, #16
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2a10:	2310      	movs	r3, #16
    2a12:	18fb      	adds	r3, r7, r3
    2a14:	2201      	movs	r2, #1
    2a16:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a1c:	3216      	adds	r2, #22
    2a1e:	0092      	lsls	r2, r2, #2
    2a20:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2a22:	b2db      	uxtb	r3, r3
    2a24:	2210      	movs	r2, #16
    2a26:	18ba      	adds	r2, r7, r2
    2a28:	0011      	movs	r1, r2
    2a2a:	0018      	movs	r0, r3
    2a2c:	4b39      	ldr	r3, [pc, #228]	; (2b14 <tcc_init+0x368>)
    2a2e:	4798      	blx	r3
    2a30:	e000      	b.n	2a34 <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    2a32:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a36:	3301      	adds	r3, #1
    2a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    2a3a:	233b      	movs	r3, #59	; 0x3b
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	4a28      	ldr	r2, [pc, #160]	; (2ae4 <tcc_init+0x338>)
    2a42:	5cd3      	ldrb	r3, [r2, r3]
    2a44:	1e1a      	subs	r2, r3, #0
    2a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2a48:	429a      	cmp	r2, r3
    2a4a:	dcc8      	bgt.n	29de <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    2a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a4e:	68bb      	ldr	r3, [r7, #8]
    2a50:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	68bb      	ldr	r3, [r7, #8]
    2a56:	689b      	ldr	r3, [r3, #8]
    2a58:	2204      	movs	r2, #4
    2a5a:	4013      	ands	r3, r2
    2a5c:	d1fa      	bne.n	2a54 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    2a5e:	68bb      	ldr	r3, [r7, #8]
    2a60:	22ff      	movs	r2, #255	; 0xff
    2a62:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2a64:	46c0      	nop			; (mov r8, r8)
    2a66:	68bb      	ldr	r3, [r7, #8]
    2a68:	689b      	ldr	r3, [r3, #8]
    2a6a:	2204      	movs	r2, #4
    2a6c:	4013      	ands	r3, r2
    2a6e:	d1fa      	bne.n	2a66 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    2a70:	232b      	movs	r3, #43	; 0x2b
    2a72:	18fb      	adds	r3, r7, r3
    2a74:	781a      	ldrb	r2, [r3, #0]
    2a76:	68bb      	ldr	r3, [r7, #8]
    2a78:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    2a7a:	2320      	movs	r3, #32
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	681a      	ldr	r2, [r3, #0]
    2a80:	68bb      	ldr	r3, [r7, #8]
    2a82:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    2a84:	2320      	movs	r3, #32
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	685a      	ldr	r2, [r3, #4]
    2a8a:	68bb      	ldr	r3, [r7, #8]
    2a8c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    2a8e:	69fa      	ldr	r2, [r7, #28]
    2a90:	68bb      	ldr	r3, [r7, #8]
    2a92:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2a94:	46c0      	nop			; (mov r8, r8)
    2a96:	68bb      	ldr	r3, [r7, #8]
    2a98:	689b      	ldr	r3, [r3, #8]
    2a9a:	4a1f      	ldr	r2, [pc, #124]	; (2b18 <tcc_init+0x36c>)
    2a9c:	4013      	ands	r3, r2
    2a9e:	d1fa      	bne.n	2a96 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    2aa0:	69ba      	ldr	r2, [r7, #24]
    2aa2:	68bb      	ldr	r3, [r7, #8]
    2aa4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	68bb      	ldr	r3, [r7, #8]
    2aaa:	689b      	ldr	r3, [r3, #8]
    2aac:	2210      	movs	r2, #16
    2aae:	4013      	ands	r3, r2
    2ab0:	d1fa      	bne.n	2aa8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	681a      	ldr	r2, [r3, #0]
    2ab6:	68bb      	ldr	r3, [r7, #8]
    2ab8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	68bb      	ldr	r3, [r7, #8]
    2abe:	689b      	ldr	r3, [r3, #8]
    2ac0:	4a16      	ldr	r2, [pc, #88]	; (2b1c <tcc_init+0x370>)
    2ac2:	4013      	ands	r3, r2
    2ac4:	d1fa      	bne.n	2abc <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	685a      	ldr	r2, [r3, #4]
    2aca:	68bb      	ldr	r3, [r7, #8]
    2acc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2ace:	2300      	movs	r3, #0
    2ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    2ad2:	e03f      	b.n	2b54 <tcc_init+0x3a8>
    2ad4:	00002115 	.word	0x00002115
    2ad8:	00008e14 	.word	0x00008e14
    2adc:	00002091 	.word	0x00002091
    2ae0:	00008e20 	.word	0x00008e20
    2ae4:	00008e30 	.word	0x00008e30
    2ae8:	00002421 	.word	0x00002421
    2aec:	000024c5 	.word	0x000024c5
    2af0:	00002521 	.word	0x00002521
    2af4:	0000263d 	.word	0x0000263d
    2af8:	00002715 	.word	0x00002715
    2afc:	200000dc 	.word	0x200000dc
    2b00:	00002079 	.word	0x00002079
    2b04:	00008e10 	.word	0x00008e10
    2b08:	00004a55 	.word	0x00004a55
    2b0c:	00004a99 	.word	0x00004a99
    2b10:	000020ed 	.word	0x000020ed
    2b14:	00004d41 	.word	0x00004d41
    2b18:	00020040 	.word	0x00020040
    2b1c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2b20:	46c0      	nop			; (mov r8, r8)
    2b22:	68bb      	ldr	r3, [r7, #8]
    2b24:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2b26:	4912      	ldr	r1, [pc, #72]	; (2b70 <tcc_init+0x3c4>)
    2b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2b2a:	4091      	lsls	r1, r2
    2b2c:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2b2e:	4013      	ands	r3, r2
    2b30:	d1f7      	bne.n	2b22 <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    2b32:	687a      	ldr	r2, [r7, #4]
    2b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b36:	3306      	adds	r3, #6
    2b38:	009b      	lsls	r3, r3, #2
    2b3a:	18d3      	adds	r3, r2, r3
    2b3c:	3304      	adds	r3, #4
    2b3e:	681a      	ldr	r2, [r3, #0]
    2b40:	68b9      	ldr	r1, [r7, #8]
    2b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b44:	3310      	adds	r3, #16
    2b46:	009b      	lsls	r3, r3, #2
    2b48:	18cb      	adds	r3, r1, r3
    2b4a:	3304      	adds	r3, #4
    2b4c:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b50:	3301      	adds	r3, #1
    2b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    2b54:	233b      	movs	r3, #59	; 0x3b
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	4a06      	ldr	r2, [pc, #24]	; (2b74 <tcc_init+0x3c8>)
    2b5c:	5cd3      	ldrb	r3, [r2, r3]
    2b5e:	1e1a      	subs	r2, r3, #0
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	429a      	cmp	r2, r3
    2b64:	dcdc      	bgt.n	2b20 <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    2b66:	2300      	movs	r3, #0
}
    2b68:	0018      	movs	r0, r3
    2b6a:	46bd      	mov	sp, r7
    2b6c:	b011      	add	sp, #68	; 0x44
    2b6e:	bd90      	pop	{r4, r7, pc}
    2b70:	00080100 	.word	0x00080100
    2b74:	00008e2c 	.word	0x00008e2c

00002b78 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2b78:	b590      	push	{r4, r7, lr}
    2b7a:	b089      	sub	sp, #36	; 0x24
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	60f8      	str	r0, [r7, #12]
    2b80:	0008      	movs	r0, r1
    2b82:	607a      	str	r2, [r7, #4]
    2b84:	0019      	movs	r1, r3
    2b86:	230b      	movs	r3, #11
    2b88:	18fb      	adds	r3, r7, r3
    2b8a:	1c02      	adds	r2, r0, #0
    2b8c:	701a      	strb	r2, [r3, #0]
    2b8e:	230a      	movs	r3, #10
    2b90:	18fb      	adds	r3, r7, r3
    2b92:	1c0a      	adds	r2, r1, #0
    2b94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2b96:	68fb      	ldr	r3, [r7, #12]
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2b9c:	231b      	movs	r3, #27
    2b9e:	18fc      	adds	r4, r7, r3
    2ba0:	69fb      	ldr	r3, [r7, #28]
    2ba2:	0018      	movs	r0, r3
    2ba4:	4b28      	ldr	r3, [pc, #160]	; (2c48 <_tcc_set_compare_value+0xd0>)
    2ba6:	4798      	blx	r3
    2ba8:	0003      	movs	r3, r0
    2baa:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2bac:	231b      	movs	r3, #27
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	781b      	ldrb	r3, [r3, #0]
    2bb2:	4a26      	ldr	r2, [pc, #152]	; (2c4c <_tcc_set_compare_value+0xd4>)
    2bb4:	5cd3      	ldrb	r3, [r2, r3]
    2bb6:	220b      	movs	r2, #11
    2bb8:	18ba      	adds	r2, r7, r2
    2bba:	7812      	ldrb	r2, [r2, #0]
    2bbc:	429a      	cmp	r2, r3
    2bbe:	d301      	bcc.n	2bc4 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    2bc0:	2317      	movs	r3, #23
    2bc2:	e03d      	b.n	2c40 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    2bc4:	231b      	movs	r3, #27
    2bc6:	18fb      	adds	r3, r7, r3
    2bc8:	781a      	ldrb	r2, [r3, #0]
    2bca:	4b21      	ldr	r3, [pc, #132]	; (2c50 <_tcc_set_compare_value+0xd8>)
    2bcc:	0092      	lsls	r2, r2, #2
    2bce:	58d3      	ldr	r3, [r2, r3]
    2bd0:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    2bd2:	687a      	ldr	r2, [r7, #4]
    2bd4:	697b      	ldr	r3, [r7, #20]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d901      	bls.n	2bde <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    2bda:	2317      	movs	r3, #23
    2bdc:	e030      	b.n	2c40 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    2bde:	230a      	movs	r3, #10
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d014      	beq.n	2c12 <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2be8:	46c0      	nop			; (mov r8, r8)
    2bea:	69fb      	ldr	r3, [r7, #28]
    2bec:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    2bee:	220b      	movs	r2, #11
    2bf0:	18ba      	adds	r2, r7, r2
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	2180      	movs	r1, #128	; 0x80
    2bf6:	0309      	lsls	r1, r1, #12
    2bf8:	4091      	lsls	r1, r2
    2bfa:	000a      	movs	r2, r1

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2bfc:	4013      	ands	r3, r2
    2bfe:	d1f4      	bne.n	2bea <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    2c00:	230b      	movs	r3, #11
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	781a      	ldrb	r2, [r3, #0]
    2c06:	69fb      	ldr	r3, [r7, #28]
    2c08:	321c      	adds	r2, #28
    2c0a:	0092      	lsls	r2, r2, #2
    2c0c:	6879      	ldr	r1, [r7, #4]
    2c0e:	50d1      	str	r1, [r2, r3]
    2c10:	e015      	b.n	2c3e <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	69fb      	ldr	r3, [r7, #28]
    2c16:	689b      	ldr	r3, [r3, #8]
    2c18:	220b      	movs	r2, #11
    2c1a:	18ba      	adds	r2, r7, r2
    2c1c:	7812      	ldrb	r2, [r2, #0]
    2c1e:	2180      	movs	r1, #128	; 0x80
    2c20:	0049      	lsls	r1, r1, #1
    2c22:	4091      	lsls	r1, r2
    2c24:	000a      	movs	r2, r1
    2c26:	4013      	ands	r3, r2
    2c28:	d1f4      	bne.n	2c14 <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    2c2a:	230b      	movs	r3, #11
    2c2c:	18fb      	adds	r3, r7, r3
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	69fa      	ldr	r2, [r7, #28]
    2c32:	3310      	adds	r3, #16
    2c34:	009b      	lsls	r3, r3, #2
    2c36:	18d3      	adds	r3, r2, r3
    2c38:	3304      	adds	r3, #4
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    2c3e:	2300      	movs	r3, #0
}
    2c40:	0018      	movs	r0, r3
    2c42:	46bd      	mov	sp, r7
    2c44:	b009      	add	sp, #36	; 0x24
    2c46:	bd90      	pop	{r4, r7, pc}
    2c48:	00002115 	.word	0x00002115
    2c4c:	00008e2c 	.word	0x00008e2c
    2c50:	00008e20 	.word	0x00008e20

00002c54 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    2c54:	b590      	push	{r4, r7, lr}
    2c56:	b085      	sub	sp, #20
    2c58:	af00      	add	r7, sp, #0
    2c5a:	60f8      	str	r0, [r7, #12]
    2c5c:	607a      	str	r2, [r7, #4]
    2c5e:	230b      	movs	r3, #11
    2c60:	18fb      	adds	r3, r7, r3
    2c62:	1c0a      	adds	r2, r1, #0
    2c64:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    2c66:	68fb      	ldr	r3, [r7, #12]
    2c68:	223c      	movs	r2, #60	; 0x3c
    2c6a:	5c9c      	ldrb	r4, [r3, r2]
    2c6c:	687a      	ldr	r2, [r7, #4]
    2c6e:	230b      	movs	r3, #11
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	7819      	ldrb	r1, [r3, #0]
    2c74:	68f8      	ldr	r0, [r7, #12]
    2c76:	0023      	movs	r3, r4
    2c78:	4c03      	ldr	r4, [pc, #12]	; (2c88 <tcc_set_compare_value+0x34>)
    2c7a:	47a0      	blx	r4
    2c7c:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    2c7e:	0018      	movs	r0, r3
    2c80:	46bd      	mov	sp, r7
    2c82:	b005      	add	sp, #20
    2c84:	bd90      	pop	{r4, r7, pc}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	00002b79 	.word	0x00002b79

00002c8c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2c8c:	b580      	push	{r7, lr}
    2c8e:	af00      	add	r7, sp, #0
    2c90:	2000      	movs	r0, #0
    2c92:	4b02      	ldr	r3, [pc, #8]	; (2c9c <TCC0_Handler+0x10>)
    2c94:	4798      	blx	r3
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	00002cc9 	.word	0x00002cc9

00002ca0 <TCC1_Handler>:
    2ca0:	b580      	push	{r7, lr}
    2ca2:	af00      	add	r7, sp, #0
    2ca4:	2001      	movs	r0, #1
    2ca6:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <TCC1_Handler+0x10>)
    2ca8:	4798      	blx	r3
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	46bd      	mov	sp, r7
    2cae:	bd80      	pop	{r7, pc}
    2cb0:	00002cc9 	.word	0x00002cc9

00002cb4 <TCC2_Handler>:
    2cb4:	b580      	push	{r7, lr}
    2cb6:	af00      	add	r7, sp, #0
    2cb8:	2002      	movs	r0, #2
    2cba:	4b02      	ldr	r3, [pc, #8]	; (2cc4 <TCC2_Handler+0x10>)
    2cbc:	4798      	blx	r3
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	46bd      	mov	sp, r7
    2cc2:	bd80      	pop	{r7, pc}
    2cc4:	00002cc9 	.word	0x00002cc9

00002cc8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b086      	sub	sp, #24
    2ccc:	af00      	add	r7, sp, #0
    2cce:	0002      	movs	r2, r0
    2cd0:	1dfb      	adds	r3, r7, #7
    2cd2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    2cd4:	1dfb      	adds	r3, r7, #7
    2cd6:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2cd8:	4b18      	ldr	r3, [pc, #96]	; (2d3c <_tcc_interrupt_handler+0x74>)
    2cda:	0092      	lsls	r2, r2, #2
    2cdc:	58d3      	ldr	r3, [r2, r3]
    2cde:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2ce0:	693b      	ldr	r3, [r7, #16]
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    2ce6:	693b      	ldr	r3, [r7, #16]
    2ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2cea:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    2cec:	693b      	ldr	r3, [r7, #16]
    2cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2cf0:	4013      	ands	r3, r2
    2cf2:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2cf4:	2300      	movs	r3, #0
    2cf6:	617b      	str	r3, [r7, #20]
    2cf8:	e019      	b.n	2d2e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2cfa:	4b11      	ldr	r3, [pc, #68]	; (2d40 <_tcc_interrupt_handler+0x78>)
    2cfc:	697a      	ldr	r2, [r7, #20]
    2cfe:	0092      	lsls	r2, r2, #2
    2d00:	58d3      	ldr	r3, [r2, r3]
    2d02:	68fa      	ldr	r2, [r7, #12]
    2d04:	4013      	ands	r3, r2
    2d06:	d00f      	beq.n	2d28 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2d08:	693a      	ldr	r2, [r7, #16]
    2d0a:	697b      	ldr	r3, [r7, #20]
    2d0c:	009b      	lsls	r3, r3, #2
    2d0e:	18d3      	adds	r3, r2, r3
    2d10:	3304      	adds	r3, #4
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	693a      	ldr	r2, [r7, #16]
    2d16:	0010      	movs	r0, r2
    2d18:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2d1a:	693b      	ldr	r3, [r7, #16]
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	4a08      	ldr	r2, [pc, #32]	; (2d40 <_tcc_interrupt_handler+0x78>)
    2d20:	6979      	ldr	r1, [r7, #20]
    2d22:	0089      	lsls	r1, r1, #2
    2d24:	588a      	ldr	r2, [r1, r2]
    2d26:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2d28:	697b      	ldr	r3, [r7, #20]
    2d2a:	3301      	adds	r3, #1
    2d2c:	617b      	str	r3, [r7, #20]
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	2b0b      	cmp	r3, #11
    2d32:	dde2      	ble.n	2cfa <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    2d34:	46c0      	nop			; (mov r8, r8)
    2d36:	46bd      	mov	sp, r7
    2d38:	b006      	add	sp, #24
    2d3a:	bd80      	pop	{r7, pc}
    2d3c:	200000dc 	.word	0x200000dc
    2d40:	00008e34 	.word	0x00008e34

00002d44 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2d44:	b580      	push	{r7, lr}
    2d46:	af00      	add	r7, sp, #0
    2d48:	2000      	movs	r0, #0
    2d4a:	4b02      	ldr	r3, [pc, #8]	; (2d54 <TC3_Handler+0x10>)
    2d4c:	4798      	blx	r3
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	46bd      	mov	sp, r7
    2d52:	bd80      	pop	{r7, pc}
    2d54:	00002d81 	.word	0x00002d81

00002d58 <TC4_Handler>:
    2d58:	b580      	push	{r7, lr}
    2d5a:	af00      	add	r7, sp, #0
    2d5c:	2001      	movs	r0, #1
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <TC4_Handler+0x10>)
    2d60:	4798      	blx	r3
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	46bd      	mov	sp, r7
    2d66:	bd80      	pop	{r7, pc}
    2d68:	00002d81 	.word	0x00002d81

00002d6c <TC5_Handler>:
    2d6c:	b580      	push	{r7, lr}
    2d6e:	af00      	add	r7, sp, #0
    2d70:	2002      	movs	r0, #2
    2d72:	4b02      	ldr	r3, [pc, #8]	; (2d7c <TC5_Handler+0x10>)
    2d74:	4798      	blx	r3
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	46bd      	mov	sp, r7
    2d7a:	bd80      	pop	{r7, pc}
    2d7c:	00002d81 	.word	0x00002d81

00002d80 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b084      	sub	sp, #16
    2d84:	af00      	add	r7, sp, #0
    2d86:	0002      	movs	r2, r0
    2d88:	1dfb      	adds	r3, r7, #7
    2d8a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    2d8c:	1dfb      	adds	r3, r7, #7
    2d8e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2d90:	4b28      	ldr	r3, [pc, #160]	; (2e34 <_tc_interrupt_handler+0xb4>)
    2d92:	0092      	lsls	r2, r2, #2
    2d94:	58d3      	ldr	r3, [r2, r3]
    2d96:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	681b      	ldr	r3, [r3, #0]
    2d9c:	7b9b      	ldrb	r3, [r3, #14]
    2d9e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    2da0:	68fa      	ldr	r2, [r7, #12]
    2da2:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2da4:	4013      	ands	r3, r2
    2da6:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    2da8:	68fb      	ldr	r3, [r7, #12]
    2daa:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2dac:	230b      	movs	r3, #11
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	400a      	ands	r2, r1
    2db2:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2db4:	230b      	movs	r3, #11
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	2201      	movs	r2, #1
    2dbc:	4013      	ands	r3, r2
    2dbe:	d008      	beq.n	2dd2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2dc0:	68fb      	ldr	r3, [r7, #12]
    2dc2:	689b      	ldr	r3, [r3, #8]
    2dc4:	68fa      	ldr	r2, [r7, #12]
    2dc6:	0010      	movs	r0, r2
    2dc8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	2201      	movs	r2, #1
    2dd0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2dd2:	230b      	movs	r3, #11
    2dd4:	18fb      	adds	r3, r7, r3
    2dd6:	781b      	ldrb	r3, [r3, #0]
    2dd8:	2202      	movs	r2, #2
    2dda:	4013      	ands	r3, r2
    2ddc:	d008      	beq.n	2df0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	68db      	ldr	r3, [r3, #12]
    2de2:	68fa      	ldr	r2, [r7, #12]
    2de4:	0010      	movs	r0, r2
    2de6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2de8:	68fb      	ldr	r3, [r7, #12]
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	2202      	movs	r2, #2
    2dee:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2df0:	230b      	movs	r3, #11
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	2210      	movs	r2, #16
    2df8:	4013      	ands	r3, r2
    2dfa:	d008      	beq.n	2e0e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2dfc:	68fb      	ldr	r3, [r7, #12]
    2dfe:	691b      	ldr	r3, [r3, #16]
    2e00:	68fa      	ldr	r2, [r7, #12]
    2e02:	0010      	movs	r0, r2
    2e04:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2e06:	68fb      	ldr	r3, [r7, #12]
    2e08:	681b      	ldr	r3, [r3, #0]
    2e0a:	2210      	movs	r2, #16
    2e0c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2e0e:	230b      	movs	r3, #11
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	2220      	movs	r2, #32
    2e16:	4013      	ands	r3, r2
    2e18:	d008      	beq.n	2e2c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2e1a:	68fb      	ldr	r3, [r7, #12]
    2e1c:	695b      	ldr	r3, [r3, #20]
    2e1e:	68fa      	ldr	r2, [r7, #12]
    2e20:	0010      	movs	r0, r2
    2e22:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2e24:	68fb      	ldr	r3, [r7, #12]
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	2220      	movs	r2, #32
    2e2a:	739a      	strb	r2, [r3, #14]
	}
}
    2e2c:	46c0      	nop			; (mov r8, r8)
    2e2e:	46bd      	mov	sp, r7
    2e30:	b004      	add	sp, #16
    2e32:	bd80      	pop	{r7, pc}
    2e34:	200000e8 	.word	0x200000e8

00002e38 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e40:	687b      	ldr	r3, [r7, #4]
    2e42:	2280      	movs	r2, #128	; 0x80
    2e44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	2200      	movs	r2, #0
    2e4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e4c:	687b      	ldr	r3, [r7, #4]
    2e4e:	2201      	movs	r2, #1
    2e50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	2200      	movs	r2, #0
    2e56:	70da      	strb	r2, [r3, #3]
}
    2e58:	46c0      	nop			; (mov r8, r8)
    2e5a:	46bd      	mov	sp, r7
    2e5c:	b002      	add	sp, #8
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b084      	sub	sp, #16
    2e64:	af00      	add	r7, sp, #0
    2e66:	0002      	movs	r2, r0
    2e68:	1dfb      	adds	r3, r7, #7
    2e6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2e6c:	230f      	movs	r3, #15
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	1dfa      	adds	r2, r7, #7
    2e72:	7812      	ldrb	r2, [r2, #0]
    2e74:	09d2      	lsrs	r2, r2, #7
    2e76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2e78:	230e      	movs	r3, #14
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	1dfa      	adds	r2, r7, #7
    2e7e:	7812      	ldrb	r2, [r2, #0]
    2e80:	0952      	lsrs	r2, r2, #5
    2e82:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2e84:	4b0d      	ldr	r3, [pc, #52]	; (2ebc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2e86:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2e88:	230f      	movs	r3, #15
    2e8a:	18fb      	adds	r3, r7, r3
    2e8c:	781b      	ldrb	r3, [r3, #0]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d10f      	bne.n	2eb2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2e92:	230f      	movs	r3, #15
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	781b      	ldrb	r3, [r3, #0]
    2e98:	009b      	lsls	r3, r3, #2
    2e9a:	2210      	movs	r2, #16
    2e9c:	4694      	mov	ip, r2
    2e9e:	44bc      	add	ip, r7
    2ea0:	4463      	add	r3, ip
    2ea2:	3b08      	subs	r3, #8
    2ea4:	681a      	ldr	r2, [r3, #0]
    2ea6:	230e      	movs	r3, #14
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	781b      	ldrb	r3, [r3, #0]
    2eac:	01db      	lsls	r3, r3, #7
    2eae:	18d3      	adds	r3, r2, r3
    2eb0:	e000      	b.n	2eb4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2eb2:	2300      	movs	r3, #0
	}
}
    2eb4:	0018      	movs	r0, r3
    2eb6:	46bd      	mov	sp, r7
    2eb8:	b004      	add	sp, #16
    2eba:	bd80      	pop	{r7, pc}
    2ebc:	41004400 	.word	0x41004400

00002ec0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	0002      	movs	r2, r0
    2ec8:	1dfb      	adds	r3, r7, #7
    2eca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2ecc:	1dfb      	adds	r3, r7, #7
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	0018      	movs	r0, r3
    2ed2:	4b03      	ldr	r3, [pc, #12]	; (2ee0 <port_get_group_from_gpio_pin+0x20>)
    2ed4:	4798      	blx	r3
    2ed6:	0003      	movs	r3, r0
}
    2ed8:	0018      	movs	r0, r3
    2eda:	46bd      	mov	sp, r7
    2edc:	b002      	add	sp, #8
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	00002e61 	.word	0x00002e61

00002ee4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2ee4:	b580      	push	{r7, lr}
    2ee6:	b084      	sub	sp, #16
    2ee8:	af00      	add	r7, sp, #0
    2eea:	0002      	movs	r2, r0
    2eec:	1dfb      	adds	r3, r7, #7
    2eee:	701a      	strb	r2, [r3, #0]
    2ef0:	1dbb      	adds	r3, r7, #6
    2ef2:	1c0a      	adds	r2, r1, #0
    2ef4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2ef6:	1dfb      	adds	r3, r7, #7
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	0018      	movs	r0, r3
    2efc:	4b0d      	ldr	r3, [pc, #52]	; (2f34 <port_pin_set_output_level+0x50>)
    2efe:	4798      	blx	r3
    2f00:	0003      	movs	r3, r0
    2f02:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f04:	1dfb      	adds	r3, r7, #7
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	221f      	movs	r2, #31
    2f0a:	4013      	ands	r3, r2
    2f0c:	2201      	movs	r2, #1
    2f0e:	409a      	lsls	r2, r3
    2f10:	0013      	movs	r3, r2
    2f12:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2f14:	1dbb      	adds	r3, r7, #6
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d003      	beq.n	2f24 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2f1c:	68fb      	ldr	r3, [r7, #12]
    2f1e:	68ba      	ldr	r2, [r7, #8]
    2f20:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2f22:	e002      	b.n	2f2a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f24:	68fb      	ldr	r3, [r7, #12]
    2f26:	68ba      	ldr	r2, [r7, #8]
    2f28:	615a      	str	r2, [r3, #20]
	}
}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	46bd      	mov	sp, r7
    2f2e:	b004      	add	sp, #16
    2f30:	bd80      	pop	{r7, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	00002ec1 	.word	0x00002ec1

00002f38 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	2200      	movs	r2, #0
    2f44:	701a      	strb	r2, [r3, #0]
}
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	46bd      	mov	sp, r7
    2f4a:	b002      	add	sp, #8
    2f4c:	bd80      	pop	{r7, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)

00002f50 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b082      	sub	sp, #8
    2f54:	af00      	add	r7, sp, #0
    2f56:	0002      	movs	r2, r0
    2f58:	6039      	str	r1, [r7, #0]
    2f5a:	1dfb      	adds	r3, r7, #7
    2f5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2f5e:	1dfb      	adds	r3, r7, #7
    2f60:	781b      	ldrb	r3, [r3, #0]
    2f62:	2b01      	cmp	r3, #1
    2f64:	d00a      	beq.n	2f7c <system_apb_clock_set_mask+0x2c>
    2f66:	2b02      	cmp	r3, #2
    2f68:	d00f      	beq.n	2f8a <system_apb_clock_set_mask+0x3a>
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d114      	bne.n	2f98 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2f6e:	4b0e      	ldr	r3, [pc, #56]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f70:	4a0d      	ldr	r2, [pc, #52]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f72:	6991      	ldr	r1, [r2, #24]
    2f74:	683a      	ldr	r2, [r7, #0]
    2f76:	430a      	orrs	r2, r1
    2f78:	619a      	str	r2, [r3, #24]
			break;
    2f7a:	e00f      	b.n	2f9c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2f7c:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f7e:	4a0a      	ldr	r2, [pc, #40]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f80:	69d1      	ldr	r1, [r2, #28]
    2f82:	683a      	ldr	r2, [r7, #0]
    2f84:	430a      	orrs	r2, r1
    2f86:	61da      	str	r2, [r3, #28]
			break;
    2f88:	e008      	b.n	2f9c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2f8a:	4b07      	ldr	r3, [pc, #28]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f8c:	4a06      	ldr	r2, [pc, #24]	; (2fa8 <system_apb_clock_set_mask+0x58>)
    2f8e:	6a11      	ldr	r1, [r2, #32]
    2f90:	683a      	ldr	r2, [r7, #0]
    2f92:	430a      	orrs	r2, r1
    2f94:	621a      	str	r2, [r3, #32]
			break;
    2f96:	e001      	b.n	2f9c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2f98:	2317      	movs	r3, #23
    2f9a:	e000      	b.n	2f9e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2f9c:	2300      	movs	r3, #0
}
    2f9e:	0018      	movs	r0, r3
    2fa0:	46bd      	mov	sp, r7
    2fa2:	b002      	add	sp, #8
    2fa4:	bd80      	pop	{r7, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	40000400 	.word	0x40000400

00002fac <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2fb0:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <system_is_debugger_present+0x1c>)
    2fb2:	789b      	ldrb	r3, [r3, #2]
    2fb4:	b2db      	uxtb	r3, r3
    2fb6:	001a      	movs	r2, r3
    2fb8:	2302      	movs	r3, #2
    2fba:	4013      	ands	r3, r2
    2fbc:	1e5a      	subs	r2, r3, #1
    2fbe:	4193      	sbcs	r3, r2
    2fc0:	b2db      	uxtb	r3, r3
}
    2fc2:	0018      	movs	r0, r3
    2fc4:	46bd      	mov	sp, r7
    2fc6:	bd80      	pop	{r7, pc}
    2fc8:	41002000 	.word	0x41002000

00002fcc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b084      	sub	sp, #16
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	681b      	ldr	r3, [r3, #0]
    2fd8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2fda:	68fb      	ldr	r3, [r7, #12]
    2fdc:	7e1b      	ldrb	r3, [r3, #24]
    2fde:	b2db      	uxtb	r3, r3
    2fe0:	001a      	movs	r2, r3
    2fe2:	2301      	movs	r3, #1
    2fe4:	4013      	ands	r3, r2
    2fe6:	1e5a      	subs	r2, r3, #1
    2fe8:	4193      	sbcs	r3, r2
    2fea:	b2db      	uxtb	r3, r3
}
    2fec:	0018      	movs	r0, r3
    2fee:	46bd      	mov	sp, r7
    2ff0:	b004      	add	sp, #16
    2ff2:	bd80      	pop	{r7, pc}

00002ff4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	b084      	sub	sp, #16
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3002:	68fb      	ldr	r3, [r7, #12]
    3004:	7e1b      	ldrb	r3, [r3, #24]
    3006:	b2db      	uxtb	r3, r3
    3008:	001a      	movs	r2, r3
    300a:	2304      	movs	r3, #4
    300c:	4013      	ands	r3, r2
    300e:	1e5a      	subs	r2, r3, #1
    3010:	4193      	sbcs	r3, r2
    3012:	b2db      	uxtb	r3, r3
}
    3014:	0018      	movs	r0, r3
    3016:	46bd      	mov	sp, r7
    3018:	b004      	add	sp, #16
    301a:	bd80      	pop	{r7, pc}

0000301c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    301c:	b580      	push	{r7, lr}
    301e:	b084      	sub	sp, #16
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
    3024:	000a      	movs	r2, r1
    3026:	1cbb      	adds	r3, r7, #2
    3028:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	0018      	movs	r0, r3
    3034:	4b0a      	ldr	r3, [pc, #40]	; (3060 <spi_write+0x44>)
    3036:	4798      	blx	r3
    3038:	0003      	movs	r3, r0
    303a:	001a      	movs	r2, r3
    303c:	2301      	movs	r3, #1
    303e:	4053      	eors	r3, r2
    3040:	b2db      	uxtb	r3, r3
    3042:	2b00      	cmp	r3, #0
    3044:	d001      	beq.n	304a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3046:	2305      	movs	r3, #5
    3048:	e006      	b.n	3058 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    304a:	1cbb      	adds	r3, r7, #2
    304c:	881b      	ldrh	r3, [r3, #0]
    304e:	05db      	lsls	r3, r3, #23
    3050:	0dda      	lsrs	r2, r3, #23
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3056:	2300      	movs	r3, #0
}
    3058:	0018      	movs	r0, r3
    305a:	46bd      	mov	sp, r7
    305c:	b004      	add	sp, #16
    305e:	bd80      	pop	{r7, pc}
    3060:	00002fcd 	.word	0x00002fcd

00003064 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3064:	b580      	push	{r7, lr}
    3066:	b084      	sub	sp, #16
    3068:	af00      	add	r7, sp, #0
    306a:	6078      	str	r0, [r7, #4]
    306c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	0018      	movs	r0, r3
    3078:	4b1b      	ldr	r3, [pc, #108]	; (30e8 <spi_read+0x84>)
    307a:	4798      	blx	r3
    307c:	0003      	movs	r3, r0
    307e:	001a      	movs	r2, r3
    3080:	2301      	movs	r3, #1
    3082:	4053      	eors	r3, r2
    3084:	b2db      	uxtb	r3, r3
    3086:	2b00      	cmp	r3, #0
    3088:	d001      	beq.n	308e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    308a:	2310      	movs	r3, #16
    308c:	e027      	b.n	30de <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    308e:	230f      	movs	r3, #15
    3090:	18fb      	adds	r3, r7, r3
    3092:	2200      	movs	r2, #0
    3094:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3096:	68bb      	ldr	r3, [r7, #8]
    3098:	8b5b      	ldrh	r3, [r3, #26]
    309a:	b29b      	uxth	r3, r3
    309c:	001a      	movs	r2, r3
    309e:	2304      	movs	r3, #4
    30a0:	4013      	ands	r3, r2
    30a2:	d006      	beq.n	30b2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    30a4:	230f      	movs	r3, #15
    30a6:	18fb      	adds	r3, r7, r3
    30a8:	221e      	movs	r2, #30
    30aa:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30ac:	68bb      	ldr	r3, [r7, #8]
    30ae:	2204      	movs	r2, #4
    30b0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	799b      	ldrb	r3, [r3, #6]
    30b6:	2b01      	cmp	r3, #1
    30b8:	d108      	bne.n	30cc <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    30ba:	68bb      	ldr	r3, [r7, #8]
    30bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30be:	b29b      	uxth	r3, r3
    30c0:	05db      	lsls	r3, r3, #23
    30c2:	0ddb      	lsrs	r3, r3, #23
    30c4:	b29a      	uxth	r2, r3
    30c6:	683b      	ldr	r3, [r7, #0]
    30c8:	801a      	strh	r2, [r3, #0]
    30ca:	e005      	b.n	30d8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30cc:	68bb      	ldr	r3, [r7, #8]
    30ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30d0:	b2db      	uxtb	r3, r3
    30d2:	b29a      	uxth	r2, r3
    30d4:	683b      	ldr	r3, [r7, #0]
    30d6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    30d8:	230f      	movs	r3, #15
    30da:	18fb      	adds	r3, r7, r3
    30dc:	781b      	ldrb	r3, [r3, #0]
}
    30de:	0018      	movs	r0, r3
    30e0:	46bd      	mov	sp, r7
    30e2:	b004      	add	sp, #16
    30e4:	bd80      	pop	{r7, pc}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	00002ff5 	.word	0x00002ff5

000030ec <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    30ec:	b590      	push	{r4, r7, lr}
    30ee:	b093      	sub	sp, #76	; 0x4c
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
    30f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	681b      	ldr	r3, [r3, #0]
    30fa:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	681b      	ldr	r3, [r3, #0]
    3100:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3102:	231c      	movs	r3, #28
    3104:	18fb      	adds	r3, r7, r3
    3106:	0018      	movs	r0, r3
    3108:	4b85      	ldr	r3, [pc, #532]	; (3320 <_spi_set_config+0x234>)
    310a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    310c:	231c      	movs	r3, #28
    310e:	18fb      	adds	r3, r7, r3
    3110:	2200      	movs	r2, #0
    3112:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    3114:	683b      	ldr	r3, [r7, #0]
    3116:	781b      	ldrb	r3, [r3, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	d103      	bne.n	3124 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    311c:	231c      	movs	r3, #28
    311e:	18fb      	adds	r3, r7, r3
    3120:	2200      	movs	r2, #0
    3122:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3124:	683b      	ldr	r3, [r7, #0]
    3126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3128:	230c      	movs	r3, #12
    312a:	18fb      	adds	r3, r7, r3
    312c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    312e:	683b      	ldr	r3, [r7, #0]
    3130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3132:	230c      	movs	r3, #12
    3134:	18fb      	adds	r3, r7, r3
    3136:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3138:	683b      	ldr	r3, [r7, #0]
    313a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    313c:	230c      	movs	r3, #12
    313e:	18fb      	adds	r3, r7, r3
    3140:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    3142:	683b      	ldr	r3, [r7, #0]
    3144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    3146:	230c      	movs	r3, #12
    3148:	18fb      	adds	r3, r7, r3
    314a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    314c:	2347      	movs	r3, #71	; 0x47
    314e:	18fb      	adds	r3, r7, r3
    3150:	2200      	movs	r2, #0
    3152:	701a      	strb	r2, [r3, #0]
    3154:	e02c      	b.n	31b0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3156:	2347      	movs	r3, #71	; 0x47
    3158:	18fb      	adds	r3, r7, r3
    315a:	781a      	ldrb	r2, [r3, #0]
    315c:	230c      	movs	r3, #12
    315e:	18fb      	adds	r3, r7, r3
    3160:	0092      	lsls	r2, r2, #2
    3162:	58d3      	ldr	r3, [r2, r3]
    3164:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3168:	2b00      	cmp	r3, #0
    316a:	d109      	bne.n	3180 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    316c:	2347      	movs	r3, #71	; 0x47
    316e:	18fb      	adds	r3, r7, r3
    3170:	781a      	ldrb	r2, [r3, #0]
    3172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3174:	0011      	movs	r1, r2
    3176:	0018      	movs	r0, r3
    3178:	4b6a      	ldr	r3, [pc, #424]	; (3324 <_spi_set_config+0x238>)
    317a:	4798      	blx	r3
    317c:	0003      	movs	r3, r0
    317e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3182:	3301      	adds	r3, #1
    3184:	d00d      	beq.n	31a2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3188:	b2da      	uxtb	r2, r3
    318a:	231c      	movs	r3, #28
    318c:	18fb      	adds	r3, r7, r3
    318e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3192:	0c1b      	lsrs	r3, r3, #16
    3194:	b2db      	uxtb	r3, r3
    3196:	221c      	movs	r2, #28
    3198:	18ba      	adds	r2, r7, r2
    319a:	0011      	movs	r1, r2
    319c:	0018      	movs	r0, r3
    319e:	4b62      	ldr	r3, [pc, #392]	; (3328 <_spi_set_config+0x23c>)
    31a0:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    31a2:	2347      	movs	r3, #71	; 0x47
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781a      	ldrb	r2, [r3, #0]
    31a8:	2347      	movs	r3, #71	; 0x47
    31aa:	18fb      	adds	r3, r7, r3
    31ac:	3201      	adds	r2, #1
    31ae:	701a      	strb	r2, [r3, #0]
    31b0:	2347      	movs	r3, #71	; 0x47
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	2b03      	cmp	r3, #3
    31b8:	d9cd      	bls.n	3156 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    31ba:	683b      	ldr	r3, [r7, #0]
    31bc:	781a      	ldrb	r2, [r3, #0]
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    31c2:	683b      	ldr	r3, [r7, #0]
    31c4:	7c1a      	ldrb	r2, [r3, #16]
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    31ca:	683b      	ldr	r3, [r7, #0]
    31cc:	7c9a      	ldrb	r2, [r3, #18]
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    31d2:	683b      	ldr	r3, [r7, #0]
    31d4:	7d1a      	ldrb	r2, [r3, #20]
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    31da:	230a      	movs	r3, #10
    31dc:	18fb      	adds	r3, r7, r3
    31de:	2200      	movs	r2, #0
    31e0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    31e2:	2300      	movs	r3, #0
    31e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    31e6:	2300      	movs	r3, #0
    31e8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    31ea:	683b      	ldr	r3, [r7, #0]
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	2b01      	cmp	r3, #1
    31f0:	d129      	bne.n	3246 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	681b      	ldr	r3, [r3, #0]
    31f6:	0018      	movs	r0, r3
    31f8:	4b4c      	ldr	r3, [pc, #304]	; (332c <_spi_set_config+0x240>)
    31fa:	4798      	blx	r3
    31fc:	0003      	movs	r3, r0
    31fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3202:	3314      	adds	r3, #20
    3204:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3206:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3208:	b2db      	uxtb	r3, r3
    320a:	0018      	movs	r0, r3
    320c:	4b48      	ldr	r3, [pc, #288]	; (3330 <_spi_set_config+0x244>)
    320e:	4798      	blx	r3
    3210:	0003      	movs	r3, r0
    3212:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3214:	683b      	ldr	r3, [r7, #0]
    3216:	699b      	ldr	r3, [r3, #24]
    3218:	2223      	movs	r2, #35	; 0x23
    321a:	18bc      	adds	r4, r7, r2
    321c:	220a      	movs	r2, #10
    321e:	18ba      	adds	r2, r7, r2
    3220:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3222:	0018      	movs	r0, r3
    3224:	4b43      	ldr	r3, [pc, #268]	; (3334 <_spi_set_config+0x248>)
    3226:	4798      	blx	r3
    3228:	0003      	movs	r3, r0
    322a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    322c:	2323      	movs	r3, #35	; 0x23
    322e:	18fb      	adds	r3, r7, r3
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b00      	cmp	r3, #0
    3234:	d001      	beq.n	323a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3236:	2317      	movs	r3, #23
    3238:	e06d      	b.n	3316 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    323a:	230a      	movs	r3, #10
    323c:	18fb      	adds	r3, r7, r3
    323e:	881b      	ldrh	r3, [r3, #0]
    3240:	b2da      	uxtb	r2, r3
    3242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3244:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3246:	683b      	ldr	r3, [r7, #0]
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d11a      	bne.n	3284 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    324e:	683b      	ldr	r3, [r7, #0]
    3250:	699b      	ldr	r3, [r3, #24]
    3252:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    3254:	683b      	ldr	r3, [r7, #0]
    3256:	8b9b      	ldrh	r3, [r3, #28]
    3258:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    325e:	683a      	ldr	r2, [r7, #0]
    3260:	7f92      	ldrb	r2, [r2, #30]
    3262:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3264:	683a      	ldr	r2, [r7, #0]
    3266:	7fd2      	ldrb	r2, [r2, #31]
    3268:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    326a:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    326c:	431a      	orrs	r2, r3
    326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3270:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    3272:	683b      	ldr	r3, [r7, #0]
    3274:	2220      	movs	r2, #32
    3276:	5c9b      	ldrb	r3, [r3, r2]
    3278:	2b00      	cmp	r3, #0
    327a:	d003      	beq.n	3284 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    327e:	2240      	movs	r2, #64	; 0x40
    3280:	4313      	orrs	r3, r2
    3282:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    3284:	683b      	ldr	r3, [r7, #0]
    3286:	685b      	ldr	r3, [r3, #4]
    3288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    328a:	4313      	orrs	r3, r2
    328c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    328e:	683b      	ldr	r3, [r7, #0]
    3290:	689b      	ldr	r3, [r3, #8]
    3292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3294:	4313      	orrs	r3, r2
    3296:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3298:	683b      	ldr	r3, [r7, #0]
    329a:	68db      	ldr	r3, [r3, #12]
    329c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    329e:	4313      	orrs	r3, r2
    32a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    32a2:	683b      	ldr	r3, [r7, #0]
    32a4:	7c1b      	ldrb	r3, [r3, #16]
    32a6:	001a      	movs	r2, r3
    32a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32aa:	4313      	orrs	r3, r2
    32ac:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    32ae:	683b      	ldr	r3, [r7, #0]
    32b0:	7c5b      	ldrb	r3, [r3, #17]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d103      	bne.n	32be <_spi_set_config+0x1d2>
    32b6:	4b20      	ldr	r3, [pc, #128]	; (3338 <_spi_set_config+0x24c>)
    32b8:	4798      	blx	r3
    32ba:	1e03      	subs	r3, r0, #0
    32bc:	d003      	beq.n	32c6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    32be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    32c0:	2280      	movs	r2, #128	; 0x80
    32c2:	4313      	orrs	r3, r2
    32c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    32c6:	683b      	ldr	r3, [r7, #0]
    32c8:	7c9b      	ldrb	r3, [r3, #18]
    32ca:	2b00      	cmp	r3, #0
    32cc:	d004      	beq.n	32d8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    32ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32d0:	2280      	movs	r2, #128	; 0x80
    32d2:	0292      	lsls	r2, r2, #10
    32d4:	4313      	orrs	r3, r2
    32d6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    32d8:	683b      	ldr	r3, [r7, #0]
    32da:	7cdb      	ldrb	r3, [r3, #19]
    32dc:	2b00      	cmp	r3, #0
    32de:	d004      	beq.n	32ea <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    32e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32e2:	2280      	movs	r2, #128	; 0x80
    32e4:	0092      	lsls	r2, r2, #2
    32e6:	4313      	orrs	r3, r2
    32e8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    32ea:	683b      	ldr	r3, [r7, #0]
    32ec:	7d1b      	ldrb	r3, [r3, #20]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d004      	beq.n	32fc <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    32f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32f4:	2280      	movs	r2, #128	; 0x80
    32f6:	0192      	lsls	r2, r2, #6
    32f8:	4313      	orrs	r3, r2
    32fa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    32fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32fe:	681a      	ldr	r2, [r3, #0]
    3300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3302:	431a      	orrs	r2, r3
    3304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3306:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    330a:	685a      	ldr	r2, [r3, #4]
    330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    330e:	431a      	orrs	r2, r3
    3310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3312:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3314:	2300      	movs	r3, #0
}
    3316:	0018      	movs	r0, r3
    3318:	46bd      	mov	sp, r7
    331a:	b013      	add	sp, #76	; 0x4c
    331c:	bd90      	pop	{r4, r7, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	00002e39 	.word	0x00002e39
    3324:	00003ca1 	.word	0x00003ca1
    3328:	00004d41 	.word	0x00004d41
    332c:	00003e5d 	.word	0x00003e5d
    3330:	00004b79 	.word	0x00004b79
    3334:	00003b99 	.word	0x00003b99
    3338:	00002fad 	.word	0x00002fad

0000333c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    333c:	b590      	push	{r4, r7, lr}
    333e:	b08b      	sub	sp, #44	; 0x2c
    3340:	af00      	add	r7, sp, #0
    3342:	60f8      	str	r0, [r7, #12]
    3344:	60b9      	str	r1, [r7, #8]
    3346:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3348:	68fb      	ldr	r3, [r7, #12]
    334a:	68ba      	ldr	r2, [r7, #8]
    334c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    334e:	68fb      	ldr	r3, [r7, #12]
    3350:	681b      	ldr	r3, [r3, #0]
    3352:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3354:	6a3b      	ldr	r3, [r7, #32]
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2202      	movs	r2, #2
    335a:	4013      	ands	r3, r2
    335c:	d001      	beq.n	3362 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    335e:	231c      	movs	r3, #28
    3360:	e0a6      	b.n	34b0 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3362:	6a3b      	ldr	r3, [r7, #32]
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	2201      	movs	r2, #1
    3368:	4013      	ands	r3, r2
    336a:	d001      	beq.n	3370 <spi_init+0x34>
		return STATUS_BUSY;
    336c:	2305      	movs	r3, #5
    336e:	e09f      	b.n	34b0 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3370:	68fb      	ldr	r3, [r7, #12]
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	0018      	movs	r0, r3
    3376:	4b50      	ldr	r3, [pc, #320]	; (34b8 <spi_init+0x17c>)
    3378:	4798      	blx	r3
    337a:	0003      	movs	r3, r0
    337c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    337e:	69fb      	ldr	r3, [r7, #28]
    3380:	3302      	adds	r3, #2
    3382:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3384:	69fb      	ldr	r3, [r7, #28]
    3386:	3314      	adds	r3, #20
    3388:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    338a:	2201      	movs	r2, #1
    338c:	69bb      	ldr	r3, [r7, #24]
    338e:	409a      	lsls	r2, r3
    3390:	0013      	movs	r3, r2
    3392:	0019      	movs	r1, r3
    3394:	2002      	movs	r0, #2
    3396:	4b49      	ldr	r3, [pc, #292]	; (34bc <spi_init+0x180>)
    3398:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    339a:	2310      	movs	r3, #16
    339c:	18fb      	adds	r3, r7, r3
    339e:	0018      	movs	r0, r3
    33a0:	4b47      	ldr	r3, [pc, #284]	; (34c0 <spi_init+0x184>)
    33a2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	2224      	movs	r2, #36	; 0x24
    33a8:	5c9a      	ldrb	r2, [r3, r2]
    33aa:	2310      	movs	r3, #16
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    33b0:	697b      	ldr	r3, [r7, #20]
    33b2:	b2db      	uxtb	r3, r3
    33b4:	2210      	movs	r2, #16
    33b6:	18ba      	adds	r2, r7, r2
    33b8:	0011      	movs	r1, r2
    33ba:	0018      	movs	r0, r3
    33bc:	4b41      	ldr	r3, [pc, #260]	; (34c4 <spi_init+0x188>)
    33be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    33c0:	697b      	ldr	r3, [r7, #20]
    33c2:	b2db      	uxtb	r3, r3
    33c4:	0018      	movs	r0, r3
    33c6:	4b40      	ldr	r3, [pc, #256]	; (34c8 <spi_init+0x18c>)
    33c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	2224      	movs	r2, #36	; 0x24
    33ce:	5c9b      	ldrb	r3, [r3, r2]
    33d0:	2100      	movs	r1, #0
    33d2:	0018      	movs	r0, r3
    33d4:	4b3d      	ldr	r3, [pc, #244]	; (34cc <spi_init+0x190>)
    33d6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	781b      	ldrb	r3, [r3, #0]
    33dc:	2b01      	cmp	r3, #1
    33de:	d105      	bne.n	33ec <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    33e0:	6a3b      	ldr	r3, [r7, #32]
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	220c      	movs	r2, #12
    33e6:	431a      	orrs	r2, r3
    33e8:	6a3b      	ldr	r3, [r7, #32]
    33ea:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	781b      	ldrb	r3, [r3, #0]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d105      	bne.n	3400 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    33f4:	6a3b      	ldr	r3, [r7, #32]
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	2208      	movs	r2, #8
    33fa:	431a      	orrs	r2, r3
    33fc:	6a3b      	ldr	r3, [r7, #32]
    33fe:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3400:	2327      	movs	r3, #39	; 0x27
    3402:	18fb      	adds	r3, r7, r3
    3404:	2200      	movs	r2, #0
    3406:	701a      	strb	r2, [r3, #0]
    3408:	e010      	b.n	342c <spi_init+0xf0>
		module->callback[i]        = NULL;
    340a:	2327      	movs	r3, #39	; 0x27
    340c:	18fb      	adds	r3, r7, r3
    340e:	781b      	ldrb	r3, [r3, #0]
    3410:	68fa      	ldr	r2, [r7, #12]
    3412:	3302      	adds	r3, #2
    3414:	009b      	lsls	r3, r3, #2
    3416:	18d3      	adds	r3, r2, r3
    3418:	3304      	adds	r3, #4
    341a:	2200      	movs	r2, #0
    341c:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    341e:	2327      	movs	r3, #39	; 0x27
    3420:	18fb      	adds	r3, r7, r3
    3422:	781a      	ldrb	r2, [r3, #0]
    3424:	2327      	movs	r3, #39	; 0x27
    3426:	18fb      	adds	r3, r7, r3
    3428:	3201      	adds	r2, #1
    342a:	701a      	strb	r2, [r3, #0]
    342c:	2327      	movs	r3, #39	; 0x27
    342e:	18fb      	adds	r3, r7, r3
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	2b06      	cmp	r3, #6
    3434:	d9e9      	bls.n	340a <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3436:	68fb      	ldr	r3, [r7, #12]
    3438:	2200      	movs	r2, #0
    343a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    343c:	68fb      	ldr	r3, [r7, #12]
    343e:	2200      	movs	r2, #0
    3440:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	2200      	movs	r2, #0
    3446:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3448:	68fb      	ldr	r3, [r7, #12]
    344a:	2200      	movs	r2, #0
    344c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	2236      	movs	r2, #54	; 0x36
    3452:	2100      	movs	r1, #0
    3454:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	2237      	movs	r2, #55	; 0x37
    345a:	2100      	movs	r1, #0
    345c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	2238      	movs	r2, #56	; 0x38
    3462:	2100      	movs	r1, #0
    3464:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	2203      	movs	r2, #3
    346a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    346c:	68fb      	ldr	r3, [r7, #12]
    346e:	2200      	movs	r2, #0
    3470:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	2213      	movs	r2, #19
    3478:	18bc      	adds	r4, r7, r2
    347a:	0018      	movs	r0, r3
    347c:	4b0e      	ldr	r3, [pc, #56]	; (34b8 <spi_init+0x17c>)
    347e:	4798      	blx	r3
    3480:	0003      	movs	r3, r0
    3482:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3484:	4a12      	ldr	r2, [pc, #72]	; (34d0 <spi_init+0x194>)
    3486:	2313      	movs	r3, #19
    3488:	18fb      	adds	r3, r7, r3
    348a:	781b      	ldrb	r3, [r3, #0]
    348c:	0011      	movs	r1, r2
    348e:	0018      	movs	r0, r3
    3490:	4b10      	ldr	r3, [pc, #64]	; (34d4 <spi_init+0x198>)
    3492:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3494:	2313      	movs	r3, #19
    3496:	18fb      	adds	r3, r7, r3
    3498:	781a      	ldrb	r2, [r3, #0]
    349a:	4b0f      	ldr	r3, [pc, #60]	; (34d8 <spi_init+0x19c>)
    349c:	0092      	lsls	r2, r2, #2
    349e:	68f9      	ldr	r1, [r7, #12]
    34a0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    34a2:	687a      	ldr	r2, [r7, #4]
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	0011      	movs	r1, r2
    34a8:	0018      	movs	r0, r3
    34aa:	4b0c      	ldr	r3, [pc, #48]	; (34dc <spi_init+0x1a0>)
    34ac:	4798      	blx	r3
    34ae:	0003      	movs	r3, r0
}
    34b0:	0018      	movs	r0, r3
    34b2:	46bd      	mov	sp, r7
    34b4:	b00b      	add	sp, #44	; 0x2c
    34b6:	bd90      	pop	{r4, r7, pc}
    34b8:	00003e5d 	.word	0x00003e5d
    34bc:	00002f51 	.word	0x00002f51
    34c0:	00002f39 	.word	0x00002f39
    34c4:	00004a55 	.word	0x00004a55
    34c8:	00004a99 	.word	0x00004a99
    34cc:	00003c15 	.word	0x00003c15
    34d0:	00003875 	.word	0x00003875
    34d4:	00003ec1 	.word	0x00003ec1
    34d8:	200000f8 	.word	0x200000f8
    34dc:	000030ed 	.word	0x000030ed

000034e0 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    34e0:	b590      	push	{r4, r7, lr}
    34e2:	b087      	sub	sp, #28
    34e4:	af00      	add	r7, sp, #0
    34e6:	60f8      	str	r0, [r7, #12]
    34e8:	607a      	str	r2, [r7, #4]
    34ea:	230a      	movs	r3, #10
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	1c0a      	adds	r2, r1, #0
    34f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    34f2:	68fb      	ldr	r3, [r7, #12]
    34f4:	79db      	ldrb	r3, [r3, #7]
    34f6:	2201      	movs	r2, #1
    34f8:	4053      	eors	r3, r2
    34fa:	b2db      	uxtb	r3, r3
    34fc:	2b00      	cmp	r3, #0
    34fe:	d001      	beq.n	3504 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    3500:	231c      	movs	r3, #28
    3502:	e084      	b.n	360e <spi_transceive_wait+0x12e>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3504:	68fb      	ldr	r3, [r7, #12]
    3506:	2238      	movs	r2, #56	; 0x38
    3508:	5c9b      	ldrb	r3, [r3, r2]
    350a:	b2db      	uxtb	r3, r3
    350c:	2b05      	cmp	r3, #5
    350e:	d101      	bne.n	3514 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3510:	2305      	movs	r3, #5
    3512:	e07c      	b.n	360e <spi_transceive_wait+0x12e>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    3514:	2315      	movs	r3, #21
    3516:	18fb      	adds	r3, r7, r3
    3518:	2200      	movs	r2, #0
    351a:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    351c:	68fb      	ldr	r3, [r7, #12]
    351e:	795b      	ldrb	r3, [r3, #5]
    3520:	2b00      	cmp	r3, #0
    3522:	d121      	bne.n	3568 <spi_transceive_wait+0x88>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3524:	2316      	movs	r3, #22
    3526:	18fb      	adds	r3, r7, r3
    3528:	2200      	movs	r2, #0
    352a:	801a      	strh	r2, [r3, #0]
    352c:	e014      	b.n	3558 <spi_transceive_wait+0x78>
			if (spi_is_ready_to_write(module)) {
    352e:	68fb      	ldr	r3, [r7, #12]
    3530:	0018      	movs	r0, r3
    3532:	4b39      	ldr	r3, [pc, #228]	; (3618 <spi_transceive_wait+0x138>)
    3534:	4798      	blx	r3
    3536:	1e03      	subs	r3, r0, #0
    3538:	d115      	bne.n	3566 <spi_transceive_wait+0x86>
				break;
			} else if (j == SPI_TIMEOUT) {
    353a:	2316      	movs	r3, #22
    353c:	18fb      	adds	r3, r7, r3
    353e:	881b      	ldrh	r3, [r3, #0]
    3540:	4a36      	ldr	r2, [pc, #216]	; (361c <spi_transceive_wait+0x13c>)
    3542:	4293      	cmp	r3, r2
    3544:	d101      	bne.n	354a <spi_transceive_wait+0x6a>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3546:	2312      	movs	r3, #18
    3548:	e061      	b.n	360e <spi_transceive_wait+0x12e>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    354a:	2316      	movs	r3, #22
    354c:	18fb      	adds	r3, r7, r3
    354e:	881a      	ldrh	r2, [r3, #0]
    3550:	2316      	movs	r3, #22
    3552:	18fb      	adds	r3, r7, r3
    3554:	3201      	adds	r2, #1
    3556:	801a      	strh	r2, [r3, #0]
    3558:	2316      	movs	r3, #22
    355a:	18fb      	adds	r3, r7, r3
    355c:	881b      	ldrh	r3, [r3, #0]
    355e:	4a2f      	ldr	r2, [pc, #188]	; (361c <spi_transceive_wait+0x13c>)
    3560:	4293      	cmp	r3, r2
    3562:	d9e4      	bls.n	352e <spi_transceive_wait+0x4e>
    3564:	e000      	b.n	3568 <spi_transceive_wait+0x88>
			if (spi_is_ready_to_write(module)) {
				break;
    3566:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    3568:	46c0      	nop			; (mov r8, r8)
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	0018      	movs	r0, r3
    356e:	4b2a      	ldr	r3, [pc, #168]	; (3618 <spi_transceive_wait+0x138>)
    3570:	4798      	blx	r3
    3572:	0003      	movs	r3, r0
    3574:	001a      	movs	r2, r3
    3576:	2301      	movs	r3, #1
    3578:	4053      	eors	r3, r2
    357a:	b2db      	uxtb	r3, r3
    357c:	2b00      	cmp	r3, #0
    357e:	d1f4      	bne.n	356a <spi_transceive_wait+0x8a>
	}

	/* Write data */
	spi_write(module, tx_data);
    3580:	230a      	movs	r3, #10
    3582:	18fb      	adds	r3, r7, r3
    3584:	881a      	ldrh	r2, [r3, #0]
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	0011      	movs	r1, r2
    358a:	0018      	movs	r0, r3
    358c:	4b24      	ldr	r3, [pc, #144]	; (3620 <spi_transceive_wait+0x140>)
    358e:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	795b      	ldrb	r3, [r3, #5]
    3594:	2b00      	cmp	r3, #0
    3596:	d121      	bne.n	35dc <spi_transceive_wait+0xfc>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    3598:	2316      	movs	r3, #22
    359a:	18fb      	adds	r3, r7, r3
    359c:	2200      	movs	r2, #0
    359e:	801a      	strh	r2, [r3, #0]
    35a0:	e014      	b.n	35cc <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    35a2:	68fb      	ldr	r3, [r7, #12]
    35a4:	0018      	movs	r0, r3
    35a6:	4b1f      	ldr	r3, [pc, #124]	; (3624 <spi_transceive_wait+0x144>)
    35a8:	4798      	blx	r3
    35aa:	1e03      	subs	r3, r0, #0
    35ac:	d115      	bne.n	35da <spi_transceive_wait+0xfa>
				break;
			} else if (j == SPI_TIMEOUT) {
    35ae:	2316      	movs	r3, #22
    35b0:	18fb      	adds	r3, r7, r3
    35b2:	881b      	ldrh	r3, [r3, #0]
    35b4:	4a19      	ldr	r2, [pc, #100]	; (361c <spi_transceive_wait+0x13c>)
    35b6:	4293      	cmp	r3, r2
    35b8:	d101      	bne.n	35be <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    35ba:	2312      	movs	r3, #18
    35bc:	e027      	b.n	360e <spi_transceive_wait+0x12e>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    35be:	2316      	movs	r3, #22
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	881a      	ldrh	r2, [r3, #0]
    35c4:	2316      	movs	r3, #22
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	3201      	adds	r2, #1
    35ca:	801a      	strh	r2, [r3, #0]
    35cc:	2316      	movs	r3, #22
    35ce:	18fb      	adds	r3, r7, r3
    35d0:	881b      	ldrh	r3, [r3, #0]
    35d2:	4a12      	ldr	r2, [pc, #72]	; (361c <spi_transceive_wait+0x13c>)
    35d4:	4293      	cmp	r3, r2
    35d6:	d9e4      	bls.n	35a2 <spi_transceive_wait+0xc2>
    35d8:	e000      	b.n	35dc <spi_transceive_wait+0xfc>
			if (spi_is_ready_to_read(module)) {
				break;
    35da:	46c0      	nop			; (mov r8, r8)
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    35dc:	46c0      	nop			; (mov r8, r8)
    35de:	68fb      	ldr	r3, [r7, #12]
    35e0:	0018      	movs	r0, r3
    35e2:	4b10      	ldr	r3, [pc, #64]	; (3624 <spi_transceive_wait+0x144>)
    35e4:	4798      	blx	r3
    35e6:	0003      	movs	r3, r0
    35e8:	001a      	movs	r2, r3
    35ea:	2301      	movs	r3, #1
    35ec:	4053      	eors	r3, r2
    35ee:	b2db      	uxtb	r3, r3
    35f0:	2b00      	cmp	r3, #0
    35f2:	d1f4      	bne.n	35de <spi_transceive_wait+0xfe>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    35f4:	2315      	movs	r3, #21
    35f6:	18fc      	adds	r4, r7, r3
    35f8:	687a      	ldr	r2, [r7, #4]
    35fa:	68fb      	ldr	r3, [r7, #12]
    35fc:	0011      	movs	r1, r2
    35fe:	0018      	movs	r0, r3
    3600:	4b09      	ldr	r3, [pc, #36]	; (3628 <spi_transceive_wait+0x148>)
    3602:	4798      	blx	r3
    3604:	0003      	movs	r3, r0
    3606:	7023      	strb	r3, [r4, #0]

	return retval;
    3608:	2315      	movs	r3, #21
    360a:	18fb      	adds	r3, r7, r3
    360c:	781b      	ldrb	r3, [r3, #0]
}
    360e:	0018      	movs	r0, r3
    3610:	46bd      	mov	sp, r7
    3612:	b007      	add	sp, #28
    3614:	bd90      	pop	{r4, r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	00002fcd 	.word	0x00002fcd
    361c:	00002710 	.word	0x00002710
    3620:	0000301d 	.word	0x0000301d
    3624:	00002ff5 	.word	0x00002ff5
    3628:	00003065 	.word	0x00003065

0000362c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    362c:	b580      	push	{r7, lr}
    362e:	b086      	sub	sp, #24
    3630:	af00      	add	r7, sp, #0
    3632:	60f8      	str	r0, [r7, #12]
    3634:	60b9      	str	r1, [r7, #8]
    3636:	1dfb      	adds	r3, r7, #7
    3638:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    363a:	68fb      	ldr	r3, [r7, #12]
    363c:	795b      	ldrb	r3, [r3, #5]
    363e:	2b01      	cmp	r3, #1
    3640:	d001      	beq.n	3646 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    3642:	2315      	movs	r3, #21
    3644:	e05c      	b.n	3700 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3646:	68fb      	ldr	r3, [r7, #12]
    3648:	7a1b      	ldrb	r3, [r3, #8]
    364a:	2201      	movs	r2, #1
    364c:	4053      	eors	r3, r2
    364e:	b2db      	uxtb	r3, r3
    3650:	2b00      	cmp	r3, #0
    3652:	d054      	beq.n	36fe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    3654:	1dfb      	adds	r3, r7, #7
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	2b00      	cmp	r3, #0
    365a:	d04a      	beq.n	36f2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    365c:	68bb      	ldr	r3, [r7, #8]
    365e:	785b      	ldrb	r3, [r3, #1]
    3660:	2b00      	cmp	r3, #0
    3662:	d03f      	beq.n	36e4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3664:	68fb      	ldr	r3, [r7, #12]
    3666:	0018      	movs	r0, r3
    3668:	4b27      	ldr	r3, [pc, #156]	; (3708 <spi_select_slave+0xdc>)
    366a:	4798      	blx	r3
    366c:	0003      	movs	r3, r0
    366e:	001a      	movs	r2, r3
    3670:	2301      	movs	r3, #1
    3672:	4053      	eors	r3, r2
    3674:	b2db      	uxtb	r3, r3
    3676:	2b00      	cmp	r3, #0
    3678:	d007      	beq.n	368a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    367a:	68bb      	ldr	r3, [r7, #8]
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	2101      	movs	r1, #1
    3680:	0018      	movs	r0, r3
    3682:	4b22      	ldr	r3, [pc, #136]	; (370c <spi_select_slave+0xe0>)
    3684:	4798      	blx	r3
					return STATUS_BUSY;
    3686:	2305      	movs	r3, #5
    3688:	e03a      	b.n	3700 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    368a:	68bb      	ldr	r3, [r7, #8]
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	2100      	movs	r1, #0
    3690:	0018      	movs	r0, r3
    3692:	4b1e      	ldr	r3, [pc, #120]	; (370c <spi_select_slave+0xe0>)
    3694:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    3696:	68bb      	ldr	r3, [r7, #8]
    3698:	789b      	ldrb	r3, [r3, #2]
    369a:	b29a      	uxth	r2, r3
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	0011      	movs	r1, r2
    36a0:	0018      	movs	r0, r3
    36a2:	4b1b      	ldr	r3, [pc, #108]	; (3710 <spi_select_slave+0xe4>)
    36a4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    36a6:	68fb      	ldr	r3, [r7, #12]
    36a8:	79db      	ldrb	r3, [r3, #7]
    36aa:	2201      	movs	r2, #1
    36ac:	4053      	eors	r3, r2
    36ae:	b2db      	uxtb	r3, r3
    36b0:	2b00      	cmp	r3, #0
    36b2:	d024      	beq.n	36fe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    36b4:	46c0      	nop			; (mov r8, r8)
    36b6:	68fb      	ldr	r3, [r7, #12]
    36b8:	0018      	movs	r0, r3
    36ba:	4b16      	ldr	r3, [pc, #88]	; (3714 <spi_select_slave+0xe8>)
    36bc:	4798      	blx	r3
    36be:	0003      	movs	r3, r0
    36c0:	001a      	movs	r2, r3
    36c2:	2301      	movs	r3, #1
    36c4:	4053      	eors	r3, r2
    36c6:	b2db      	uxtb	r3, r3
    36c8:	2b00      	cmp	r3, #0
    36ca:	d1f4      	bne.n	36b6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    36cc:	2316      	movs	r3, #22
    36ce:	18fb      	adds	r3, r7, r3
    36d0:	2200      	movs	r2, #0
    36d2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    36d4:	2316      	movs	r3, #22
    36d6:	18fa      	adds	r2, r7, r3
    36d8:	68fb      	ldr	r3, [r7, #12]
    36da:	0011      	movs	r1, r2
    36dc:	0018      	movs	r0, r3
    36de:	4b0e      	ldr	r3, [pc, #56]	; (3718 <spi_select_slave+0xec>)
    36e0:	4798      	blx	r3
    36e2:	e00c      	b.n	36fe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	781b      	ldrb	r3, [r3, #0]
    36e8:	2100      	movs	r1, #0
    36ea:	0018      	movs	r0, r3
    36ec:	4b07      	ldr	r3, [pc, #28]	; (370c <spi_select_slave+0xe0>)
    36ee:	4798      	blx	r3
    36f0:	e005      	b.n	36fe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    36f2:	68bb      	ldr	r3, [r7, #8]
    36f4:	781b      	ldrb	r3, [r3, #0]
    36f6:	2101      	movs	r1, #1
    36f8:	0018      	movs	r0, r3
    36fa:	4b04      	ldr	r3, [pc, #16]	; (370c <spi_select_slave+0xe0>)
    36fc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    36fe:	2300      	movs	r3, #0
}
    3700:	0018      	movs	r0, r3
    3702:	46bd      	mov	sp, r7
    3704:	b006      	add	sp, #24
    3706:	bd80      	pop	{r7, pc}
    3708:	00002fcd 	.word	0x00002fcd
    370c:	00002ee5 	.word	0x00002ee5
    3710:	0000301d 	.word	0x0000301d
    3714:	00002ff5 	.word	0x00002ff5
    3718:	00003065 	.word	0x00003065

0000371c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    371c:	b580      	push	{r7, lr}
    371e:	b084      	sub	sp, #16
    3720:	af00      	add	r7, sp, #0
    3722:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	681b      	ldr	r3, [r3, #0]
    3728:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	b2da      	uxtb	r2, r3
    3732:	230e      	movs	r3, #14
    3734:	18fb      	adds	r3, r7, r3
    3736:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    373c:	1c5a      	adds	r2, r3, #1
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	799b      	ldrb	r3, [r3, #6]
    3746:	2b01      	cmp	r3, #1
    3748:	d113      	bne.n	3772 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	b2db      	uxtb	r3, r3
    3752:	021b      	lsls	r3, r3, #8
    3754:	b21a      	sxth	r2, r3
    3756:	230e      	movs	r3, #14
    3758:	18fb      	adds	r3, r7, r3
    375a:	2100      	movs	r1, #0
    375c:	5e5b      	ldrsh	r3, [r3, r1]
    375e:	4313      	orrs	r3, r2
    3760:	b21a      	sxth	r2, r3
    3762:	230e      	movs	r3, #14
    3764:	18fb      	adds	r3, r7, r3
    3766:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    376c:	1c5a      	adds	r2, r3, #1
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3772:	230e      	movs	r3, #14
    3774:	18fb      	adds	r3, r7, r3
    3776:	881b      	ldrh	r3, [r3, #0]
    3778:	05db      	lsls	r3, r3, #23
    377a:	0dda      	lsrs	r2, r3, #23
    377c:	68bb      	ldr	r3, [r7, #8]
    377e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    3784:	b29b      	uxth	r3, r3
    3786:	3b01      	subs	r3, #1
    3788:	b29a      	uxth	r2, r3
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	46bd      	mov	sp, r7
    3792:	b004      	add	sp, #16
    3794:	bd80      	pop	{r7, pc}
    3796:	46c0      	nop			; (mov r8, r8)

00003798 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    3798:	b580      	push	{r7, lr}
    379a:	b084      	sub	sp, #16
    379c:	af00      	add	r7, sp, #0
    379e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    37a6:	4b08      	ldr	r3, [pc, #32]	; (37c8 <_spi_write_dummy+0x30>)
    37a8:	881b      	ldrh	r3, [r3, #0]
    37aa:	001a      	movs	r2, r3
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    37b4:	b29b      	uxth	r3, r3
    37b6:	3b01      	subs	r3, #1
    37b8:	b29a      	uxth	r2, r3
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	46bd      	mov	sp, r7
    37c2:	b004      	add	sp, #16
    37c4:	bd80      	pop	{r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	200000f4 	.word	0x200000f4

000037cc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    37cc:	b580      	push	{r7, lr}
    37ce:	b084      	sub	sp, #16
    37d0:	af00      	add	r7, sp, #0
    37d2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    37da:	230a      	movs	r3, #10
    37dc:	18fb      	adds	r3, r7, r3
    37de:	2200      	movs	r2, #0
    37e0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37e6:	230a      	movs	r3, #10
    37e8:	18fb      	adds	r3, r7, r3
    37ea:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    37f0:	b29b      	uxth	r3, r3
    37f2:	3b01      	subs	r3, #1
    37f4:	b29a      	uxth	r2, r3
    37f6:	687b      	ldr	r3, [r7, #4]
    37f8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    37fa:	46c0      	nop			; (mov r8, r8)
    37fc:	46bd      	mov	sp, r7
    37fe:	b004      	add	sp, #16
    3800:	bd80      	pop	{r7, pc}
    3802:	46c0      	nop			; (mov r8, r8)

00003804 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    3804:	b580      	push	{r7, lr}
    3806:	b084      	sub	sp, #16
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3812:	68fb      	ldr	r3, [r7, #12]
    3814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3816:	b29a      	uxth	r2, r3
    3818:	230a      	movs	r3, #10
    381a:	18fb      	adds	r3, r7, r3
    381c:	05d2      	lsls	r2, r2, #23
    381e:	0dd2      	lsrs	r2, r2, #23
    3820:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3826:	220a      	movs	r2, #10
    3828:	18ba      	adds	r2, r7, r2
    382a:	8812      	ldrh	r2, [r2, #0]
    382c:	b2d2      	uxtb	r2, r2
    382e:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3834:	1c5a      	adds	r2, r3, #1
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	799b      	ldrb	r3, [r3, #6]
    383e:	2b01      	cmp	r3, #1
    3840:	d10d      	bne.n	385e <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3846:	220a      	movs	r2, #10
    3848:	18ba      	adds	r2, r7, r2
    384a:	8812      	ldrh	r2, [r2, #0]
    384c:	0a12      	lsrs	r2, r2, #8
    384e:	b292      	uxth	r2, r2
    3850:	b2d2      	uxtb	r2, r2
    3852:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3858:	1c5a      	adds	r2, r3, #1
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3862:	b29b      	uxth	r3, r3
    3864:	3b01      	subs	r3, #1
    3866:	b29a      	uxth	r2, r3
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	861a      	strh	r2, [r3, #48]	; 0x30
}
    386c:	46c0      	nop			; (mov r8, r8)
    386e:	46bd      	mov	sp, r7
    3870:	b004      	add	sp, #16
    3872:	bd80      	pop	{r7, pc}

00003874 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3874:	b580      	push	{r7, lr}
    3876:	b086      	sub	sp, #24
    3878:	af00      	add	r7, sp, #0
    387a:	0002      	movs	r2, r0
    387c:	1dfb      	adds	r3, r7, #7
    387e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    3880:	1dfb      	adds	r3, r7, #7
    3882:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    3884:	4bb9      	ldr	r3, [pc, #740]	; (3b6c <_spi_interrupt_handler+0x2f8>)
    3886:	0092      	lsls	r2, r2, #2
    3888:	58d3      	ldr	r3, [r2, r3]
    388a:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    388c:	697b      	ldr	r3, [r7, #20]
    388e:	681b      	ldr	r3, [r3, #0]
    3890:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3892:	697b      	ldr	r3, [r7, #20]
    3894:	2237      	movs	r2, #55	; 0x37
    3896:	5c9a      	ldrb	r2, [r3, r2]
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	2136      	movs	r1, #54	; 0x36
    389c:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    389e:	230f      	movs	r3, #15
    38a0:	18fb      	adds	r3, r7, r3
    38a2:	400a      	ands	r2, r1
    38a4:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    38a6:	693b      	ldr	r3, [r7, #16]
    38a8:	7e1b      	ldrb	r3, [r3, #24]
    38aa:	b2da      	uxtb	r2, r3
    38ac:	230c      	movs	r3, #12
    38ae:	18fb      	adds	r3, r7, r3
    38b0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    38b2:	693b      	ldr	r3, [r7, #16]
    38b4:	7d9b      	ldrb	r3, [r3, #22]
    38b6:	b2db      	uxtb	r3, r3
    38b8:	b29a      	uxth	r2, r3
    38ba:	230c      	movs	r3, #12
    38bc:	18fb      	adds	r3, r7, r3
    38be:	210c      	movs	r1, #12
    38c0:	1879      	adds	r1, r7, r1
    38c2:	8809      	ldrh	r1, [r1, #0]
    38c4:	400a      	ands	r2, r1
    38c6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    38c8:	230c      	movs	r3, #12
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	881b      	ldrh	r3, [r3, #0]
    38ce:	2201      	movs	r2, #1
    38d0:	4013      	ands	r3, r2
    38d2:	d041      	beq.n	3958 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    38d4:	697b      	ldr	r3, [r7, #20]
    38d6:	795b      	ldrb	r3, [r3, #5]
    38d8:	2b01      	cmp	r3, #1
    38da:	d110      	bne.n	38fe <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    38dc:	697b      	ldr	r3, [r7, #20]
    38de:	7a5b      	ldrb	r3, [r3, #9]
    38e0:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    38e2:	2b00      	cmp	r3, #0
    38e4:	d10b      	bne.n	38fe <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    38e6:	697b      	ldr	r3, [r7, #20]
    38e8:	0018      	movs	r0, r3
    38ea:	4ba1      	ldr	r3, [pc, #644]	; (3b70 <_spi_interrupt_handler+0x2fc>)
    38ec:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    38ee:	697b      	ldr	r3, [r7, #20]
    38f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    38f2:	b29b      	uxth	r3, r3
    38f4:	2b00      	cmp	r3, #0
    38f6:	d102      	bne.n	38fe <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    38f8:	693b      	ldr	r3, [r7, #16]
    38fa:	2201      	movs	r2, #1
    38fc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    38fe:	697b      	ldr	r3, [r7, #20]
    3900:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    3902:	2b01      	cmp	r3, #1
    3904:	d104      	bne.n	3910 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3906:	697b      	ldr	r3, [r7, #20]
    3908:	7a5b      	ldrb	r3, [r3, #9]
    390a:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    390c:	2b00      	cmp	r3, #0
    390e:	d108      	bne.n	3922 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3910:	697b      	ldr	r3, [r7, #20]
    3912:	795b      	ldrb	r3, [r3, #5]
    3914:	2b00      	cmp	r3, #0
    3916:	d11f      	bne.n	3958 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    3918:	697b      	ldr	r3, [r7, #20]
    391a:	7a5b      	ldrb	r3, [r3, #9]
    391c:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    391e:	2b00      	cmp	r3, #0
    3920:	d01a      	beq.n	3958 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    3922:	697b      	ldr	r3, [r7, #20]
    3924:	0018      	movs	r0, r3
    3926:	4b93      	ldr	r3, [pc, #588]	; (3b74 <_spi_interrupt_handler+0x300>)
    3928:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    392a:	697b      	ldr	r3, [r7, #20]
    392c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    392e:	b29b      	uxth	r3, r3
    3930:	2b00      	cmp	r3, #0
    3932:	d111      	bne.n	3958 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3934:	693b      	ldr	r3, [r7, #16]
    3936:	2201      	movs	r2, #1
    3938:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    393a:	697b      	ldr	r3, [r7, #20]
    393c:	7a5b      	ldrb	r3, [r3, #9]
    393e:	b2db      	uxtb	r3, r3
    3940:	2b01      	cmp	r3, #1
    3942:	d109      	bne.n	3958 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	79db      	ldrb	r3, [r3, #7]
    3948:	2201      	movs	r2, #1
    394a:	4053      	eors	r3, r2
    394c:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    394e:	2b00      	cmp	r3, #0
    3950:	d002      	beq.n	3958 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3952:	693b      	ldr	r3, [r7, #16]
    3954:	2202      	movs	r2, #2
    3956:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3958:	230c      	movs	r3, #12
    395a:	18fb      	adds	r3, r7, r3
    395c:	881b      	ldrh	r3, [r3, #0]
    395e:	2204      	movs	r2, #4
    3960:	4013      	ands	r3, r2
    3962:	d100      	bne.n	3966 <_spi_interrupt_handler+0xf2>
    3964:	e07e      	b.n	3a64 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3966:	693b      	ldr	r3, [r7, #16]
    3968:	8b5b      	ldrh	r3, [r3, #26]
    396a:	b29b      	uxth	r3, r3
    396c:	001a      	movs	r2, r3
    396e:	2304      	movs	r3, #4
    3970:	4013      	ands	r3, r2
    3972:	d022      	beq.n	39ba <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3974:	697b      	ldr	r3, [r7, #20]
    3976:	7a5b      	ldrb	r3, [r3, #9]
    3978:	b2db      	uxtb	r3, r3
    397a:	2b01      	cmp	r3, #1
    397c:	d014      	beq.n	39a8 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    397e:	697b      	ldr	r3, [r7, #20]
    3980:	2238      	movs	r2, #56	; 0x38
    3982:	211e      	movs	r1, #30
    3984:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3986:	697b      	ldr	r3, [r7, #20]
    3988:	2203      	movs	r2, #3
    398a:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    398c:	693b      	ldr	r3, [r7, #16]
    398e:	2205      	movs	r2, #5
    3990:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3992:	230f      	movs	r3, #15
    3994:	18fb      	adds	r3, r7, r3
    3996:	781b      	ldrb	r3, [r3, #0]
    3998:	2208      	movs	r2, #8
    399a:	4013      	ands	r3, r2
    399c:	d004      	beq.n	39a8 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    399e:	697b      	ldr	r3, [r7, #20]
    39a0:	699b      	ldr	r3, [r3, #24]
    39a2:	697a      	ldr	r2, [r7, #20]
    39a4:	0010      	movs	r0, r2
    39a6:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    39a8:	693b      	ldr	r3, [r7, #16]
    39aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39ac:	230a      	movs	r3, #10
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    39b2:	693b      	ldr	r3, [r7, #16]
    39b4:	2204      	movs	r2, #4
    39b6:	835a      	strh	r2, [r3, #26]
    39b8:	e054      	b.n	3a64 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    39ba:	697b      	ldr	r3, [r7, #20]
    39bc:	7a5b      	ldrb	r3, [r3, #9]
    39be:	b2db      	uxtb	r3, r3
    39c0:	2b01      	cmp	r3, #1
    39c2:	d11e      	bne.n	3a02 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    39c4:	697b      	ldr	r3, [r7, #20]
    39c6:	0018      	movs	r0, r3
    39c8:	4b6b      	ldr	r3, [pc, #428]	; (3b78 <_spi_interrupt_handler+0x304>)
    39ca:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    39cc:	697b      	ldr	r3, [r7, #20]
    39ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    39d0:	b29b      	uxth	r3, r3
    39d2:	2b00      	cmp	r3, #0
    39d4:	d146      	bne.n	3a64 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    39d6:	693b      	ldr	r3, [r7, #16]
    39d8:	2204      	movs	r2, #4
    39da:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    39dc:	697b      	ldr	r3, [r7, #20]
    39de:	2238      	movs	r2, #56	; 0x38
    39e0:	2100      	movs	r1, #0
    39e2:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    39e4:	697b      	ldr	r3, [r7, #20]
    39e6:	2203      	movs	r2, #3
    39e8:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    39ea:	230f      	movs	r3, #15
    39ec:	18fb      	adds	r3, r7, r3
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	2201      	movs	r2, #1
    39f2:	4013      	ands	r3, r2
    39f4:	d036      	beq.n	3a64 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    39f6:	697b      	ldr	r3, [r7, #20]
    39f8:	68db      	ldr	r3, [r3, #12]
    39fa:	697a      	ldr	r2, [r7, #20]
    39fc:	0010      	movs	r0, r2
    39fe:	4798      	blx	r3
    3a00:	e030      	b.n	3a64 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    3a02:	697b      	ldr	r3, [r7, #20]
    3a04:	0018      	movs	r0, r3
    3a06:	4b5d      	ldr	r3, [pc, #372]	; (3b7c <_spi_interrupt_handler+0x308>)
    3a08:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3a0a:	697b      	ldr	r3, [r7, #20]
    3a0c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3a0e:	b29b      	uxth	r3, r3
    3a10:	2b00      	cmp	r3, #0
    3a12:	d127      	bne.n	3a64 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    3a14:	697b      	ldr	r3, [r7, #20]
    3a16:	2238      	movs	r2, #56	; 0x38
    3a18:	2100      	movs	r1, #0
    3a1a:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3a1c:	693b      	ldr	r3, [r7, #16]
    3a1e:	2204      	movs	r2, #4
    3a20:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3a22:	697b      	ldr	r3, [r7, #20]
    3a24:	7a5b      	ldrb	r3, [r3, #9]
    3a26:	b2db      	uxtb	r3, r3
    3a28:	2b02      	cmp	r3, #2
    3a2a:	d10b      	bne.n	3a44 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3a2c:	230f      	movs	r3, #15
    3a2e:	18fb      	adds	r3, r7, r3
    3a30:	781b      	ldrb	r3, [r3, #0]
    3a32:	2204      	movs	r2, #4
    3a34:	4013      	ands	r3, r2
    3a36:	d015      	beq.n	3a64 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3a38:	697b      	ldr	r3, [r7, #20]
    3a3a:	695b      	ldr	r3, [r3, #20]
    3a3c:	697a      	ldr	r2, [r7, #20]
    3a3e:	0010      	movs	r0, r2
    3a40:	4798      	blx	r3
    3a42:	e00f      	b.n	3a64 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    3a44:	697b      	ldr	r3, [r7, #20]
    3a46:	7a5b      	ldrb	r3, [r3, #9]
    3a48:	b2db      	uxtb	r3, r3
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d10a      	bne.n	3a64 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3a4e:	230f      	movs	r3, #15
    3a50:	18fb      	adds	r3, r7, r3
    3a52:	781b      	ldrb	r3, [r3, #0]
    3a54:	2202      	movs	r2, #2
    3a56:	4013      	ands	r3, r2
    3a58:	d004      	beq.n	3a64 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3a5a:	697b      	ldr	r3, [r7, #20]
    3a5c:	691b      	ldr	r3, [r3, #16]
    3a5e:	697a      	ldr	r2, [r7, #20]
    3a60:	0010      	movs	r0, r2
    3a62:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3a64:	230c      	movs	r3, #12
    3a66:	18fb      	adds	r3, r7, r3
    3a68:	881b      	ldrh	r3, [r3, #0]
    3a6a:	2202      	movs	r2, #2
    3a6c:	4013      	ands	r3, r2
    3a6e:	d046      	beq.n	3afe <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    3a70:	697b      	ldr	r3, [r7, #20]
    3a72:	795b      	ldrb	r3, [r3, #5]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d11d      	bne.n	3ab4 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    3a78:	693b      	ldr	r3, [r7, #16]
    3a7a:	2207      	movs	r2, #7
    3a7c:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3a7e:	693b      	ldr	r3, [r7, #16]
    3a80:	2202      	movs	r2, #2
    3a82:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    3a84:	697b      	ldr	r3, [r7, #20]
    3a86:	2203      	movs	r2, #3
    3a88:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    3a8a:	697b      	ldr	r3, [r7, #20]
    3a8c:	2200      	movs	r2, #0
    3a8e:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    3a90:	697b      	ldr	r3, [r7, #20]
    3a92:	2200      	movs	r2, #0
    3a94:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    3a96:	697b      	ldr	r3, [r7, #20]
    3a98:	2238      	movs	r2, #56	; 0x38
    3a9a:	2100      	movs	r1, #0
    3a9c:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    3a9e:	230f      	movs	r3, #15
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	781b      	ldrb	r3, [r3, #0]
    3aa4:	2210      	movs	r2, #16
    3aa6:	4013      	ands	r3, r2
    3aa8:	d004      	beq.n	3ab4 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    3aaa:	697b      	ldr	r3, [r7, #20]
    3aac:	69db      	ldr	r3, [r3, #28]
    3aae:	697a      	ldr	r2, [r7, #20]
    3ab0:	0010      	movs	r0, r2
    3ab2:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3ab4:	697b      	ldr	r3, [r7, #20]
    3ab6:	795b      	ldrb	r3, [r3, #5]
    3ab8:	2b01      	cmp	r3, #1
    3aba:	d120      	bne.n	3afe <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3abc:	697b      	ldr	r3, [r7, #20]
    3abe:	7a5b      	ldrb	r3, [r3, #9]
    3ac0:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3ac2:	2b01      	cmp	r3, #1
    3ac4:	d11b      	bne.n	3afe <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3ac6:	697b      	ldr	r3, [r7, #20]
    3ac8:	79db      	ldrb	r3, [r3, #7]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d014      	beq.n	3afe <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3ad4:	693b      	ldr	r3, [r7, #16]
    3ad6:	2202      	movs	r2, #2
    3ad8:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3ada:	697b      	ldr	r3, [r7, #20]
    3adc:	2203      	movs	r2, #3
    3ade:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    3ae0:	697b      	ldr	r3, [r7, #20]
    3ae2:	2238      	movs	r2, #56	; 0x38
    3ae4:	2100      	movs	r1, #0
    3ae6:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3ae8:	230f      	movs	r3, #15
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	781b      	ldrb	r3, [r3, #0]
    3aee:	2201      	movs	r2, #1
    3af0:	4013      	ands	r3, r2
    3af2:	d004      	beq.n	3afe <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3af4:	697b      	ldr	r3, [r7, #20]
    3af6:	68db      	ldr	r3, [r3, #12]
    3af8:	697a      	ldr	r2, [r7, #20]
    3afa:	0010      	movs	r0, r2
    3afc:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    3afe:	230c      	movs	r3, #12
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	881b      	ldrh	r3, [r3, #0]
    3b04:	2208      	movs	r2, #8
    3b06:	4013      	ands	r3, r2
    3b08:	d014      	beq.n	3b34 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    3b0a:	697b      	ldr	r3, [r7, #20]
    3b0c:	795b      	ldrb	r3, [r3, #5]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d110      	bne.n	3b34 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	2208      	movs	r2, #8
    3b16:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3b18:	693b      	ldr	r3, [r7, #16]
    3b1a:	2208      	movs	r2, #8
    3b1c:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    3b1e:	230f      	movs	r3, #15
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	781b      	ldrb	r3, [r3, #0]
    3b24:	2220      	movs	r2, #32
    3b26:	4013      	ands	r3, r2
    3b28:	d004      	beq.n	3b34 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    3b2a:	697b      	ldr	r3, [r7, #20]
    3b2c:	6a1b      	ldr	r3, [r3, #32]
    3b2e:	697a      	ldr	r2, [r7, #20]
    3b30:	0010      	movs	r0, r2
    3b32:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3b34:	230c      	movs	r3, #12
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	881b      	ldrh	r3, [r3, #0]
    3b3a:	2280      	movs	r2, #128	; 0x80
    3b3c:	4013      	ands	r3, r2
    3b3e:	d010      	beq.n	3b62 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3b40:	693b      	ldr	r3, [r7, #16]
    3b42:	2280      	movs	r2, #128	; 0x80
    3b44:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3b46:	693b      	ldr	r3, [r7, #16]
    3b48:	2280      	movs	r2, #128	; 0x80
    3b4a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3b4c:	230f      	movs	r3, #15
    3b4e:	18fb      	adds	r3, r7, r3
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	2240      	movs	r2, #64	; 0x40
    3b54:	4013      	ands	r3, r2
    3b56:	d004      	beq.n	3b62 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3b58:	697b      	ldr	r3, [r7, #20]
    3b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b5c:	697a      	ldr	r2, [r7, #20]
    3b5e:	0010      	movs	r0, r2
    3b60:	4798      	blx	r3
		}
	}
#  endif
}
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	46bd      	mov	sp, r7
    3b66:	b006      	add	sp, #24
    3b68:	bd80      	pop	{r7, pc}
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	200000f8 	.word	0x200000f8
    3b70:	00003799 	.word	0x00003799
    3b74:	0000371d 	.word	0x0000371d
    3b78:	000037cd 	.word	0x000037cd
    3b7c:	00003805 	.word	0x00003805

00003b80 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	2200      	movs	r2, #0
    3b8c:	701a      	strb	r2, [r3, #0]
}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	46bd      	mov	sp, r7
    3b92:	b002      	add	sp, #8
    3b94:	bd80      	pop	{r7, pc}
    3b96:	46c0      	nop			; (mov r8, r8)

00003b98 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	b086      	sub	sp, #24
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	60f8      	str	r0, [r7, #12]
    3ba0:	60b9      	str	r1, [r7, #8]
    3ba2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3ba4:	2316      	movs	r3, #22
    3ba6:	18fb      	adds	r3, r7, r3
    3ba8:	2200      	movs	r2, #0
    3baa:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3bac:	68bb      	ldr	r3, [r7, #8]
    3bae:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3bb0:	68bb      	ldr	r3, [r7, #8]
    3bb2:	085a      	lsrs	r2, r3, #1
    3bb4:	68fb      	ldr	r3, [r7, #12]
    3bb6:	429a      	cmp	r2, r3
    3bb8:	d201      	bcs.n	3bbe <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bba:	2340      	movs	r3, #64	; 0x40
    3bbc:	e026      	b.n	3c0c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3bbe:	68bb      	ldr	r3, [r7, #8]
    3bc0:	085b      	lsrs	r3, r3, #1
    3bc2:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3bc4:	e00a      	b.n	3bdc <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3bc6:	693a      	ldr	r2, [r7, #16]
    3bc8:	68fb      	ldr	r3, [r7, #12]
    3bca:	1ad3      	subs	r3, r2, r3
    3bcc:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3bce:	2316      	movs	r3, #22
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	881a      	ldrh	r2, [r3, #0]
    3bd4:	2316      	movs	r3, #22
    3bd6:	18fb      	adds	r3, r7, r3
    3bd8:	3201      	adds	r2, #1
    3bda:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3bdc:	693a      	ldr	r2, [r7, #16]
    3bde:	68fb      	ldr	r3, [r7, #12]
    3be0:	429a      	cmp	r2, r3
    3be2:	d2f0      	bcs.n	3bc6 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3be4:	2316      	movs	r3, #22
    3be6:	18fb      	adds	r3, r7, r3
    3be8:	2216      	movs	r2, #22
    3bea:	18ba      	adds	r2, r7, r2
    3bec:	8812      	ldrh	r2, [r2, #0]
    3bee:	3a01      	subs	r2, #1
    3bf0:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3bf2:	2316      	movs	r3, #22
    3bf4:	18fb      	adds	r3, r7, r3
    3bf6:	881b      	ldrh	r3, [r3, #0]
    3bf8:	2bff      	cmp	r3, #255	; 0xff
    3bfa:	d901      	bls.n	3c00 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bfc:	2340      	movs	r3, #64	; 0x40
    3bfe:	e005      	b.n	3c0c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	2216      	movs	r2, #22
    3c04:	18ba      	adds	r2, r7, r2
    3c06:	8812      	ldrh	r2, [r2, #0]
    3c08:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3c0a:	2300      	movs	r3, #0
	}
}
    3c0c:	0018      	movs	r0, r3
    3c0e:	46bd      	mov	sp, r7
    3c10:	b006      	add	sp, #24
    3c12:	bd80      	pop	{r7, pc}

00003c14 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b084      	sub	sp, #16
    3c18:	af00      	add	r7, sp, #0
    3c1a:	0002      	movs	r2, r0
    3c1c:	1dfb      	adds	r3, r7, #7
    3c1e:	701a      	strb	r2, [r3, #0]
    3c20:	1dbb      	adds	r3, r7, #6
    3c22:	1c0a      	adds	r2, r1, #0
    3c24:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3c26:	4b1a      	ldr	r3, [pc, #104]	; (3c90 <sercom_set_gclk_generator+0x7c>)
    3c28:	781b      	ldrb	r3, [r3, #0]
    3c2a:	2201      	movs	r2, #1
    3c2c:	4053      	eors	r3, r2
    3c2e:	b2db      	uxtb	r3, r3
    3c30:	2b00      	cmp	r3, #0
    3c32:	d103      	bne.n	3c3c <sercom_set_gclk_generator+0x28>
    3c34:	1dbb      	adds	r3, r7, #6
    3c36:	781b      	ldrb	r3, [r3, #0]
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d01b      	beq.n	3c74 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3c3c:	230c      	movs	r3, #12
    3c3e:	18fb      	adds	r3, r7, r3
    3c40:	0018      	movs	r0, r3
    3c42:	4b14      	ldr	r3, [pc, #80]	; (3c94 <sercom_set_gclk_generator+0x80>)
    3c44:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3c46:	230c      	movs	r3, #12
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	1dfa      	adds	r2, r7, #7
    3c4c:	7812      	ldrb	r2, [r2, #0]
    3c4e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3c50:	230c      	movs	r3, #12
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	0019      	movs	r1, r3
    3c56:	2013      	movs	r0, #19
    3c58:	4b0f      	ldr	r3, [pc, #60]	; (3c98 <sercom_set_gclk_generator+0x84>)
    3c5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3c5c:	2013      	movs	r0, #19
    3c5e:	4b0f      	ldr	r3, [pc, #60]	; (3c9c <sercom_set_gclk_generator+0x88>)
    3c60:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3c62:	4b0b      	ldr	r3, [pc, #44]	; (3c90 <sercom_set_gclk_generator+0x7c>)
    3c64:	1dfa      	adds	r2, r7, #7
    3c66:	7812      	ldrb	r2, [r2, #0]
    3c68:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3c6a:	4b09      	ldr	r3, [pc, #36]	; (3c90 <sercom_set_gclk_generator+0x7c>)
    3c6c:	2201      	movs	r2, #1
    3c6e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3c70:	2300      	movs	r3, #0
    3c72:	e008      	b.n	3c86 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3c74:	4b06      	ldr	r3, [pc, #24]	; (3c90 <sercom_set_gclk_generator+0x7c>)
    3c76:	785b      	ldrb	r3, [r3, #1]
    3c78:	1dfa      	adds	r2, r7, #7
    3c7a:	7812      	ldrb	r2, [r2, #0]
    3c7c:	429a      	cmp	r2, r3
    3c7e:	d101      	bne.n	3c84 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3c80:	2300      	movs	r3, #0
    3c82:	e000      	b.n	3c86 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3c84:	231d      	movs	r3, #29
}
    3c86:	0018      	movs	r0, r3
    3c88:	46bd      	mov	sp, r7
    3c8a:	b004      	add	sp, #16
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	2000002c 	.word	0x2000002c
    3c94:	00003b81 	.word	0x00003b81
    3c98:	00004a55 	.word	0x00004a55
    3c9c:	00004a99 	.word	0x00004a99

00003ca0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
    3ca8:	000a      	movs	r2, r1
    3caa:	1cfb      	adds	r3, r7, #3
    3cac:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	4a4d      	ldr	r2, [pc, #308]	; (3de8 <_sercom_get_default_pad+0x148>)
    3cb2:	4293      	cmp	r3, r2
    3cb4:	d03f      	beq.n	3d36 <_sercom_get_default_pad+0x96>
    3cb6:	4a4c      	ldr	r2, [pc, #304]	; (3de8 <_sercom_get_default_pad+0x148>)
    3cb8:	4293      	cmp	r3, r2
    3cba:	d806      	bhi.n	3cca <_sercom_get_default_pad+0x2a>
    3cbc:	4a4b      	ldr	r2, [pc, #300]	; (3dec <_sercom_get_default_pad+0x14c>)
    3cbe:	4293      	cmp	r3, r2
    3cc0:	d00f      	beq.n	3ce2 <_sercom_get_default_pad+0x42>
    3cc2:	4a4b      	ldr	r2, [pc, #300]	; (3df0 <_sercom_get_default_pad+0x150>)
    3cc4:	4293      	cmp	r3, r2
    3cc6:	d021      	beq.n	3d0c <_sercom_get_default_pad+0x6c>
    3cc8:	e089      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3cca:	4a4a      	ldr	r2, [pc, #296]	; (3df4 <_sercom_get_default_pad+0x154>)
    3ccc:	4293      	cmp	r3, r2
    3cce:	d100      	bne.n	3cd2 <_sercom_get_default_pad+0x32>
    3cd0:	e05b      	b.n	3d8a <_sercom_get_default_pad+0xea>
    3cd2:	4a49      	ldr	r2, [pc, #292]	; (3df8 <_sercom_get_default_pad+0x158>)
    3cd4:	4293      	cmp	r3, r2
    3cd6:	d100      	bne.n	3cda <_sercom_get_default_pad+0x3a>
    3cd8:	e06c      	b.n	3db4 <_sercom_get_default_pad+0x114>
    3cda:	4a48      	ldr	r2, [pc, #288]	; (3dfc <_sercom_get_default_pad+0x15c>)
    3cdc:	4293      	cmp	r3, r2
    3cde:	d03f      	beq.n	3d60 <_sercom_get_default_pad+0xc0>
    3ce0:	e07d      	b.n	3dde <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3ce2:	1cfb      	adds	r3, r7, #3
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	2b01      	cmp	r3, #1
    3ce8:	d00a      	beq.n	3d00 <_sercom_get_default_pad+0x60>
    3cea:	dc02      	bgt.n	3cf2 <_sercom_get_default_pad+0x52>
    3cec:	2b00      	cmp	r3, #0
    3cee:	d005      	beq.n	3cfc <_sercom_get_default_pad+0x5c>
    3cf0:	e075      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3cf2:	2b02      	cmp	r3, #2
    3cf4:	d006      	beq.n	3d04 <_sercom_get_default_pad+0x64>
    3cf6:	2b03      	cmp	r3, #3
    3cf8:	d006      	beq.n	3d08 <_sercom_get_default_pad+0x68>
    3cfa:	e070      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3cfc:	4b40      	ldr	r3, [pc, #256]	; (3e00 <_sercom_get_default_pad+0x160>)
    3cfe:	e06f      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d00:	4b40      	ldr	r3, [pc, #256]	; (3e04 <_sercom_get_default_pad+0x164>)
    3d02:	e06d      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d04:	4b40      	ldr	r3, [pc, #256]	; (3e08 <_sercom_get_default_pad+0x168>)
    3d06:	e06b      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d08:	4b40      	ldr	r3, [pc, #256]	; (3e0c <_sercom_get_default_pad+0x16c>)
    3d0a:	e069      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d0c:	1cfb      	adds	r3, r7, #3
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	2b01      	cmp	r3, #1
    3d12:	d00a      	beq.n	3d2a <_sercom_get_default_pad+0x8a>
    3d14:	dc02      	bgt.n	3d1c <_sercom_get_default_pad+0x7c>
    3d16:	2b00      	cmp	r3, #0
    3d18:	d005      	beq.n	3d26 <_sercom_get_default_pad+0x86>
    3d1a:	e060      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d1c:	2b02      	cmp	r3, #2
    3d1e:	d006      	beq.n	3d2e <_sercom_get_default_pad+0x8e>
    3d20:	2b03      	cmp	r3, #3
    3d22:	d006      	beq.n	3d32 <_sercom_get_default_pad+0x92>
    3d24:	e05b      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d26:	2303      	movs	r3, #3
    3d28:	e05a      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d2a:	4b39      	ldr	r3, [pc, #228]	; (3e10 <_sercom_get_default_pad+0x170>)
    3d2c:	e058      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d2e:	4b39      	ldr	r3, [pc, #228]	; (3e14 <_sercom_get_default_pad+0x174>)
    3d30:	e056      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d32:	4b39      	ldr	r3, [pc, #228]	; (3e18 <_sercom_get_default_pad+0x178>)
    3d34:	e054      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d36:	1cfb      	adds	r3, r7, #3
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2b01      	cmp	r3, #1
    3d3c:	d00a      	beq.n	3d54 <_sercom_get_default_pad+0xb4>
    3d3e:	dc02      	bgt.n	3d46 <_sercom_get_default_pad+0xa6>
    3d40:	2b00      	cmp	r3, #0
    3d42:	d005      	beq.n	3d50 <_sercom_get_default_pad+0xb0>
    3d44:	e04b      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d46:	2b02      	cmp	r3, #2
    3d48:	d006      	beq.n	3d58 <_sercom_get_default_pad+0xb8>
    3d4a:	2b03      	cmp	r3, #3
    3d4c:	d006      	beq.n	3d5c <_sercom_get_default_pad+0xbc>
    3d4e:	e046      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d50:	4b32      	ldr	r3, [pc, #200]	; (3e1c <_sercom_get_default_pad+0x17c>)
    3d52:	e045      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d54:	4b32      	ldr	r3, [pc, #200]	; (3e20 <_sercom_get_default_pad+0x180>)
    3d56:	e043      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d58:	4b32      	ldr	r3, [pc, #200]	; (3e24 <_sercom_get_default_pad+0x184>)
    3d5a:	e041      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d5c:	4b32      	ldr	r3, [pc, #200]	; (3e28 <_sercom_get_default_pad+0x188>)
    3d5e:	e03f      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d60:	1cfb      	adds	r3, r7, #3
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	2b01      	cmp	r3, #1
    3d66:	d00a      	beq.n	3d7e <_sercom_get_default_pad+0xde>
    3d68:	dc02      	bgt.n	3d70 <_sercom_get_default_pad+0xd0>
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d005      	beq.n	3d7a <_sercom_get_default_pad+0xda>
    3d6e:	e036      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d70:	2b02      	cmp	r3, #2
    3d72:	d006      	beq.n	3d82 <_sercom_get_default_pad+0xe2>
    3d74:	2b03      	cmp	r3, #3
    3d76:	d006      	beq.n	3d86 <_sercom_get_default_pad+0xe6>
    3d78:	e031      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d7a:	4b2c      	ldr	r3, [pc, #176]	; (3e2c <_sercom_get_default_pad+0x18c>)
    3d7c:	e030      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d7e:	4b2c      	ldr	r3, [pc, #176]	; (3e30 <_sercom_get_default_pad+0x190>)
    3d80:	e02e      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d82:	4b2c      	ldr	r3, [pc, #176]	; (3e34 <_sercom_get_default_pad+0x194>)
    3d84:	e02c      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d86:	4b2c      	ldr	r3, [pc, #176]	; (3e38 <_sercom_get_default_pad+0x198>)
    3d88:	e02a      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3d8a:	1cfb      	adds	r3, r7, #3
    3d8c:	781b      	ldrb	r3, [r3, #0]
    3d8e:	2b01      	cmp	r3, #1
    3d90:	d00a      	beq.n	3da8 <_sercom_get_default_pad+0x108>
    3d92:	dc02      	bgt.n	3d9a <_sercom_get_default_pad+0xfa>
    3d94:	2b00      	cmp	r3, #0
    3d96:	d005      	beq.n	3da4 <_sercom_get_default_pad+0x104>
    3d98:	e021      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3d9a:	2b02      	cmp	r3, #2
    3d9c:	d006      	beq.n	3dac <_sercom_get_default_pad+0x10c>
    3d9e:	2b03      	cmp	r3, #3
    3da0:	d006      	beq.n	3db0 <_sercom_get_default_pad+0x110>
    3da2:	e01c      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3da4:	4b25      	ldr	r3, [pc, #148]	; (3e3c <_sercom_get_default_pad+0x19c>)
    3da6:	e01b      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3da8:	4b25      	ldr	r3, [pc, #148]	; (3e40 <_sercom_get_default_pad+0x1a0>)
    3daa:	e019      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3dac:	4b25      	ldr	r3, [pc, #148]	; (3e44 <_sercom_get_default_pad+0x1a4>)
    3dae:	e017      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3db0:	4b25      	ldr	r3, [pc, #148]	; (3e48 <_sercom_get_default_pad+0x1a8>)
    3db2:	e015      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3db4:	1cfb      	adds	r3, r7, #3
    3db6:	781b      	ldrb	r3, [r3, #0]
    3db8:	2b01      	cmp	r3, #1
    3dba:	d00a      	beq.n	3dd2 <_sercom_get_default_pad+0x132>
    3dbc:	dc02      	bgt.n	3dc4 <_sercom_get_default_pad+0x124>
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d005      	beq.n	3dce <_sercom_get_default_pad+0x12e>
    3dc2:	e00c      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3dc4:	2b02      	cmp	r3, #2
    3dc6:	d006      	beq.n	3dd6 <_sercom_get_default_pad+0x136>
    3dc8:	2b03      	cmp	r3, #3
    3dca:	d006      	beq.n	3dda <_sercom_get_default_pad+0x13a>
    3dcc:	e007      	b.n	3dde <_sercom_get_default_pad+0x13e>
    3dce:	4b1f      	ldr	r3, [pc, #124]	; (3e4c <_sercom_get_default_pad+0x1ac>)
    3dd0:	e006      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3dd2:	4b1f      	ldr	r3, [pc, #124]	; (3e50 <_sercom_get_default_pad+0x1b0>)
    3dd4:	e004      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3dd6:	4b1f      	ldr	r3, [pc, #124]	; (3e54 <_sercom_get_default_pad+0x1b4>)
    3dd8:	e002      	b.n	3de0 <_sercom_get_default_pad+0x140>
    3dda:	4b1f      	ldr	r3, [pc, #124]	; (3e58 <_sercom_get_default_pad+0x1b8>)
    3ddc:	e000      	b.n	3de0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3dde:	2300      	movs	r3, #0
}
    3de0:	0018      	movs	r0, r3
    3de2:	46bd      	mov	sp, r7
    3de4:	b002      	add	sp, #8
    3de6:	bd80      	pop	{r7, pc}
    3de8:	42001000 	.word	0x42001000
    3dec:	42000800 	.word	0x42000800
    3df0:	42000c00 	.word	0x42000c00
    3df4:	42001800 	.word	0x42001800
    3df8:	42001c00 	.word	0x42001c00
    3dfc:	42001400 	.word	0x42001400
    3e00:	00040003 	.word	0x00040003
    3e04:	00050003 	.word	0x00050003
    3e08:	00060003 	.word	0x00060003
    3e0c:	00070003 	.word	0x00070003
    3e10:	00010003 	.word	0x00010003
    3e14:	001e0003 	.word	0x001e0003
    3e18:	001f0003 	.word	0x001f0003
    3e1c:	00080003 	.word	0x00080003
    3e20:	00090003 	.word	0x00090003
    3e24:	000a0003 	.word	0x000a0003
    3e28:	000b0003 	.word	0x000b0003
    3e2c:	00100003 	.word	0x00100003
    3e30:	00110003 	.word	0x00110003
    3e34:	00120003 	.word	0x00120003
    3e38:	00130003 	.word	0x00130003
    3e3c:	000c0003 	.word	0x000c0003
    3e40:	000d0003 	.word	0x000d0003
    3e44:	000e0003 	.word	0x000e0003
    3e48:	000f0003 	.word	0x000f0003
    3e4c:	00160003 	.word	0x00160003
    3e50:	00170003 	.word	0x00170003
    3e54:	00180003 	.word	0x00180003
    3e58:	00190003 	.word	0x00190003

00003e5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3e5c:	b590      	push	{r4, r7, lr}
    3e5e:	b08b      	sub	sp, #44	; 0x2c
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3e64:	230c      	movs	r3, #12
    3e66:	18fb      	adds	r3, r7, r3
    3e68:	4a0f      	ldr	r2, [pc, #60]	; (3ea8 <_sercom_get_sercom_inst_index+0x4c>)
    3e6a:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e6c:	c313      	stmia	r3!, {r0, r1, r4}
    3e6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e70:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e72:	2300      	movs	r3, #0
    3e74:	627b      	str	r3, [r7, #36]	; 0x24
    3e76:	e00e      	b.n	3e96 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3e78:	230c      	movs	r3, #12
    3e7a:	18fb      	adds	r3, r7, r3
    3e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e7e:	0092      	lsls	r2, r2, #2
    3e80:	58d3      	ldr	r3, [r2, r3]
    3e82:	1e1a      	subs	r2, r3, #0
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	429a      	cmp	r2, r3
    3e88:	d102      	bne.n	3e90 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	e006      	b.n	3e9e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e92:	3301      	adds	r3, #1
    3e94:	627b      	str	r3, [r7, #36]	; 0x24
    3e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e98:	2b05      	cmp	r3, #5
    3e9a:	d9ed      	bls.n	3e78 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e9c:	2300      	movs	r3, #0
}
    3e9e:	0018      	movs	r0, r3
    3ea0:	46bd      	mov	sp, r7
    3ea2:	b00b      	add	sp, #44	; 0x2c
    3ea4:	bd90      	pop	{r4, r7, pc}
    3ea6:	46c0      	nop			; (mov r8, r8)
    3ea8:	00008e64 	.word	0x00008e64

00003eac <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b082      	sub	sp, #8
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	0002      	movs	r2, r0
    3eb4:	1dfb      	adds	r3, r7, #7
    3eb6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3eb8:	46c0      	nop			; (mov r8, r8)
    3eba:	46bd      	mov	sp, r7
    3ebc:	b002      	add	sp, #8
    3ebe:	bd80      	pop	{r7, pc}

00003ec0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	0002      	movs	r2, r0
    3ec8:	6039      	str	r1, [r7, #0]
    3eca:	1dfb      	adds	r3, r7, #7
    3ecc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3ece:	4b13      	ldr	r3, [pc, #76]	; (3f1c <_sercom_set_handler+0x5c>)
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	2201      	movs	r2, #1
    3ed4:	4053      	eors	r3, r2
    3ed6:	b2db      	uxtb	r3, r3
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d015      	beq.n	3f08 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3edc:	2300      	movs	r3, #0
    3ede:	60fb      	str	r3, [r7, #12]
    3ee0:	e00c      	b.n	3efc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3ee2:	4b0f      	ldr	r3, [pc, #60]	; (3f20 <_sercom_set_handler+0x60>)
    3ee4:	68fa      	ldr	r2, [r7, #12]
    3ee6:	0092      	lsls	r2, r2, #2
    3ee8:	490e      	ldr	r1, [pc, #56]	; (3f24 <_sercom_set_handler+0x64>)
    3eea:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3eec:	4b0e      	ldr	r3, [pc, #56]	; (3f28 <_sercom_set_handler+0x68>)
    3eee:	68fa      	ldr	r2, [r7, #12]
    3ef0:	0092      	lsls	r2, r2, #2
    3ef2:	2100      	movs	r1, #0
    3ef4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	3301      	adds	r3, #1
    3efa:	60fb      	str	r3, [r7, #12]
    3efc:	68fb      	ldr	r3, [r7, #12]
    3efe:	2b05      	cmp	r3, #5
    3f00:	d9ef      	bls.n	3ee2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3f02:	4b06      	ldr	r3, [pc, #24]	; (3f1c <_sercom_set_handler+0x5c>)
    3f04:	2201      	movs	r2, #1
    3f06:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	781a      	ldrb	r2, [r3, #0]
    3f0c:	4b04      	ldr	r3, [pc, #16]	; (3f20 <_sercom_set_handler+0x60>)
    3f0e:	0092      	lsls	r2, r2, #2
    3f10:	6839      	ldr	r1, [r7, #0]
    3f12:	50d1      	str	r1, [r2, r3]
}
    3f14:	46c0      	nop			; (mov r8, r8)
    3f16:	46bd      	mov	sp, r7
    3f18:	b004      	add	sp, #16
    3f1a:	bd80      	pop	{r7, pc}
    3f1c:	2000002e 	.word	0x2000002e
    3f20:	20000030 	.word	0x20000030
    3f24:	00003ead 	.word	0x00003ead
    3f28:	200000f8 	.word	0x200000f8

00003f2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3f2c:	b590      	push	{r4, r7, lr}
    3f2e:	b085      	sub	sp, #20
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3f34:	2308      	movs	r3, #8
    3f36:	18fa      	adds	r2, r7, r3
    3f38:	4b0c      	ldr	r3, [pc, #48]	; (3f6c <_sercom_get_interrupt_vector+0x40>)
    3f3a:	0010      	movs	r0, r2
    3f3c:	0019      	movs	r1, r3
    3f3e:	2306      	movs	r3, #6
    3f40:	001a      	movs	r2, r3
    3f42:	4b0b      	ldr	r3, [pc, #44]	; (3f70 <_sercom_get_interrupt_vector+0x44>)
    3f44:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3f46:	230f      	movs	r3, #15
    3f48:	18fc      	adds	r4, r7, r3
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	0018      	movs	r0, r3
    3f4e:	4b09      	ldr	r3, [pc, #36]	; (3f74 <_sercom_get_interrupt_vector+0x48>)
    3f50:	4798      	blx	r3
    3f52:	0003      	movs	r3, r0
    3f54:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3f56:	230f      	movs	r3, #15
    3f58:	18fb      	adds	r3, r7, r3
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	2208      	movs	r2, #8
    3f5e:	18ba      	adds	r2, r7, r2
    3f60:	5cd3      	ldrb	r3, [r2, r3]
    3f62:	b25b      	sxtb	r3, r3
}
    3f64:	0018      	movs	r0, r3
    3f66:	46bd      	mov	sp, r7
    3f68:	b005      	add	sp, #20
    3f6a:	bd90      	pop	{r4, r7, pc}
    3f6c:	00008e7c 	.word	0x00008e7c
    3f70:	00008de1 	.word	0x00008de1
    3f74:	00003e5d 	.word	0x00003e5d

00003f78 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3f78:	b580      	push	{r7, lr}
    3f7a:	af00      	add	r7, sp, #0
    3f7c:	4b03      	ldr	r3, [pc, #12]	; (3f8c <SERCOM0_Handler+0x14>)
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	2000      	movs	r0, #0
    3f82:	4798      	blx	r3
    3f84:	46c0      	nop			; (mov r8, r8)
    3f86:	46bd      	mov	sp, r7
    3f88:	bd80      	pop	{r7, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	20000030 	.word	0x20000030

00003f90 <SERCOM1_Handler>:
    3f90:	b580      	push	{r7, lr}
    3f92:	af00      	add	r7, sp, #0
    3f94:	4b03      	ldr	r3, [pc, #12]	; (3fa4 <SERCOM1_Handler+0x14>)
    3f96:	685b      	ldr	r3, [r3, #4]
    3f98:	2001      	movs	r0, #1
    3f9a:	4798      	blx	r3
    3f9c:	46c0      	nop			; (mov r8, r8)
    3f9e:	46bd      	mov	sp, r7
    3fa0:	bd80      	pop	{r7, pc}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	20000030 	.word	0x20000030

00003fa8 <SERCOM2_Handler>:
    3fa8:	b580      	push	{r7, lr}
    3faa:	af00      	add	r7, sp, #0
    3fac:	4b03      	ldr	r3, [pc, #12]	; (3fbc <SERCOM2_Handler+0x14>)
    3fae:	689b      	ldr	r3, [r3, #8]
    3fb0:	2002      	movs	r0, #2
    3fb2:	4798      	blx	r3
    3fb4:	46c0      	nop			; (mov r8, r8)
    3fb6:	46bd      	mov	sp, r7
    3fb8:	bd80      	pop	{r7, pc}
    3fba:	46c0      	nop			; (mov r8, r8)
    3fbc:	20000030 	.word	0x20000030

00003fc0 <SERCOM3_Handler>:
    3fc0:	b580      	push	{r7, lr}
    3fc2:	af00      	add	r7, sp, #0
    3fc4:	4b03      	ldr	r3, [pc, #12]	; (3fd4 <SERCOM3_Handler+0x14>)
    3fc6:	68db      	ldr	r3, [r3, #12]
    3fc8:	2003      	movs	r0, #3
    3fca:	4798      	blx	r3
    3fcc:	46c0      	nop			; (mov r8, r8)
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd80      	pop	{r7, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	20000030 	.word	0x20000030

00003fd8 <SERCOM4_Handler>:
    3fd8:	b580      	push	{r7, lr}
    3fda:	af00      	add	r7, sp, #0
    3fdc:	4b03      	ldr	r3, [pc, #12]	; (3fec <SERCOM4_Handler+0x14>)
    3fde:	691b      	ldr	r3, [r3, #16]
    3fe0:	2004      	movs	r0, #4
    3fe2:	4798      	blx	r3
    3fe4:	46c0      	nop			; (mov r8, r8)
    3fe6:	46bd      	mov	sp, r7
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	20000030 	.word	0x20000030

00003ff0 <SERCOM5_Handler>:
    3ff0:	b580      	push	{r7, lr}
    3ff2:	af00      	add	r7, sp, #0
    3ff4:	4b03      	ldr	r3, [pc, #12]	; (4004 <SERCOM5_Handler+0x14>)
    3ff6:	695b      	ldr	r3, [r3, #20]
    3ff8:	2005      	movs	r0, #5
    3ffa:	4798      	blx	r3
    3ffc:	46c0      	nop			; (mov r8, r8)
    3ffe:	46bd      	mov	sp, r7
    4000:	bd80      	pop	{r7, pc}
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	20000030 	.word	0x20000030

00004008 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4008:	b580      	push	{r7, lr}
    400a:	b082      	sub	sp, #8
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	2280      	movs	r2, #128	; 0x80
    4014:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	2200      	movs	r2, #0
    401a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	2201      	movs	r2, #1
    4020:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	2200      	movs	r2, #0
    4026:	70da      	strb	r2, [r3, #3]
}
    4028:	46c0      	nop			; (mov r8, r8)
    402a:	46bd      	mov	sp, r7
    402c:	b002      	add	sp, #8
    402e:	bd80      	pop	{r7, pc}

00004030 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4030:	b580      	push	{r7, lr}
    4032:	b084      	sub	sp, #16
    4034:	af00      	add	r7, sp, #0
    4036:	0002      	movs	r2, r0
    4038:	6039      	str	r1, [r7, #0]
    403a:	1dfb      	adds	r3, r7, #7
    403c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    403e:	230c      	movs	r3, #12
    4040:	18fb      	adds	r3, r7, r3
    4042:	0018      	movs	r0, r3
    4044:	4b10      	ldr	r3, [pc, #64]	; (4088 <port_pin_set_config+0x58>)
    4046:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4048:	230c      	movs	r3, #12
    404a:	18fb      	adds	r3, r7, r3
    404c:	2280      	movs	r2, #128	; 0x80
    404e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4050:	683b      	ldr	r3, [r7, #0]
    4052:	781a      	ldrb	r2, [r3, #0]
    4054:	230c      	movs	r3, #12
    4056:	18fb      	adds	r3, r7, r3
    4058:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    405a:	683b      	ldr	r3, [r7, #0]
    405c:	785a      	ldrb	r2, [r3, #1]
    405e:	230c      	movs	r3, #12
    4060:	18fb      	adds	r3, r7, r3
    4062:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4064:	683b      	ldr	r3, [r7, #0]
    4066:	789a      	ldrb	r2, [r3, #2]
    4068:	230c      	movs	r3, #12
    406a:	18fb      	adds	r3, r7, r3
    406c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    406e:	230c      	movs	r3, #12
    4070:	18fa      	adds	r2, r7, r3
    4072:	1dfb      	adds	r3, r7, #7
    4074:	781b      	ldrb	r3, [r3, #0]
    4076:	0011      	movs	r1, r2
    4078:	0018      	movs	r0, r3
    407a:	4b04      	ldr	r3, [pc, #16]	; (408c <port_pin_set_config+0x5c>)
    407c:	4798      	blx	r3
}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	46bd      	mov	sp, r7
    4082:	b004      	add	sp, #16
    4084:	bd80      	pop	{r7, pc}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	00004009 	.word	0x00004009
    408c:	00004d41 	.word	0x00004d41

00004090 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4090:	b580      	push	{r7, lr}
    4092:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4094:	46c0      	nop			; (mov r8, r8)
    4096:	46bd      	mov	sp, r7
    4098:	bd80      	pop	{r7, pc}
    409a:	46c0      	nop			; (mov r8, r8)

0000409c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    409c:	b580      	push	{r7, lr}
    409e:	b082      	sub	sp, #8
    40a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    40a2:	4b10      	ldr	r3, [pc, #64]	; (40e4 <cpu_irq_enter_critical+0x48>)
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d112      	bne.n	40d0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40aa:	f3ef 8310 	mrs	r3, PRIMASK
    40ae:	607b      	str	r3, [r7, #4]
  return(result);
    40b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    40b2:	2b00      	cmp	r3, #0
    40b4:	d109      	bne.n	40ca <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40b6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    40b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    40bc:	4b0a      	ldr	r3, [pc, #40]	; (40e8 <cpu_irq_enter_critical+0x4c>)
    40be:	2200      	movs	r2, #0
    40c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    40c2:	4b0a      	ldr	r3, [pc, #40]	; (40ec <cpu_irq_enter_critical+0x50>)
    40c4:	2201      	movs	r2, #1
    40c6:	701a      	strb	r2, [r3, #0]
    40c8:	e002      	b.n	40d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    40ca:	4b08      	ldr	r3, [pc, #32]	; (40ec <cpu_irq_enter_critical+0x50>)
    40cc:	2200      	movs	r2, #0
    40ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    40d0:	4b04      	ldr	r3, [pc, #16]	; (40e4 <cpu_irq_enter_critical+0x48>)
    40d2:	681b      	ldr	r3, [r3, #0]
    40d4:	1c5a      	adds	r2, r3, #1
    40d6:	4b03      	ldr	r3, [pc, #12]	; (40e4 <cpu_irq_enter_critical+0x48>)
    40d8:	601a      	str	r2, [r3, #0]
}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	46bd      	mov	sp, r7
    40de:	b002      	add	sp, #8
    40e0:	bd80      	pop	{r7, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	20000048 	.word	0x20000048
    40e8:	20000000 	.word	0x20000000
    40ec:	2000004c 	.word	0x2000004c

000040f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    40f0:	b580      	push	{r7, lr}
    40f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    40f4:	4b0b      	ldr	r3, [pc, #44]	; (4124 <cpu_irq_leave_critical+0x34>)
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	1e5a      	subs	r2, r3, #1
    40fa:	4b0a      	ldr	r3, [pc, #40]	; (4124 <cpu_irq_leave_critical+0x34>)
    40fc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    40fe:	4b09      	ldr	r3, [pc, #36]	; (4124 <cpu_irq_leave_critical+0x34>)
    4100:	681b      	ldr	r3, [r3, #0]
    4102:	2b00      	cmp	r3, #0
    4104:	d10a      	bne.n	411c <cpu_irq_leave_critical+0x2c>
    4106:	4b08      	ldr	r3, [pc, #32]	; (4128 <cpu_irq_leave_critical+0x38>)
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	b2db      	uxtb	r3, r3
    410c:	2b00      	cmp	r3, #0
    410e:	d005      	beq.n	411c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4110:	4b06      	ldr	r3, [pc, #24]	; (412c <cpu_irq_leave_critical+0x3c>)
    4112:	2201      	movs	r2, #1
    4114:	701a      	strb	r2, [r3, #0]
    4116:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    411a:	b662      	cpsie	i
	}
}
    411c:	46c0      	nop			; (mov r8, r8)
    411e:	46bd      	mov	sp, r7
    4120:	bd80      	pop	{r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	20000048 	.word	0x20000048
    4128:	2000004c 	.word	0x2000004c
    412c:	20000000 	.word	0x20000000

00004130 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4130:	b580      	push	{r7, lr}
    4132:	b082      	sub	sp, #8
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	2201      	movs	r2, #1
    413c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	2200      	movs	r2, #0
    4142:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2206      	movs	r2, #6
    4148:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	2200      	movs	r2, #0
    414e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	2200      	movs	r2, #0
    4154:	725a      	strb	r2, [r3, #9]
}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	46bd      	mov	sp, r7
    415a:	b002      	add	sp, #8
    415c:	bd80      	pop	{r7, pc}
    415e:	46c0      	nop			; (mov r8, r8)

00004160 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    4160:	b580      	push	{r7, lr}
    4162:	b082      	sub	sp, #8
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	2201      	movs	r2, #1
    416c:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	2201      	movs	r2, #1
    4172:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	2200      	movs	r2, #0
    4178:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	2201      	movs	r2, #1
    417e:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2207      	movs	r2, #7
    4184:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	2200      	movs	r2, #0
    418a:	715a      	strb	r2, [r3, #5]
}
    418c:	46c0      	nop			; (mov r8, r8)
    418e:	46bd      	mov	sp, r7
    4190:	b002      	add	sp, #8
    4192:	bd80      	pop	{r7, pc}

00004194 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4194:	b580      	push	{r7, lr}
    4196:	b082      	sub	sp, #8
    4198:	af00      	add	r7, sp, #0
    419a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	2203      	movs	r2, #3
    41a0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	2200      	movs	r2, #0
    41a6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	2201      	movs	r2, #1
    41ac:	709a      	strb	r2, [r3, #2]
}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	46bd      	mov	sp, r7
    41b2:	b002      	add	sp, #8
    41b4:	bd80      	pop	{r7, pc}
    41b6:	46c0      	nop			; (mov r8, r8)

000041b8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b082      	sub	sp, #8
    41bc:	af00      	add	r7, sp, #0
    41be:	0002      	movs	r2, r0
    41c0:	1dfb      	adds	r3, r7, #7
    41c2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    41c4:	4a03      	ldr	r2, [pc, #12]	; (41d4 <system_cpu_clock_set_divider+0x1c>)
    41c6:	1dfb      	adds	r3, r7, #7
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	7213      	strb	r3, [r2, #8]
}
    41cc:	46c0      	nop			; (mov r8, r8)
    41ce:	46bd      	mov	sp, r7
    41d0:	b002      	add	sp, #8
    41d2:	bd80      	pop	{r7, pc}
    41d4:	40000400 	.word	0x40000400

000041d8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    41d8:	b580      	push	{r7, lr}
    41da:	b082      	sub	sp, #8
    41dc:	af00      	add	r7, sp, #0
    41de:	0002      	movs	r2, r0
    41e0:	1dfb      	adds	r3, r7, #7
    41e2:	701a      	strb	r2, [r3, #0]
    41e4:	1dbb      	adds	r3, r7, #6
    41e6:	1c0a      	adds	r2, r1, #0
    41e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    41ea:	1dfb      	adds	r3, r7, #7
    41ec:	781b      	ldrb	r3, [r3, #0]
    41ee:	2b01      	cmp	r3, #1
    41f0:	d008      	beq.n	4204 <system_apb_clock_set_divider+0x2c>
    41f2:	2b02      	cmp	r3, #2
    41f4:	d00b      	beq.n	420e <system_apb_clock_set_divider+0x36>
    41f6:	2b00      	cmp	r3, #0
    41f8:	d10e      	bne.n	4218 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    41fa:	4a0b      	ldr	r2, [pc, #44]	; (4228 <system_apb_clock_set_divider+0x50>)
    41fc:	1dbb      	adds	r3, r7, #6
    41fe:	781b      	ldrb	r3, [r3, #0]
    4200:	7253      	strb	r3, [r2, #9]
			break;
    4202:	e00b      	b.n	421c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4204:	4a08      	ldr	r2, [pc, #32]	; (4228 <system_apb_clock_set_divider+0x50>)
    4206:	1dbb      	adds	r3, r7, #6
    4208:	781b      	ldrb	r3, [r3, #0]
    420a:	7293      	strb	r3, [r2, #10]
			break;
    420c:	e006      	b.n	421c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    420e:	4a06      	ldr	r2, [pc, #24]	; (4228 <system_apb_clock_set_divider+0x50>)
    4210:	1dbb      	adds	r3, r7, #6
    4212:	781b      	ldrb	r3, [r3, #0]
    4214:	72d3      	strb	r3, [r2, #11]
			break;
    4216:	e001      	b.n	421c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4218:	2317      	movs	r3, #23
    421a:	e000      	b.n	421e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    421c:	2300      	movs	r3, #0
}
    421e:	0018      	movs	r0, r3
    4220:	46bd      	mov	sp, r7
    4222:	b002      	add	sp, #8
    4224:	bd80      	pop	{r7, pc}
    4226:	46c0      	nop			; (mov r8, r8)
    4228:	40000400 	.word	0x40000400

0000422c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    422c:	b580      	push	{r7, lr}
    422e:	b082      	sub	sp, #8
    4230:	af00      	add	r7, sp, #0
    4232:	0002      	movs	r2, r0
    4234:	1dfb      	adds	r3, r7, #7
    4236:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4238:	4a08      	ldr	r2, [pc, #32]	; (425c <system_flash_set_waitstates+0x30>)
    423a:	1dfb      	adds	r3, r7, #7
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	210f      	movs	r1, #15
    4240:	400b      	ands	r3, r1
    4242:	b2d9      	uxtb	r1, r3
    4244:	6853      	ldr	r3, [r2, #4]
    4246:	200f      	movs	r0, #15
    4248:	4001      	ands	r1, r0
    424a:	0049      	lsls	r1, r1, #1
    424c:	201e      	movs	r0, #30
    424e:	4383      	bics	r3, r0
    4250:	430b      	orrs	r3, r1
    4252:	6053      	str	r3, [r2, #4]
}
    4254:	46c0      	nop			; (mov r8, r8)
    4256:	46bd      	mov	sp, r7
    4258:	b002      	add	sp, #8
    425a:	bd80      	pop	{r7, pc}
    425c:	41004000 	.word	0x41004000

00004260 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4260:	b580      	push	{r7, lr}
    4262:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4264:	46c0      	nop			; (mov r8, r8)
    4266:	4b04      	ldr	r3, [pc, #16]	; (4278 <_system_dfll_wait_for_sync+0x18>)
    4268:	68db      	ldr	r3, [r3, #12]
    426a:	2210      	movs	r2, #16
    426c:	4013      	ands	r3, r2
    426e:	d0fa      	beq.n	4266 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4270:	46c0      	nop			; (mov r8, r8)
    4272:	46bd      	mov	sp, r7
    4274:	bd80      	pop	{r7, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	40000800 	.word	0x40000800

0000427c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    427c:	b580      	push	{r7, lr}
    427e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4280:	4b0c      	ldr	r3, [pc, #48]	; (42b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4282:	2202      	movs	r2, #2
    4284:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4286:	4b0c      	ldr	r3, [pc, #48]	; (42b8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4288:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    428a:	4a0a      	ldr	r2, [pc, #40]	; (42b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    428c:	4b0b      	ldr	r3, [pc, #44]	; (42bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    428e:	689b      	ldr	r3, [r3, #8]
    4290:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4292:	4a08      	ldr	r2, [pc, #32]	; (42b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4294:	4b09      	ldr	r3, [pc, #36]	; (42bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4296:	685b      	ldr	r3, [r3, #4]
    4298:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    429a:	4b06      	ldr	r3, [pc, #24]	; (42b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    429c:	2200      	movs	r2, #0
    429e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    42a0:	4b05      	ldr	r3, [pc, #20]	; (42b8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    42a2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    42a4:	4a03      	ldr	r2, [pc, #12]	; (42b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    42a6:	4b05      	ldr	r3, [pc, #20]	; (42bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    42a8:	681b      	ldr	r3, [r3, #0]
    42aa:	b29b      	uxth	r3, r3
    42ac:	8493      	strh	r3, [r2, #36]	; 0x24
}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	46bd      	mov	sp, r7
    42b2:	bd80      	pop	{r7, pc}
    42b4:	40000800 	.word	0x40000800
    42b8:	00004261 	.word	0x00004261
    42bc:	20000050 	.word	0x20000050

000042c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	0002      	movs	r2, r0
    42c8:	1dfb      	adds	r3, r7, #7
    42ca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    42cc:	1dfb      	adds	r3, r7, #7
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	2b08      	cmp	r3, #8
    42d2:	d840      	bhi.n	4356 <system_clock_source_get_hz+0x96>
    42d4:	009a      	lsls	r2, r3, #2
    42d6:	4b22      	ldr	r3, [pc, #136]	; (4360 <system_clock_source_get_hz+0xa0>)
    42d8:	18d3      	adds	r3, r2, r3
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    42de:	4b21      	ldr	r3, [pc, #132]	; (4364 <system_clock_source_get_hz+0xa4>)
    42e0:	691b      	ldr	r3, [r3, #16]
    42e2:	e039      	b.n	4358 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    42e4:	4b20      	ldr	r3, [pc, #128]	; (4368 <system_clock_source_get_hz+0xa8>)
    42e6:	6a1b      	ldr	r3, [r3, #32]
    42e8:	059b      	lsls	r3, r3, #22
    42ea:	0f9b      	lsrs	r3, r3, #30
    42ec:	b2db      	uxtb	r3, r3
    42ee:	001a      	movs	r2, r3
    42f0:	4b1e      	ldr	r3, [pc, #120]	; (436c <system_clock_source_get_hz+0xac>)
    42f2:	40d3      	lsrs	r3, r2
    42f4:	e030      	b.n	4358 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    42f6:	2380      	movs	r3, #128	; 0x80
    42f8:	021b      	lsls	r3, r3, #8
    42fa:	e02d      	b.n	4358 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    42fc:	2380      	movs	r3, #128	; 0x80
    42fe:	021b      	lsls	r3, r3, #8
    4300:	e02a      	b.n	4358 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4302:	4b18      	ldr	r3, [pc, #96]	; (4364 <system_clock_source_get_hz+0xa4>)
    4304:	695b      	ldr	r3, [r3, #20]
    4306:	e027      	b.n	4358 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4308:	4b16      	ldr	r3, [pc, #88]	; (4364 <system_clock_source_get_hz+0xa4>)
    430a:	681b      	ldr	r3, [r3, #0]
    430c:	2202      	movs	r2, #2
    430e:	4013      	ands	r3, r2
    4310:	d101      	bne.n	4316 <system_clock_source_get_hz+0x56>
			return 0;
    4312:	2300      	movs	r3, #0
    4314:	e020      	b.n	4358 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4316:	4b16      	ldr	r3, [pc, #88]	; (4370 <system_clock_source_get_hz+0xb0>)
    4318:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    431a:	4b12      	ldr	r3, [pc, #72]	; (4364 <system_clock_source_get_hz+0xa4>)
    431c:	681b      	ldr	r3, [r3, #0]
    431e:	2204      	movs	r2, #4
    4320:	4013      	ands	r3, r2
    4322:	d009      	beq.n	4338 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4324:	2000      	movs	r0, #0
    4326:	4b13      	ldr	r3, [pc, #76]	; (4374 <system_clock_source_get_hz+0xb4>)
    4328:	4798      	blx	r3
    432a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    432c:	4b0d      	ldr	r3, [pc, #52]	; (4364 <system_clock_source_get_hz+0xa4>)
    432e:	689b      	ldr	r3, [r3, #8]
    4330:	041b      	lsls	r3, r3, #16
    4332:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4334:	4353      	muls	r3, r2
    4336:	e00f      	b.n	4358 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4338:	4b0f      	ldr	r3, [pc, #60]	; (4378 <system_clock_source_get_hz+0xb8>)
    433a:	e00d      	b.n	4358 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    433c:	4a0a      	ldr	r2, [pc, #40]	; (4368 <system_clock_source_get_hz+0xa8>)
    433e:	2350      	movs	r3, #80	; 0x50
    4340:	5cd3      	ldrb	r3, [r2, r3]
    4342:	b2db      	uxtb	r3, r3
    4344:	001a      	movs	r2, r3
    4346:	2304      	movs	r3, #4
    4348:	4013      	ands	r3, r2
    434a:	d101      	bne.n	4350 <system_clock_source_get_hz+0x90>
			return 0;
    434c:	2300      	movs	r3, #0
    434e:	e003      	b.n	4358 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    4350:	4b04      	ldr	r3, [pc, #16]	; (4364 <system_clock_source_get_hz+0xa4>)
    4352:	68db      	ldr	r3, [r3, #12]
    4354:	e000      	b.n	4358 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    4356:	2300      	movs	r3, #0
	}
}
    4358:	0018      	movs	r0, r3
    435a:	46bd      	mov	sp, r7
    435c:	b002      	add	sp, #8
    435e:	bd80      	pop	{r7, pc}
    4360:	00008e84 	.word	0x00008e84
    4364:	20000050 	.word	0x20000050
    4368:	40000800 	.word	0x40000800
    436c:	007a1200 	.word	0x007a1200
    4370:	00004261 	.word	0x00004261
    4374:	00004b79 	.word	0x00004b79
    4378:	02dc6c00 	.word	0x02dc6c00

0000437c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    437c:	b580      	push	{r7, lr}
    437e:	b084      	sub	sp, #16
    4380:	af00      	add	r7, sp, #0
    4382:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4384:	4b1a      	ldr	r3, [pc, #104]	; (43f0 <system_clock_source_osc8m_set_config+0x74>)
    4386:	6a1b      	ldr	r3, [r3, #32]
    4388:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	1c1a      	adds	r2, r3, #0
    4390:	2303      	movs	r3, #3
    4392:	4013      	ands	r3, r2
    4394:	b2da      	uxtb	r2, r3
    4396:	230d      	movs	r3, #13
    4398:	18fb      	adds	r3, r7, r3
    439a:	2103      	movs	r1, #3
    439c:	400a      	ands	r2, r1
    439e:	0010      	movs	r0, r2
    43a0:	781a      	ldrb	r2, [r3, #0]
    43a2:	2103      	movs	r1, #3
    43a4:	438a      	bics	r2, r1
    43a6:	1c11      	adds	r1, r2, #0
    43a8:	1c02      	adds	r2, r0, #0
    43aa:	430a      	orrs	r2, r1
    43ac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	789a      	ldrb	r2, [r3, #2]
    43b2:	230c      	movs	r3, #12
    43b4:	18fb      	adds	r3, r7, r3
    43b6:	01d0      	lsls	r0, r2, #7
    43b8:	781a      	ldrb	r2, [r3, #0]
    43ba:	217f      	movs	r1, #127	; 0x7f
    43bc:	400a      	ands	r2, r1
    43be:	1c11      	adds	r1, r2, #0
    43c0:	1c02      	adds	r2, r0, #0
    43c2:	430a      	orrs	r2, r1
    43c4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	785a      	ldrb	r2, [r3, #1]
    43ca:	230c      	movs	r3, #12
    43cc:	18fb      	adds	r3, r7, r3
    43ce:	2101      	movs	r1, #1
    43d0:	400a      	ands	r2, r1
    43d2:	0190      	lsls	r0, r2, #6
    43d4:	781a      	ldrb	r2, [r3, #0]
    43d6:	2140      	movs	r1, #64	; 0x40
    43d8:	438a      	bics	r2, r1
    43da:	1c11      	adds	r1, r2, #0
    43dc:	1c02      	adds	r2, r0, #0
    43de:	430a      	orrs	r2, r1
    43e0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    43e2:	4b03      	ldr	r3, [pc, #12]	; (43f0 <system_clock_source_osc8m_set_config+0x74>)
    43e4:	68fa      	ldr	r2, [r7, #12]
    43e6:	621a      	str	r2, [r3, #32]
}
    43e8:	46c0      	nop			; (mov r8, r8)
    43ea:	46bd      	mov	sp, r7
    43ec:	b004      	add	sp, #16
    43ee:	bd80      	pop	{r7, pc}
    43f0:	40000800 	.word	0x40000800

000043f4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    43f4:	b580      	push	{r7, lr}
    43f6:	b084      	sub	sp, #16
    43f8:	af00      	add	r7, sp, #0
    43fa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    43fc:	4b2f      	ldr	r3, [pc, #188]	; (44bc <system_clock_source_osc32k_set_config+0xc8>)
    43fe:	699b      	ldr	r3, [r3, #24]
    4400:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	785a      	ldrb	r2, [r3, #1]
    4406:	230c      	movs	r3, #12
    4408:	18fb      	adds	r3, r7, r3
    440a:	2101      	movs	r1, #1
    440c:	400a      	ands	r2, r1
    440e:	00d0      	lsls	r0, r2, #3
    4410:	781a      	ldrb	r2, [r3, #0]
    4412:	2108      	movs	r1, #8
    4414:	438a      	bics	r2, r1
    4416:	1c11      	adds	r1, r2, #0
    4418:	1c02      	adds	r2, r0, #0
    441a:	430a      	orrs	r2, r1
    441c:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	789a      	ldrb	r2, [r3, #2]
    4422:	230c      	movs	r3, #12
    4424:	18fb      	adds	r3, r7, r3
    4426:	2101      	movs	r1, #1
    4428:	400a      	ands	r2, r1
    442a:	0090      	lsls	r0, r2, #2
    442c:	781a      	ldrb	r2, [r3, #0]
    442e:	2104      	movs	r1, #4
    4430:	438a      	bics	r2, r1
    4432:	1c11      	adds	r1, r2, #0
    4434:	1c02      	adds	r2, r0, #0
    4436:	430a      	orrs	r2, r1
    4438:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	781b      	ldrb	r3, [r3, #0]
    443e:	1c1a      	adds	r2, r3, #0
    4440:	2307      	movs	r3, #7
    4442:	4013      	ands	r3, r2
    4444:	b2da      	uxtb	r2, r3
    4446:	230d      	movs	r3, #13
    4448:	18fb      	adds	r3, r7, r3
    444a:	2107      	movs	r1, #7
    444c:	400a      	ands	r2, r1
    444e:	0010      	movs	r0, r2
    4450:	781a      	ldrb	r2, [r3, #0]
    4452:	2107      	movs	r1, #7
    4454:	438a      	bics	r2, r1
    4456:	1c11      	adds	r1, r2, #0
    4458:	1c02      	adds	r2, r0, #0
    445a:	430a      	orrs	r2, r1
    445c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	791a      	ldrb	r2, [r3, #4]
    4462:	230c      	movs	r3, #12
    4464:	18fb      	adds	r3, r7, r3
    4466:	01d0      	lsls	r0, r2, #7
    4468:	781a      	ldrb	r2, [r3, #0]
    446a:	217f      	movs	r1, #127	; 0x7f
    446c:	400a      	ands	r2, r1
    446e:	1c11      	adds	r1, r2, #0
    4470:	1c02      	adds	r2, r0, #0
    4472:	430a      	orrs	r2, r1
    4474:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	78da      	ldrb	r2, [r3, #3]
    447a:	230c      	movs	r3, #12
    447c:	18fb      	adds	r3, r7, r3
    447e:	2101      	movs	r1, #1
    4480:	400a      	ands	r2, r1
    4482:	0190      	lsls	r0, r2, #6
    4484:	781a      	ldrb	r2, [r3, #0]
    4486:	2140      	movs	r1, #64	; 0x40
    4488:	438a      	bics	r2, r1
    448a:	1c11      	adds	r1, r2, #0
    448c:	1c02      	adds	r2, r0, #0
    448e:	430a      	orrs	r2, r1
    4490:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	795a      	ldrb	r2, [r3, #5]
    4496:	230d      	movs	r3, #13
    4498:	18fb      	adds	r3, r7, r3
    449a:	2101      	movs	r1, #1
    449c:	400a      	ands	r2, r1
    449e:	0110      	lsls	r0, r2, #4
    44a0:	781a      	ldrb	r2, [r3, #0]
    44a2:	2110      	movs	r1, #16
    44a4:	438a      	bics	r2, r1
    44a6:	1c11      	adds	r1, r2, #0
    44a8:	1c02      	adds	r2, r0, #0
    44aa:	430a      	orrs	r2, r1
    44ac:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    44ae:	4b03      	ldr	r3, [pc, #12]	; (44bc <system_clock_source_osc32k_set_config+0xc8>)
    44b0:	68fa      	ldr	r2, [r7, #12]
    44b2:	619a      	str	r2, [r3, #24]
}
    44b4:	46c0      	nop			; (mov r8, r8)
    44b6:	46bd      	mov	sp, r7
    44b8:	b004      	add	sp, #16
    44ba:	bd80      	pop	{r7, pc}
    44bc:	40000800 	.word	0x40000800

000044c0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
    44c6:	0002      	movs	r2, r0
    44c8:	1dfb      	adds	r3, r7, #7
    44ca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    44cc:	1dfb      	adds	r3, r7, #7
    44ce:	781b      	ldrb	r3, [r3, #0]
    44d0:	2b08      	cmp	r3, #8
    44d2:	d83b      	bhi.n	454c <system_clock_source_enable+0x8c>
    44d4:	009a      	lsls	r2, r3, #2
    44d6:	4b21      	ldr	r3, [pc, #132]	; (455c <system_clock_source_enable+0x9c>)
    44d8:	18d3      	adds	r3, r2, r3
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    44de:	4b20      	ldr	r3, [pc, #128]	; (4560 <system_clock_source_enable+0xa0>)
    44e0:	4a1f      	ldr	r2, [pc, #124]	; (4560 <system_clock_source_enable+0xa0>)
    44e2:	6a12      	ldr	r2, [r2, #32]
    44e4:	2102      	movs	r1, #2
    44e6:	430a      	orrs	r2, r1
    44e8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    44ea:	2300      	movs	r3, #0
    44ec:	e031      	b.n	4552 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    44ee:	4b1c      	ldr	r3, [pc, #112]	; (4560 <system_clock_source_enable+0xa0>)
    44f0:	4a1b      	ldr	r2, [pc, #108]	; (4560 <system_clock_source_enable+0xa0>)
    44f2:	6992      	ldr	r2, [r2, #24]
    44f4:	2102      	movs	r1, #2
    44f6:	430a      	orrs	r2, r1
    44f8:	619a      	str	r2, [r3, #24]
		break;
    44fa:	e029      	b.n	4550 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    44fc:	4a18      	ldr	r2, [pc, #96]	; (4560 <system_clock_source_enable+0xa0>)
    44fe:	4b18      	ldr	r3, [pc, #96]	; (4560 <system_clock_source_enable+0xa0>)
    4500:	8a1b      	ldrh	r3, [r3, #16]
    4502:	b29b      	uxth	r3, r3
    4504:	2102      	movs	r1, #2
    4506:	430b      	orrs	r3, r1
    4508:	b29b      	uxth	r3, r3
    450a:	8213      	strh	r3, [r2, #16]
		break;
    450c:	e020      	b.n	4550 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    450e:	4a14      	ldr	r2, [pc, #80]	; (4560 <system_clock_source_enable+0xa0>)
    4510:	4b13      	ldr	r3, [pc, #76]	; (4560 <system_clock_source_enable+0xa0>)
    4512:	8a9b      	ldrh	r3, [r3, #20]
    4514:	b29b      	uxth	r3, r3
    4516:	2102      	movs	r1, #2
    4518:	430b      	orrs	r3, r1
    451a:	b29b      	uxth	r3, r3
    451c:	8293      	strh	r3, [r2, #20]
		break;
    451e:	e017      	b.n	4550 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4520:	4b10      	ldr	r3, [pc, #64]	; (4564 <system_clock_source_enable+0xa4>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	2202      	movs	r2, #2
    4526:	431a      	orrs	r2, r3
    4528:	4b0e      	ldr	r3, [pc, #56]	; (4564 <system_clock_source_enable+0xa4>)
    452a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    452c:	4b0e      	ldr	r3, [pc, #56]	; (4568 <system_clock_source_enable+0xa8>)
    452e:	4798      	blx	r3
		break;
    4530:	e00e      	b.n	4550 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4532:	4a0b      	ldr	r2, [pc, #44]	; (4560 <system_clock_source_enable+0xa0>)
    4534:	490a      	ldr	r1, [pc, #40]	; (4560 <system_clock_source_enable+0xa0>)
    4536:	2344      	movs	r3, #68	; 0x44
    4538:	5ccb      	ldrb	r3, [r1, r3]
    453a:	b2db      	uxtb	r3, r3
    453c:	2102      	movs	r1, #2
    453e:	430b      	orrs	r3, r1
    4540:	b2d9      	uxtb	r1, r3
    4542:	2344      	movs	r3, #68	; 0x44
    4544:	54d1      	strb	r1, [r2, r3]
		break;
    4546:	e003      	b.n	4550 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4548:	2300      	movs	r3, #0
    454a:	e002      	b.n	4552 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    454c:	2317      	movs	r3, #23
    454e:	e000      	b.n	4552 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4550:	2300      	movs	r3, #0
}
    4552:	0018      	movs	r0, r3
    4554:	46bd      	mov	sp, r7
    4556:	b002      	add	sp, #8
    4558:	bd80      	pop	{r7, pc}
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	00008ea8 	.word	0x00008ea8
    4560:	40000800 	.word	0x40000800
    4564:	20000050 	.word	0x20000050
    4568:	0000427d 	.word	0x0000427d

0000456c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    456c:	b580      	push	{r7, lr}
    456e:	b082      	sub	sp, #8
    4570:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4572:	003b      	movs	r3, r7
    4574:	2201      	movs	r2, #1
    4576:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4578:	2300      	movs	r3, #0
    457a:	607b      	str	r3, [r7, #4]
    457c:	e009      	b.n	4592 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	b2db      	uxtb	r3, r3
    4582:	003a      	movs	r2, r7
    4584:	0011      	movs	r1, r2
    4586:	0018      	movs	r0, r3
    4588:	4b05      	ldr	r3, [pc, #20]	; (45a0 <_switch_peripheral_gclk+0x34>)
    458a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	3301      	adds	r3, #1
    4590:	607b      	str	r3, [r7, #4]
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	2b24      	cmp	r3, #36	; 0x24
    4596:	d9f2      	bls.n	457e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4598:	46c0      	nop			; (mov r8, r8)
    459a:	46bd      	mov	sp, r7
    459c:	b002      	add	sp, #8
    459e:	bd80      	pop	{r7, pc}
    45a0:	00004a55 	.word	0x00004a55

000045a4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	b0a2      	sub	sp, #136	; 0x88
    45a8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    45aa:	4b4f      	ldr	r3, [pc, #316]	; (46e8 <system_clock_init+0x144>)
    45ac:	22c2      	movs	r2, #194	; 0xc2
    45ae:	00d2      	lsls	r2, r2, #3
    45b0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    45b2:	2000      	movs	r0, #0
    45b4:	4b4d      	ldr	r3, [pc, #308]	; (46ec <system_clock_init+0x148>)
    45b6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    45b8:	4b4d      	ldr	r3, [pc, #308]	; (46f0 <system_clock_init+0x14c>)
    45ba:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    45bc:	4a4a      	ldr	r2, [pc, #296]	; (46e8 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    45be:	4b4d      	ldr	r3, [pc, #308]	; (46f4 <system_clock_init+0x150>)
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    45c4:	b2db      	uxtb	r3, r3
    45c6:	1c19      	adds	r1, r3, #0
    45c8:	237f      	movs	r3, #127	; 0x7f
    45ca:	400b      	ands	r3, r1
    45cc:	b2d9      	uxtb	r1, r3
    45ce:	6993      	ldr	r3, [r2, #24]
    45d0:	207f      	movs	r0, #127	; 0x7f
    45d2:	4001      	ands	r1, r0
    45d4:	0409      	lsls	r1, r1, #16
    45d6:	4848      	ldr	r0, [pc, #288]	; (46f8 <system_clock_init+0x154>)
    45d8:	4003      	ands	r3, r0
    45da:	430b      	orrs	r3, r1
    45dc:	6193      	str	r3, [r2, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    45de:	2380      	movs	r3, #128	; 0x80
    45e0:	18fb      	adds	r3, r7, r3
    45e2:	0018      	movs	r0, r3
    45e4:	4b45      	ldr	r3, [pc, #276]	; (46fc <system_clock_init+0x158>)
    45e6:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    45e8:	2380      	movs	r3, #128	; 0x80
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	2207      	movs	r2, #7
    45ee:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    45f0:	2380      	movs	r3, #128	; 0x80
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	2201      	movs	r2, #1
    45f6:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	2201      	movs	r2, #1
    45fe:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    4600:	2380      	movs	r3, #128	; 0x80
    4602:	18fb      	adds	r3, r7, r3
    4604:	2201      	movs	r2, #1
    4606:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    4608:	2380      	movs	r3, #128	; 0x80
    460a:	18fb      	adds	r3, r7, r3
    460c:	2200      	movs	r2, #0
    460e:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4610:	2380      	movs	r3, #128	; 0x80
    4612:	18fb      	adds	r3, r7, r3
    4614:	0018      	movs	r0, r3
    4616:	4b3a      	ldr	r3, [pc, #232]	; (4700 <system_clock_init+0x15c>)
    4618:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    461a:	2004      	movs	r0, #4
    461c:	4b39      	ldr	r3, [pc, #228]	; (4704 <system_clock_init+0x160>)
    461e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4620:	237c      	movs	r3, #124	; 0x7c
    4622:	18fb      	adds	r3, r7, r3
    4624:	0018      	movs	r0, r3
    4626:	4b38      	ldr	r3, [pc, #224]	; (4708 <system_clock_init+0x164>)
    4628:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    462a:	237c      	movs	r3, #124	; 0x7c
    462c:	18fb      	adds	r3, r7, r3
    462e:	2200      	movs	r2, #0
    4630:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4632:	237c      	movs	r3, #124	; 0x7c
    4634:	18fb      	adds	r3, r7, r3
    4636:	2201      	movs	r2, #1
    4638:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    463a:	237c      	movs	r3, #124	; 0x7c
    463c:	18fb      	adds	r3, r7, r3
    463e:	2200      	movs	r2, #0
    4640:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4642:	237c      	movs	r3, #124	; 0x7c
    4644:	18fb      	adds	r3, r7, r3
    4646:	0018      	movs	r0, r3
    4648:	4b30      	ldr	r3, [pc, #192]	; (470c <system_clock_init+0x168>)
    464a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    464c:	2006      	movs	r0, #6
    464e:	4b2d      	ldr	r3, [pc, #180]	; (4704 <system_clock_init+0x160>)
    4650:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4652:	4b2f      	ldr	r3, [pc, #188]	; (4710 <system_clock_init+0x16c>)
    4654:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4656:	2358      	movs	r3, #88	; 0x58
    4658:	18fb      	adds	r3, r7, r3
    465a:	0018      	movs	r0, r3
    465c:	4b2d      	ldr	r3, [pc, #180]	; (4714 <system_clock_init+0x170>)
    465e:	4798      	blx	r3
    4660:	2358      	movs	r3, #88	; 0x58
    4662:	18fb      	adds	r3, r7, r3
    4664:	2204      	movs	r2, #4
    4666:	701a      	strb	r2, [r3, #0]
    4668:	2358      	movs	r3, #88	; 0x58
    466a:	18fb      	adds	r3, r7, r3
    466c:	2220      	movs	r2, #32
    466e:	605a      	str	r2, [r3, #4]
    4670:	2358      	movs	r3, #88	; 0x58
    4672:	18fb      	adds	r3, r7, r3
    4674:	2200      	movs	r2, #0
    4676:	721a      	strb	r2, [r3, #8]
    4678:	2358      	movs	r3, #88	; 0x58
    467a:	18fb      	adds	r3, r7, r3
    467c:	2200      	movs	r2, #0
    467e:	725a      	strb	r2, [r3, #9]
    4680:	2358      	movs	r3, #88	; 0x58
    4682:	18fb      	adds	r3, r7, r3
    4684:	0019      	movs	r1, r3
    4686:	2002      	movs	r0, #2
    4688:	4b23      	ldr	r3, [pc, #140]	; (4718 <system_clock_init+0x174>)
    468a:	4798      	blx	r3
    468c:	2002      	movs	r0, #2
    468e:	4b23      	ldr	r3, [pc, #140]	; (471c <system_clock_init+0x178>)
    4690:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4692:	2000      	movs	r0, #0
    4694:	4b22      	ldr	r3, [pc, #136]	; (4720 <system_clock_init+0x17c>)
    4696:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4698:	2100      	movs	r1, #0
    469a:	2000      	movs	r0, #0
    469c:	4b21      	ldr	r3, [pc, #132]	; (4724 <system_clock_init+0x180>)
    469e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    46a0:	2100      	movs	r1, #0
    46a2:	2001      	movs	r0, #1
    46a4:	4b1f      	ldr	r3, [pc, #124]	; (4724 <system_clock_init+0x180>)
    46a6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    46a8:	2100      	movs	r1, #0
    46aa:	2002      	movs	r0, #2
    46ac:	4b1d      	ldr	r3, [pc, #116]	; (4724 <system_clock_init+0x180>)
    46ae:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    46b0:	1d3b      	adds	r3, r7, #4
    46b2:	0018      	movs	r0, r3
    46b4:	4b17      	ldr	r3, [pc, #92]	; (4714 <system_clock_init+0x170>)
    46b6:	4798      	blx	r3
    46b8:	1d3b      	adds	r3, r7, #4
    46ba:	2206      	movs	r2, #6
    46bc:	701a      	strb	r2, [r3, #0]
    46be:	1d3b      	adds	r3, r7, #4
    46c0:	2201      	movs	r2, #1
    46c2:	605a      	str	r2, [r3, #4]
    46c4:	1d3b      	adds	r3, r7, #4
    46c6:	2200      	movs	r2, #0
    46c8:	721a      	strb	r2, [r3, #8]
    46ca:	1d3b      	adds	r3, r7, #4
    46cc:	2200      	movs	r2, #0
    46ce:	725a      	strb	r2, [r3, #9]
    46d0:	1d3b      	adds	r3, r7, #4
    46d2:	0019      	movs	r1, r3
    46d4:	2000      	movs	r0, #0
    46d6:	4b10      	ldr	r3, [pc, #64]	; (4718 <system_clock_init+0x174>)
    46d8:	4798      	blx	r3
    46da:	2000      	movs	r0, #0
    46dc:	4b0f      	ldr	r3, [pc, #60]	; (471c <system_clock_init+0x178>)
    46de:	4798      	blx	r3
#endif
}
    46e0:	46c0      	nop			; (mov r8, r8)
    46e2:	46bd      	mov	sp, r7
    46e4:	b022      	add	sp, #136	; 0x88
    46e6:	bd80      	pop	{r7, pc}
    46e8:	40000800 	.word	0x40000800
    46ec:	0000422d 	.word	0x0000422d
    46f0:	0000456d 	.word	0x0000456d
    46f4:	00806024 	.word	0x00806024
    46f8:	ff80ffff 	.word	0xff80ffff
    46fc:	00004161 	.word	0x00004161
    4700:	000043f5 	.word	0x000043f5
    4704:	000044c1 	.word	0x000044c1
    4708:	00004195 	.word	0x00004195
    470c:	0000437d 	.word	0x0000437d
    4710:	000047cd 	.word	0x000047cd
    4714:	00004131 	.word	0x00004131
    4718:	000047fd 	.word	0x000047fd
    471c:	00004921 	.word	0x00004921
    4720:	000041b9 	.word	0x000041b9
    4724:	000041d9 	.word	0x000041d9

00004728 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4728:	b580      	push	{r7, lr}
    472a:	b082      	sub	sp, #8
    472c:	af00      	add	r7, sp, #0
    472e:	0002      	movs	r2, r0
    4730:	6039      	str	r1, [r7, #0]
    4732:	1dfb      	adds	r3, r7, #7
    4734:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4736:	1dfb      	adds	r3, r7, #7
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	2b01      	cmp	r3, #1
    473c:	d00a      	beq.n	4754 <system_apb_clock_set_mask+0x2c>
    473e:	2b02      	cmp	r3, #2
    4740:	d00f      	beq.n	4762 <system_apb_clock_set_mask+0x3a>
    4742:	2b00      	cmp	r3, #0
    4744:	d114      	bne.n	4770 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4746:	4b0e      	ldr	r3, [pc, #56]	; (4780 <system_apb_clock_set_mask+0x58>)
    4748:	4a0d      	ldr	r2, [pc, #52]	; (4780 <system_apb_clock_set_mask+0x58>)
    474a:	6991      	ldr	r1, [r2, #24]
    474c:	683a      	ldr	r2, [r7, #0]
    474e:	430a      	orrs	r2, r1
    4750:	619a      	str	r2, [r3, #24]
			break;
    4752:	e00f      	b.n	4774 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4754:	4b0a      	ldr	r3, [pc, #40]	; (4780 <system_apb_clock_set_mask+0x58>)
    4756:	4a0a      	ldr	r2, [pc, #40]	; (4780 <system_apb_clock_set_mask+0x58>)
    4758:	69d1      	ldr	r1, [r2, #28]
    475a:	683a      	ldr	r2, [r7, #0]
    475c:	430a      	orrs	r2, r1
    475e:	61da      	str	r2, [r3, #28]
			break;
    4760:	e008      	b.n	4774 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4762:	4b07      	ldr	r3, [pc, #28]	; (4780 <system_apb_clock_set_mask+0x58>)
    4764:	4a06      	ldr	r2, [pc, #24]	; (4780 <system_apb_clock_set_mask+0x58>)
    4766:	6a11      	ldr	r1, [r2, #32]
    4768:	683a      	ldr	r2, [r7, #0]
    476a:	430a      	orrs	r2, r1
    476c:	621a      	str	r2, [r3, #32]
			break;
    476e:	e001      	b.n	4774 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4770:	2317      	movs	r3, #23
    4772:	e000      	b.n	4776 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4774:	2300      	movs	r3, #0
}
    4776:	0018      	movs	r0, r3
    4778:	46bd      	mov	sp, r7
    477a:	b002      	add	sp, #8
    477c:	bd80      	pop	{r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	40000400 	.word	0x40000400

00004784 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4784:	b580      	push	{r7, lr}
    4786:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4788:	4b02      	ldr	r3, [pc, #8]	; (4794 <system_interrupt_enter_critical_section+0x10>)
    478a:	4798      	blx	r3
}
    478c:	46c0      	nop			; (mov r8, r8)
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	46c0      	nop			; (mov r8, r8)
    4794:	0000409d 	.word	0x0000409d

00004798 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4798:	b580      	push	{r7, lr}
    479a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    479c:	4b02      	ldr	r3, [pc, #8]	; (47a8 <system_interrupt_leave_critical_section+0x10>)
    479e:	4798      	blx	r3
}
    47a0:	46c0      	nop			; (mov r8, r8)
    47a2:	46bd      	mov	sp, r7
    47a4:	bd80      	pop	{r7, pc}
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	000040f1 	.word	0x000040f1

000047ac <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47b0:	4b05      	ldr	r3, [pc, #20]	; (47c8 <system_gclk_is_syncing+0x1c>)
    47b2:	785b      	ldrb	r3, [r3, #1]
    47b4:	b2db      	uxtb	r3, r3
    47b6:	b25b      	sxtb	r3, r3
    47b8:	2b00      	cmp	r3, #0
    47ba:	da01      	bge.n	47c0 <system_gclk_is_syncing+0x14>
		return true;
    47bc:	2301      	movs	r3, #1
    47be:	e000      	b.n	47c2 <system_gclk_is_syncing+0x16>
	}

	return false;
    47c0:	2300      	movs	r3, #0
}
    47c2:	0018      	movs	r0, r3
    47c4:	46bd      	mov	sp, r7
    47c6:	bd80      	pop	{r7, pc}
    47c8:	40000c00 	.word	0x40000c00

000047cc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    47d0:	2108      	movs	r1, #8
    47d2:	2000      	movs	r0, #0
    47d4:	4b07      	ldr	r3, [pc, #28]	; (47f4 <system_gclk_init+0x28>)
    47d6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    47d8:	4b07      	ldr	r3, [pc, #28]	; (47f8 <system_gclk_init+0x2c>)
    47da:	2201      	movs	r2, #1
    47dc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	4b05      	ldr	r3, [pc, #20]	; (47f8 <system_gclk_init+0x2c>)
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	b2db      	uxtb	r3, r3
    47e6:	001a      	movs	r2, r3
    47e8:	2301      	movs	r3, #1
    47ea:	4013      	ands	r3, r2
    47ec:	d1f8      	bne.n	47e0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    47ee:	46c0      	nop			; (mov r8, r8)
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}
    47f4:	00004729 	.word	0x00004729
    47f8:	40000c00 	.word	0x40000c00

000047fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	b086      	sub	sp, #24
    4800:	af00      	add	r7, sp, #0
    4802:	0002      	movs	r2, r0
    4804:	6039      	str	r1, [r7, #0]
    4806:	1dfb      	adds	r3, r7, #7
    4808:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    480a:	1dfb      	adds	r3, r7, #7
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    4810:	1dfb      	adds	r3, r7, #7
    4812:	781b      	ldrb	r3, [r3, #0]
    4814:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4816:	683b      	ldr	r3, [r7, #0]
    4818:	781b      	ldrb	r3, [r3, #0]
    481a:	021b      	lsls	r3, r3, #8
    481c:	001a      	movs	r2, r3
    481e:	697b      	ldr	r3, [r7, #20]
    4820:	4313      	orrs	r3, r2
    4822:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4824:	683b      	ldr	r3, [r7, #0]
    4826:	785b      	ldrb	r3, [r3, #1]
    4828:	2b00      	cmp	r3, #0
    482a:	d004      	beq.n	4836 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    482c:	697b      	ldr	r3, [r7, #20]
    482e:	2280      	movs	r2, #128	; 0x80
    4830:	02d2      	lsls	r2, r2, #11
    4832:	4313      	orrs	r3, r2
    4834:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4836:	683b      	ldr	r3, [r7, #0]
    4838:	7a5b      	ldrb	r3, [r3, #9]
    483a:	2b00      	cmp	r3, #0
    483c:	d004      	beq.n	4848 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2280      	movs	r2, #128	; 0x80
    4842:	0312      	lsls	r2, r2, #12
    4844:	4313      	orrs	r3, r2
    4846:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4848:	683b      	ldr	r3, [r7, #0]
    484a:	685b      	ldr	r3, [r3, #4]
    484c:	2b01      	cmp	r3, #1
    484e:	d92c      	bls.n	48aa <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4850:	683b      	ldr	r3, [r7, #0]
    4852:	685a      	ldr	r2, [r3, #4]
    4854:	683b      	ldr	r3, [r7, #0]
    4856:	685b      	ldr	r3, [r3, #4]
    4858:	3b01      	subs	r3, #1
    485a:	4013      	ands	r3, r2
    485c:	d11a      	bne.n	4894 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    485e:	2300      	movs	r3, #0
    4860:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4862:	2302      	movs	r3, #2
    4864:	60bb      	str	r3, [r7, #8]
    4866:	e005      	b.n	4874 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	3301      	adds	r3, #1
    486c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    486e:	68bb      	ldr	r3, [r7, #8]
    4870:	005b      	lsls	r3, r3, #1
    4872:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4874:	683b      	ldr	r3, [r7, #0]
    4876:	685a      	ldr	r2, [r3, #4]
    4878:	68bb      	ldr	r3, [r7, #8]
    487a:	429a      	cmp	r2, r3
    487c:	d8f4      	bhi.n	4868 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    487e:	68fb      	ldr	r3, [r7, #12]
    4880:	021b      	lsls	r3, r3, #8
    4882:	693a      	ldr	r2, [r7, #16]
    4884:	4313      	orrs	r3, r2
    4886:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4888:	697b      	ldr	r3, [r7, #20]
    488a:	2280      	movs	r2, #128	; 0x80
    488c:	0352      	lsls	r2, r2, #13
    488e:	4313      	orrs	r3, r2
    4890:	617b      	str	r3, [r7, #20]
    4892:	e00a      	b.n	48aa <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4894:	683b      	ldr	r3, [r7, #0]
    4896:	685b      	ldr	r3, [r3, #4]
    4898:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    489a:	693a      	ldr	r2, [r7, #16]
    489c:	4313      	orrs	r3, r2
    489e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    48a0:	697b      	ldr	r3, [r7, #20]
    48a2:	2280      	movs	r2, #128	; 0x80
    48a4:	0292      	lsls	r2, r2, #10
    48a6:	4313      	orrs	r3, r2
    48a8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48aa:	683b      	ldr	r3, [r7, #0]
    48ac:	7a1b      	ldrb	r3, [r3, #8]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d004      	beq.n	48bc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48b2:	697b      	ldr	r3, [r7, #20]
    48b4:	2280      	movs	r2, #128	; 0x80
    48b6:	0392      	lsls	r2, r2, #14
    48b8:	4313      	orrs	r3, r2
    48ba:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    48bc:	46c0      	nop			; (mov r8, r8)
    48be:	4b13      	ldr	r3, [pc, #76]	; (490c <system_gclk_gen_set_config+0x110>)
    48c0:	4798      	blx	r3
    48c2:	1e03      	subs	r3, r0, #0
    48c4:	d1fb      	bne.n	48be <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    48c6:	4b12      	ldr	r3, [pc, #72]	; (4910 <system_gclk_gen_set_config+0x114>)
    48c8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    48ca:	4a12      	ldr	r2, [pc, #72]	; (4914 <system_gclk_gen_set_config+0x118>)
    48cc:	1dfb      	adds	r3, r7, #7
    48ce:	781b      	ldrb	r3, [r3, #0]
    48d0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	4b0d      	ldr	r3, [pc, #52]	; (490c <system_gclk_gen_set_config+0x110>)
    48d6:	4798      	blx	r3
    48d8:	1e03      	subs	r3, r0, #0
    48da:	d1fb      	bne.n	48d4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    48dc:	4b0e      	ldr	r3, [pc, #56]	; (4918 <system_gclk_gen_set_config+0x11c>)
    48de:	693a      	ldr	r2, [r7, #16]
    48e0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	4b09      	ldr	r3, [pc, #36]	; (490c <system_gclk_gen_set_config+0x110>)
    48e6:	4798      	blx	r3
    48e8:	1e03      	subs	r3, r0, #0
    48ea:	d1fb      	bne.n	48e4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    48ec:	4b0a      	ldr	r3, [pc, #40]	; (4918 <system_gclk_gen_set_config+0x11c>)
    48ee:	4a0a      	ldr	r2, [pc, #40]	; (4918 <system_gclk_gen_set_config+0x11c>)
    48f0:	6851      	ldr	r1, [r2, #4]
    48f2:	2280      	movs	r2, #128	; 0x80
    48f4:	0252      	lsls	r2, r2, #9
    48f6:	4011      	ands	r1, r2
    48f8:	697a      	ldr	r2, [r7, #20]
    48fa:	430a      	orrs	r2, r1
    48fc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    48fe:	4b07      	ldr	r3, [pc, #28]	; (491c <system_gclk_gen_set_config+0x120>)
    4900:	4798      	blx	r3
}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	46bd      	mov	sp, r7
    4906:	b006      	add	sp, #24
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	000047ad 	.word	0x000047ad
    4910:	00004785 	.word	0x00004785
    4914:	40000c08 	.word	0x40000c08
    4918:	40000c00 	.word	0x40000c00
    491c:	00004799 	.word	0x00004799

00004920 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4920:	b580      	push	{r7, lr}
    4922:	b082      	sub	sp, #8
    4924:	af00      	add	r7, sp, #0
    4926:	0002      	movs	r2, r0
    4928:	1dfb      	adds	r3, r7, #7
    492a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    492c:	46c0      	nop			; (mov r8, r8)
    492e:	4b0e      	ldr	r3, [pc, #56]	; (4968 <system_gclk_gen_enable+0x48>)
    4930:	4798      	blx	r3
    4932:	1e03      	subs	r3, r0, #0
    4934:	d1fb      	bne.n	492e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4936:	4b0d      	ldr	r3, [pc, #52]	; (496c <system_gclk_gen_enable+0x4c>)
    4938:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    493a:	4a0d      	ldr	r2, [pc, #52]	; (4970 <system_gclk_gen_enable+0x50>)
    493c:	1dfb      	adds	r3, r7, #7
    493e:	781b      	ldrb	r3, [r3, #0]
    4940:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	4b08      	ldr	r3, [pc, #32]	; (4968 <system_gclk_gen_enable+0x48>)
    4946:	4798      	blx	r3
    4948:	1e03      	subs	r3, r0, #0
    494a:	d1fb      	bne.n	4944 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    494c:	4b09      	ldr	r3, [pc, #36]	; (4974 <system_gclk_gen_enable+0x54>)
    494e:	4a09      	ldr	r2, [pc, #36]	; (4974 <system_gclk_gen_enable+0x54>)
    4950:	6852      	ldr	r2, [r2, #4]
    4952:	2180      	movs	r1, #128	; 0x80
    4954:	0249      	lsls	r1, r1, #9
    4956:	430a      	orrs	r2, r1
    4958:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    495a:	4b07      	ldr	r3, [pc, #28]	; (4978 <system_gclk_gen_enable+0x58>)
    495c:	4798      	blx	r3
}
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	46bd      	mov	sp, r7
    4962:	b002      	add	sp, #8
    4964:	bd80      	pop	{r7, pc}
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	000047ad 	.word	0x000047ad
    496c:	00004785 	.word	0x00004785
    4970:	40000c04 	.word	0x40000c04
    4974:	40000c00 	.word	0x40000c00
    4978:	00004799 	.word	0x00004799

0000497c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    497c:	b580      	push	{r7, lr}
    497e:	b086      	sub	sp, #24
    4980:	af00      	add	r7, sp, #0
    4982:	0002      	movs	r2, r0
    4984:	1dfb      	adds	r3, r7, #7
    4986:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4988:	46c0      	nop			; (mov r8, r8)
    498a:	4b2a      	ldr	r3, [pc, #168]	; (4a34 <system_gclk_gen_get_hz+0xb8>)
    498c:	4798      	blx	r3
    498e:	1e03      	subs	r3, r0, #0
    4990:	d1fb      	bne.n	498a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4992:	4b29      	ldr	r3, [pc, #164]	; (4a38 <system_gclk_gen_get_hz+0xbc>)
    4994:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4996:	4a29      	ldr	r2, [pc, #164]	; (4a3c <system_gclk_gen_get_hz+0xc0>)
    4998:	1dfb      	adds	r3, r7, #7
    499a:	781b      	ldrb	r3, [r3, #0]
    499c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	4b24      	ldr	r3, [pc, #144]	; (4a34 <system_gclk_gen_get_hz+0xb8>)
    49a2:	4798      	blx	r3
    49a4:	1e03      	subs	r3, r0, #0
    49a6:	d1fb      	bne.n	49a0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    49a8:	4b25      	ldr	r3, [pc, #148]	; (4a40 <system_gclk_gen_get_hz+0xc4>)
    49aa:	685b      	ldr	r3, [r3, #4]
    49ac:	04db      	lsls	r3, r3, #19
    49ae:	0edb      	lsrs	r3, r3, #27
    49b0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49b2:	0018      	movs	r0, r3
    49b4:	4b23      	ldr	r3, [pc, #140]	; (4a44 <system_gclk_gen_get_hz+0xc8>)
    49b6:	4798      	blx	r3
    49b8:	0003      	movs	r3, r0
    49ba:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49bc:	4a1f      	ldr	r2, [pc, #124]	; (4a3c <system_gclk_gen_get_hz+0xc0>)
    49be:	1dfb      	adds	r3, r7, #7
    49c0:	781b      	ldrb	r3, [r3, #0]
    49c2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49c4:	4b1e      	ldr	r3, [pc, #120]	; (4a40 <system_gclk_gen_get_hz+0xc4>)
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	02db      	lsls	r3, r3, #11
    49ca:	0fdb      	lsrs	r3, r3, #31
    49cc:	b2da      	uxtb	r2, r3
    49ce:	2313      	movs	r3, #19
    49d0:	18fb      	adds	r3, r7, r3
    49d2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49d4:	4a1c      	ldr	r2, [pc, #112]	; (4a48 <system_gclk_gen_get_hz+0xcc>)
    49d6:	1dfb      	adds	r3, r7, #7
    49d8:	781b      	ldrb	r3, [r3, #0]
    49da:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    49dc:	46c0      	nop			; (mov r8, r8)
    49de:	4b15      	ldr	r3, [pc, #84]	; (4a34 <system_gclk_gen_get_hz+0xb8>)
    49e0:	4798      	blx	r3
    49e2:	1e03      	subs	r3, r0, #0
    49e4:	d1fb      	bne.n	49de <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49e6:	4b16      	ldr	r3, [pc, #88]	; (4a40 <system_gclk_gen_get_hz+0xc4>)
    49e8:	689b      	ldr	r3, [r3, #8]
    49ea:	021b      	lsls	r3, r3, #8
    49ec:	0c1b      	lsrs	r3, r3, #16
    49ee:	b29b      	uxth	r3, r3
    49f0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    49f2:	4b16      	ldr	r3, [pc, #88]	; (4a4c <system_gclk_gen_get_hz+0xd0>)
    49f4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49f6:	2313      	movs	r3, #19
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	2b00      	cmp	r3, #0
    49fe:	d109      	bne.n	4a14 <system_gclk_gen_get_hz+0x98>
    4a00:	68fb      	ldr	r3, [r7, #12]
    4a02:	2b01      	cmp	r3, #1
    4a04:	d906      	bls.n	4a14 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4a06:	4b12      	ldr	r3, [pc, #72]	; (4a50 <system_gclk_gen_get_hz+0xd4>)
    4a08:	68f9      	ldr	r1, [r7, #12]
    4a0a:	6978      	ldr	r0, [r7, #20]
    4a0c:	4798      	blx	r3
    4a0e:	0003      	movs	r3, r0
    4a10:	617b      	str	r3, [r7, #20]
    4a12:	e00a      	b.n	4a2a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4a14:	2313      	movs	r3, #19
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	781b      	ldrb	r3, [r3, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d005      	beq.n	4a2a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4a1e:	68fb      	ldr	r3, [r7, #12]
    4a20:	3301      	adds	r3, #1
    4a22:	697a      	ldr	r2, [r7, #20]
    4a24:	40da      	lsrs	r2, r3
    4a26:	0013      	movs	r3, r2
    4a28:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4a2a:	697b      	ldr	r3, [r7, #20]
}
    4a2c:	0018      	movs	r0, r3
    4a2e:	46bd      	mov	sp, r7
    4a30:	b006      	add	sp, #24
    4a32:	bd80      	pop	{r7, pc}
    4a34:	000047ad 	.word	0x000047ad
    4a38:	00004785 	.word	0x00004785
    4a3c:	40000c04 	.word	0x40000c04
    4a40:	40000c00 	.word	0x40000c00
    4a44:	000042c1 	.word	0x000042c1
    4a48:	40000c08 	.word	0x40000c08
    4a4c:	00004799 	.word	0x00004799
    4a50:	00007345 	.word	0x00007345

00004a54 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4a54:	b580      	push	{r7, lr}
    4a56:	b084      	sub	sp, #16
    4a58:	af00      	add	r7, sp, #0
    4a5a:	0002      	movs	r2, r0
    4a5c:	6039      	str	r1, [r7, #0]
    4a5e:	1dfb      	adds	r3, r7, #7
    4a60:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4a62:	1dfb      	adds	r3, r7, #7
    4a64:	781b      	ldrb	r3, [r3, #0]
    4a66:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4a68:	683b      	ldr	r3, [r7, #0]
    4a6a:	781b      	ldrb	r3, [r3, #0]
    4a6c:	021b      	lsls	r3, r3, #8
    4a6e:	001a      	movs	r2, r3
    4a70:	68fb      	ldr	r3, [r7, #12]
    4a72:	4313      	orrs	r3, r2
    4a74:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4a76:	1dfb      	adds	r3, r7, #7
    4a78:	781b      	ldrb	r3, [r3, #0]
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b04      	ldr	r3, [pc, #16]	; (4a90 <system_gclk_chan_set_config+0x3c>)
    4a7e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4a80:	4b04      	ldr	r3, [pc, #16]	; (4a94 <system_gclk_chan_set_config+0x40>)
    4a82:	68fa      	ldr	r2, [r7, #12]
    4a84:	b292      	uxth	r2, r2
    4a86:	805a      	strh	r2, [r3, #2]
}
    4a88:	46c0      	nop			; (mov r8, r8)
    4a8a:	46bd      	mov	sp, r7
    4a8c:	b004      	add	sp, #16
    4a8e:	bd80      	pop	{r7, pc}
    4a90:	00004ae1 	.word	0x00004ae1
    4a94:	40000c00 	.word	0x40000c00

00004a98 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b082      	sub	sp, #8
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	0002      	movs	r2, r0
    4aa0:	1dfb      	adds	r3, r7, #7
    4aa2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4aa4:	4b0a      	ldr	r3, [pc, #40]	; (4ad0 <system_gclk_chan_enable+0x38>)
    4aa6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4aa8:	4a0a      	ldr	r2, [pc, #40]	; (4ad4 <system_gclk_chan_enable+0x3c>)
    4aaa:	1dfb      	adds	r3, r7, #7
    4aac:	781b      	ldrb	r3, [r3, #0]
    4aae:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4ab0:	4909      	ldr	r1, [pc, #36]	; (4ad8 <system_gclk_chan_enable+0x40>)
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <system_gclk_chan_enable+0x40>)
    4ab4:	885b      	ldrh	r3, [r3, #2]
    4ab6:	b29b      	uxth	r3, r3
    4ab8:	2280      	movs	r2, #128	; 0x80
    4aba:	01d2      	lsls	r2, r2, #7
    4abc:	4313      	orrs	r3, r2
    4abe:	b29b      	uxth	r3, r3
    4ac0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4ac2:	4b06      	ldr	r3, [pc, #24]	; (4adc <system_gclk_chan_enable+0x44>)
    4ac4:	4798      	blx	r3
}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	46bd      	mov	sp, r7
    4aca:	b002      	add	sp, #8
    4acc:	bd80      	pop	{r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	00004785 	.word	0x00004785
    4ad4:	40000c02 	.word	0x40000c02
    4ad8:	40000c00 	.word	0x40000c00
    4adc:	00004799 	.word	0x00004799

00004ae0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b084      	sub	sp, #16
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	0002      	movs	r2, r0
    4ae8:	1dfb      	adds	r3, r7, #7
    4aea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4aec:	4b1c      	ldr	r3, [pc, #112]	; (4b60 <system_gclk_chan_disable+0x80>)
    4aee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4af0:	4a1c      	ldr	r2, [pc, #112]	; (4b64 <system_gclk_chan_disable+0x84>)
    4af2:	1dfb      	adds	r3, r7, #7
    4af4:	781b      	ldrb	r3, [r3, #0]
    4af6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4af8:	4b1b      	ldr	r3, [pc, #108]	; (4b68 <system_gclk_chan_disable+0x88>)
    4afa:	885b      	ldrh	r3, [r3, #2]
    4afc:	051b      	lsls	r3, r3, #20
    4afe:	0f1b      	lsrs	r3, r3, #28
    4b00:	b2db      	uxtb	r3, r3
    4b02:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4b04:	4a18      	ldr	r2, [pc, #96]	; (4b68 <system_gclk_chan_disable+0x88>)
    4b06:	8853      	ldrh	r3, [r2, #2]
    4b08:	4918      	ldr	r1, [pc, #96]	; (4b6c <system_gclk_chan_disable+0x8c>)
    4b0a:	400b      	ands	r3, r1
    4b0c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4b0e:	4a16      	ldr	r2, [pc, #88]	; (4b68 <system_gclk_chan_disable+0x88>)
    4b10:	4b15      	ldr	r3, [pc, #84]	; (4b68 <system_gclk_chan_disable+0x88>)
    4b12:	885b      	ldrh	r3, [r3, #2]
    4b14:	b29b      	uxth	r3, r3
    4b16:	4916      	ldr	r1, [pc, #88]	; (4b70 <system_gclk_chan_disable+0x90>)
    4b18:	400b      	ands	r3, r1
    4b1a:	b29b      	uxth	r3, r3
    4b1c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	4b11      	ldr	r3, [pc, #68]	; (4b68 <system_gclk_chan_disable+0x88>)
    4b22:	885b      	ldrh	r3, [r3, #2]
    4b24:	b29b      	uxth	r3, r3
    4b26:	001a      	movs	r2, r3
    4b28:	2380      	movs	r3, #128	; 0x80
    4b2a:	01db      	lsls	r3, r3, #7
    4b2c:	4013      	ands	r3, r2
    4b2e:	d1f7      	bne.n	4b20 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4b30:	4a0d      	ldr	r2, [pc, #52]	; (4b68 <system_gclk_chan_disable+0x88>)
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	b2db      	uxtb	r3, r3
    4b36:	1c19      	adds	r1, r3, #0
    4b38:	230f      	movs	r3, #15
    4b3a:	400b      	ands	r3, r1
    4b3c:	b2d9      	uxtb	r1, r3
    4b3e:	8853      	ldrh	r3, [r2, #2]
    4b40:	1c08      	adds	r0, r1, #0
    4b42:	210f      	movs	r1, #15
    4b44:	4001      	ands	r1, r0
    4b46:	0208      	lsls	r0, r1, #8
    4b48:	4908      	ldr	r1, [pc, #32]	; (4b6c <system_gclk_chan_disable+0x8c>)
    4b4a:	400b      	ands	r3, r1
    4b4c:	1c19      	adds	r1, r3, #0
    4b4e:	1c03      	adds	r3, r0, #0
    4b50:	430b      	orrs	r3, r1
    4b52:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4b54:	4b07      	ldr	r3, [pc, #28]	; (4b74 <system_gclk_chan_disable+0x94>)
    4b56:	4798      	blx	r3
}
    4b58:	46c0      	nop			; (mov r8, r8)
    4b5a:	46bd      	mov	sp, r7
    4b5c:	b004      	add	sp, #16
    4b5e:	bd80      	pop	{r7, pc}
    4b60:	00004785 	.word	0x00004785
    4b64:	40000c02 	.word	0x40000c02
    4b68:	40000c00 	.word	0x40000c00
    4b6c:	fffff0ff 	.word	0xfffff0ff
    4b70:	ffffbfff 	.word	0xffffbfff
    4b74:	00004799 	.word	0x00004799

00004b78 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b084      	sub	sp, #16
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	0002      	movs	r2, r0
    4b80:	1dfb      	adds	r3, r7, #7
    4b82:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4b84:	4b0d      	ldr	r3, [pc, #52]	; (4bbc <system_gclk_chan_get_hz+0x44>)
    4b86:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_gclk_chan_get_hz+0x48>)
    4b8a:	1dfb      	adds	r3, r7, #7
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4b90:	4b0c      	ldr	r3, [pc, #48]	; (4bc4 <system_gclk_chan_get_hz+0x4c>)
    4b92:	885b      	ldrh	r3, [r3, #2]
    4b94:	051b      	lsls	r3, r3, #20
    4b96:	0f1b      	lsrs	r3, r3, #28
    4b98:	b2da      	uxtb	r2, r3
    4b9a:	230f      	movs	r3, #15
    4b9c:	18fb      	adds	r3, r7, r3
    4b9e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4ba0:	4b09      	ldr	r3, [pc, #36]	; (4bc8 <system_gclk_chan_get_hz+0x50>)
    4ba2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ba4:	230f      	movs	r3, #15
    4ba6:	18fb      	adds	r3, r7, r3
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	0018      	movs	r0, r3
    4bac:	4b07      	ldr	r3, [pc, #28]	; (4bcc <system_gclk_chan_get_hz+0x54>)
    4bae:	4798      	blx	r3
    4bb0:	0003      	movs	r3, r0
}
    4bb2:	0018      	movs	r0, r3
    4bb4:	46bd      	mov	sp, r7
    4bb6:	b004      	add	sp, #16
    4bb8:	bd80      	pop	{r7, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	00004785 	.word	0x00004785
    4bc0:	40000c02 	.word	0x40000c02
    4bc4:	40000c00 	.word	0x40000c00
    4bc8:	00004799 	.word	0x00004799
    4bcc:	0000497d 	.word	0x0000497d

00004bd0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b084      	sub	sp, #16
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	0002      	movs	r2, r0
    4bd8:	1dfb      	adds	r3, r7, #7
    4bda:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4bdc:	230f      	movs	r3, #15
    4bde:	18fb      	adds	r3, r7, r3
    4be0:	1dfa      	adds	r2, r7, #7
    4be2:	7812      	ldrb	r2, [r2, #0]
    4be4:	09d2      	lsrs	r2, r2, #7
    4be6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4be8:	230e      	movs	r3, #14
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	1dfa      	adds	r2, r7, #7
    4bee:	7812      	ldrb	r2, [r2, #0]
    4bf0:	0952      	lsrs	r2, r2, #5
    4bf2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4bf4:	4b0d      	ldr	r3, [pc, #52]	; (4c2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4bf6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4bf8:	230f      	movs	r3, #15
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d10f      	bne.n	4c22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4c02:	230f      	movs	r3, #15
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	009b      	lsls	r3, r3, #2
    4c0a:	2210      	movs	r2, #16
    4c0c:	4694      	mov	ip, r2
    4c0e:	44bc      	add	ip, r7
    4c10:	4463      	add	r3, ip
    4c12:	3b08      	subs	r3, #8
    4c14:	681a      	ldr	r2, [r3, #0]
    4c16:	230e      	movs	r3, #14
    4c18:	18fb      	adds	r3, r7, r3
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	01db      	lsls	r3, r3, #7
    4c1e:	18d3      	adds	r3, r2, r3
    4c20:	e000      	b.n	4c24 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4c22:	2300      	movs	r3, #0
	}
}
    4c24:	0018      	movs	r0, r3
    4c26:	46bd      	mov	sp, r7
    4c28:	b004      	add	sp, #16
    4c2a:	bd80      	pop	{r7, pc}
    4c2c:	41004400 	.word	0x41004400

00004c30 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4c30:	b580      	push	{r7, lr}
    4c32:	b088      	sub	sp, #32
    4c34:	af00      	add	r7, sp, #0
    4c36:	60f8      	str	r0, [r7, #12]
    4c38:	60b9      	str	r1, [r7, #8]
    4c3a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4c3c:	2300      	movs	r3, #0
    4c3e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	78db      	ldrb	r3, [r3, #3]
    4c44:	2201      	movs	r2, #1
    4c46:	4053      	eors	r3, r2
    4c48:	b2db      	uxtb	r3, r3
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d035      	beq.n	4cba <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	2b80      	cmp	r3, #128	; 0x80
    4c54:	d00b      	beq.n	4c6e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4c56:	69fb      	ldr	r3, [r7, #28]
    4c58:	2280      	movs	r2, #128	; 0x80
    4c5a:	0252      	lsls	r2, r2, #9
    4c5c:	4313      	orrs	r3, r2
    4c5e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	781b      	ldrb	r3, [r3, #0]
    4c64:	061b      	lsls	r3, r3, #24
    4c66:	001a      	movs	r2, r3
    4c68:	69fb      	ldr	r3, [r7, #28]
    4c6a:	4313      	orrs	r3, r2
    4c6c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	785b      	ldrb	r3, [r3, #1]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d003      	beq.n	4c7e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4c7a:	2b02      	cmp	r3, #2
    4c7c:	d110      	bne.n	4ca0 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4c7e:	69fb      	ldr	r3, [r7, #28]
    4c80:	2280      	movs	r2, #128	; 0x80
    4c82:	0292      	lsls	r2, r2, #10
    4c84:	4313      	orrs	r3, r2
    4c86:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	789b      	ldrb	r3, [r3, #2]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d004      	beq.n	4c9a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4c90:	69fb      	ldr	r3, [r7, #28]
    4c92:	2280      	movs	r2, #128	; 0x80
    4c94:	02d2      	lsls	r2, r2, #11
    4c96:	4313      	orrs	r3, r2
    4c98:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4c9a:	68fb      	ldr	r3, [r7, #12]
    4c9c:	68ba      	ldr	r2, [r7, #8]
    4c9e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	785b      	ldrb	r3, [r3, #1]
    4ca4:	2b01      	cmp	r3, #1
    4ca6:	d003      	beq.n	4cb0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4cac:	2b02      	cmp	r3, #2
    4cae:	d107      	bne.n	4cc0 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4cb0:	69fb      	ldr	r3, [r7, #28]
    4cb2:	4a22      	ldr	r2, [pc, #136]	; (4d3c <_system_pinmux_config+0x10c>)
    4cb4:	4013      	ands	r3, r2
    4cb6:	61fb      	str	r3, [r7, #28]
    4cb8:	e002      	b.n	4cc0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	68ba      	ldr	r2, [r7, #8]
    4cbe:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4cc0:	68bb      	ldr	r3, [r7, #8]
    4cc2:	041b      	lsls	r3, r3, #16
    4cc4:	0c1b      	lsrs	r3, r3, #16
    4cc6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	0c1b      	lsrs	r3, r3, #16
    4ccc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cce:	69ba      	ldr	r2, [r7, #24]
    4cd0:	69fb      	ldr	r3, [r7, #28]
    4cd2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4cd4:	22a0      	movs	r2, #160	; 0xa0
    4cd6:	05d2      	lsls	r2, r2, #23
    4cd8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cda:	68fb      	ldr	r3, [r7, #12]
    4cdc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cde:	697a      	ldr	r2, [r7, #20]
    4ce0:	69fb      	ldr	r3, [r7, #28]
    4ce2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4ce4:	22d0      	movs	r2, #208	; 0xd0
    4ce6:	0612      	lsls	r2, r2, #24
    4ce8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4cea:	68fb      	ldr	r3, [r7, #12]
    4cec:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4cee:	687b      	ldr	r3, [r7, #4]
    4cf0:	78db      	ldrb	r3, [r3, #3]
    4cf2:	2201      	movs	r2, #1
    4cf4:	4053      	eors	r3, r2
    4cf6:	b2db      	uxtb	r3, r3
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d01a      	beq.n	4d32 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4cfc:	69fa      	ldr	r2, [r7, #28]
    4cfe:	2380      	movs	r3, #128	; 0x80
    4d00:	02db      	lsls	r3, r3, #11
    4d02:	4013      	ands	r3, r2
    4d04:	d00a      	beq.n	4d1c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	789b      	ldrb	r3, [r3, #2]
    4d0a:	2b01      	cmp	r3, #1
    4d0c:	d103      	bne.n	4d16 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4d0e:	68fb      	ldr	r3, [r7, #12]
    4d10:	68ba      	ldr	r2, [r7, #8]
    4d12:	619a      	str	r2, [r3, #24]
    4d14:	e002      	b.n	4d1c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	68ba      	ldr	r2, [r7, #8]
    4d1a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	785b      	ldrb	r3, [r3, #1]
    4d20:	2b01      	cmp	r3, #1
    4d22:	d003      	beq.n	4d2c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d28:	2b02      	cmp	r3, #2
    4d2a:	d102      	bne.n	4d32 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4d2c:	68fb      	ldr	r3, [r7, #12]
    4d2e:	68ba      	ldr	r2, [r7, #8]
    4d30:	609a      	str	r2, [r3, #8]
		}
	}
}
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	46bd      	mov	sp, r7
    4d36:	b008      	add	sp, #32
    4d38:	bd80      	pop	{r7, pc}
    4d3a:	46c0      	nop			; (mov r8, r8)
    4d3c:	fffbffff 	.word	0xfffbffff

00004d40 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b084      	sub	sp, #16
    4d44:	af00      	add	r7, sp, #0
    4d46:	0002      	movs	r2, r0
    4d48:	6039      	str	r1, [r7, #0]
    4d4a:	1dfb      	adds	r3, r7, #7
    4d4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4d4e:	1dfb      	adds	r3, r7, #7
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	0018      	movs	r0, r3
    4d54:	4b0a      	ldr	r3, [pc, #40]	; (4d80 <system_pinmux_pin_set_config+0x40>)
    4d56:	4798      	blx	r3
    4d58:	0003      	movs	r3, r0
    4d5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4d5c:	1dfb      	adds	r3, r7, #7
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	221f      	movs	r2, #31
    4d62:	4013      	ands	r3, r2
    4d64:	2201      	movs	r2, #1
    4d66:	409a      	lsls	r2, r3
    4d68:	0013      	movs	r3, r2
    4d6a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4d6c:	683a      	ldr	r2, [r7, #0]
    4d6e:	68b9      	ldr	r1, [r7, #8]
    4d70:	68fb      	ldr	r3, [r7, #12]
    4d72:	0018      	movs	r0, r3
    4d74:	4b03      	ldr	r3, [pc, #12]	; (4d84 <system_pinmux_pin_set_config+0x44>)
    4d76:	4798      	blx	r3
}
    4d78:	46c0      	nop			; (mov r8, r8)
    4d7a:	46bd      	mov	sp, r7
    4d7c:	b004      	add	sp, #16
    4d7e:	bd80      	pop	{r7, pc}
    4d80:	00004bd1 	.word	0x00004bd1
    4d84:	00004c31 	.word	0x00004c31

00004d88 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4d88:	b580      	push	{r7, lr}
    4d8a:	af00      	add	r7, sp, #0
	return;
    4d8c:	46c0      	nop			; (mov r8, r8)
}
    4d8e:	46bd      	mov	sp, r7
    4d90:	bd80      	pop	{r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)

00004d94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4d98:	4b06      	ldr	r3, [pc, #24]	; (4db4 <system_init+0x20>)
    4d9a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4d9c:	4b06      	ldr	r3, [pc, #24]	; (4db8 <system_init+0x24>)
    4d9e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4da0:	4b06      	ldr	r3, [pc, #24]	; (4dbc <system_init+0x28>)
    4da2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4da4:	4b06      	ldr	r3, [pc, #24]	; (4dc0 <system_init+0x2c>)
    4da6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4da8:	4b06      	ldr	r3, [pc, #24]	; (4dc4 <system_init+0x30>)
    4daa:	4798      	blx	r3
}
    4dac:	46c0      	nop			; (mov r8, r8)
    4dae:	46bd      	mov	sp, r7
    4db0:	bd80      	pop	{r7, pc}
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	000045a5 	.word	0x000045a5
    4db8:	00004091 	.word	0x00004091
    4dbc:	00004d89 	.word	0x00004d89
    4dc0:	00000271 	.word	0x00000271
    4dc4:	00004d89 	.word	0x00004d89

00004dc8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	b082      	sub	sp, #8
    4dcc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4dce:	4b2f      	ldr	r3, [pc, #188]	; (4e8c <Reset_Handler+0xc4>)
    4dd0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4dd2:	4b2f      	ldr	r3, [pc, #188]	; (4e90 <Reset_Handler+0xc8>)
    4dd4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4dd6:	687a      	ldr	r2, [r7, #4]
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	429a      	cmp	r2, r3
    4ddc:	d00c      	beq.n	4df8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4dde:	e007      	b.n	4df0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4de0:	683b      	ldr	r3, [r7, #0]
    4de2:	1d1a      	adds	r2, r3, #4
    4de4:	603a      	str	r2, [r7, #0]
    4de6:	687a      	ldr	r2, [r7, #4]
    4de8:	1d11      	adds	r1, r2, #4
    4dea:	6079      	str	r1, [r7, #4]
    4dec:	6812      	ldr	r2, [r2, #0]
    4dee:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4df0:	683a      	ldr	r2, [r7, #0]
    4df2:	4b28      	ldr	r3, [pc, #160]	; (4e94 <Reset_Handler+0xcc>)
    4df4:	429a      	cmp	r2, r3
    4df6:	d3f3      	bcc.n	4de0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4df8:	4b27      	ldr	r3, [pc, #156]	; (4e98 <Reset_Handler+0xd0>)
    4dfa:	603b      	str	r3, [r7, #0]
    4dfc:	e004      	b.n	4e08 <Reset_Handler+0x40>
                *pDest++ = 0;
    4dfe:	683b      	ldr	r3, [r7, #0]
    4e00:	1d1a      	adds	r2, r3, #4
    4e02:	603a      	str	r2, [r7, #0]
    4e04:	2200      	movs	r2, #0
    4e06:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4e08:	683a      	ldr	r2, [r7, #0]
    4e0a:	4b24      	ldr	r3, [pc, #144]	; (4e9c <Reset_Handler+0xd4>)
    4e0c:	429a      	cmp	r2, r3
    4e0e:	d3f6      	bcc.n	4dfe <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4e10:	4b23      	ldr	r3, [pc, #140]	; (4ea0 <Reset_Handler+0xd8>)
    4e12:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4e14:	4b23      	ldr	r3, [pc, #140]	; (4ea4 <Reset_Handler+0xdc>)
    4e16:	687a      	ldr	r2, [r7, #4]
    4e18:	21ff      	movs	r1, #255	; 0xff
    4e1a:	438a      	bics	r2, r1
    4e1c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4e1e:	4a22      	ldr	r2, [pc, #136]	; (4ea8 <Reset_Handler+0xe0>)
    4e20:	2390      	movs	r3, #144	; 0x90
    4e22:	005b      	lsls	r3, r3, #1
    4e24:	2102      	movs	r1, #2
    4e26:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e28:	4a20      	ldr	r2, [pc, #128]	; (4eac <Reset_Handler+0xe4>)
    4e2a:	78d3      	ldrb	r3, [r2, #3]
    4e2c:	2103      	movs	r1, #3
    4e2e:	438b      	bics	r3, r1
    4e30:	1c19      	adds	r1, r3, #0
    4e32:	2302      	movs	r3, #2
    4e34:	430b      	orrs	r3, r1
    4e36:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e38:	4a1c      	ldr	r2, [pc, #112]	; (4eac <Reset_Handler+0xe4>)
    4e3a:	78d3      	ldrb	r3, [r2, #3]
    4e3c:	210c      	movs	r1, #12
    4e3e:	438b      	bics	r3, r1
    4e40:	1c19      	adds	r1, r3, #0
    4e42:	2308      	movs	r3, #8
    4e44:	430b      	orrs	r3, r1
    4e46:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4e48:	4a19      	ldr	r2, [pc, #100]	; (4eb0 <Reset_Handler+0xe8>)
    4e4a:	7b93      	ldrb	r3, [r2, #14]
    4e4c:	2130      	movs	r1, #48	; 0x30
    4e4e:	438b      	bics	r3, r1
    4e50:	1c19      	adds	r1, r3, #0
    4e52:	2320      	movs	r3, #32
    4e54:	430b      	orrs	r3, r1
    4e56:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4e58:	4a15      	ldr	r2, [pc, #84]	; (4eb0 <Reset_Handler+0xe8>)
    4e5a:	7b93      	ldrb	r3, [r2, #14]
    4e5c:	210c      	movs	r1, #12
    4e5e:	438b      	bics	r3, r1
    4e60:	1c19      	adds	r1, r3, #0
    4e62:	2308      	movs	r3, #8
    4e64:	430b      	orrs	r3, r1
    4e66:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4e68:	4a11      	ldr	r2, [pc, #68]	; (4eb0 <Reset_Handler+0xe8>)
    4e6a:	7b93      	ldrb	r3, [r2, #14]
    4e6c:	2103      	movs	r1, #3
    4e6e:	438b      	bics	r3, r1
    4e70:	1c19      	adds	r1, r3, #0
    4e72:	2302      	movs	r3, #2
    4e74:	430b      	orrs	r3, r1
    4e76:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4e78:	4a0e      	ldr	r2, [pc, #56]	; (4eb4 <Reset_Handler+0xec>)
    4e7a:	6853      	ldr	r3, [r2, #4]
    4e7c:	2180      	movs	r1, #128	; 0x80
    4e7e:	430b      	orrs	r3, r1
    4e80:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4e82:	4b0d      	ldr	r3, [pc, #52]	; (4eb8 <Reset_Handler+0xf0>)
    4e84:	4798      	blx	r3

        /* Branch to main function */
        main();
    4e86:	4b0d      	ldr	r3, [pc, #52]	; (4ebc <Reset_Handler+0xf4>)
    4e88:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4e8a:	e7fe      	b.n	4e8a <Reset_Handler+0xc2>
    4e8c:	00008f94 	.word	0x00008f94
    4e90:	20000000 	.word	0x20000000
    4e94:	20000010 	.word	0x20000010
    4e98:	20000010 	.word	0x20000010
    4e9c:	200002b4 	.word	0x200002b4
    4ea0:	00000000 	.word	0x00000000
    4ea4:	e000ed00 	.word	0xe000ed00
    4ea8:	41007000 	.word	0x41007000
    4eac:	41005000 	.word	0x41005000
    4eb0:	41004800 	.word	0x41004800
    4eb4:	41004000 	.word	0x41004000
    4eb8:	00008d95 	.word	0x00008d95
    4ebc:	00006de5 	.word	0x00006de5

00004ec0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	af00      	add	r7, sp, #0
        while (1) {
        }
    4ec4:	e7fe      	b.n	4ec4 <Dummy_Handler+0x4>
    4ec6:	46c0      	nop			; (mov r8, r8)

00004ec8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	b084      	sub	sp, #16
    4ecc:	af00      	add	r7, sp, #0
    4ece:	0002      	movs	r2, r0
    4ed0:	1dfb      	adds	r3, r7, #7
    4ed2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ed4:	230f      	movs	r3, #15
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	1dfa      	adds	r2, r7, #7
    4eda:	7812      	ldrb	r2, [r2, #0]
    4edc:	09d2      	lsrs	r2, r2, #7
    4ede:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ee0:	230e      	movs	r3, #14
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	1dfa      	adds	r2, r7, #7
    4ee6:	7812      	ldrb	r2, [r2, #0]
    4ee8:	0952      	lsrs	r2, r2, #5
    4eea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4eec:	4b0d      	ldr	r3, [pc, #52]	; (4f24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4eee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4ef0:	230f      	movs	r3, #15
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	781b      	ldrb	r3, [r3, #0]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	d10f      	bne.n	4f1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4efa:	230f      	movs	r3, #15
    4efc:	18fb      	adds	r3, r7, r3
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	2210      	movs	r2, #16
    4f04:	4694      	mov	ip, r2
    4f06:	44bc      	add	ip, r7
    4f08:	4463      	add	r3, ip
    4f0a:	3b08      	subs	r3, #8
    4f0c:	681a      	ldr	r2, [r3, #0]
    4f0e:	230e      	movs	r3, #14
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	01db      	lsls	r3, r3, #7
    4f16:	18d3      	adds	r3, r2, r3
    4f18:	e000      	b.n	4f1c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4f1a:	2300      	movs	r3, #0
	}
}
    4f1c:	0018      	movs	r0, r3
    4f1e:	46bd      	mov	sp, r7
    4f20:	b004      	add	sp, #16
    4f22:	bd80      	pop	{r7, pc}
    4f24:	41004400 	.word	0x41004400

00004f28 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	0002      	movs	r2, r0
    4f30:	1dfb      	adds	r3, r7, #7
    4f32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f34:	1dfb      	adds	r3, r7, #7
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	0018      	movs	r0, r3
    4f3a:	4b03      	ldr	r3, [pc, #12]	; (4f48 <port_get_group_from_gpio_pin+0x20>)
    4f3c:	4798      	blx	r3
    4f3e:	0003      	movs	r3, r0
}
    4f40:	0018      	movs	r0, r3
    4f42:	46bd      	mov	sp, r7
    4f44:	b002      	add	sp, #8
    4f46:	bd80      	pop	{r7, pc}
    4f48:	00004ec9 	.word	0x00004ec9

00004f4c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	b082      	sub	sp, #8
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	2200      	movs	r2, #0
    4f58:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	2201      	movs	r2, #1
    4f5e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	2200      	movs	r2, #0
    4f64:	709a      	strb	r2, [r3, #2]
}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	46bd      	mov	sp, r7
    4f6a:	b002      	add	sp, #8
    4f6c:	bd80      	pop	{r7, pc}
    4f6e:	46c0      	nop			; (mov r8, r8)

00004f70 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4f70:	b580      	push	{r7, lr}
    4f72:	b084      	sub	sp, #16
    4f74:	af00      	add	r7, sp, #0
    4f76:	0002      	movs	r2, r0
    4f78:	1dfb      	adds	r3, r7, #7
    4f7a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f7c:	1dfb      	adds	r3, r7, #7
    4f7e:	781b      	ldrb	r3, [r3, #0]
    4f80:	0018      	movs	r0, r3
    4f82:	4b0b      	ldr	r3, [pc, #44]	; (4fb0 <port_pin_get_input_level+0x40>)
    4f84:	4798      	blx	r3
    4f86:	0003      	movs	r3, r0
    4f88:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f8a:	1dfb      	adds	r3, r7, #7
    4f8c:	781b      	ldrb	r3, [r3, #0]
    4f8e:	221f      	movs	r2, #31
    4f90:	4013      	ands	r3, r2
    4f92:	2201      	movs	r2, #1
    4f94:	409a      	lsls	r2, r3
    4f96:	0013      	movs	r3, r2
    4f98:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4f9a:	68fb      	ldr	r3, [r7, #12]
    4f9c:	6a1b      	ldr	r3, [r3, #32]
    4f9e:	68ba      	ldr	r2, [r7, #8]
    4fa0:	4013      	ands	r3, r2
    4fa2:	1e5a      	subs	r2, r3, #1
    4fa4:	4193      	sbcs	r3, r2
    4fa6:	b2db      	uxtb	r3, r3
}
    4fa8:	0018      	movs	r0, r3
    4faa:	46bd      	mov	sp, r7
    4fac:	b004      	add	sp, #16
    4fae:	bd80      	pop	{r7, pc}
    4fb0:	00004f29 	.word	0x00004f29

00004fb4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b084      	sub	sp, #16
    4fb8:	af00      	add	r7, sp, #0
    4fba:	0002      	movs	r2, r0
    4fbc:	1dfb      	adds	r3, r7, #7
    4fbe:	701a      	strb	r2, [r3, #0]
    4fc0:	1dbb      	adds	r3, r7, #6
    4fc2:	1c0a      	adds	r2, r1, #0
    4fc4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4fc6:	1dfb      	adds	r3, r7, #7
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	0018      	movs	r0, r3
    4fcc:	4b0d      	ldr	r3, [pc, #52]	; (5004 <port_pin_set_output_level+0x50>)
    4fce:	4798      	blx	r3
    4fd0:	0003      	movs	r3, r0
    4fd2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4fd4:	1dfb      	adds	r3, r7, #7
    4fd6:	781b      	ldrb	r3, [r3, #0]
    4fd8:	221f      	movs	r2, #31
    4fda:	4013      	ands	r3, r2
    4fdc:	2201      	movs	r2, #1
    4fde:	409a      	lsls	r2, r3
    4fe0:	0013      	movs	r3, r2
    4fe2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4fe4:	1dbb      	adds	r3, r7, #6
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d003      	beq.n	4ff4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4fec:	68fb      	ldr	r3, [r7, #12]
    4fee:	68ba      	ldr	r2, [r7, #8]
    4ff0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4ff2:	e002      	b.n	4ffa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4ff4:	68fb      	ldr	r3, [r7, #12]
    4ff6:	68ba      	ldr	r2, [r7, #8]
    4ff8:	615a      	str	r2, [r3, #20]
	}
}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	46bd      	mov	sp, r7
    4ffe:	b004      	add	sp, #16
    5000:	bd80      	pop	{r7, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	00004f29 	.word	0x00004f29

00005008 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    5008:	b580      	push	{r7, lr}
    500a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    500c:	4b04      	ldr	r3, [pc, #16]	; (5020 <system_interrupt_enable_global+0x18>)
    500e:	2201      	movs	r2, #1
    5010:	701a      	strb	r2, [r3, #0]
    5012:	f3bf 8f5f 	dmb	sy
    5016:	b662      	cpsie	i
}
    5018:	46c0      	nop			; (mov r8, r8)
    501a:	46bd      	mov	sp, r7
    501c:	bd80      	pop	{r7, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	20000000 	.word	0x20000000

00005024 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    5024:	b580      	push	{r7, lr}
    5026:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5028:	b672      	cpsid	i
    502a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    502e:	4b03      	ldr	r3, [pc, #12]	; (503c <system_interrupt_disable_global+0x18>)
    5030:	2200      	movs	r2, #0
    5032:	701a      	strb	r2, [r3, #0]
}
    5034:	46c0      	nop			; (mov r8, r8)
    5036:	46bd      	mov	sp, r7
    5038:	bd80      	pop	{r7, pc}
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	20000000 	.word	0x20000000

00005040 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	0002      	movs	r2, r0
    5048:	1dfb      	adds	r3, r7, #7
    504a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    504c:	4b06      	ldr	r3, [pc, #24]	; (5068 <system_interrupt_enable+0x28>)
    504e:	1dfa      	adds	r2, r7, #7
    5050:	7812      	ldrb	r2, [r2, #0]
    5052:	0011      	movs	r1, r2
    5054:	221f      	movs	r2, #31
    5056:	400a      	ands	r2, r1
    5058:	2101      	movs	r1, #1
    505a:	4091      	lsls	r1, r2
    505c:	000a      	movs	r2, r1
    505e:	601a      	str	r2, [r3, #0]
}
    5060:	46c0      	nop			; (mov r8, r8)
    5062:	46bd      	mov	sp, r7
    5064:	b002      	add	sp, #8
    5066:	bd80      	pop	{r7, pc}
    5068:	e000e100 	.word	0xe000e100

0000506c <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    506c:	b580      	push	{r7, lr}
    506e:	b084      	sub	sp, #16
    5070:	af00      	add	r7, sp, #0
    5072:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	22a0      	movs	r2, #160	; 0xa0
    5078:	0112      	lsls	r2, r2, #4
    507a:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	2201      	movs	r2, #1
    5080:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	2200      	movs	r2, #0
    5086:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    5088:	687b      	ldr	r3, [r7, #4]
    508a:	2200      	movs	r2, #0
    508c:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    508e:	230f      	movs	r3, #15
    5090:	18fb      	adds	r3, r7, r3
    5092:	2200      	movs	r2, #0
    5094:	701a      	strb	r2, [r3, #0]
    5096:	e00e      	b.n	50b6 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    5098:	230f      	movs	r3, #15
    509a:	18fb      	adds	r3, r7, r3
    509c:	781a      	ldrb	r2, [r3, #0]
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	3202      	adds	r2, #2
    50a2:	0092      	lsls	r2, r2, #2
    50a4:	2100      	movs	r1, #0
    50a6:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    50a8:	230f      	movs	r3, #15
    50aa:	18fb      	adds	r3, r7, r3
    50ac:	781a      	ldrb	r2, [r3, #0]
    50ae:	230f      	movs	r3, #15
    50b0:	18fb      	adds	r3, r7, r3
    50b2:	3201      	adds	r2, #1
    50b4:	701a      	strb	r2, [r3, #0]
    50b6:	230f      	movs	r3, #15
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	2b01      	cmp	r3, #1
    50be:	d9eb      	bls.n	5098 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    50c0:	46c0      	nop			; (mov r8, r8)
    50c2:	46bd      	mov	sp, r7
    50c4:	b004      	add	sp, #16
    50c6:	bd80      	pop	{r7, pc}

000050c8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    50d0:	687b      	ldr	r3, [r7, #4]
    50d2:	681b      	ldr	r3, [r3, #0]
    50d4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	69db      	ldr	r3, [r3, #28]
    50da:	2207      	movs	r2, #7
    50dc:	4013      	ands	r3, r2
    50de:	1e5a      	subs	r2, r3, #1
    50e0:	4193      	sbcs	r3, r2
    50e2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    50e4:	0018      	movs	r0, r3
    50e6:	46bd      	mov	sp, r7
    50e8:	b004      	add	sp, #16
    50ea:	bd80      	pop	{r7, pc}

000050ec <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    50ec:	b580      	push	{r7, lr}
    50ee:	b082      	sub	sp, #8
    50f0:	af00      	add	r7, sp, #0
    50f2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    50f4:	46c0      	nop			; (mov r8, r8)
    50f6:	687b      	ldr	r3, [r7, #4]
    50f8:	0018      	movs	r0, r3
    50fa:	4b04      	ldr	r3, [pc, #16]	; (510c <_i2c_master_wait_for_sync+0x20>)
    50fc:	4798      	blx	r3
    50fe:	1e03      	subs	r3, r0, #0
    5100:	d1f9      	bne.n	50f6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	46bd      	mov	sp, r7
    5106:	b002      	add	sp, #8
    5108:	bd80      	pop	{r7, pc}
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	000050c9 	.word	0x000050c9

00005110 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    5110:	b580      	push	{r7, lr}
    5112:	b082      	sub	sp, #8
    5114:	af00      	add	r7, sp, #0
    5116:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5118:	687b      	ldr	r3, [r7, #4]
    511a:	2264      	movs	r2, #100	; 0x64
    511c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	4a1b      	ldr	r2, [pc, #108]	; (5190 <i2c_master_get_config_defaults+0x80>)
    5122:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	2200      	movs	r2, #0
    5128:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	2200      	movs	r2, #0
    512e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	2200      	movs	r2, #0
    5134:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	2280      	movs	r2, #128	; 0x80
    513a:	0392      	lsls	r2, r2, #14
    513c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	2201      	movs	r2, #1
    5142:	4252      	negs	r2, r2
    5144:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    5146:	687b      	ldr	r3, [r7, #4]
    5148:	2201      	movs	r2, #1
    514a:	4252      	negs	r2, r2
    514c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	2200      	movs	r2, #0
    5152:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	2200      	movs	r2, #0
    5158:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	2224      	movs	r2, #36	; 0x24
    515e:	2100      	movs	r1, #0
    5160:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5162:	687b      	ldr	r3, [r7, #4]
    5164:	2200      	movs	r2, #0
    5166:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	222c      	movs	r2, #44	; 0x2c
    516c:	2100      	movs	r1, #0
    516e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	222d      	movs	r2, #45	; 0x2d
    5174:	2100      	movs	r1, #0
    5176:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	222e      	movs	r2, #46	; 0x2e
    517c:	2100      	movs	r1, #0
    517e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	22d7      	movs	r2, #215	; 0xd7
    5184:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	46bd      	mov	sp, r7
    518a:	b002      	add	sp, #8
    518c:	bd80      	pop	{r7, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	00000d48 	.word	0x00000d48

00005194 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    5194:	b580      	push	{r7, lr}
    5196:	b084      	sub	sp, #16
    5198:	af00      	add	r7, sp, #0
    519a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	681b      	ldr	r3, [r3, #0]
    51a0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    51a2:	2300      	movs	r3, #0
    51a4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	0018      	movs	r0, r3
    51aa:	4b14      	ldr	r3, [pc, #80]	; (51fc <i2c_master_enable+0x68>)
    51ac:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    51ae:	68bb      	ldr	r3, [r7, #8]
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	2202      	movs	r2, #2
    51b4:	431a      	orrs	r2, r3
    51b6:	68bb      	ldr	r3, [r7, #8]
    51b8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	681b      	ldr	r3, [r3, #0]
    51be:	0018      	movs	r0, r3
    51c0:	4b0f      	ldr	r3, [pc, #60]	; (5200 <i2c_master_enable+0x6c>)
    51c2:	4798      	blx	r3
    51c4:	0003      	movs	r3, r0
    51c6:	0018      	movs	r0, r3
    51c8:	4b0e      	ldr	r3, [pc, #56]	; (5204 <i2c_master_enable+0x70>)
    51ca:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    51cc:	e00c      	b.n	51e8 <i2c_master_enable+0x54>
		timeout_counter++;
    51ce:	68fb      	ldr	r3, [r7, #12]
    51d0:	3301      	adds	r3, #1
    51d2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	88db      	ldrh	r3, [r3, #6]
    51d8:	1e1a      	subs	r2, r3, #0
    51da:	68fb      	ldr	r3, [r7, #12]
    51dc:	429a      	cmp	r2, r3
    51de:	d803      	bhi.n	51e8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    51e0:	68bb      	ldr	r3, [r7, #8]
    51e2:	2210      	movs	r2, #16
    51e4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    51e6:	e006      	b.n	51f6 <i2c_master_enable+0x62>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    51e8:	68bb      	ldr	r3, [r7, #8]
    51ea:	8b5b      	ldrh	r3, [r3, #26]
    51ec:	b29b      	uxth	r3, r3
    51ee:	001a      	movs	r2, r3
    51f0:	2310      	movs	r3, #16
    51f2:	4013      	ands	r3, r2
    51f4:	d0eb      	beq.n	51ce <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    51f6:	46bd      	mov	sp, r7
    51f8:	b004      	add	sp, #16
    51fa:	bd80      	pop	{r7, pc}
    51fc:	000050ed 	.word	0x000050ed
    5200:	00003f2d 	.word	0x00003f2d
    5204:	00005041 	.word	0x00005041

00005208 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    5208:	b580      	push	{r7, lr}
    520a:	b084      	sub	sp, #16
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    5216:	68fb      	ldr	r3, [r7, #12]
    5218:	69db      	ldr	r3, [r3, #28]
    521a:	1e5a      	subs	r2, r3, #1
    521c:	4193      	sbcs	r3, r2
    521e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    5220:	0018      	movs	r0, r3
    5222:	46bd      	mov	sp, r7
    5224:	b004      	add	sp, #16
    5226:	bd80      	pop	{r7, pc}

00005228 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	2201      	movs	r2, #1
    5234:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	2200      	movs	r2, #0
    523a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	2200      	movs	r2, #0
    5240:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	22c0      	movs	r2, #192	; 0xc0
    5246:	0392      	lsls	r2, r2, #14
    5248:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	2200      	movs	r2, #0
    524e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	2200      	movs	r2, #0
    5254:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	2201      	movs	r2, #1
    525a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	2201      	movs	r2, #1
    5260:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	2200      	movs	r2, #0
    5266:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	2224      	movs	r2, #36	; 0x24
    526c:	2100      	movs	r1, #0
    526e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	3318      	adds	r3, #24
    5274:	220c      	movs	r2, #12
    5276:	2100      	movs	r1, #0
    5278:	0018      	movs	r0, r3
    527a:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <spi_get_config_defaults+0x7c>)
    527c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	4a09      	ldr	r2, [pc, #36]	; (52a8 <spi_get_config_defaults+0x80>)
    5282:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	2200      	movs	r2, #0
    5288:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	2200      	movs	r2, #0
    528e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	2200      	movs	r2, #0
    5294:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    5296:	687b      	ldr	r3, [r7, #4]
    5298:	2200      	movs	r2, #0
    529a:	635a      	str	r2, [r3, #52]	; 0x34

};
    529c:	46c0      	nop			; (mov r8, r8)
    529e:	46bd      	mov	sp, r7
    52a0:	b002      	add	sp, #8
    52a2:	bd80      	pop	{r7, pc}
    52a4:	00008df3 	.word	0x00008df3
    52a8:	000186a0 	.word	0x000186a0

000052ac <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b082      	sub	sp, #8
    52b0:	af00      	add	r7, sp, #0
    52b2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	220a      	movs	r2, #10
    52b8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	2200      	movs	r2, #0
    52be:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	2200      	movs	r2, #0
    52c4:	709a      	strb	r2, [r3, #2]
}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	46bd      	mov	sp, r7
    52ca:	b002      	add	sp, #8
    52cc:	bd80      	pop	{r7, pc}
    52ce:	46c0      	nop			; (mov r8, r8)

000052d0 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    52d0:	b580      	push	{r7, lr}
    52d2:	b084      	sub	sp, #16
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    52d8:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    52da:	683b      	ldr	r3, [r7, #0]
    52dc:	781a      	ldrb	r2, [r3, #0]
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    52e2:	683b      	ldr	r3, [r7, #0]
    52e4:	785a      	ldrb	r2, [r3, #1]
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    52ea:	683b      	ldr	r3, [r7, #0]
    52ec:	789a      	ldrb	r2, [r3, #2]
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    52f2:	230c      	movs	r3, #12
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	0018      	movs	r0, r3
    52f8:	4b0b      	ldr	r3, [pc, #44]	; (5328 <spi_attach_slave+0x58>)
    52fa:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    52fc:	230c      	movs	r3, #12
    52fe:	18fb      	adds	r3, r7, r3
    5300:	2201      	movs	r2, #1
    5302:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	220c      	movs	r2, #12
    530a:	18ba      	adds	r2, r7, r2
    530c:	0011      	movs	r1, r2
    530e:	0018      	movs	r0, r3
    5310:	4b06      	ldr	r3, [pc, #24]	; (532c <spi_attach_slave+0x5c>)
    5312:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	2101      	movs	r1, #1
    531a:	0018      	movs	r0, r3
    531c:	4b04      	ldr	r3, [pc, #16]	; (5330 <spi_attach_slave+0x60>)
    531e:	4798      	blx	r3
}
    5320:	46c0      	nop			; (mov r8, r8)
    5322:	46bd      	mov	sp, r7
    5324:	b004      	add	sp, #16
    5326:	bd80      	pop	{r7, pc}
    5328:	00004f4d 	.word	0x00004f4d
    532c:	00004031 	.word	0x00004031
    5330:	00004fb5 	.word	0x00004fb5

00005334 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    5334:	b580      	push	{r7, lr}
    5336:	b084      	sub	sp, #16
    5338:	af00      	add	r7, sp, #0
    533a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	0018      	movs	r0, r3
    5348:	4b0b      	ldr	r3, [pc, #44]	; (5378 <spi_enable+0x44>)
    534a:	4798      	blx	r3
    534c:	0003      	movs	r3, r0
    534e:	0018      	movs	r0, r3
    5350:	4b0a      	ldr	r3, [pc, #40]	; (537c <spi_enable+0x48>)
    5352:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    5354:	46c0      	nop			; (mov r8, r8)
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	0018      	movs	r0, r3
    535a:	4b09      	ldr	r3, [pc, #36]	; (5380 <spi_enable+0x4c>)
    535c:	4798      	blx	r3
    535e:	1e03      	subs	r3, r0, #0
    5360:	d1f9      	bne.n	5356 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5362:	68fb      	ldr	r3, [r7, #12]
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	2202      	movs	r2, #2
    5368:	431a      	orrs	r2, r3
    536a:	68fb      	ldr	r3, [r7, #12]
    536c:	601a      	str	r2, [r3, #0]
}
    536e:	46c0      	nop			; (mov r8, r8)
    5370:	46bd      	mov	sp, r7
    5372:	b004      	add	sp, #16
    5374:	bd80      	pop	{r7, pc}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	00003f2d 	.word	0x00003f2d
    537c:	00005041 	.word	0x00005041
    5380:	00005209 	.word	0x00005209

00005384 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    5384:	b580      	push	{r7, lr}
    5386:	b084      	sub	sp, #16
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    538c:	687b      	ldr	r3, [r7, #4]
    538e:	681b      	ldr	r3, [r3, #0]
    5390:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5392:	46c0      	nop			; (mov r8, r8)
    5394:	68fb      	ldr	r3, [r7, #12]
    5396:	689b      	ldr	r3, [r3, #8]
    5398:	2202      	movs	r2, #2
    539a:	4013      	ands	r3, r2
    539c:	d1fa      	bne.n	5394 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	681b      	ldr	r3, [r3, #0]
    53a2:	2202      	movs	r2, #2
    53a4:	431a      	orrs	r2, r3
    53a6:	68fb      	ldr	r3, [r7, #12]
    53a8:	601a      	str	r2, [r3, #0]
}
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	46bd      	mov	sp, r7
    53ae:	b004      	add	sp, #16
    53b0:	bd80      	pop	{r7, pc}
    53b2:	46c0      	nop			; (mov r8, r8)

000053b4 <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b082      	sub	sp, #8
    53b8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    53ba:	1d3b      	adds	r3, r7, #4
    53bc:	0018      	movs	r0, r3
    53be:	4b07      	ldr	r3, [pc, #28]	; (53dc <configure_port_pins+0x28>)
    53c0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    53c2:	1d3b      	adds	r3, r7, #4
    53c4:	2200      	movs	r2, #0
    53c6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    53c8:	1d3b      	adds	r3, r7, #4
    53ca:	0019      	movs	r1, r3
    53cc:	2003      	movs	r0, #3
    53ce:	4b04      	ldr	r3, [pc, #16]	; (53e0 <configure_port_pins+0x2c>)
    53d0:	4798      	blx	r3
}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	46bd      	mov	sp, r7
    53d6:	b002      	add	sp, #8
    53d8:	bd80      	pop	{r7, pc}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	00004f4d 	.word	0x00004f4d
    53e0:	00004031 	.word	0x00004031

000053e4 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b084      	sub	sp, #16
    53e8:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    53ea:	1d3b      	adds	r3, r7, #4
    53ec:	0018      	movs	r0, r3
    53ee:	4b0b      	ldr	r3, [pc, #44]	; (541c <configure_extint_channel+0x38>)
    53f0:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    53f2:	1d3b      	adds	r3, r7, #4
    53f4:	2203      	movs	r2, #3
    53f6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    53f8:	1d3b      	adds	r3, r7, #4
    53fa:	2200      	movs	r2, #0
    53fc:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    53fe:	1d3b      	adds	r3, r7, #4
    5400:	2201      	movs	r2, #1
    5402:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    5404:	1d3b      	adds	r3, r7, #4
    5406:	2201      	movs	r2, #1
    5408:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    540a:	1d3b      	adds	r3, r7, #4
    540c:	0019      	movs	r1, r3
    540e:	2003      	movs	r0, #3
    5410:	4b03      	ldr	r3, [pc, #12]	; (5420 <configure_extint_channel+0x3c>)
    5412:	4798      	blx	r3
}
    5414:	46c0      	nop			; (mov r8, r8)
    5416:	46bd      	mov	sp, r7
    5418:	b004      	add	sp, #16
    541a:	bd80      	pop	{r7, pc}
    541c:	000003b5 	.word	0x000003b5
    5420:	000003e9 	.word	0x000003e9

00005424 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    5424:	b580      	push	{r7, lr}
    5426:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    5428:	4b06      	ldr	r3, [pc, #24]	; (5444 <configure_extint_callbacks+0x20>)
    542a:	2200      	movs	r2, #0
    542c:	2103      	movs	r1, #3
    542e:	0018      	movs	r0, r3
    5430:	4b05      	ldr	r3, [pc, #20]	; (5448 <configure_extint_callbacks+0x24>)
    5432:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    5434:	2100      	movs	r1, #0
    5436:	2003      	movs	r0, #3
    5438:	4b04      	ldr	r3, [pc, #16]	; (544c <configure_extint_callbacks+0x28>)
    543a:	4798      	blx	r3
}
    543c:	46c0      	nop			; (mov r8, r8)
    543e:	46bd      	mov	sp, r7
    5440:	bd80      	pop	{r7, pc}
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	00005f49 	.word	0x00005f49
    5448:	00000ed1 	.word	0x00000ed1
    544c:	00000f35 	.word	0x00000f35

00005450 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    5450:	b580      	push	{r7, lr}
    5452:	b090      	sub	sp, #64	; 0x40
    5454:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    5456:	1d3b      	adds	r3, r7, #4
    5458:	0018      	movs	r0, r3
    545a:	4b21      	ldr	r3, [pc, #132]	; (54e0 <configure_RFM69_spi+0x90>)
    545c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    545e:	1d3b      	adds	r3, r7, #4
    5460:	2212      	movs	r2, #18
    5462:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    5464:	1d3a      	adds	r2, r7, #4
    5466:	4b1f      	ldr	r3, [pc, #124]	; (54e4 <configure_RFM69_spi+0x94>)
    5468:	0011      	movs	r1, r2
    546a:	0018      	movs	r0, r3
    546c:	4b1e      	ldr	r3, [pc, #120]	; (54e8 <configure_RFM69_spi+0x98>)
    546e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    5470:	2308      	movs	r3, #8
    5472:	18fb      	adds	r3, r7, r3
    5474:	0018      	movs	r0, r3
    5476:	4b1d      	ldr	r3, [pc, #116]	; (54ec <configure_RFM69_spi+0x9c>)
    5478:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    547a:	2308      	movs	r3, #8
    547c:	18fb      	adds	r3, r7, r3
    547e:	22c0      	movs	r2, #192	; 0xc0
    5480:	0392      	lsls	r2, r2, #14
    5482:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    5484:	2308      	movs	r3, #8
    5486:	18fb      	adds	r3, r7, r3
    5488:	4a19      	ldr	r2, [pc, #100]	; (54f0 <configure_RFM69_spi+0xa0>)
    548a:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    548c:	2308      	movs	r3, #8
    548e:	18fb      	adds	r3, r7, r3
    5490:	4a18      	ldr	r2, [pc, #96]	; (54f4 <configure_RFM69_spi+0xa4>)
    5492:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    5494:	2308      	movs	r3, #8
    5496:	18fb      	adds	r3, r7, r3
    5498:	2201      	movs	r2, #1
    549a:	4252      	negs	r2, r2
    549c:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    549e:	2308      	movs	r3, #8
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	4a15      	ldr	r2, [pc, #84]	; (54f8 <configure_RFM69_spi+0xa8>)
    54a4:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    54a6:	2308      	movs	r3, #8
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	2200      	movs	r2, #0
    54ac:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    54ae:	2308      	movs	r3, #8
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	2200      	movs	r2, #0
    54b4:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    54b6:	2308      	movs	r3, #8
    54b8:	18fa      	adds	r2, r7, r3
    54ba:	4910      	ldr	r1, [pc, #64]	; (54fc <configure_RFM69_spi+0xac>)
    54bc:	4b10      	ldr	r3, [pc, #64]	; (5500 <configure_RFM69_spi+0xb0>)
    54be:	0018      	movs	r0, r3
    54c0:	4b10      	ldr	r3, [pc, #64]	; (5504 <configure_RFM69_spi+0xb4>)
    54c2:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    54c4:	4b0e      	ldr	r3, [pc, #56]	; (5500 <configure_RFM69_spi+0xb0>)
    54c6:	0018      	movs	r0, r3
    54c8:	4b0f      	ldr	r3, [pc, #60]	; (5508 <configure_RFM69_spi+0xb8>)
    54ca:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    54cc:	4905      	ldr	r1, [pc, #20]	; (54e4 <configure_RFM69_spi+0x94>)
    54ce:	4b0c      	ldr	r3, [pc, #48]	; (5500 <configure_RFM69_spi+0xb0>)
    54d0:	2200      	movs	r2, #0
    54d2:	0018      	movs	r0, r3
    54d4:	4b0d      	ldr	r3, [pc, #52]	; (550c <configure_RFM69_spi+0xbc>)
    54d6:	4798      	blx	r3
}
    54d8:	46c0      	nop			; (mov r8, r8)
    54da:	46bd      	mov	sp, r7
    54dc:	b010      	add	sp, #64	; 0x40
    54de:	bd80      	pop	{r7, pc}
    54e0:	000052ad 	.word	0x000052ad
    54e4:	200002b0 	.word	0x200002b0
    54e8:	000052d1 	.word	0x000052d1
    54ec:	00005229 	.word	0x00005229
    54f0:	00100002 	.word	0x00100002
    54f4:	00110002 	.word	0x00110002
    54f8:	00130002 	.word	0x00130002
    54fc:	42000c00 	.word	0x42000c00
    5500:	20000230 	.word	0x20000230
    5504:	0000333d 	.word	0x0000333d
    5508:	00005335 	.word	0x00005335
    550c:	0000362d 	.word	0x0000362d

00005510 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    5510:	b580      	push	{r7, lr}
    5512:	b084      	sub	sp, #16
    5514:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    5516:	003b      	movs	r3, r7
    5518:	0018      	movs	r0, r3
    551a:	4b0f      	ldr	r3, [pc, #60]	; (5558 <configure_rtc_count+0x48>)
    551c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    551e:	003b      	movs	r3, r7
    5520:	2200      	movs	r2, #0
    5522:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    5524:	003b      	movs	r3, r7
    5526:	2200      	movs	r2, #0
    5528:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    552a:	003b      	movs	r3, r7
    552c:	2201      	movs	r2, #1
    552e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    5530:	003a      	movs	r2, r7
    5532:	490a      	ldr	r1, [pc, #40]	; (555c <configure_rtc_count+0x4c>)
    5534:	4b0a      	ldr	r3, [pc, #40]	; (5560 <configure_rtc_count+0x50>)
    5536:	0018      	movs	r0, r3
    5538:	4b0a      	ldr	r3, [pc, #40]	; (5564 <configure_rtc_count+0x54>)
    553a:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    553c:	4b08      	ldr	r3, [pc, #32]	; (5560 <configure_rtc_count+0x50>)
    553e:	0018      	movs	r0, r3
    5540:	4b09      	ldr	r3, [pc, #36]	; (5568 <configure_rtc_count+0x58>)
    5542:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    5544:	4a09      	ldr	r2, [pc, #36]	; (556c <configure_rtc_count+0x5c>)
    5546:	4b06      	ldr	r3, [pc, #24]	; (5560 <configure_rtc_count+0x50>)
    5548:	0011      	movs	r1, r2
    554a:	0018      	movs	r0, r3
    554c:	4b08      	ldr	r3, [pc, #32]	; (5570 <configure_rtc_count+0x60>)
    554e:	4798      	blx	r3
}
    5550:	46c0      	nop			; (mov r8, r8)
    5552:	46bd      	mov	sp, r7
    5554:	b004      	add	sp, #16
    5556:	bd80      	pop	{r7, pc}
    5558:	0000506d 	.word	0x0000506d
    555c:	40001400 	.word	0x40001400
    5560:	20000114 	.word	0x20000114
    5564:	000007e5 	.word	0x000007e5
    5568:	000005dd 	.word	0x000005dd
    556c:	00002710 	.word	0x00002710
    5570:	000009c9 	.word	0x000009c9

00005574 <reset_millis>:

void reset_millis(void)
{
    5574:	b580      	push	{r7, lr}
    5576:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    5578:	4b05      	ldr	r3, [pc, #20]	; (5590 <reset_millis+0x1c>)
    557a:	2100      	movs	r1, #0
    557c:	0018      	movs	r0, r3
    557e:	4b05      	ldr	r3, [pc, #20]	; (5594 <reset_millis+0x20>)
    5580:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    5582:	4b03      	ldr	r3, [pc, #12]	; (5590 <reset_millis+0x1c>)
    5584:	0018      	movs	r0, r3
    5586:	4b04      	ldr	r3, [pc, #16]	; (5598 <reset_millis+0x24>)
    5588:	4798      	blx	r3
}
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	46bd      	mov	sp, r7
    558e:	bd80      	pop	{r7, pc}
    5590:	20000114 	.word	0x20000114
    5594:	00000875 	.word	0x00000875
    5598:	000005dd 	.word	0x000005dd

0000559c <millis>:

uint32_t millis(void)
{
    559c:	b580      	push	{r7, lr}
    559e:	b082      	sub	sp, #8
    55a0:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    55a2:	2300      	movs	r3, #0
    55a4:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    55a6:	4b05      	ldr	r3, [pc, #20]	; (55bc <millis+0x20>)
    55a8:	0018      	movs	r0, r3
    55aa:	4b05      	ldr	r3, [pc, #20]	; (55c0 <millis+0x24>)
    55ac:	4798      	blx	r3
    55ae:	0003      	movs	r3, r0
    55b0:	607b      	str	r3, [r7, #4]
	return milli;
    55b2:	687b      	ldr	r3, [r7, #4]
}
    55b4:	0018      	movs	r0, r3
    55b6:	46bd      	mov	sp, r7
    55b8:	b002      	add	sp, #8
    55ba:	bd80      	pop	{r7, pc}
    55bc:	20000114 	.word	0x20000114
    55c0:	000008d5 	.word	0x000008d5

000055c4 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    55c4:	b590      	push	{r4, r7, lr}
    55c6:	b085      	sub	sp, #20
    55c8:	af00      	add	r7, sp, #0
    55ca:	0004      	movs	r4, r0
    55cc:	6039      	str	r1, [r7, #0]
    55ce:	0010      	movs	r0, r2
    55d0:	0019      	movs	r1, r3
    55d2:	1dfb      	adds	r3, r7, #7
    55d4:	1c22      	adds	r2, r4, #0
    55d6:	701a      	strb	r2, [r3, #0]
    55d8:	1dbb      	adds	r3, r7, #6
    55da:	1c02      	adds	r2, r0, #0
    55dc:	701a      	strb	r2, [r3, #0]
    55de:	1d7b      	adds	r3, r7, #5
    55e0:	1c0a      	adds	r2, r1, #0
    55e2:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    55e4:	2001      	movs	r0, #1
    55e6:	4b4b      	ldr	r3, [pc, #300]	; (5714 <sendFrame+0x150>)
    55e8:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	2027      	movs	r0, #39	; 0x27
    55ee:	4b4a      	ldr	r3, [pc, #296]	; (5718 <sendFrame+0x154>)
    55f0:	4798      	blx	r3
    55f2:	0003      	movs	r3, r0
    55f4:	b25b      	sxtb	r3, r3
    55f6:	2b00      	cmp	r3, #0
    55f8:	daf8      	bge.n	55ec <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    55fa:	2100      	movs	r1, #0
    55fc:	2025      	movs	r0, #37	; 0x25
    55fe:	4b47      	ldr	r3, [pc, #284]	; (571c <sendFrame+0x158>)
    5600:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    5602:	1dbb      	adds	r3, r7, #6
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	2b3d      	cmp	r3, #61	; 0x3d
    5608:	d902      	bls.n	5610 <sendFrame+0x4c>
    560a:	1dbb      	adds	r3, r7, #6
    560c:	223d      	movs	r2, #61	; 0x3d
    560e:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    5610:	230e      	movs	r3, #14
    5612:	18fb      	adds	r3, r7, r3
    5614:	2200      	movs	r2, #0
    5616:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    5618:	2320      	movs	r3, #32
    561a:	18fb      	adds	r3, r7, r3
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	2b00      	cmp	r3, #0
    5620:	d004      	beq.n	562c <sendFrame+0x68>
	CTLbyte = RFM69_CTL_SENDACK;
    5622:	230e      	movs	r3, #14
    5624:	18fb      	adds	r3, r7, r3
    5626:	2280      	movs	r2, #128	; 0x80
    5628:	701a      	strb	r2, [r3, #0]
    562a:	e007      	b.n	563c <sendFrame+0x78>
	else if (requestACK)
    562c:	1d7b      	adds	r3, r7, #5
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d003      	beq.n	563c <sendFrame+0x78>
	CTLbyte = RFM69_CTL_REQACK;
    5634:	230e      	movs	r3, #14
    5636:	18fb      	adds	r3, r7, r3
    5638:	2240      	movs	r2, #64	; 0x40
    563a:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	radioselect();
    563c:	4b38      	ldr	r3, [pc, #224]	; (5720 <sendFrame+0x15c>)
    563e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    5640:	4a38      	ldr	r2, [pc, #224]	; (5724 <sendFrame+0x160>)
    5642:	4b39      	ldr	r3, [pc, #228]	; (5728 <sendFrame+0x164>)
    5644:	2180      	movs	r1, #128	; 0x80
    5646:	0018      	movs	r0, r3
    5648:	4b38      	ldr	r3, [pc, #224]	; (572c <sendFrame+0x168>)
    564a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    564c:	1dbb      	adds	r3, r7, #6
    564e:	781b      	ldrb	r3, [r3, #0]
    5650:	b29b      	uxth	r3, r3
    5652:	3303      	adds	r3, #3
    5654:	b299      	uxth	r1, r3
    5656:	4a33      	ldr	r2, [pc, #204]	; (5724 <sendFrame+0x160>)
    5658:	4b33      	ldr	r3, [pc, #204]	; (5728 <sendFrame+0x164>)
    565a:	0018      	movs	r0, r3
    565c:	4b33      	ldr	r3, [pc, #204]	; (572c <sendFrame+0x168>)
    565e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    5660:	1dfb      	adds	r3, r7, #7
    5662:	781b      	ldrb	r3, [r3, #0]
    5664:	b299      	uxth	r1, r3
    5666:	4a2f      	ldr	r2, [pc, #188]	; (5724 <sendFrame+0x160>)
    5668:	4b2f      	ldr	r3, [pc, #188]	; (5728 <sendFrame+0x164>)
    566a:	0018      	movs	r0, r3
    566c:	4b2f      	ldr	r3, [pc, #188]	; (572c <sendFrame+0x168>)
    566e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    5670:	4b2f      	ldr	r3, [pc, #188]	; (5730 <sendFrame+0x16c>)
    5672:	781b      	ldrb	r3, [r3, #0]
    5674:	b2db      	uxtb	r3, r3
    5676:	b299      	uxth	r1, r3
    5678:	4a2a      	ldr	r2, [pc, #168]	; (5724 <sendFrame+0x160>)
    567a:	4b2b      	ldr	r3, [pc, #172]	; (5728 <sendFrame+0x164>)
    567c:	0018      	movs	r0, r3
    567e:	4b2b      	ldr	r3, [pc, #172]	; (572c <sendFrame+0x168>)
    5680:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    5682:	230e      	movs	r3, #14
    5684:	18fb      	adds	r3, r7, r3
    5686:	781b      	ldrb	r3, [r3, #0]
    5688:	b2db      	uxtb	r3, r3
    568a:	b299      	uxth	r1, r3
    568c:	4a25      	ldr	r2, [pc, #148]	; (5724 <sendFrame+0x160>)
    568e:	4b26      	ldr	r3, [pc, #152]	; (5728 <sendFrame+0x164>)
    5690:	0018      	movs	r0, r3
    5692:	4b26      	ldr	r3, [pc, #152]	; (572c <sendFrame+0x168>)
    5694:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    5696:	230f      	movs	r3, #15
    5698:	18fb      	adds	r3, r7, r3
    569a:	2200      	movs	r2, #0
    569c:	701a      	strb	r2, [r3, #0]
    569e:	e012      	b.n	56c6 <sendFrame+0x102>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    56a0:	230f      	movs	r3, #15
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	781b      	ldrb	r3, [r3, #0]
    56a6:	683a      	ldr	r2, [r7, #0]
    56a8:	18d3      	adds	r3, r2, r3
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	b299      	uxth	r1, r3
    56ae:	4a1d      	ldr	r2, [pc, #116]	; (5724 <sendFrame+0x160>)
    56b0:	4b1d      	ldr	r3, [pc, #116]	; (5728 <sendFrame+0x164>)
    56b2:	0018      	movs	r0, r3
    56b4:	4b1d      	ldr	r3, [pc, #116]	; (572c <sendFrame+0x168>)
    56b6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    56b8:	230f      	movs	r3, #15
    56ba:	18fb      	adds	r3, r7, r3
    56bc:	781a      	ldrb	r2, [r3, #0]
    56be:	230f      	movs	r3, #15
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	3201      	adds	r2, #1
    56c4:	701a      	strb	r2, [r3, #0]
    56c6:	230f      	movs	r3, #15
    56c8:	18fa      	adds	r2, r7, r3
    56ca:	1dbb      	adds	r3, r7, #6
    56cc:	7812      	ldrb	r2, [r2, #0]
    56ce:	781b      	ldrb	r3, [r3, #0]
    56d0:	429a      	cmp	r2, r3
    56d2:	d3e5      	bcc.n	56a0 <sendFrame+0xdc>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    56d4:	4b17      	ldr	r3, [pc, #92]	; (5734 <sendFrame+0x170>)
    56d6:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    56d8:	2004      	movs	r0, #4
    56da:	4b0e      	ldr	r3, [pc, #56]	; (5714 <sendFrame+0x150>)
    56dc:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    56de:	4b16      	ldr	r3, [pc, #88]	; (5738 <sendFrame+0x174>)
    56e0:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    56e2:	46c0      	nop			; (mov r8, r8)
    56e4:	2003      	movs	r0, #3
    56e6:	4b15      	ldr	r3, [pc, #84]	; (573c <sendFrame+0x178>)
    56e8:	4798      	blx	r3
    56ea:	0003      	movs	r3, r0
    56ec:	001a      	movs	r2, r3
    56ee:	2301      	movs	r3, #1
    56f0:	4053      	eors	r3, r2
    56f2:	b2db      	uxtb	r3, r3
    56f4:	2b00      	cmp	r3, #0
    56f6:	d005      	beq.n	5704 <sendFrame+0x140>
    56f8:	4b11      	ldr	r3, [pc, #68]	; (5740 <sendFrame+0x17c>)
    56fa:	4798      	blx	r3
    56fc:	1e02      	subs	r2, r0, #0
    56fe:	4b11      	ldr	r3, [pc, #68]	; (5744 <sendFrame+0x180>)
    5700:	429a      	cmp	r2, r3
    5702:	d9ef      	bls.n	56e4 <sendFrame+0x120>
	setMode(RF69_MODE_STANDBY);
    5704:	2001      	movs	r0, #1
    5706:	4b03      	ldr	r3, [pc, #12]	; (5714 <sendFrame+0x150>)
    5708:	4798      	blx	r3
}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	46bd      	mov	sp, r7
    570e:	b005      	add	sp, #20
    5710:	bd90      	pop	{r4, r7, pc}
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	00005b65 	.word	0x00005b65
    5718:	00006151 	.word	0x00006151
    571c:	000061b9 	.word	0x000061b9
    5720:	00006219 	.word	0x00006219
    5724:	20000068 	.word	0x20000068
    5728:	20000230 	.word	0x20000230
    572c:	000034e1 	.word	0x000034e1
    5730:	20000170 	.word	0x20000170
    5734:	00006245 	.word	0x00006245
    5738:	00005575 	.word	0x00005575
    573c:	00004f71 	.word	0x00004f71
    5740:	0000559d 	.word	0x0000559d
    5744:	000003e7 	.word	0x000003e7

00005748 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    5748:	b580      	push	{r7, lr}
    574a:	b082      	sub	sp, #8
    574c:	af00      	add	r7, sp, #0
    574e:	0002      	movs	r2, r0
    5750:	1dfb      	adds	r3, r7, #7
    5752:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    5754:	4b19      	ldr	r3, [pc, #100]	; (57bc <RFM_setHighPower+0x74>)
    5756:	1dfa      	adds	r2, r7, #7
    5758:	7812      	ldrb	r2, [r2, #0]
    575a:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    575c:	4b17      	ldr	r3, [pc, #92]	; (57bc <RFM_setHighPower+0x74>)
    575e:	781b      	ldrb	r3, [r3, #0]
    5760:	b2db      	uxtb	r3, r3
    5762:	2b00      	cmp	r3, #0
    5764:	d001      	beq.n	576a <RFM_setHighPower+0x22>
    5766:	230f      	movs	r3, #15
    5768:	e000      	b.n	576c <RFM_setHighPower+0x24>
    576a:	231a      	movs	r3, #26
    576c:	0019      	movs	r1, r3
    576e:	2013      	movs	r0, #19
    5770:	4b13      	ldr	r3, [pc, #76]	; (57c0 <RFM_setHighPower+0x78>)
    5772:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    5774:	4b11      	ldr	r3, [pc, #68]	; (57bc <RFM_setHighPower+0x74>)
    5776:	781b      	ldrb	r3, [r3, #0]
    5778:	b2db      	uxtb	r3, r3
    577a:	2b00      	cmp	r3, #0
    577c:	d010      	beq.n	57a0 <RFM_setHighPower+0x58>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    577e:	2011      	movs	r0, #17
    5780:	4b10      	ldr	r3, [pc, #64]	; (57c4 <RFM_setHighPower+0x7c>)
    5782:	4798      	blx	r3
    5784:	0003      	movs	r3, r0
    5786:	b25b      	sxtb	r3, r3
    5788:	221f      	movs	r2, #31
    578a:	4013      	ands	r3, r2
    578c:	b25b      	sxtb	r3, r3
    578e:	2260      	movs	r2, #96	; 0x60
    5790:	4313      	orrs	r3, r2
    5792:	b25b      	sxtb	r3, r3
    5794:	b2db      	uxtb	r3, r3
    5796:	0019      	movs	r1, r3
    5798:	2011      	movs	r0, #17
    579a:	4b09      	ldr	r3, [pc, #36]	; (57c0 <RFM_setHighPower+0x78>)
    579c:	4798      	blx	r3
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
}
    579e:	e009      	b.n	57b4 <RFM_setHighPower+0x6c>
	_isRFM69HW = onOff;
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
	if (_isRFM69HW) // turning ON
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    57a0:	4b09      	ldr	r3, [pc, #36]	; (57c8 <RFM_setHighPower+0x80>)
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	2280      	movs	r2, #128	; 0x80
    57a6:	4252      	negs	r2, r2
    57a8:	4313      	orrs	r3, r2
    57aa:	b2db      	uxtb	r3, r3
    57ac:	0019      	movs	r1, r3
    57ae:	2011      	movs	r0, #17
    57b0:	4b03      	ldr	r3, [pc, #12]	; (57c0 <RFM_setHighPower+0x78>)
    57b2:	4798      	blx	r3
}
    57b4:	46c0      	nop			; (mov r8, r8)
    57b6:	46bd      	mov	sp, r7
    57b8:	b002      	add	sp, #8
    57ba:	bd80      	pop	{r7, pc}
    57bc:	2000022c 	.word	0x2000022c
    57c0:	000061b9 	.word	0x000061b9
    57c4:	00006151 	.word	0x00006151
    57c8:	2000012c 	.word	0x2000012c

000057cc <RFM69>:

void RFM69()
{
    57cc:	b580      	push	{r7, lr}
    57ce:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    57d0:	4b07      	ldr	r3, [pc, #28]	; (57f0 <RFM69+0x24>)
    57d2:	2201      	movs	r2, #1
    57d4:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    57d6:	4b07      	ldr	r3, [pc, #28]	; (57f4 <RFM69+0x28>)
    57d8:	2200      	movs	r2, #0
    57da:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    57dc:	4b06      	ldr	r3, [pc, #24]	; (57f8 <RFM69+0x2c>)
    57de:	221f      	movs	r2, #31
    57e0:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    57e2:	4b06      	ldr	r3, [pc, #24]	; (57fc <RFM69+0x30>)
    57e4:	2200      	movs	r2, #0
    57e6:	701a      	strb	r2, [r3, #0]
}
    57e8:	46c0      	nop			; (mov r8, r8)
    57ea:	46bd      	mov	sp, r7
    57ec:	bd80      	pop	{r7, pc}
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	2000022a 	.word	0x2000022a
    57f4:	20000178 	.word	0x20000178
    57f8:	2000012c 	.word	0x2000012c
    57fc:	2000022c 	.word	0x2000022c

00005800 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    5800:	b590      	push	{r4, r7, lr}
    5802:	b091      	sub	sp, #68	; 0x44
    5804:	af00      	add	r7, sp, #0
    5806:	0004      	movs	r4, r0
    5808:	0008      	movs	r0, r1
    580a:	0011      	movs	r1, r2
    580c:	1dfb      	adds	r3, r7, #7
    580e:	1c22      	adds	r2, r4, #0
    5810:	701a      	strb	r2, [r3, #0]
    5812:	1dbb      	adds	r3, r7, #6
    5814:	1c02      	adds	r2, r0, #0
    5816:	701a      	strb	r2, [r3, #0]
    5818:	1d7b      	adds	r3, r7, #5
    581a:	1c0a      	adds	r2, r1, #0
    581c:	701a      	strb	r2, [r3, #0]
  RFM69();
    581e:	4bc1      	ldr	r3, [pc, #772]	; (5b24 <RFM_initialize+0x324>)
    5820:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    5822:	2310      	movs	r3, #16
    5824:	18fb      	adds	r3, r7, r3
    5826:	2201      	movs	r2, #1
    5828:	701a      	strb	r2, [r3, #0]
    582a:	2310      	movs	r3, #16
    582c:	18fb      	adds	r3, r7, r3
    582e:	2204      	movs	r2, #4
    5830:	705a      	strb	r2, [r3, #1]
    5832:	2310      	movs	r3, #16
    5834:	18fb      	adds	r3, r7, r3
    5836:	2202      	movs	r2, #2
    5838:	709a      	strb	r2, [r3, #2]
    583a:	2310      	movs	r3, #16
    583c:	18fb      	adds	r3, r7, r3
    583e:	2200      	movs	r2, #0
    5840:	70da      	strb	r2, [r3, #3]
    5842:	2310      	movs	r3, #16
    5844:	18fb      	adds	r3, r7, r3
    5846:	2203      	movs	r2, #3
    5848:	711a      	strb	r2, [r3, #4]
    584a:	2310      	movs	r3, #16
    584c:	18fb      	adds	r3, r7, r3
    584e:	2202      	movs	r2, #2
    5850:	715a      	strb	r2, [r3, #5]
    5852:	2310      	movs	r3, #16
    5854:	18fb      	adds	r3, r7, r3
    5856:	2204      	movs	r2, #4
    5858:	719a      	strb	r2, [r3, #6]
    585a:	2310      	movs	r3, #16
    585c:	18fb      	adds	r3, r7, r3
    585e:	2240      	movs	r2, #64	; 0x40
    5860:	71da      	strb	r2, [r3, #7]
    5862:	2310      	movs	r3, #16
    5864:	18fb      	adds	r3, r7, r3
    5866:	2205      	movs	r2, #5
    5868:	721a      	strb	r2, [r3, #8]
    586a:	2310      	movs	r3, #16
    586c:	18fb      	adds	r3, r7, r3
    586e:	2203      	movs	r2, #3
    5870:	725a      	strb	r2, [r3, #9]
    5872:	2310      	movs	r3, #16
    5874:	18fb      	adds	r3, r7, r3
    5876:	2206      	movs	r2, #6
    5878:	729a      	strb	r2, [r3, #10]
    587a:	2310      	movs	r3, #16
    587c:	18fb      	adds	r3, r7, r3
    587e:	2233      	movs	r2, #51	; 0x33
    5880:	72da      	strb	r2, [r3, #11]
    5882:	2310      	movs	r3, #16
    5884:	18fb      	adds	r3, r7, r3
    5886:	2207      	movs	r2, #7
    5888:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    588a:	1dfb      	adds	r3, r7, #7
    588c:	781b      	ldrb	r3, [r3, #0]
    588e:	2b1f      	cmp	r3, #31
    5890:	d00d      	beq.n	58ae <RFM_initialize+0xae>
    5892:	1dfb      	adds	r3, r7, #7
    5894:	781b      	ldrb	r3, [r3, #0]
    5896:	2b2b      	cmp	r3, #43	; 0x2b
    5898:	d007      	beq.n	58aa <RFM_initialize+0xaa>
    589a:	1dfb      	adds	r3, r7, #7
    589c:	781b      	ldrb	r3, [r3, #0]
    589e:	2b56      	cmp	r3, #86	; 0x56
    58a0:	d101      	bne.n	58a6 <RFM_initialize+0xa6>
    58a2:	23d9      	movs	r3, #217	; 0xd9
    58a4:	e004      	b.n	58b0 <RFM_initialize+0xb0>
    58a6:	23e4      	movs	r3, #228	; 0xe4
    58a8:	e002      	b.n	58b0 <RFM_initialize+0xb0>
    58aa:	236c      	movs	r3, #108	; 0x6c
    58ac:	e000      	b.n	58b0 <RFM_initialize+0xb0>
    58ae:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    58b0:	2210      	movs	r2, #16
    58b2:	18ba      	adds	r2, r7, r2
    58b4:	7353      	strb	r3, [r2, #13]
    58b6:	2310      	movs	r3, #16
    58b8:	18fb      	adds	r3, r7, r3
    58ba:	2208      	movs	r2, #8
    58bc:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    58be:	1dfb      	adds	r3, r7, #7
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	2b1f      	cmp	r3, #31
    58c4:	d00d      	beq.n	58e2 <RFM_initialize+0xe2>
    58c6:	1dfb      	adds	r3, r7, #7
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	2b2b      	cmp	r3, #43	; 0x2b
    58cc:	d007      	beq.n	58de <RFM_initialize+0xde>
    58ce:	1dfb      	adds	r3, r7, #7
    58d0:	781b      	ldrb	r3, [r3, #0]
    58d2:	2b56      	cmp	r3, #86	; 0x56
    58d4:	d101      	bne.n	58da <RFM_initialize+0xda>
    58d6:	2300      	movs	r3, #0
    58d8:	e004      	b.n	58e4 <RFM_initialize+0xe4>
    58da:	23c0      	movs	r3, #192	; 0xc0
    58dc:	e002      	b.n	58e4 <RFM_initialize+0xe4>
    58de:	2340      	movs	r3, #64	; 0x40
    58e0:	e000      	b.n	58e4 <RFM_initialize+0xe4>
    58e2:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    58e4:	2210      	movs	r2, #16
    58e6:	18ba      	adds	r2, r7, r2
    58e8:	73d3      	strb	r3, [r2, #15]
    58ea:	2310      	movs	r3, #16
    58ec:	18fb      	adds	r3, r7, r3
    58ee:	2209      	movs	r2, #9
    58f0:	741a      	strb	r2, [r3, #16]
    58f2:	2310      	movs	r3, #16
    58f4:	18fb      	adds	r3, r7, r3
    58f6:	2200      	movs	r2, #0
    58f8:	745a      	strb	r2, [r3, #17]
    58fa:	2310      	movs	r3, #16
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	2219      	movs	r2, #25
    5900:	749a      	strb	r2, [r3, #18]
    5902:	2310      	movs	r3, #16
    5904:	18fb      	adds	r3, r7, r3
    5906:	2242      	movs	r2, #66	; 0x42
    5908:	74da      	strb	r2, [r3, #19]
    590a:	2310      	movs	r3, #16
    590c:	18fb      	adds	r3, r7, r3
    590e:	2225      	movs	r2, #37	; 0x25
    5910:	751a      	strb	r2, [r3, #20]
    5912:	2310      	movs	r3, #16
    5914:	18fb      	adds	r3, r7, r3
    5916:	2240      	movs	r2, #64	; 0x40
    5918:	755a      	strb	r2, [r3, #21]
    591a:	2310      	movs	r3, #16
    591c:	18fb      	adds	r3, r7, r3
    591e:	2226      	movs	r2, #38	; 0x26
    5920:	759a      	strb	r2, [r3, #22]
    5922:	2310      	movs	r3, #16
    5924:	18fb      	adds	r3, r7, r3
    5926:	2207      	movs	r2, #7
    5928:	75da      	strb	r2, [r3, #23]
    592a:	2310      	movs	r3, #16
    592c:	18fb      	adds	r3, r7, r3
    592e:	2228      	movs	r2, #40	; 0x28
    5930:	761a      	strb	r2, [r3, #24]
    5932:	2310      	movs	r3, #16
    5934:	18fb      	adds	r3, r7, r3
    5936:	2210      	movs	r2, #16
    5938:	765a      	strb	r2, [r3, #25]
    593a:	2310      	movs	r3, #16
    593c:	18fb      	adds	r3, r7, r3
    593e:	2229      	movs	r2, #41	; 0x29
    5940:	769a      	strb	r2, [r3, #26]
    5942:	2310      	movs	r3, #16
    5944:	18fb      	adds	r3, r7, r3
    5946:	22dc      	movs	r2, #220	; 0xdc
    5948:	76da      	strb	r2, [r3, #27]
    594a:	2310      	movs	r3, #16
    594c:	18fb      	adds	r3, r7, r3
    594e:	222e      	movs	r2, #46	; 0x2e
    5950:	771a      	strb	r2, [r3, #28]
    5952:	2310      	movs	r3, #16
    5954:	18fb      	adds	r3, r7, r3
    5956:	2288      	movs	r2, #136	; 0x88
    5958:	775a      	strb	r2, [r3, #29]
    595a:	2310      	movs	r3, #16
    595c:	18fb      	adds	r3, r7, r3
    595e:	222f      	movs	r2, #47	; 0x2f
    5960:	779a      	strb	r2, [r3, #30]
    5962:	2310      	movs	r3, #16
    5964:	18fb      	adds	r3, r7, r3
    5966:	222d      	movs	r2, #45	; 0x2d
    5968:	77da      	strb	r2, [r3, #31]
    596a:	2310      	movs	r3, #16
    596c:	18fb      	adds	r3, r7, r3
    596e:	2220      	movs	r2, #32
    5970:	2130      	movs	r1, #48	; 0x30
    5972:	5499      	strb	r1, [r3, r2]
    5974:	2310      	movs	r3, #16
    5976:	18fb      	adds	r3, r7, r3
    5978:	1d7a      	adds	r2, r7, #5
    597a:	2121      	movs	r1, #33	; 0x21
    597c:	7812      	ldrb	r2, [r2, #0]
    597e:	545a      	strb	r2, [r3, r1]
    5980:	2310      	movs	r3, #16
    5982:	18fb      	adds	r3, r7, r3
    5984:	2222      	movs	r2, #34	; 0x22
    5986:	2137      	movs	r1, #55	; 0x37
    5988:	5499      	strb	r1, [r3, r2]
    598a:	2310      	movs	r3, #16
    598c:	18fb      	adds	r3, r7, r3
    598e:	2223      	movs	r2, #35	; 0x23
    5990:	2190      	movs	r1, #144	; 0x90
    5992:	5499      	strb	r1, [r3, r2]
    5994:	2310      	movs	r3, #16
    5996:	18fb      	adds	r3, r7, r3
    5998:	2224      	movs	r2, #36	; 0x24
    599a:	2138      	movs	r1, #56	; 0x38
    599c:	5499      	strb	r1, [r3, r2]
    599e:	2310      	movs	r3, #16
    59a0:	18fb      	adds	r3, r7, r3
    59a2:	2225      	movs	r2, #37	; 0x25
    59a4:	2142      	movs	r1, #66	; 0x42
    59a6:	5499      	strb	r1, [r3, r2]
    59a8:	2310      	movs	r3, #16
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	2226      	movs	r2, #38	; 0x26
    59ae:	213c      	movs	r1, #60	; 0x3c
    59b0:	5499      	strb	r1, [r3, r2]
    59b2:	2310      	movs	r3, #16
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	2227      	movs	r2, #39	; 0x27
    59b8:	218f      	movs	r1, #143	; 0x8f
    59ba:	5499      	strb	r1, [r3, r2]
    59bc:	2310      	movs	r3, #16
    59be:	18fb      	adds	r3, r7, r3
    59c0:	2228      	movs	r2, #40	; 0x28
    59c2:	213d      	movs	r1, #61	; 0x3d
    59c4:	5499      	strb	r1, [r3, r2]
    59c6:	2310      	movs	r3, #16
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	2229      	movs	r2, #41	; 0x29
    59cc:	2112      	movs	r1, #18
    59ce:	5499      	strb	r1, [r3, r2]
    59d0:	2310      	movs	r3, #16
    59d2:	18fb      	adds	r3, r7, r3
    59d4:	222a      	movs	r2, #42	; 0x2a
    59d6:	216f      	movs	r1, #111	; 0x6f
    59d8:	5499      	strb	r1, [r3, r2]
    59da:	2310      	movs	r3, #16
    59dc:	18fb      	adds	r3, r7, r3
    59de:	222b      	movs	r2, #43	; 0x2b
    59e0:	2130      	movs	r1, #48	; 0x30
    59e2:	5499      	strb	r1, [r3, r2]
    59e4:	2310      	movs	r3, #16
    59e6:	18fb      	adds	r3, r7, r3
    59e8:	222c      	movs	r2, #44	; 0x2c
    59ea:	21ff      	movs	r1, #255	; 0xff
    59ec:	5499      	strb	r1, [r3, r2]
    59ee:	2310      	movs	r3, #16
    59f0:	18fb      	adds	r3, r7, r3
    59f2:	222d      	movs	r2, #45	; 0x2d
    59f4:	2100      	movs	r1, #0
    59f6:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    59f8:	4b4b      	ldr	r3, [pc, #300]	; (5b28 <RFM_initialize+0x328>)
    59fa:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    59fc:	4b4b      	ldr	r3, [pc, #300]	; (5b2c <RFM_initialize+0x32c>)
    59fe:	4798      	blx	r3
  configure_port_pins();
    5a00:	4b4b      	ldr	r3, [pc, #300]	; (5b30 <RFM_initialize+0x330>)
    5a02:	4798      	blx	r3
  configure_extint_channel();
    5a04:	4b4b      	ldr	r3, [pc, #300]	; (5b34 <RFM_initialize+0x334>)
    5a06:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    5a08:	4b4b      	ldr	r3, [pc, #300]	; (5b38 <RFM_initialize+0x338>)
    5a0a:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    5a0c:	230f      	movs	r3, #15
    5a0e:	18fb      	adds	r3, r7, r3
    5a10:	2232      	movs	r2, #50	; 0x32
    5a12:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    5a14:	21aa      	movs	r1, #170	; 0xaa
    5a16:	202f      	movs	r0, #47	; 0x2f
    5a18:	4b48      	ldr	r3, [pc, #288]	; (5b3c <RFM_initialize+0x33c>)
    5a1a:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    5a1c:	202f      	movs	r0, #47	; 0x2f
    5a1e:	4b48      	ldr	r3, [pc, #288]	; (5b40 <RFM_initialize+0x340>)
    5a20:	4798      	blx	r3
    5a22:	1e03      	subs	r3, r0, #0
    5a24:	2baa      	cmp	r3, #170	; 0xaa
    5a26:	d008      	beq.n	5a3a <RFM_initialize+0x23a>
    5a28:	4b46      	ldr	r3, [pc, #280]	; (5b44 <RFM_initialize+0x344>)
    5a2a:	4798      	blx	r3
    5a2c:	0002      	movs	r2, r0
    5a2e:	230f      	movs	r3, #15
    5a30:	18fb      	adds	r3, r7, r3
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	b2db      	uxtb	r3, r3
    5a36:	429a      	cmp	r2, r3
    5a38:	d3ec      	bcc.n	5a14 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    5a3a:	4b3f      	ldr	r3, [pc, #252]	; (5b38 <RFM_initialize+0x338>)
    5a3c:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    5a3e:	2155      	movs	r1, #85	; 0x55
    5a40:	202f      	movs	r0, #47	; 0x2f
    5a42:	4b3e      	ldr	r3, [pc, #248]	; (5b3c <RFM_initialize+0x33c>)
    5a44:	4798      	blx	r3
    5a46:	202f      	movs	r0, #47	; 0x2f
    5a48:	4b3d      	ldr	r3, [pc, #244]	; (5b40 <RFM_initialize+0x340>)
    5a4a:	4798      	blx	r3
    5a4c:	1e03      	subs	r3, r0, #0
    5a4e:	2b55      	cmp	r3, #85	; 0x55
    5a50:	d008      	beq.n	5a64 <RFM_initialize+0x264>
    5a52:	4b3c      	ldr	r3, [pc, #240]	; (5b44 <RFM_initialize+0x344>)
    5a54:	4798      	blx	r3
    5a56:	0002      	movs	r2, r0
    5a58:	230f      	movs	r3, #15
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	b2db      	uxtb	r3, r3
    5a60:	429a      	cmp	r2, r3
    5a62:	d3ec      	bcc.n	5a3e <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    5a64:	233f      	movs	r3, #63	; 0x3f
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	2200      	movs	r2, #0
    5a6a:	701a      	strb	r2, [r3, #0]
    5a6c:	e019      	b.n	5aa2 <RFM_initialize+0x2a2>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    5a6e:	233f      	movs	r3, #63	; 0x3f
    5a70:	18fb      	adds	r3, r7, r3
    5a72:	781a      	ldrb	r2, [r3, #0]
    5a74:	2310      	movs	r3, #16
    5a76:	18fb      	adds	r3, r7, r3
    5a78:	0052      	lsls	r2, r2, #1
    5a7a:	5cd0      	ldrb	r0, [r2, r3]
    5a7c:	233f      	movs	r3, #63	; 0x3f
    5a7e:	18fb      	adds	r3, r7, r3
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	2210      	movs	r2, #16
    5a84:	18ba      	adds	r2, r7, r2
    5a86:	005b      	lsls	r3, r3, #1
    5a88:	18d3      	adds	r3, r2, r3
    5a8a:	3301      	adds	r3, #1
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	0019      	movs	r1, r3
    5a90:	4b2a      	ldr	r3, [pc, #168]	; (5b3c <RFM_initialize+0x33c>)
    5a92:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    5a94:	233f      	movs	r3, #63	; 0x3f
    5a96:	18fb      	adds	r3, r7, r3
    5a98:	781a      	ldrb	r2, [r3, #0]
    5a9a:	233f      	movs	r3, #63	; 0x3f
    5a9c:	18fb      	adds	r3, r7, r3
    5a9e:	3201      	adds	r2, #1
    5aa0:	701a      	strb	r2, [r3, #0]
    5aa2:	233f      	movs	r3, #63	; 0x3f
    5aa4:	18fb      	adds	r3, r7, r3
    5aa6:	781a      	ldrb	r2, [r3, #0]
    5aa8:	2310      	movs	r3, #16
    5aaa:	18fb      	adds	r3, r7, r3
    5aac:	0052      	lsls	r2, r2, #1
    5aae:	5cd3      	ldrb	r3, [r2, r3]
    5ab0:	2bff      	cmp	r3, #255	; 0xff
    5ab2:	d1dc      	bne.n	5a6e <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    5ab4:	2000      	movs	r0, #0
    5ab6:	4b24      	ldr	r3, [pc, #144]	; (5b48 <RFM_initialize+0x348>)
    5ab8:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    5aba:	4b24      	ldr	r3, [pc, #144]	; (5b4c <RFM_initialize+0x34c>)
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	b2db      	uxtb	r3, r3
    5ac0:	0018      	movs	r0, r3
    5ac2:	4b23      	ldr	r3, [pc, #140]	; (5b50 <RFM_initialize+0x350>)
    5ac4:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    5ac6:	2001      	movs	r0, #1
    5ac8:	4b22      	ldr	r3, [pc, #136]	; (5b54 <RFM_initialize+0x354>)
    5aca:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    5acc:	4b1a      	ldr	r3, [pc, #104]	; (5b38 <RFM_initialize+0x338>)
    5ace:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    5ad0:	46c0      	nop			; (mov r8, r8)
    5ad2:	2027      	movs	r0, #39	; 0x27
    5ad4:	4b1a      	ldr	r3, [pc, #104]	; (5b40 <RFM_initialize+0x340>)
    5ad6:	4798      	blx	r3
    5ad8:	0003      	movs	r3, r0
    5ada:	b25b      	sxtb	r3, r3
    5adc:	2b00      	cmp	r3, #0
    5ade:	db08      	blt.n	5af2 <RFM_initialize+0x2f2>
    5ae0:	4b18      	ldr	r3, [pc, #96]	; (5b44 <RFM_initialize+0x344>)
    5ae2:	4798      	blx	r3
    5ae4:	0002      	movs	r2, r0
    5ae6:	230f      	movs	r3, #15
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	781b      	ldrb	r3, [r3, #0]
    5aec:	b2db      	uxtb	r3, r3
    5aee:	429a      	cmp	r2, r3
    5af0:	d3ef      	bcc.n	5ad2 <RFM_initialize+0x2d2>
  if (millis() >= timeout) // CHANGE //
    5af2:	4b14      	ldr	r3, [pc, #80]	; (5b44 <RFM_initialize+0x344>)
    5af4:	4798      	blx	r3
    5af6:	0002      	movs	r2, r0
    5af8:	230f      	movs	r3, #15
    5afa:	18fb      	adds	r3, r7, r3
    5afc:	781b      	ldrb	r3, [r3, #0]
    5afe:	b2db      	uxtb	r3, r3
    5b00:	429a      	cmp	r2, r3
    5b02:	d301      	bcc.n	5b08 <RFM_initialize+0x308>
    return false;
    5b04:	2300      	movs	r3, #0
    5b06:	e009      	b.n	5b1c <RFM_initialize+0x31c>
  _inISR = false;
    5b08:	4b13      	ldr	r3, [pc, #76]	; (5b58 <RFM_initialize+0x358>)
    5b0a:	2200      	movs	r2, #0
    5b0c:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    5b0e:	4b13      	ldr	r3, [pc, #76]	; (5b5c <RFM_initialize+0x35c>)
    5b10:	4798      	blx	r3

  _address = nodeID;
    5b12:	4b13      	ldr	r3, [pc, #76]	; (5b60 <RFM_initialize+0x360>)
    5b14:	1dba      	adds	r2, r7, #6
    5b16:	7812      	ldrb	r2, [r2, #0]
    5b18:	701a      	strb	r2, [r3, #0]
  return true;
    5b1a:	2301      	movs	r3, #1
}
    5b1c:	0018      	movs	r0, r3
    5b1e:	46bd      	mov	sp, r7
    5b20:	b011      	add	sp, #68	; 0x44
    5b22:	bd90      	pop	{r4, r7, pc}
    5b24:	000057cd 	.word	0x000057cd
    5b28:	00005451 	.word	0x00005451
    5b2c:	00005511 	.word	0x00005511
    5b30:	000053b5 	.word	0x000053b5
    5b34:	000053e5 	.word	0x000053e5
    5b38:	00005575 	.word	0x00005575
    5b3c:	000061b9 	.word	0x000061b9
    5b40:	00006151 	.word	0x00006151
    5b44:	0000559d 	.word	0x0000559d
    5b48:	0000605d 	.word	0x0000605d
    5b4c:	2000022c 	.word	0x2000022c
    5b50:	00005749 	.word	0x00005749
    5b54:	00005b65 	.word	0x00005b65
    5b58:	2000012d 	.word	0x2000012d
    5b5c:	00005425 	.word	0x00005425
    5b60:	20000170 	.word	0x20000170

00005b64 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b082      	sub	sp, #8
    5b68:	af00      	add	r7, sp, #0
    5b6a:	0002      	movs	r2, r0
    5b6c:	1dfb      	adds	r3, r7, #7
    5b6e:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    5b70:	1dfb      	adds	r3, r7, #7
    5b72:	781b      	ldrb	r3, [r3, #0]
    5b74:	b29a      	uxth	r2, r3
    5b76:	4b47      	ldr	r3, [pc, #284]	; (5c94 <setMode+0x130>)
    5b78:	881b      	ldrh	r3, [r3, #0]
    5b7a:	b29b      	uxth	r3, r3
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d100      	bne.n	5b82 <setMode+0x1e>
    5b80:	e081      	b.n	5c86 <setMode+0x122>
    return;

  switch (newMode) {
    5b82:	1dfb      	adds	r3, r7, #7
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	2b04      	cmp	r3, #4
    5b88:	d900      	bls.n	5b8c <setMode+0x28>
    5b8a:	e07e      	b.n	5c8a <setMode+0x126>
    5b8c:	009a      	lsls	r2, r3, #2
    5b8e:	4b42      	ldr	r3, [pc, #264]	; (5c98 <setMode+0x134>)
    5b90:	18d3      	adds	r3, r2, r3
    5b92:	681b      	ldr	r3, [r3, #0]
    5b94:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    5b96:	2001      	movs	r0, #1
    5b98:	4b40      	ldr	r3, [pc, #256]	; (5c9c <setMode+0x138>)
    5b9a:	4798      	blx	r3
    5b9c:	0003      	movs	r3, r0
    5b9e:	b25b      	sxtb	r3, r3
    5ba0:	221c      	movs	r2, #28
    5ba2:	4393      	bics	r3, r2
    5ba4:	b25b      	sxtb	r3, r3
    5ba6:	220c      	movs	r2, #12
    5ba8:	4313      	orrs	r3, r2
    5baa:	b25b      	sxtb	r3, r3
    5bac:	b2db      	uxtb	r3, r3
    5bae:	0019      	movs	r1, r3
    5bb0:	2001      	movs	r0, #1
    5bb2:	4b3b      	ldr	r3, [pc, #236]	; (5ca0 <setMode+0x13c>)
    5bb4:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    5bb6:	4b3b      	ldr	r3, [pc, #236]	; (5ca4 <setMode+0x140>)
    5bb8:	781b      	ldrb	r3, [r3, #0]
    5bba:	b2db      	uxtb	r3, r3
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d04c      	beq.n	5c5a <setMode+0xf6>
    5bc0:	2001      	movs	r0, #1
    5bc2:	4b39      	ldr	r3, [pc, #228]	; (5ca8 <setMode+0x144>)
    5bc4:	4798      	blx	r3
      break;
    5bc6:	e048      	b.n	5c5a <setMode+0xf6>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    5bc8:	2001      	movs	r0, #1
    5bca:	4b34      	ldr	r3, [pc, #208]	; (5c9c <setMode+0x138>)
    5bcc:	4798      	blx	r3
    5bce:	0003      	movs	r3, r0
    5bd0:	b25b      	sxtb	r3, r3
    5bd2:	221c      	movs	r2, #28
    5bd4:	4393      	bics	r3, r2
    5bd6:	b25b      	sxtb	r3, r3
    5bd8:	2210      	movs	r2, #16
    5bda:	4313      	orrs	r3, r2
    5bdc:	b25b      	sxtb	r3, r3
    5bde:	b2db      	uxtb	r3, r3
    5be0:	0019      	movs	r1, r3
    5be2:	2001      	movs	r0, #1
    5be4:	4b2e      	ldr	r3, [pc, #184]	; (5ca0 <setMode+0x13c>)
    5be6:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    5be8:	4b2e      	ldr	r3, [pc, #184]	; (5ca4 <setMode+0x140>)
    5bea:	781b      	ldrb	r3, [r3, #0]
    5bec:	b2db      	uxtb	r3, r3
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d035      	beq.n	5c5e <setMode+0xfa>
    5bf2:	2000      	movs	r0, #0
    5bf4:	4b2c      	ldr	r3, [pc, #176]	; (5ca8 <setMode+0x144>)
    5bf6:	4798      	blx	r3
      break;
    5bf8:	e031      	b.n	5c5e <setMode+0xfa>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    5bfa:	2001      	movs	r0, #1
    5bfc:	4b27      	ldr	r3, [pc, #156]	; (5c9c <setMode+0x138>)
    5bfe:	4798      	blx	r3
    5c00:	0003      	movs	r3, r0
    5c02:	b25b      	sxtb	r3, r3
    5c04:	221c      	movs	r2, #28
    5c06:	4393      	bics	r3, r2
    5c08:	b25b      	sxtb	r3, r3
    5c0a:	2208      	movs	r2, #8
    5c0c:	4313      	orrs	r3, r2
    5c0e:	b25b      	sxtb	r3, r3
    5c10:	b2db      	uxtb	r3, r3
    5c12:	0019      	movs	r1, r3
    5c14:	2001      	movs	r0, #1
    5c16:	4b22      	ldr	r3, [pc, #136]	; (5ca0 <setMode+0x13c>)
    5c18:	4798      	blx	r3
      break;
    5c1a:	e021      	b.n	5c60 <setMode+0xfc>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    5c1c:	2001      	movs	r0, #1
    5c1e:	4b1f      	ldr	r3, [pc, #124]	; (5c9c <setMode+0x138>)
    5c20:	4798      	blx	r3
    5c22:	0003      	movs	r3, r0
    5c24:	b25b      	sxtb	r3, r3
    5c26:	221c      	movs	r2, #28
    5c28:	4393      	bics	r3, r2
    5c2a:	b25b      	sxtb	r3, r3
    5c2c:	2204      	movs	r2, #4
    5c2e:	4313      	orrs	r3, r2
    5c30:	b25b      	sxtb	r3, r3
    5c32:	b2db      	uxtb	r3, r3
    5c34:	0019      	movs	r1, r3
    5c36:	2001      	movs	r0, #1
    5c38:	4b19      	ldr	r3, [pc, #100]	; (5ca0 <setMode+0x13c>)
    5c3a:	4798      	blx	r3
      break;
    5c3c:	e010      	b.n	5c60 <setMode+0xfc>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    5c3e:	2001      	movs	r0, #1
    5c40:	4b16      	ldr	r3, [pc, #88]	; (5c9c <setMode+0x138>)
    5c42:	4798      	blx	r3
    5c44:	0003      	movs	r3, r0
    5c46:	001a      	movs	r2, r3
    5c48:	231c      	movs	r3, #28
    5c4a:	439a      	bics	r2, r3
    5c4c:	0013      	movs	r3, r2
    5c4e:	b2db      	uxtb	r3, r3
    5c50:	0019      	movs	r1, r3
    5c52:	2001      	movs	r0, #1
    5c54:	4b12      	ldr	r3, [pc, #72]	; (5ca0 <setMode+0x13c>)
    5c56:	4798      	blx	r3
      break;
    5c58:	e002      	b.n	5c60 <setMode+0xfc>

  switch (newMode) {
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
      if (_isRFM69HW) setHighPowerRegs(true);
      break;
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	e000      	b.n	5c60 <setMode+0xfc>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
      if (_isRFM69HW) setHighPowerRegs(false);
      break;
    5c5e:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    5c60:	46c0      	nop			; (mov r8, r8)
    5c62:	4b0c      	ldr	r3, [pc, #48]	; (5c94 <setMode+0x130>)
    5c64:	881b      	ldrh	r3, [r3, #0]
    5c66:	b29b      	uxth	r3, r3
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d106      	bne.n	5c7a <setMode+0x116>
    5c6c:	2027      	movs	r0, #39	; 0x27
    5c6e:	4b0b      	ldr	r3, [pc, #44]	; (5c9c <setMode+0x138>)
    5c70:	4798      	blx	r3
    5c72:	0003      	movs	r3, r0
    5c74:	b25b      	sxtb	r3, r3
    5c76:	2b00      	cmp	r3, #0
    5c78:	daf3      	bge.n	5c62 <setMode+0xfe>

  _mode = newMode;
    5c7a:	1dfb      	adds	r3, r7, #7
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	b29a      	uxth	r2, r3
    5c80:	4b04      	ldr	r3, [pc, #16]	; (5c94 <setMode+0x130>)
    5c82:	801a      	strh	r2, [r3, #0]
    5c84:	e002      	b.n	5c8c <setMode+0x128>
}

void setMode(uint8_t newMode)
{
  if (newMode == _mode)
    return;
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	e000      	b.n	5c8c <setMode+0x128>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    5c8a:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    5c8c:	46bd      	mov	sp, r7
    5c8e:	b002      	add	sp, #8
    5c90:	bd80      	pop	{r7, pc}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	2000022a 	.word	0x2000022a
    5c98:	00008ecc 	.word	0x00008ecc
    5c9c:	00006151 	.word	0x00006151
    5ca0:	000061b9 	.word	0x000061b9
    5ca4:	2000022c 	.word	0x2000022c
    5ca8:	00006271 	.word	0x00006271

00005cac <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    5cac:	b580      	push	{r7, lr}
    5cae:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    5cb0:	4b0b      	ldr	r3, [pc, #44]	; (5ce0 <canSend+0x34>)
    5cb2:	881b      	ldrh	r3, [r3, #0]
    5cb4:	b29b      	uxth	r3, r3
    5cb6:	2b03      	cmp	r3, #3
    5cb8:	d10e      	bne.n	5cd8 <canSend+0x2c>
    5cba:	4b0a      	ldr	r3, [pc, #40]	; (5ce4 <canSend+0x38>)
    5cbc:	881b      	ldrh	r3, [r3, #0]
    5cbe:	b29b      	uxth	r3, r3
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d109      	bne.n	5cd8 <canSend+0x2c>
    5cc4:	4b08      	ldr	r3, [pc, #32]	; (5ce8 <canSend+0x3c>)
    5cc6:	4798      	blx	r3
    5cc8:	0003      	movs	r3, r0
    5cca:	335a      	adds	r3, #90	; 0x5a
    5ccc:	da04      	bge.n	5cd8 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    5cce:	2001      	movs	r0, #1
    5cd0:	4b06      	ldr	r3, [pc, #24]	; (5cec <canSend+0x40>)
    5cd2:	4798      	blx	r3
    return true;
    5cd4:	2301      	movs	r3, #1
    5cd6:	e000      	b.n	5cda <canSend+0x2e>
  }
  return false;
    5cd8:	2300      	movs	r3, #0
}
    5cda:	0018      	movs	r0, r3
    5cdc:	46bd      	mov	sp, r7
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	2000022a 	.word	0x2000022a
    5ce4:	200001f8 	.word	0x200001f8
    5ce8:	00006111 	.word	0x00006111
    5cec:	00005b65 	.word	0x00005b65

00005cf0 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    5cf0:	b590      	push	{r4, r7, lr}
    5cf2:	b085      	sub	sp, #20
    5cf4:	af02      	add	r7, sp, #8
    5cf6:	0004      	movs	r4, r0
    5cf8:	6039      	str	r1, [r7, #0]
    5cfa:	0010      	movs	r0, r2
    5cfc:	0019      	movs	r1, r3
    5cfe:	1dfb      	adds	r3, r7, #7
    5d00:	1c22      	adds	r2, r4, #0
    5d02:	701a      	strb	r2, [r3, #0]
    5d04:	1dbb      	adds	r3, r7, #6
    5d06:	1c02      	adds	r2, r0, #0
    5d08:	701a      	strb	r2, [r3, #0]
    5d0a:	1d7b      	adds	r3, r7, #5
    5d0c:	1c0a      	adds	r2, r1, #0
    5d0e:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5d10:	203d      	movs	r0, #61	; 0x3d
    5d12:	4b17      	ldr	r3, [pc, #92]	; (5d70 <RFM_send+0x80>)
    5d14:	4798      	blx	r3
    5d16:	0003      	movs	r3, r0
    5d18:	001a      	movs	r2, r3
    5d1a:	2304      	movs	r3, #4
    5d1c:	4313      	orrs	r3, r2
    5d1e:	b2db      	uxtb	r3, r3
    5d20:	0019      	movs	r1, r3
    5d22:	203d      	movs	r0, #61	; 0x3d
    5d24:	4b13      	ldr	r3, [pc, #76]	; (5d74 <RFM_send+0x84>)
    5d26:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    5d28:	4b13      	ldr	r3, [pc, #76]	; (5d78 <RFM_send+0x88>)
    5d2a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    5d2c:	e001      	b.n	5d32 <RFM_send+0x42>
    5d2e:	4b13      	ldr	r3, [pc, #76]	; (5d7c <RFM_send+0x8c>)
    5d30:	4798      	blx	r3
    5d32:	4b13      	ldr	r3, [pc, #76]	; (5d80 <RFM_send+0x90>)
    5d34:	4798      	blx	r3
    5d36:	0003      	movs	r3, r0
    5d38:	001a      	movs	r2, r3
    5d3a:	2301      	movs	r3, #1
    5d3c:	4053      	eors	r3, r2
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	2b00      	cmp	r3, #0
    5d42:	d005      	beq.n	5d50 <RFM_send+0x60>
    5d44:	4b0f      	ldr	r3, [pc, #60]	; (5d84 <RFM_send+0x94>)
    5d46:	4798      	blx	r3
    5d48:	1e02      	subs	r2, r0, #0
    5d4a:	4b0f      	ldr	r3, [pc, #60]	; (5d88 <RFM_send+0x98>)
    5d4c:	429a      	cmp	r2, r3
    5d4e:	d9ee      	bls.n	5d2e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    5d50:	1d7b      	adds	r3, r7, #5
    5d52:	781c      	ldrb	r4, [r3, #0]
    5d54:	1dbb      	adds	r3, r7, #6
    5d56:	781a      	ldrb	r2, [r3, #0]
    5d58:	6839      	ldr	r1, [r7, #0]
    5d5a:	1dfb      	adds	r3, r7, #7
    5d5c:	7818      	ldrb	r0, [r3, #0]
    5d5e:	2300      	movs	r3, #0
    5d60:	9300      	str	r3, [sp, #0]
    5d62:	0023      	movs	r3, r4
    5d64:	4c09      	ldr	r4, [pc, #36]	; (5d8c <RFM_send+0x9c>)
    5d66:	47a0      	blx	r4
}
    5d68:	46c0      	nop			; (mov r8, r8)
    5d6a:	46bd      	mov	sp, r7
    5d6c:	b003      	add	sp, #12
    5d6e:	bd90      	pop	{r4, r7, pc}
    5d70:	00006151 	.word	0x00006151
    5d74:	000061b9 	.word	0x000061b9
    5d78:	00005575 	.word	0x00005575
    5d7c:	00006001 	.word	0x00006001
    5d80:	00005cad 	.word	0x00005cad
    5d84:	0000559d 	.word	0x0000559d
    5d88:	000003e7 	.word	0x000003e7
    5d8c:	000055c5 	.word	0x000055c5

00005d90 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    5d90:	b580      	push	{r7, lr}
    5d92:	b082      	sub	sp, #8
    5d94:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    5d96:	4b58      	ldr	r3, [pc, #352]	; (5ef8 <interruptHandler+0x168>)
    5d98:	881b      	ldrh	r3, [r3, #0]
    5d9a:	b29b      	uxth	r3, r3
    5d9c:	2b03      	cmp	r3, #3
    5d9e:	d000      	beq.n	5da2 <interruptHandler+0x12>
    5da0:	e0a1      	b.n	5ee6 <interruptHandler+0x156>
    5da2:	2028      	movs	r0, #40	; 0x28
    5da4:	4b55      	ldr	r3, [pc, #340]	; (5efc <interruptHandler+0x16c>)
    5da6:	4798      	blx	r3
    5da8:	0003      	movs	r3, r0
    5daa:	001a      	movs	r2, r3
    5dac:	2304      	movs	r3, #4
    5dae:	4013      	ands	r3, r2
    5db0:	d100      	bne.n	5db4 <interruptHandler+0x24>
    5db2:	e098      	b.n	5ee6 <interruptHandler+0x156>
  {
    setMode(RF69_MODE_STANDBY);
    5db4:	2001      	movs	r0, #1
    5db6:	4b52      	ldr	r3, [pc, #328]	; (5f00 <interruptHandler+0x170>)
    5db8:	4798      	blx	r3
    radioselect();
    5dba:	4b52      	ldr	r3, [pc, #328]	; (5f04 <interruptHandler+0x174>)
    5dbc:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    5dbe:	4a52      	ldr	r2, [pc, #328]	; (5f08 <interruptHandler+0x178>)
    5dc0:	4b52      	ldr	r3, [pc, #328]	; (5f0c <interruptHandler+0x17c>)
    5dc2:	2100      	movs	r1, #0
    5dc4:	0018      	movs	r0, r3
    5dc6:	4b52      	ldr	r3, [pc, #328]	; (5f10 <interruptHandler+0x180>)
    5dc8:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    5dca:	4a52      	ldr	r2, [pc, #328]	; (5f14 <interruptHandler+0x184>)
    5dcc:	4b4f      	ldr	r3, [pc, #316]	; (5f0c <interruptHandler+0x17c>)
    5dce:	2100      	movs	r1, #0
    5dd0:	0018      	movs	r0, r3
    5dd2:	4b4f      	ldr	r3, [pc, #316]	; (5f10 <interruptHandler+0x180>)
    5dd4:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    5dd6:	4b4f      	ldr	r3, [pc, #316]	; (5f14 <interruptHandler+0x184>)
    5dd8:	881b      	ldrh	r3, [r3, #0]
    5dda:	b29b      	uxth	r3, r3
    5ddc:	2b42      	cmp	r3, #66	; 0x42
    5dde:	d803      	bhi.n	5de8 <interruptHandler+0x58>
    5de0:	4b4c      	ldr	r3, [pc, #304]	; (5f14 <interruptHandler+0x184>)
    5de2:	881b      	ldrh	r3, [r3, #0]
    5de4:	b29a      	uxth	r2, r3
    5de6:	e000      	b.n	5dea <interruptHandler+0x5a>
    5de8:	2242      	movs	r2, #66	; 0x42
    5dea:	4b4a      	ldr	r3, [pc, #296]	; (5f14 <interruptHandler+0x184>)
    5dec:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    5dee:	4a4a      	ldr	r2, [pc, #296]	; (5f18 <interruptHandler+0x188>)
    5df0:	4b46      	ldr	r3, [pc, #280]	; (5f0c <interruptHandler+0x17c>)
    5df2:	2100      	movs	r1, #0
    5df4:	0018      	movs	r0, r3
    5df6:	4b46      	ldr	r3, [pc, #280]	; (5f10 <interruptHandler+0x180>)
    5df8:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    5dfa:	4b48      	ldr	r3, [pc, #288]	; (5f1c <interruptHandler+0x18c>)
    5dfc:	781b      	ldrb	r3, [r3, #0]
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2201      	movs	r2, #1
    5e02:	4053      	eors	r3, r2
    5e04:	b2db      	uxtb	r3, r3
    5e06:	2b00      	cmp	r3, #0
    5e08:	d00d      	beq.n	5e26 <interruptHandler+0x96>
    5e0a:	4b45      	ldr	r3, [pc, #276]	; (5f20 <interruptHandler+0x190>)
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	b2db      	uxtb	r3, r3
    5e10:	b29a      	uxth	r2, r3
    5e12:	4b41      	ldr	r3, [pc, #260]	; (5f18 <interruptHandler+0x188>)
    5e14:	881b      	ldrh	r3, [r3, #0]
    5e16:	b29b      	uxth	r3, r3
    5e18:	429a      	cmp	r2, r3
    5e1a:	d004      	beq.n	5e26 <interruptHandler+0x96>
    5e1c:	4b3e      	ldr	r3, [pc, #248]	; (5f18 <interruptHandler+0x188>)
    5e1e:	881b      	ldrh	r3, [r3, #0]
    5e20:	b29b      	uxth	r3, r3
    5e22:	2bff      	cmp	r3, #255	; 0xff
    5e24:	d104      	bne.n	5e30 <interruptHandler+0xa0>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    5e26:	4b3b      	ldr	r3, [pc, #236]	; (5f14 <interruptHandler+0x184>)
    5e28:	881b      	ldrh	r3, [r3, #0]
    5e2a:	b29b      	uxth	r3, r3
    5e2c:	2b02      	cmp	r3, #2
    5e2e:	d807      	bhi.n	5e40 <interruptHandler+0xb0>
    {
      PAYLOADLEN = 0;
    5e30:	4b38      	ldr	r3, [pc, #224]	; (5f14 <interruptHandler+0x184>)
    5e32:	2200      	movs	r2, #0
    5e34:	801a      	strh	r2, [r3, #0]
      unselect();
    5e36:	4b3b      	ldr	r3, [pc, #236]	; (5f24 <interruptHandler+0x194>)
    5e38:	4798      	blx	r3
      receiveBegin();
    5e3a:	4b3b      	ldr	r3, [pc, #236]	; (5f28 <interruptHandler+0x198>)
    5e3c:	4798      	blx	r3
    5e3e:	e058      	b.n	5ef2 <interruptHandler+0x162>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    5e40:	4b34      	ldr	r3, [pc, #208]	; (5f14 <interruptHandler+0x184>)
    5e42:	881b      	ldrh	r3, [r3, #0]
    5e44:	b29b      	uxth	r3, r3
    5e46:	3b03      	subs	r3, #3
    5e48:	b29a      	uxth	r2, r3
    5e4a:	4b38      	ldr	r3, [pc, #224]	; (5f2c <interruptHandler+0x19c>)
    5e4c:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    5e4e:	4a38      	ldr	r2, [pc, #224]	; (5f30 <interruptHandler+0x1a0>)
    5e50:	4b2e      	ldr	r3, [pc, #184]	; (5f0c <interruptHandler+0x17c>)
    5e52:	2100      	movs	r1, #0
    5e54:	0018      	movs	r0, r3
    5e56:	4b2e      	ldr	r3, [pc, #184]	; (5f10 <interruptHandler+0x180>)
    5e58:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    5e5a:	1dbb      	adds	r3, r7, #6
    5e5c:	2200      	movs	r2, #0
    5e5e:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    5e60:	1dba      	adds	r2, r7, #6
    5e62:	4b2a      	ldr	r3, [pc, #168]	; (5f0c <interruptHandler+0x17c>)
    5e64:	2100      	movs	r1, #0
    5e66:	0018      	movs	r0, r3
    5e68:	4b29      	ldr	r3, [pc, #164]	; (5f10 <interruptHandler+0x180>)
    5e6a:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    5e6c:	1dbb      	adds	r3, r7, #6
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	b29b      	uxth	r3, r3
    5e72:	2280      	movs	r2, #128	; 0x80
    5e74:	4013      	ands	r3, r2
    5e76:	b29a      	uxth	r2, r3
    5e78:	4b2e      	ldr	r3, [pc, #184]	; (5f34 <interruptHandler+0x1a4>)
    5e7a:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    5e7c:	1dbb      	adds	r3, r7, #6
    5e7e:	781b      	ldrb	r3, [r3, #0]
    5e80:	b29b      	uxth	r3, r3
    5e82:	2240      	movs	r2, #64	; 0x40
    5e84:	4013      	ands	r3, r2
    5e86:	b29a      	uxth	r2, r3
    5e88:	4b2b      	ldr	r3, [pc, #172]	; (5f38 <interruptHandler+0x1a8>)
    5e8a:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5e8c:	1dfb      	adds	r3, r7, #7
    5e8e:	2200      	movs	r2, #0
    5e90:	701a      	strb	r2, [r3, #0]
    5e92:	e00e      	b.n	5eb2 <interruptHandler+0x122>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    5e94:	1dfb      	adds	r3, r7, #7
    5e96:	781b      	ldrb	r3, [r3, #0]
    5e98:	005a      	lsls	r2, r3, #1
    5e9a:	4b28      	ldr	r3, [pc, #160]	; (5f3c <interruptHandler+0x1ac>)
    5e9c:	18d2      	adds	r2, r2, r3
    5e9e:	4b1b      	ldr	r3, [pc, #108]	; (5f0c <interruptHandler+0x17c>)
    5ea0:	2100      	movs	r1, #0
    5ea2:	0018      	movs	r0, r3
    5ea4:	4b1a      	ldr	r3, [pc, #104]	; (5f10 <interruptHandler+0x180>)
    5ea6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    5ea8:	1dfb      	adds	r3, r7, #7
    5eaa:	781a      	ldrb	r2, [r3, #0]
    5eac:	1dfb      	adds	r3, r7, #7
    5eae:	3201      	adds	r2, #1
    5eb0:	701a      	strb	r2, [r3, #0]
    5eb2:	1dfb      	adds	r3, r7, #7
    5eb4:	781b      	ldrb	r3, [r3, #0]
    5eb6:	b29a      	uxth	r2, r3
    5eb8:	4b1c      	ldr	r3, [pc, #112]	; (5f2c <interruptHandler+0x19c>)
    5eba:	881b      	ldrh	r3, [r3, #0]
    5ebc:	b29b      	uxth	r3, r3
    5ebe:	429a      	cmp	r2, r3
    5ec0:	d3e8      	bcc.n	5e94 <interruptHandler+0x104>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    5ec2:	4b1a      	ldr	r3, [pc, #104]	; (5f2c <interruptHandler+0x19c>)
    5ec4:	881b      	ldrh	r3, [r3, #0]
    5ec6:	b29b      	uxth	r3, r3
    5ec8:	2b3c      	cmp	r3, #60	; 0x3c
    5eca:	d807      	bhi.n	5edc <interruptHandler+0x14c>
    5ecc:	4b17      	ldr	r3, [pc, #92]	; (5f2c <interruptHandler+0x19c>)
    5ece:	881b      	ldrh	r3, [r3, #0]
    5ed0:	b29b      	uxth	r3, r3
    5ed2:	001a      	movs	r2, r3
    5ed4:	4b19      	ldr	r3, [pc, #100]	; (5f3c <interruptHandler+0x1ac>)
    5ed6:	0052      	lsls	r2, r2, #1
    5ed8:	2100      	movs	r1, #0
    5eda:	52d1      	strh	r1, [r2, r3]
    unselect();
    5edc:	4b11      	ldr	r3, [pc, #68]	; (5f24 <interruptHandler+0x194>)
    5ede:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    5ee0:	2003      	movs	r0, #3
    5ee2:	4b07      	ldr	r3, [pc, #28]	; (5f00 <interruptHandler+0x170>)
    5ee4:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    5ee6:	4b16      	ldr	r3, [pc, #88]	; (5f40 <interruptHandler+0x1b0>)
    5ee8:	4798      	blx	r3
    5eea:	0003      	movs	r3, r0
    5eec:	001a      	movs	r2, r3
    5eee:	4b15      	ldr	r3, [pc, #84]	; (5f44 <interruptHandler+0x1b4>)
    5ef0:	801a      	strh	r2, [r3, #0]
}
    5ef2:	46bd      	mov	sp, r7
    5ef4:	b002      	add	sp, #8
    5ef6:	bd80      	pop	{r7, pc}
    5ef8:	2000022a 	.word	0x2000022a
    5efc:	00006151 	.word	0x00006151
    5f00:	00005b65 	.word	0x00005b65
    5f04:	00006219 	.word	0x00006219
    5f08:	20000068 	.word	0x20000068
    5f0c:	20000230 	.word	0x20000230
    5f10:	000034e1 	.word	0x000034e1
    5f14:	200001f8 	.word	0x200001f8
    5f18:	20000228 	.word	0x20000228
    5f1c:	20000178 	.word	0x20000178
    5f20:	20000170 	.word	0x20000170
    5f24:	00006245 	.word	0x00006245
    5f28:	00005f6d 	.word	0x00005f6d
    5f2c:	20000176 	.word	0x20000176
    5f30:	20000112 	.word	0x20000112
    5f34:	20000174 	.word	0x20000174
    5f38:	20000226 	.word	0x20000226
    5f3c:	2000017c 	.word	0x2000017c
    5f40:	00006111 	.word	0x00006111
    5f44:	2000026c 	.word	0x2000026c

00005f48 <isr0>:

// internal function
void isr0()
{ 
    5f48:	b580      	push	{r7, lr}
    5f4a:	af00      	add	r7, sp, #0
	_inISR = true; 
    5f4c:	4b05      	ldr	r3, [pc, #20]	; (5f64 <isr0+0x1c>)
    5f4e:	2201      	movs	r2, #1
    5f50:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    5f52:	4b05      	ldr	r3, [pc, #20]	; (5f68 <isr0+0x20>)
    5f54:	4798      	blx	r3
	_inISR = false;
    5f56:	4b03      	ldr	r3, [pc, #12]	; (5f64 <isr0+0x1c>)
    5f58:	2200      	movs	r2, #0
    5f5a:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    5f5c:	46c0      	nop			; (mov r8, r8)
    5f5e:	46bd      	mov	sp, r7
    5f60:	bd80      	pop	{r7, pc}
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	2000012d 	.word	0x2000012d
    5f68:	00005d91 	.word	0x00005d91

00005f6c <receiveBegin>:

// internal function
void receiveBegin() {
    5f6c:	b580      	push	{r7, lr}
    5f6e:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    5f70:	4b19      	ldr	r3, [pc, #100]	; (5fd8 <receiveBegin+0x6c>)
    5f72:	2200      	movs	r2, #0
    5f74:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    5f76:	4b19      	ldr	r3, [pc, #100]	; (5fdc <receiveBegin+0x70>)
    5f78:	2200      	movs	r2, #0
    5f7a:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    5f7c:	4b18      	ldr	r3, [pc, #96]	; (5fe0 <receiveBegin+0x74>)
    5f7e:	2200      	movs	r2, #0
    5f80:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    5f82:	4b18      	ldr	r3, [pc, #96]	; (5fe4 <receiveBegin+0x78>)
    5f84:	2200      	movs	r2, #0
    5f86:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    5f88:	4b17      	ldr	r3, [pc, #92]	; (5fe8 <receiveBegin+0x7c>)
    5f8a:	2200      	movs	r2, #0
    5f8c:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    5f8e:	4b17      	ldr	r3, [pc, #92]	; (5fec <receiveBegin+0x80>)
    5f90:	2200      	movs	r2, #0
    5f92:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    5f94:	4b16      	ldr	r3, [pc, #88]	; (5ff0 <receiveBegin+0x84>)
    5f96:	2200      	movs	r2, #0
    5f98:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    5f9a:	2028      	movs	r0, #40	; 0x28
    5f9c:	4b15      	ldr	r3, [pc, #84]	; (5ff4 <receiveBegin+0x88>)
    5f9e:	4798      	blx	r3
    5fa0:	0003      	movs	r3, r0
    5fa2:	001a      	movs	r2, r3
    5fa4:	2304      	movs	r3, #4
    5fa6:	4013      	ands	r3, r2
    5fa8:	d00b      	beq.n	5fc2 <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    5faa:	203d      	movs	r0, #61	; 0x3d
    5fac:	4b11      	ldr	r3, [pc, #68]	; (5ff4 <receiveBegin+0x88>)
    5fae:	4798      	blx	r3
    5fb0:	0003      	movs	r3, r0
    5fb2:	001a      	movs	r2, r3
    5fb4:	2304      	movs	r3, #4
    5fb6:	4313      	orrs	r3, r2
    5fb8:	b2db      	uxtb	r3, r3
    5fba:	0019      	movs	r1, r3
    5fbc:	203d      	movs	r0, #61	; 0x3d
    5fbe:	4b0e      	ldr	r3, [pc, #56]	; (5ff8 <receiveBegin+0x8c>)
    5fc0:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    5fc2:	2140      	movs	r1, #64	; 0x40
    5fc4:	2025      	movs	r0, #37	; 0x25
    5fc6:	4b0c      	ldr	r3, [pc, #48]	; (5ff8 <receiveBegin+0x8c>)
    5fc8:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    5fca:	2003      	movs	r0, #3
    5fcc:	4b0b      	ldr	r3, [pc, #44]	; (5ffc <receiveBegin+0x90>)
    5fce:	4798      	blx	r3
}
    5fd0:	46c0      	nop			; (mov r8, r8)
    5fd2:	46bd      	mov	sp, r7
    5fd4:	bd80      	pop	{r7, pc}
    5fd6:	46c0      	nop			; (mov r8, r8)
    5fd8:	20000176 	.word	0x20000176
    5fdc:	20000112 	.word	0x20000112
    5fe0:	20000228 	.word	0x20000228
    5fe4:	200001f8 	.word	0x200001f8
    5fe8:	20000226 	.word	0x20000226
    5fec:	20000174 	.word	0x20000174
    5ff0:	2000026c 	.word	0x2000026c
    5ff4:	00006151 	.word	0x00006151
    5ff8:	000061b9 	.word	0x000061b9
    5ffc:	00005b65 	.word	0x00005b65

00006000 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    6000:	b580      	push	{r7, lr}
    6002:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    6004:	4b0f      	ldr	r3, [pc, #60]	; (6044 <RFM_receiveDone+0x44>)
    6006:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    6008:	4b0f      	ldr	r3, [pc, #60]	; (6048 <RFM_receiveDone+0x48>)
    600a:	881b      	ldrh	r3, [r3, #0]
    600c:	b29b      	uxth	r3, r3
    600e:	2b03      	cmp	r3, #3
    6010:	d109      	bne.n	6026 <RFM_receiveDone+0x26>
    6012:	4b0e      	ldr	r3, [pc, #56]	; (604c <RFM_receiveDone+0x4c>)
    6014:	881b      	ldrh	r3, [r3, #0]
    6016:	b29b      	uxth	r3, r3
    6018:	2b00      	cmp	r3, #0
    601a:	d004      	beq.n	6026 <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    601c:	2001      	movs	r0, #1
    601e:	4b0c      	ldr	r3, [pc, #48]	; (6050 <RFM_receiveDone+0x50>)
    6020:	4798      	blx	r3
    return true;
    6022:	2301      	movs	r3, #1
    6024:	e00b      	b.n	603e <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    6026:	4b08      	ldr	r3, [pc, #32]	; (6048 <RFM_receiveDone+0x48>)
    6028:	881b      	ldrh	r3, [r3, #0]
    602a:	b29b      	uxth	r3, r3
    602c:	2b03      	cmp	r3, #3
    602e:	d103      	bne.n	6038 <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    6030:	4b08      	ldr	r3, [pc, #32]	; (6054 <RFM_receiveDone+0x54>)
    6032:	4798      	blx	r3
    return false;
    6034:	2300      	movs	r3, #0
    6036:	e002      	b.n	603e <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    6038:	4b07      	ldr	r3, [pc, #28]	; (6058 <RFM_receiveDone+0x58>)
    603a:	4798      	blx	r3
  return false;
    603c:	2300      	movs	r3, #0
}
    603e:	0018      	movs	r0, r3
    6040:	46bd      	mov	sp, r7
    6042:	bd80      	pop	{r7, pc}
    6044:	00005025 	.word	0x00005025
    6048:	2000022a 	.word	0x2000022a
    604c:	200001f8 	.word	0x200001f8
    6050:	00005b65 	.word	0x00005b65
    6054:	00005009 	.word	0x00005009
    6058:	00005f6d 	.word	0x00005f6d

0000605c <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    605c:	b580      	push	{r7, lr}
    605e:	b084      	sub	sp, #16
    6060:	af00      	add	r7, sp, #0
    6062:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    6064:	2001      	movs	r0, #1
    6066:	4b22      	ldr	r3, [pc, #136]	; (60f0 <RFM_encrypt+0x94>)
    6068:	4798      	blx	r3
  if (key != 0)
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	2b00      	cmp	r3, #0
    606e:	d026      	beq.n	60be <RFM_encrypt+0x62>
  {
    radioselect();
    6070:	4b20      	ldr	r3, [pc, #128]	; (60f4 <RFM_encrypt+0x98>)
    6072:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    6074:	4a20      	ldr	r2, [pc, #128]	; (60f8 <RFM_encrypt+0x9c>)
    6076:	4b21      	ldr	r3, [pc, #132]	; (60fc <RFM_encrypt+0xa0>)
    6078:	21be      	movs	r1, #190	; 0xbe
    607a:	0018      	movs	r0, r3
    607c:	4b20      	ldr	r3, [pc, #128]	; (6100 <RFM_encrypt+0xa4>)
    607e:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    6080:	230f      	movs	r3, #15
    6082:	18fb      	adds	r3, r7, r3
    6084:	2200      	movs	r2, #0
    6086:	701a      	strb	r2, [r3, #0]
    6088:	e012      	b.n	60b0 <RFM_encrypt+0x54>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    608a:	230f      	movs	r3, #15
    608c:	18fb      	adds	r3, r7, r3
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	687a      	ldr	r2, [r7, #4]
    6092:	18d3      	adds	r3, r2, r3
    6094:	781b      	ldrb	r3, [r3, #0]
    6096:	b299      	uxth	r1, r3
    6098:	4a17      	ldr	r2, [pc, #92]	; (60f8 <RFM_encrypt+0x9c>)
    609a:	4b18      	ldr	r3, [pc, #96]	; (60fc <RFM_encrypt+0xa0>)
    609c:	0018      	movs	r0, r3
    609e:	4b18      	ldr	r3, [pc, #96]	; (6100 <RFM_encrypt+0xa4>)
    60a0:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    radioselect();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    60a2:	230f      	movs	r3, #15
    60a4:	18fb      	adds	r3, r7, r3
    60a6:	781a      	ldrb	r2, [r3, #0]
    60a8:	230f      	movs	r3, #15
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	3201      	adds	r2, #1
    60ae:	701a      	strb	r2, [r3, #0]
    60b0:	230f      	movs	r3, #15
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	781b      	ldrb	r3, [r3, #0]
    60b6:	2b0f      	cmp	r3, #15
    60b8:	d9e7      	bls.n	608a <RFM_encrypt+0x2e>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    60ba:	4b12      	ldr	r3, [pc, #72]	; (6104 <RFM_encrypt+0xa8>)
    60bc:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    60be:	203d      	movs	r0, #61	; 0x3d
    60c0:	4b11      	ldr	r3, [pc, #68]	; (6108 <RFM_encrypt+0xac>)
    60c2:	4798      	blx	r3
    60c4:	0003      	movs	r3, r0
    60c6:	b25b      	sxtb	r3, r3
    60c8:	2201      	movs	r2, #1
    60ca:	4393      	bics	r3, r2
    60cc:	b25a      	sxtb	r2, r3
    60ce:	687b      	ldr	r3, [r7, #4]
    60d0:	1e59      	subs	r1, r3, #1
    60d2:	418b      	sbcs	r3, r1
    60d4:	b2db      	uxtb	r3, r3
    60d6:	b25b      	sxtb	r3, r3
    60d8:	4313      	orrs	r3, r2
    60da:	b25b      	sxtb	r3, r3
    60dc:	b2db      	uxtb	r3, r3
    60de:	0019      	movs	r1, r3
    60e0:	203d      	movs	r0, #61	; 0x3d
    60e2:	4b0a      	ldr	r3, [pc, #40]	; (610c <RFM_encrypt+0xb0>)
    60e4:	4798      	blx	r3
}
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	46bd      	mov	sp, r7
    60ea:	b004      	add	sp, #16
    60ec:	bd80      	pop	{r7, pc}
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	00005b65 	.word	0x00005b65
    60f4:	00006219 	.word	0x00006219
    60f8:	20000068 	.word	0x20000068
    60fc:	20000230 	.word	0x20000230
    6100:	000034e1 	.word	0x000034e1
    6104:	00006245 	.word	0x00006245
    6108:	00006151 	.word	0x00006151
    610c:	000061b9 	.word	0x000061b9

00006110 <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    6116:	1dbb      	adds	r3, r7, #6
    6118:	2200      	movs	r2, #0
    611a:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    611c:	2024      	movs	r0, #36	; 0x24
    611e:	4b0b      	ldr	r3, [pc, #44]	; (614c <readRSSI+0x3c>)
    6120:	4798      	blx	r3
    6122:	0003      	movs	r3, r0
    6124:	b29b      	uxth	r3, r3
    6126:	425b      	negs	r3, r3
    6128:	b29b      	uxth	r3, r3
    612a:	b21a      	sxth	r2, r3
    612c:	1dbb      	adds	r3, r7, #6
    612e:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    6130:	1dbb      	adds	r3, r7, #6
    6132:	881b      	ldrh	r3, [r3, #0]
    6134:	b21b      	sxth	r3, r3
    6136:	105b      	asrs	r3, r3, #1
    6138:	b21a      	sxth	r2, r3
    613a:	1dbb      	adds	r3, r7, #6
    613c:	801a      	strh	r2, [r3, #0]
  return rssi;
    613e:	1dbb      	adds	r3, r7, #6
    6140:	881b      	ldrh	r3, [r3, #0]
    6142:	b21b      	sxth	r3, r3
}
    6144:	0018      	movs	r0, r3
    6146:	46bd      	mov	sp, r7
    6148:	b002      	add	sp, #8
    614a:	bd80      	pop	{r7, pc}
    614c:	00006151 	.word	0x00006151

00006150 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    6150:	b580      	push	{r7, lr}
    6152:	b084      	sub	sp, #16
    6154:	af00      	add	r7, sp, #0
    6156:	0002      	movs	r2, r0
    6158:	1dbb      	adds	r3, r7, #6
    615a:	801a      	strh	r2, [r3, #0]
  radioselect();
    615c:	4b11      	ldr	r3, [pc, #68]	; (61a4 <readReg+0x54>)
    615e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    6160:	1dbb      	adds	r3, r7, #6
    6162:	881b      	ldrh	r3, [r3, #0]
    6164:	b29b      	uxth	r3, r3
    6166:	227f      	movs	r2, #127	; 0x7f
    6168:	4013      	ands	r3, r2
    616a:	b299      	uxth	r1, r3
    616c:	4a0e      	ldr	r2, [pc, #56]	; (61a8 <readReg+0x58>)
    616e:	4b0f      	ldr	r3, [pc, #60]	; (61ac <readReg+0x5c>)
    6170:	0018      	movs	r0, r3
    6172:	4b0f      	ldr	r3, [pc, #60]	; (61b0 <readReg+0x60>)
    6174:	4798      	blx	r3
  volatile uint16_t regval = 0;
    6176:	230e      	movs	r3, #14
    6178:	18fb      	adds	r3, r7, r3
    617a:	2200      	movs	r2, #0
    617c:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    617e:	230e      	movs	r3, #14
    6180:	18fa      	adds	r2, r7, r3
    6182:	4b0a      	ldr	r3, [pc, #40]	; (61ac <readReg+0x5c>)
    6184:	2100      	movs	r1, #0
    6186:	0018      	movs	r0, r3
    6188:	4b09      	ldr	r3, [pc, #36]	; (61b0 <readReg+0x60>)
    618a:	4798      	blx	r3
  unselect();
    618c:	4b09      	ldr	r3, [pc, #36]	; (61b4 <readReg+0x64>)
    618e:	4798      	blx	r3
  return (uint8_t)regval;
    6190:	230e      	movs	r3, #14
    6192:	18fb      	adds	r3, r7, r3
    6194:	881b      	ldrh	r3, [r3, #0]
    6196:	b29b      	uxth	r3, r3
    6198:	b2db      	uxtb	r3, r3
}
    619a:	0018      	movs	r0, r3
    619c:	46bd      	mov	sp, r7
    619e:	b004      	add	sp, #16
    61a0:	bd80      	pop	{r7, pc}
    61a2:	46c0      	nop			; (mov r8, r8)
    61a4:	00006219 	.word	0x00006219
    61a8:	20000068 	.word	0x20000068
    61ac:	20000230 	.word	0x20000230
    61b0:	000034e1 	.word	0x000034e1
    61b4:	00006245 	.word	0x00006245

000061b8 <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b082      	sub	sp, #8
    61bc:	af00      	add	r7, sp, #0
    61be:	0002      	movs	r2, r0
    61c0:	1dfb      	adds	r3, r7, #7
    61c2:	701a      	strb	r2, [r3, #0]
    61c4:	1dbb      	adds	r3, r7, #6
    61c6:	1c0a      	adds	r2, r1, #0
    61c8:	701a      	strb	r2, [r3, #0]
  radioselect();
    61ca:	4b0e      	ldr	r3, [pc, #56]	; (6204 <writeReg+0x4c>)
    61cc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    61ce:	1dfb      	adds	r3, r7, #7
    61d0:	781b      	ldrb	r3, [r3, #0]
    61d2:	2280      	movs	r2, #128	; 0x80
    61d4:	4252      	negs	r2, r2
    61d6:	4313      	orrs	r3, r2
    61d8:	b2db      	uxtb	r3, r3
    61da:	b299      	uxth	r1, r3
    61dc:	4a0a      	ldr	r2, [pc, #40]	; (6208 <writeReg+0x50>)
    61de:	4b0b      	ldr	r3, [pc, #44]	; (620c <writeReg+0x54>)
    61e0:	0018      	movs	r0, r3
    61e2:	4b0b      	ldr	r3, [pc, #44]	; (6210 <writeReg+0x58>)
    61e4:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    61e6:	1dbb      	adds	r3, r7, #6
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	b299      	uxth	r1, r3
    61ec:	4a06      	ldr	r2, [pc, #24]	; (6208 <writeReg+0x50>)
    61ee:	4b07      	ldr	r3, [pc, #28]	; (620c <writeReg+0x54>)
    61f0:	0018      	movs	r0, r3
    61f2:	4b07      	ldr	r3, [pc, #28]	; (6210 <writeReg+0x58>)
    61f4:	4798      	blx	r3
  unselect();
    61f6:	4b07      	ldr	r3, [pc, #28]	; (6214 <writeReg+0x5c>)
    61f8:	4798      	blx	r3
}
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	46bd      	mov	sp, r7
    61fe:	b002      	add	sp, #8
    6200:	bd80      	pop	{r7, pc}
    6202:	46c0      	nop			; (mov r8, r8)
    6204:	00006219 	.word	0x00006219
    6208:	20000068 	.word	0x20000068
    620c:	20000230 	.word	0x20000230
    6210:	000034e1 	.word	0x000034e1
    6214:	00006245 	.word	0x00006245

00006218 <radioselect>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void radioselect() {
    6218:	b580      	push	{r7, lr}
    621a:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <radioselect+0x1c>)
    621e:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    6220:	4905      	ldr	r1, [pc, #20]	; (6238 <radioselect+0x20>)
    6222:	4b06      	ldr	r3, [pc, #24]	; (623c <radioselect+0x24>)
    6224:	2201      	movs	r2, #1
    6226:	0018      	movs	r0, r3
    6228:	4b05      	ldr	r3, [pc, #20]	; (6240 <radioselect+0x28>)
    622a:	4798      	blx	r3
}
    622c:	46c0      	nop			; (mov r8, r8)
    622e:	46bd      	mov	sp, r7
    6230:	bd80      	pop	{r7, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	00005025 	.word	0x00005025
    6238:	200002b0 	.word	0x200002b0
    623c:	20000230 	.word	0x20000230
    6240:	0000362d 	.word	0x0000362d

00006244 <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    6244:	b580      	push	{r7, lr}
    6246:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    6248:	4905      	ldr	r1, [pc, #20]	; (6260 <unselect+0x1c>)
    624a:	4b06      	ldr	r3, [pc, #24]	; (6264 <unselect+0x20>)
    624c:	2200      	movs	r2, #0
    624e:	0018      	movs	r0, r3
    6250:	4b05      	ldr	r3, [pc, #20]	; (6268 <unselect+0x24>)
    6252:	4798      	blx	r3
  maybeInterrupts();
    6254:	4b05      	ldr	r3, [pc, #20]	; (626c <unselect+0x28>)
    6256:	4798      	blx	r3
}
    6258:	46c0      	nop			; (mov r8, r8)
    625a:	46bd      	mov	sp, r7
    625c:	bd80      	pop	{r7, pc}
    625e:	46c0      	nop			; (mov r8, r8)
    6260:	200002b0 	.word	0x200002b0
    6264:	20000230 	.word	0x20000230
    6268:	0000362d 	.word	0x0000362d
    626c:	000062b5 	.word	0x000062b5

00006270 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    6270:	b580      	push	{r7, lr}
    6272:	b082      	sub	sp, #8
    6274:	af00      	add	r7, sp, #0
    6276:	0002      	movs	r2, r0
    6278:	1dfb      	adds	r3, r7, #7
    627a:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    627c:	1dfb      	adds	r3, r7, #7
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	2b00      	cmp	r3, #0
    6282:	d001      	beq.n	6288 <setHighPowerRegs+0x18>
    6284:	235d      	movs	r3, #93	; 0x5d
    6286:	e000      	b.n	628a <setHighPowerRegs+0x1a>
    6288:	2355      	movs	r3, #85	; 0x55
    628a:	0019      	movs	r1, r3
    628c:	205a      	movs	r0, #90	; 0x5a
    628e:	4b08      	ldr	r3, [pc, #32]	; (62b0 <setHighPowerRegs+0x40>)
    6290:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    6292:	1dfb      	adds	r3, r7, #7
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	2b00      	cmp	r3, #0
    6298:	d001      	beq.n	629e <setHighPowerRegs+0x2e>
    629a:	237c      	movs	r3, #124	; 0x7c
    629c:	e000      	b.n	62a0 <setHighPowerRegs+0x30>
    629e:	2370      	movs	r3, #112	; 0x70
    62a0:	0019      	movs	r1, r3
    62a2:	205c      	movs	r0, #92	; 0x5c
    62a4:	4b02      	ldr	r3, [pc, #8]	; (62b0 <setHighPowerRegs+0x40>)
    62a6:	4798      	blx	r3
}
    62a8:	46c0      	nop			; (mov r8, r8)
    62aa:	46bd      	mov	sp, r7
    62ac:	b002      	add	sp, #8
    62ae:	bd80      	pop	{r7, pc}
    62b0:	000061b9 	.word	0x000061b9

000062b4 <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    62b4:	b580      	push	{r7, lr}
    62b6:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    62b8:	4b06      	ldr	r3, [pc, #24]	; (62d4 <maybeInterrupts+0x20>)
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	b2db      	uxtb	r3, r3
    62be:	2201      	movs	r2, #1
    62c0:	4053      	eors	r3, r2
    62c2:	b2db      	uxtb	r3, r3
    62c4:	2b00      	cmp	r3, #0
    62c6:	d001      	beq.n	62cc <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    62c8:	4b03      	ldr	r3, [pc, #12]	; (62d8 <maybeInterrupts+0x24>)
    62ca:	4798      	blx	r3
}
    62cc:	46c0      	nop			; (mov r8, r8)
    62ce:	46bd      	mov	sp, r7
    62d0:	bd80      	pop	{r7, pc}
    62d2:	46c0      	nop			; (mov r8, r8)
    62d4:	2000012d 	.word	0x2000012d
    62d8:	00005009 	.word	0x00005009

000062dc <configure_i2c_master>:
struct i2c_master_module i2c_master_instance;
void configure_i2c_master(void);


void configure_i2c_master(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	b08e      	sub	sp, #56	; 0x38
    62e0:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    62e2:	1d3b      	adds	r3, r7, #4
    62e4:	0018      	movs	r0, r3
    62e6:	4b09      	ldr	r3, [pc, #36]	; (630c <configure_i2c_master+0x30>)
    62e8:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    62ea:	1d3b      	adds	r3, r7, #4
    62ec:	4a08      	ldr	r2, [pc, #32]	; (6310 <configure_i2c_master+0x34>)
    62ee:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    62f0:	1d3a      	adds	r2, r7, #4
    62f2:	4908      	ldr	r1, [pc, #32]	; (6314 <configure_i2c_master+0x38>)
    62f4:	4b08      	ldr	r3, [pc, #32]	; (6318 <configure_i2c_master+0x3c>)
    62f6:	0018      	movs	r0, r3
    62f8:	4b08      	ldr	r3, [pc, #32]	; (631c <configure_i2c_master+0x40>)
    62fa:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    62fc:	4b06      	ldr	r3, [pc, #24]	; (6318 <configure_i2c_master+0x3c>)
    62fe:	0018      	movs	r0, r3
    6300:	4b07      	ldr	r3, [pc, #28]	; (6320 <configure_i2c_master+0x44>)
    6302:	4798      	blx	r3
}
    6304:	46c0      	nop			; (mov r8, r8)
    6306:	46bd      	mov	sp, r7
    6308:	b00e      	add	sp, #56	; 0x38
    630a:	bd80      	pop	{r7, pc}
    630c:	00005111 	.word	0x00005111
    6310:	00002710 	.word	0x00002710
    6314:	42001000 	.word	0x42001000
    6318:	200001fc 	.word	0x200001fc
    631c:	000014e1 	.word	0x000014e1
    6320:	00005195 	.word	0x00005195

00006324 <lipo_begin>:
 ************************** Initialization Functions *************************
 *****************************************************************************/

// Initializes I2C and verifies communication with the BQ27441.
bool lipo_begin(void)
{
    6324:	b590      	push	{r4, r7, lr}
    6326:	b083      	sub	sp, #12
    6328:	af00      	add	r7, sp, #0
	uint16_t deviceID = 0;
    632a:	1dbb      	adds	r3, r7, #6
    632c:	2200      	movs	r2, #0
    632e:	801a      	strh	r2, [r3, #0]
	
	_userConfigControl = false;
    6330:	4b0d      	ldr	r3, [pc, #52]	; (6368 <lipo_begin+0x44>)
    6332:	2200      	movs	r2, #0
    6334:	701a      	strb	r2, [r3, #0]
	_sealFlag = false;
    6336:	4b0d      	ldr	r3, [pc, #52]	; (636c <lipo_begin+0x48>)
    6338:	2200      	movs	r2, #0
    633a:	701a      	strb	r2, [r3, #0]
	_deviceAddress = BQ72441_I2C_ADDRESS;
    633c:	4b0c      	ldr	r3, [pc, #48]	; (6370 <lipo_begin+0x4c>)
    633e:	2255      	movs	r2, #85	; 0x55
    6340:	701a      	strb	r2, [r3, #0]
	configure_i2c_master(); // Initialize I2C master
    6342:	4b0c      	ldr	r3, [pc, #48]	; (6374 <lipo_begin+0x50>)
    6344:	4798      	blx	r3
	
	deviceID = deviceType(); // Read deviceType from BQ27441
    6346:	1dbc      	adds	r4, r7, #6
    6348:	4b0b      	ldr	r3, [pc, #44]	; (6378 <lipo_begin+0x54>)
    634a:	4798      	blx	r3
    634c:	0003      	movs	r3, r0
    634e:	8023      	strh	r3, [r4, #0]
	
	if (deviceID == BQ27441_DEVICE_ID)
    6350:	1dbb      	adds	r3, r7, #6
    6352:	881b      	ldrh	r3, [r3, #0]
    6354:	4a09      	ldr	r2, [pc, #36]	; (637c <lipo_begin+0x58>)
    6356:	4293      	cmp	r3, r2
    6358:	d101      	bne.n	635e <lipo_begin+0x3a>
	{
		return true; // If device ID is valid, return true
    635a:	2301      	movs	r3, #1
    635c:	e000      	b.n	6360 <lipo_begin+0x3c>
	}
	
	return false; // Otherwise return false
    635e:	2300      	movs	r3, #0
}
    6360:	0018      	movs	r0, r3
    6362:	46bd      	mov	sp, r7
    6364:	b003      	add	sp, #12
    6366:	bd90      	pop	{r4, r7, pc}
    6368:	20000172 	.word	0x20000172
    636c:	20000224 	.word	0x20000224
    6370:	20000171 	.word	0x20000171
    6374:	000062dd 	.word	0x000062dd
    6378:	0000642d 	.word	0x0000642d
    637c:	00000421 	.word	0x00000421

00006380 <lipo_setCapacity>:

// Configures the design capacity of the connected battery.
bool lipo_setCapacity(uint16_t capacity)
{
    6380:	b590      	push	{r4, r7, lr}
    6382:	b085      	sub	sp, #20
    6384:	af00      	add	r7, sp, #0
    6386:	0002      	movs	r2, r0
    6388:	1dbb      	adds	r3, r7, #6
    638a:	801a      	strh	r2, [r3, #0]
	// Write to STATE subclass (82) of BQ27441 extended memory.
	// Offset 0x0A (10)
	// Design capacity is a 2-byte piece of data - MSB first
	uint8_t capMSB = capacity >> 8;
    638c:	1dbb      	adds	r3, r7, #6
    638e:	881b      	ldrh	r3, [r3, #0]
    6390:	0a1b      	lsrs	r3, r3, #8
    6392:	b29a      	uxth	r2, r3
    6394:	230f      	movs	r3, #15
    6396:	18fb      	adds	r3, r7, r3
    6398:	701a      	strb	r2, [r3, #0]
	uint8_t capLSB = capacity & 0x00FF;
    639a:	230e      	movs	r3, #14
    639c:	18fb      	adds	r3, r7, r3
    639e:	1dba      	adds	r2, r7, #6
    63a0:	8812      	ldrh	r2, [r2, #0]
    63a2:	701a      	strb	r2, [r3, #0]
	uint8_t capacityData[2] = {capMSB, capLSB};
    63a4:	230c      	movs	r3, #12
    63a6:	18fb      	adds	r3, r7, r3
    63a8:	220f      	movs	r2, #15
    63aa:	18ba      	adds	r2, r7, r2
    63ac:	7812      	ldrb	r2, [r2, #0]
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	230c      	movs	r3, #12
    63b2:	18fb      	adds	r3, r7, r3
    63b4:	220e      	movs	r2, #14
    63b6:	18ba      	adds	r2, r7, r2
    63b8:	7812      	ldrb	r2, [r2, #0]
    63ba:	705a      	strb	r2, [r3, #1]
	return writeExtendedData(BQ27441_ID_STATE, 10, capacityData, 2);
    63bc:	230c      	movs	r3, #12
    63be:	18fa      	adds	r2, r7, r3
    63c0:	2302      	movs	r3, #2
    63c2:	210a      	movs	r1, #10
    63c4:	2052      	movs	r0, #82	; 0x52
    63c6:	4c03      	ldr	r4, [pc, #12]	; (63d4 <lipo_setCapacity+0x54>)
    63c8:	47a0      	blx	r4
    63ca:	0003      	movs	r3, r0
}
    63cc:	0018      	movs	r0, r3
    63ce:	46bd      	mov	sp, r7
    63d0:	b005      	add	sp, #20
    63d2:	bd90      	pop	{r4, r7, pc}
    63d4:	00006931 	.word	0x00006931

000063d8 <lipo_soc>:
	return (int16_t) readWord(BQ27441_COMMAND_AVG_POWER);
}

// Reads and returns specified state of charge measurement
uint16_t lipo_soc(soc_measure type)
{
    63d8:	b590      	push	{r4, r7, lr}
    63da:	b085      	sub	sp, #20
    63dc:	af00      	add	r7, sp, #0
    63de:	0002      	movs	r2, r0
    63e0:	1dfb      	adds	r3, r7, #7
    63e2:	701a      	strb	r2, [r3, #0]
	uint16_t socRet = 0;
    63e4:	230e      	movs	r3, #14
    63e6:	18fb      	adds	r3, r7, r3
    63e8:	2200      	movs	r2, #0
    63ea:	801a      	strh	r2, [r3, #0]
	switch (type)
    63ec:	1dfb      	adds	r3, r7, #7
    63ee:	781b      	ldrb	r3, [r3, #0]
    63f0:	2b00      	cmp	r3, #0
    63f2:	d002      	beq.n	63fa <lipo_soc+0x22>
    63f4:	2b01      	cmp	r3, #1
    63f6:	d008      	beq.n	640a <lipo_soc+0x32>
    63f8:	e00f      	b.n	641a <lipo_soc+0x42>
	{
	case FILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC);
    63fa:	230e      	movs	r3, #14
    63fc:	18fc      	adds	r4, r7, r3
    63fe:	201c      	movs	r0, #28
    6400:	4b09      	ldr	r3, [pc, #36]	; (6428 <lipo_soc+0x50>)
    6402:	4798      	blx	r3
    6404:	0003      	movs	r3, r0
    6406:	8023      	strh	r3, [r4, #0]
		break;
    6408:	e007      	b.n	641a <lipo_soc+0x42>
	case UNFILTERED:
		socRet = readWord(BQ27441_COMMAND_SOC_UNFL);
    640a:	230e      	movs	r3, #14
    640c:	18fc      	adds	r4, r7, r3
    640e:	2030      	movs	r0, #48	; 0x30
    6410:	4b05      	ldr	r3, [pc, #20]	; (6428 <lipo_soc+0x50>)
    6412:	4798      	blx	r3
    6414:	0003      	movs	r3, r0
    6416:	8023      	strh	r3, [r4, #0]
		break;
    6418:	46c0      	nop			; (mov r8, r8)
	}
	
	return socRet;
    641a:	230e      	movs	r3, #14
    641c:	18fb      	adds	r3, r7, r3
    641e:	881b      	ldrh	r3, [r3, #0]
}
    6420:	0018      	movs	r0, r3
    6422:	46bd      	mov	sp, r7
    6424:	b005      	add	sp, #20
    6426:	bd90      	pop	{r4, r7, pc}
    6428:	00006669 	.word	0x00006669

0000642c <deviceType>:
 *************************** Control Sub-Commands ****************************
 *****************************************************************************/

// Read the device type - should be 0x0421
uint16_t deviceType(void)
{
    642c:	b580      	push	{r7, lr}
    642e:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_DEVICE_TYPE);
    6430:	2001      	movs	r0, #1
    6432:	4b03      	ldr	r3, [pc, #12]	; (6440 <deviceType+0x14>)
    6434:	4798      	blx	r3
    6436:	0003      	movs	r3, r0
}
    6438:	0018      	movs	r0, r3
    643a:	46bd      	mov	sp, r7
    643c:	bd80      	pop	{r7, pc}
    643e:	46c0      	nop			; (mov r8, r8)
    6440:	000066ad 	.word	0x000066ad

00006444 <enterConfig>:

// Enter configuration mode - set userControl if calling from an Arduino sketch
// and you want control over when to exitConfig
bool enterConfig(bool userControl)
{
    6444:	b580      	push	{r7, lr}
    6446:	b084      	sub	sp, #16
    6448:	af00      	add	r7, sp, #0
    644a:	0002      	movs	r2, r0
    644c:	1dfb      	adds	r3, r7, #7
    644e:	701a      	strb	r2, [r3, #0]
	if (userControl) _userConfigControl = true;
    6450:	1dfb      	adds	r3, r7, #7
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	2b00      	cmp	r3, #0
    6456:	d002      	beq.n	645e <enterConfig+0x1a>
    6458:	4b20      	ldr	r3, [pc, #128]	; (64dc <enterConfig+0x98>)
    645a:	2201      	movs	r2, #1
    645c:	701a      	strb	r2, [r3, #0]
	
	if (sealed())
    645e:	4b20      	ldr	r3, [pc, #128]	; (64e0 <enterConfig+0x9c>)
    6460:	4798      	blx	r3
    6462:	1e03      	subs	r3, r0, #0
    6464:	d004      	beq.n	6470 <enterConfig+0x2c>
	{
		_sealFlag = true;
    6466:	4b1f      	ldr	r3, [pc, #124]	; (64e4 <enterConfig+0xa0>)
    6468:	2201      	movs	r2, #1
    646a:	701a      	strb	r2, [r3, #0]
		unseal(); // Must be unsealed before making changes
    646c:	4b1e      	ldr	r3, [pc, #120]	; (64e8 <enterConfig+0xa4>)
    646e:	4798      	blx	r3
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
    6470:	2013      	movs	r0, #19
    6472:	4b1e      	ldr	r3, [pc, #120]	; (64ec <enterConfig+0xa8>)
    6474:	4798      	blx	r3
    6476:	1e03      	subs	r3, r0, #0
    6478:	d02b      	beq.n	64d2 <enterConfig+0x8e>
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT;
    647a:	230e      	movs	r3, #14
    647c:	18fb      	adds	r3, r7, r3
    647e:	22fa      	movs	r2, #250	; 0xfa
    6480:	00d2      	lsls	r2, r2, #3
    6482:	801a      	strh	r2, [r3, #0]
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    6484:	e00a      	b.n	649c <enterConfig+0x58>
		{
			uint32_t time = millis();
    6486:	4b1a      	ldr	r3, [pc, #104]	; (64f0 <enterConfig+0xac>)
    6488:	4798      	blx	r3
    648a:	0003      	movs	r3, r0
    648c:	60bb      	str	r3, [r7, #8]
			while(millis()-time < 1)
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	4b17      	ldr	r3, [pc, #92]	; (64f0 <enterConfig+0xac>)
    6492:	4798      	blx	r3
    6494:	1e02      	subs	r2, r0, #0
    6496:	68bb      	ldr	r3, [r7, #8]
    6498:	429a      	cmp	r2, r3
    649a:	d0f9      	beq.n	6490 <enterConfig+0x4c>
	}
	
	if (executeControlWord(BQ27441_CONTROL_SET_CFGUPDATE))
	{
		int16_t timeout = BQ72441_I2C_TIMEOUT;
		while ((timeout--) && (!(status() & BQ27441_FLAG_CFGUPMODE)))
    649c:	230e      	movs	r3, #14
    649e:	18fb      	adds	r3, r7, r3
    64a0:	2200      	movs	r2, #0
    64a2:	5e9b      	ldrsh	r3, [r3, r2]
    64a4:	b29a      	uxth	r2, r3
    64a6:	3a01      	subs	r2, #1
    64a8:	b291      	uxth	r1, r2
    64aa:	220e      	movs	r2, #14
    64ac:	18ba      	adds	r2, r7, r2
    64ae:	8011      	strh	r1, [r2, #0]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d006      	beq.n	64c2 <enterConfig+0x7e>
    64b4:	4b0f      	ldr	r3, [pc, #60]	; (64f4 <enterConfig+0xb0>)
    64b6:	4798      	blx	r3
    64b8:	0003      	movs	r3, r0
    64ba:	001a      	movs	r2, r3
    64bc:	2310      	movs	r3, #16
    64be:	4013      	ands	r3, r2
    64c0:	d0e1      	beq.n	6486 <enterConfig+0x42>
			{
			 //Delay(1);
			}
		}
		
		if (timeout > 0)
    64c2:	230e      	movs	r3, #14
    64c4:	18fb      	adds	r3, r7, r3
    64c6:	2200      	movs	r2, #0
    64c8:	5e9b      	ldrsh	r3, [r3, r2]
    64ca:	2b00      	cmp	r3, #0
    64cc:	dd01      	ble.n	64d2 <enterConfig+0x8e>
			return true;
    64ce:	2301      	movs	r3, #1
    64d0:	e000      	b.n	64d4 <enterConfig+0x90>
	}
	
	return false;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b004      	add	sp, #16
    64da:	bd80      	pop	{r7, pc}
    64dc:	20000172 	.word	0x20000172
    64e0:	000065d5 	.word	0x000065d5
    64e4:	20000224 	.word	0x20000224
    64e8:	0000661d 	.word	0x0000661d
    64ec:	00006745 	.word	0x00006745
    64f0:	0000559d 	.word	0x0000559d
    64f4:	000065bd 	.word	0x000065bd

000064f8 <exitConfig>:

// Exit configuration mode with the option to perform a resimulation
bool exitConfig(bool resim)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	b084      	sub	sp, #16
    64fc:	af00      	add	r7, sp, #0
    64fe:	0002      	movs	r2, r0
    6500:	1dfb      	adds	r3, r7, #7
    6502:	701a      	strb	r2, [r3, #0]
	//    2. Execute the SOFT_RESET command
	// EXIT_CFGUPDATE exits config mode _without_ an OCV (open-circuit voltage)
	// measurement, and without resimulating to update unfiltered-SoC and SoC.
	// If a new OCV measurement or resimulation is desired, SOFT_RESET or
	// EXIT_RESIM should be used to exit config mode.
	if (resim)
    6504:	1dfb      	adds	r3, r7, #7
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	2b00      	cmp	r3, #0
    650a:	d037      	beq.n	657c <exitConfig+0x84>
	{
		if (softReset())
    650c:	4b1f      	ldr	r3, [pc, #124]	; (658c <exitConfig+0x94>)
    650e:	4798      	blx	r3
    6510:	1e03      	subs	r3, r0, #0
    6512:	d031      	beq.n	6578 <exitConfig+0x80>
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
    6514:	230e      	movs	r3, #14
    6516:	18fb      	adds	r3, r7, r3
    6518:	22fa      	movs	r2, #250	; 0xfa
    651a:	00d2      	lsls	r2, r2, #3
    651c:	801a      	strh	r2, [r3, #0]
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    651e:	e00a      	b.n	6536 <exitConfig+0x3e>
			{
				uint32_t time = millis();
    6520:	4b1b      	ldr	r3, [pc, #108]	; (6590 <exitConfig+0x98>)
    6522:	4798      	blx	r3
    6524:	0003      	movs	r3, r0
    6526:	60bb      	str	r3, [r7, #8]
				while(millis()-time < 1)
    6528:	46c0      	nop			; (mov r8, r8)
    652a:	4b19      	ldr	r3, [pc, #100]	; (6590 <exitConfig+0x98>)
    652c:	4798      	blx	r3
    652e:	1e02      	subs	r2, r0, #0
    6530:	68bb      	ldr	r3, [r7, #8]
    6532:	429a      	cmp	r2, r3
    6534:	d0f9      	beq.n	652a <exitConfig+0x32>
	if (resim)
	{
		if (softReset())
		{
			int16_t timeout = BQ72441_I2C_TIMEOUT;
			while ((timeout--) && ((flags() & BQ27441_FLAG_CFGUPMODE)))
    6536:	230e      	movs	r3, #14
    6538:	18fb      	adds	r3, r7, r3
    653a:	2200      	movs	r2, #0
    653c:	5e9b      	ldrsh	r3, [r3, r2]
    653e:	b29a      	uxth	r2, r3
    6540:	3a01      	subs	r2, #1
    6542:	b291      	uxth	r1, r2
    6544:	220e      	movs	r2, #14
    6546:	18ba      	adds	r2, r7, r2
    6548:	8011      	strh	r1, [r2, #0]
    654a:	2b00      	cmp	r3, #0
    654c:	d006      	beq.n	655c <exitConfig+0x64>
    654e:	4b11      	ldr	r3, [pc, #68]	; (6594 <exitConfig+0x9c>)
    6550:	4798      	blx	r3
    6552:	0003      	movs	r3, r0
    6554:	001a      	movs	r2, r3
    6556:	2310      	movs	r3, #16
    6558:	4013      	ands	r3, r2
    655a:	d1e1      	bne.n	6520 <exitConfig+0x28>
				{
					//Delay(1);
				}
			}

			if (timeout > 0)
    655c:	230e      	movs	r3, #14
    655e:	18fb      	adds	r3, r7, r3
    6560:	2200      	movs	r2, #0
    6562:	5e9b      	ldrsh	r3, [r3, r2]
    6564:	2b00      	cmp	r3, #0
    6566:	dd07      	ble.n	6578 <exitConfig+0x80>
			{
				if (_sealFlag) seal(); // Seal back up if we IC was sealed coming in
    6568:	4b0b      	ldr	r3, [pc, #44]	; (6598 <exitConfig+0xa0>)
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	2b00      	cmp	r3, #0
    656e:	d001      	beq.n	6574 <exitConfig+0x7c>
    6570:	4b0a      	ldr	r3, [pc, #40]	; (659c <exitConfig+0xa4>)
    6572:	4798      	blx	r3
				return true;
    6574:	2301      	movs	r3, #1
    6576:	e005      	b.n	6584 <exitConfig+0x8c>
			}
		}
		return false;
    6578:	2300      	movs	r3, #0
    657a:	e003      	b.n	6584 <exitConfig+0x8c>
	}
	else
	{
		return executeControlWord(BQ27441_CONTROL_EXIT_CFGUPDATE);
    657c:	2043      	movs	r0, #67	; 0x43
    657e:	4b08      	ldr	r3, [pc, #32]	; (65a0 <exitConfig+0xa8>)
    6580:	4798      	blx	r3
    6582:	0003      	movs	r3, r0
	}	
}
    6584:	0018      	movs	r0, r3
    6586:	46bd      	mov	sp, r7
    6588:	b004      	add	sp, #16
    658a:	bd80      	pop	{r7, pc}
    658c:	00006651 	.word	0x00006651
    6590:	0000559d 	.word	0x0000559d
    6594:	000065a5 	.word	0x000065a5
    6598:	20000224 	.word	0x20000224
    659c:	00006601 	.word	0x00006601
    65a0:	00006745 	.word	0x00006745

000065a4 <flags>:

// Read the flags() command
uint16_t flags(void)
{
    65a4:	b580      	push	{r7, lr}
    65a6:	af00      	add	r7, sp, #0
	return readWord(BQ27441_COMMAND_FLAGS);
    65a8:	2006      	movs	r0, #6
    65aa:	4b03      	ldr	r3, [pc, #12]	; (65b8 <flags+0x14>)
    65ac:	4798      	blx	r3
    65ae:	0003      	movs	r3, r0
}
    65b0:	0018      	movs	r0, r3
    65b2:	46bd      	mov	sp, r7
    65b4:	bd80      	pop	{r7, pc}
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	00006669 	.word	0x00006669

000065bc <status>:

// Read the CONTROL_STATUS subcommand of control()
uint16_t status(void)
{
    65bc:	b580      	push	{r7, lr}
    65be:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_STATUS);
    65c0:	2000      	movs	r0, #0
    65c2:	4b03      	ldr	r3, [pc, #12]	; (65d0 <status+0x14>)
    65c4:	4798      	blx	r3
    65c6:	0003      	movs	r3, r0
}
    65c8:	0018      	movs	r0, r3
    65ca:	46bd      	mov	sp, r7
    65cc:	bd80      	pop	{r7, pc}
    65ce:	46c0      	nop			; (mov r8, r8)
    65d0:	000066ad 	.word	0x000066ad

000065d4 <sealed>:

/***************************** Private Functions *****************************/

// Check if the BQ27441-G1A is sealed or not.
bool sealed(void)
{
    65d4:	b590      	push	{r4, r7, lr}
    65d6:	b083      	sub	sp, #12
    65d8:	af00      	add	r7, sp, #0
	uint16_t stat = status();
    65da:	1dbc      	adds	r4, r7, #6
    65dc:	4b07      	ldr	r3, [pc, #28]	; (65fc <sealed+0x28>)
    65de:	4798      	blx	r3
    65e0:	0003      	movs	r3, r0
    65e2:	8023      	strh	r3, [r4, #0]
	return stat & BQ27441_STATUS_SS;
    65e4:	1dbb      	adds	r3, r7, #6
    65e6:	881a      	ldrh	r2, [r3, #0]
    65e8:	2380      	movs	r3, #128	; 0x80
    65ea:	019b      	lsls	r3, r3, #6
    65ec:	4013      	ands	r3, r2
    65ee:	1e5a      	subs	r2, r3, #1
    65f0:	4193      	sbcs	r3, r2
    65f2:	b2db      	uxtb	r3, r3
}
    65f4:	0018      	movs	r0, r3
    65f6:	46bd      	mov	sp, r7
    65f8:	b003      	add	sp, #12
    65fa:	bd90      	pop	{r4, r7, pc}
    65fc:	000065bd 	.word	0x000065bd

00006600 <seal>:

// Seal the BQ27441-G1A
bool seal(void)
{
    6600:	b580      	push	{r7, lr}
    6602:	af00      	add	r7, sp, #0
	return readControlWord(BQ27441_CONTROL_SEALED);
    6604:	2020      	movs	r0, #32
    6606:	4b04      	ldr	r3, [pc, #16]	; (6618 <seal+0x18>)
    6608:	4798      	blx	r3
    660a:	0003      	movs	r3, r0
    660c:	1e5a      	subs	r2, r3, #1
    660e:	4193      	sbcs	r3, r2
    6610:	b2db      	uxtb	r3, r3
}
    6612:	0018      	movs	r0, r3
    6614:	46bd      	mov	sp, r7
    6616:	bd80      	pop	{r7, pc}
    6618:	000066ad 	.word	0x000066ad

0000661c <unseal>:

// UNseal the BQ27441-G1A
bool unseal(void)
{
    661c:	b580      	push	{r7, lr}
    661e:	af00      	add	r7, sp, #0
	// To unseal the BQ27441, write the key to the control
	// command. Then immediately write the same key to control again.
	if (readControlWord(BQ27441_UNSEAL_KEY))
    6620:	2380      	movs	r3, #128	; 0x80
    6622:	021b      	lsls	r3, r3, #8
    6624:	0018      	movs	r0, r3
    6626:	4b09      	ldr	r3, [pc, #36]	; (664c <unseal+0x30>)
    6628:	4798      	blx	r3
    662a:	1e03      	subs	r3, r0, #0
    662c:	d009      	beq.n	6642 <unseal+0x26>
	{
		return readControlWord(BQ27441_UNSEAL_KEY);
    662e:	2380      	movs	r3, #128	; 0x80
    6630:	021b      	lsls	r3, r3, #8
    6632:	0018      	movs	r0, r3
    6634:	4b05      	ldr	r3, [pc, #20]	; (664c <unseal+0x30>)
    6636:	4798      	blx	r3
    6638:	0003      	movs	r3, r0
    663a:	1e5a      	subs	r2, r3, #1
    663c:	4193      	sbcs	r3, r2
    663e:	b2db      	uxtb	r3, r3
    6640:	e000      	b.n	6644 <unseal+0x28>
	}
	return false;
    6642:	2300      	movs	r3, #0
}
    6644:	0018      	movs	r0, r3
    6646:	46bd      	mov	sp, r7
    6648:	bd80      	pop	{r7, pc}
    664a:	46c0      	nop			; (mov r8, r8)
    664c:	000066ad 	.word	0x000066ad

00006650 <softReset>:
	return writeExtendedData(BQ27441_ID_REGISTERS, 0, opConfigData, 2);	
}

// Issue a soft-reset to the BQ27441-G1A
bool softReset(void)
{
    6650:	b580      	push	{r7, lr}
    6652:	af00      	add	r7, sp, #0
	return executeControlWord(BQ27441_CONTROL_SOFT_RESET);
    6654:	2042      	movs	r0, #66	; 0x42
    6656:	4b03      	ldr	r3, [pc, #12]	; (6664 <softReset+0x14>)
    6658:	4798      	blx	r3
    665a:	0003      	movs	r3, r0
}
    665c:	0018      	movs	r0, r3
    665e:	46bd      	mov	sp, r7
    6660:	bd80      	pop	{r7, pc}
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	00006745 	.word	0x00006745

00006668 <readWord>:

// Read a 16-bit command word from the BQ27441-G1A
uint16_t readWord(uint16_t subAddress)
{
    6668:	b580      	push	{r7, lr}
    666a:	b084      	sub	sp, #16
    666c:	af00      	add	r7, sp, #0
    666e:	0002      	movs	r2, r0
    6670:	1dbb      	adds	r3, r7, #6
    6672:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];
	i2cReadBytes(subAddress, data, 2);
    6674:	1dbb      	adds	r3, r7, #6
    6676:	881b      	ldrh	r3, [r3, #0]
    6678:	b2db      	uxtb	r3, r3
    667a:	220c      	movs	r2, #12
    667c:	18b9      	adds	r1, r7, r2
    667e:	2202      	movs	r2, #2
    6680:	0018      	movs	r0, r3
    6682:	4b09      	ldr	r3, [pc, #36]	; (66a8 <readWord+0x40>)
    6684:	4798      	blx	r3
	return ((uint16_t) data[1] << 8) | data[0];
    6686:	230c      	movs	r3, #12
    6688:	18fb      	adds	r3, r7, r3
    668a:	785b      	ldrb	r3, [r3, #1]
    668c:	021b      	lsls	r3, r3, #8
    668e:	b21a      	sxth	r2, r3
    6690:	230c      	movs	r3, #12
    6692:	18fb      	adds	r3, r7, r3
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	b21b      	sxth	r3, r3
    6698:	4313      	orrs	r3, r2
    669a:	b21b      	sxth	r3, r3
    669c:	b29b      	uxth	r3, r3
}
    669e:	0018      	movs	r0, r3
    66a0:	46bd      	mov	sp, r7
    66a2:	b004      	add	sp, #16
    66a4:	bd80      	pop	{r7, pc}
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	00006a55 	.word	0x00006a55

000066ac <readControlWord>:

// Read a 16-bit subcommand() from the BQ27441-G1A's control()
uint16_t readControlWord(uint16_t function)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	b084      	sub	sp, #16
    66b0:	af00      	add	r7, sp, #0
    66b2:	0002      	movs	r2, r0
    66b4:	1dbb      	adds	r3, r7, #6
    66b6:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    66b8:	1dbb      	adds	r3, r7, #6
    66ba:	881b      	ldrh	r3, [r3, #0]
    66bc:	0a1b      	lsrs	r3, r3, #8
    66be:	b29a      	uxth	r2, r3
    66c0:	230f      	movs	r3, #15
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    66c6:	230e      	movs	r3, #14
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	1dba      	adds	r2, r7, #6
    66cc:	8812      	ldrh	r2, [r2, #0]
    66ce:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    66d0:	230c      	movs	r3, #12
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	220e      	movs	r2, #14
    66d6:	18ba      	adds	r2, r7, r2
    66d8:	7812      	ldrb	r2, [r2, #0]
    66da:	701a      	strb	r2, [r3, #0]
    66dc:	230c      	movs	r3, #12
    66de:	18fb      	adds	r3, r7, r3
    66e0:	220f      	movs	r2, #15
    66e2:	18ba      	adds	r2, r7, r2
    66e4:	7812      	ldrb	r2, [r2, #0]
    66e6:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    66e8:	2308      	movs	r3, #8
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	2200      	movs	r2, #0
    66ee:	701a      	strb	r2, [r3, #0]
    66f0:	2308      	movs	r3, #8
    66f2:	18fb      	adds	r3, r7, r3
    66f4:	2200      	movs	r2, #0
    66f6:	705a      	strb	r2, [r3, #1]
	
	i2cWriteBytes((uint8_t) 0, command, 2);
    66f8:	230c      	movs	r3, #12
    66fa:	18fb      	adds	r3, r7, r3
    66fc:	2202      	movs	r2, #2
    66fe:	0019      	movs	r1, r3
    6700:	2000      	movs	r0, #0
    6702:	4b0e      	ldr	r3, [pc, #56]	; (673c <readControlWord+0x90>)
    6704:	4798      	blx	r3
	
	if (i2cReadBytes((uint8_t) 0, data, 2))
    6706:	2308      	movs	r3, #8
    6708:	18fb      	adds	r3, r7, r3
    670a:	2202      	movs	r2, #2
    670c:	0019      	movs	r1, r3
    670e:	2000      	movs	r0, #0
    6710:	4b0b      	ldr	r3, [pc, #44]	; (6740 <readControlWord+0x94>)
    6712:	4798      	blx	r3
    6714:	1e03      	subs	r3, r0, #0
    6716:	d00c      	beq.n	6732 <readControlWord+0x86>
	{
		return ((uint16_t)data[1] << 8) | data[0];
    6718:	2308      	movs	r3, #8
    671a:	18fb      	adds	r3, r7, r3
    671c:	785b      	ldrb	r3, [r3, #1]
    671e:	021b      	lsls	r3, r3, #8
    6720:	b21a      	sxth	r2, r3
    6722:	2308      	movs	r3, #8
    6724:	18fb      	adds	r3, r7, r3
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	b21b      	sxth	r3, r3
    672a:	4313      	orrs	r3, r2
    672c:	b21b      	sxth	r3, r3
    672e:	b29b      	uxth	r3, r3
    6730:	e000      	b.n	6734 <readControlWord+0x88>
	}
	
	return false;
    6732:	2300      	movs	r3, #0
}
    6734:	0018      	movs	r0, r3
    6736:	46bd      	mov	sp, r7
    6738:	b004      	add	sp, #16
    673a:	bd80      	pop	{r7, pc}
    673c:	00006b55 	.word	0x00006b55
    6740:	00006a55 	.word	0x00006a55

00006744 <executeControlWord>:

// Execute a subcommand() from the BQ27441-G1A's control()
bool executeControlWord(uint16_t function)
{
    6744:	b580      	push	{r7, lr}
    6746:	b084      	sub	sp, #16
    6748:	af00      	add	r7, sp, #0
    674a:	0002      	movs	r2, r0
    674c:	1dbb      	adds	r3, r7, #6
    674e:	801a      	strh	r2, [r3, #0]
	uint8_t subCommandMSB = (function >> 8);
    6750:	1dbb      	adds	r3, r7, #6
    6752:	881b      	ldrh	r3, [r3, #0]
    6754:	0a1b      	lsrs	r3, r3, #8
    6756:	b29a      	uxth	r2, r3
    6758:	230f      	movs	r3, #15
    675a:	18fb      	adds	r3, r7, r3
    675c:	701a      	strb	r2, [r3, #0]
	uint8_t subCommandLSB = (function & 0x00FF);
    675e:	230e      	movs	r3, #14
    6760:	18fb      	adds	r3, r7, r3
    6762:	1dba      	adds	r2, r7, #6
    6764:	8812      	ldrh	r2, [r2, #0]
    6766:	701a      	strb	r2, [r3, #0]
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
    6768:	230c      	movs	r3, #12
    676a:	18fb      	adds	r3, r7, r3
    676c:	220e      	movs	r2, #14
    676e:	18ba      	adds	r2, r7, r2
    6770:	7812      	ldrb	r2, [r2, #0]
    6772:	701a      	strb	r2, [r3, #0]
    6774:	230c      	movs	r3, #12
    6776:	18fb      	adds	r3, r7, r3
    6778:	220f      	movs	r2, #15
    677a:	18ba      	adds	r2, r7, r2
    677c:	7812      	ldrb	r2, [r2, #0]
    677e:	705a      	strb	r2, [r3, #1]
	uint8_t data[2] = {0, 0};
    6780:	2308      	movs	r3, #8
    6782:	18fb      	adds	r3, r7, r3
    6784:	2200      	movs	r2, #0
    6786:	701a      	strb	r2, [r3, #0]
    6788:	2308      	movs	r3, #8
    678a:	18fb      	adds	r3, r7, r3
    678c:	2200      	movs	r2, #0
    678e:	705a      	strb	r2, [r3, #1]
	
	if (i2cWriteBytes((uint8_t) 0, command, 2))
    6790:	230c      	movs	r3, #12
    6792:	18fb      	adds	r3, r7, r3
    6794:	2202      	movs	r2, #2
    6796:	0019      	movs	r1, r3
    6798:	2000      	movs	r0, #0
    679a:	4b05      	ldr	r3, [pc, #20]	; (67b0 <executeControlWord+0x6c>)
    679c:	4798      	blx	r3
    679e:	1e03      	subs	r3, r0, #0
    67a0:	d001      	beq.n	67a6 <executeControlWord+0x62>
		return true;
    67a2:	2301      	movs	r3, #1
    67a4:	e000      	b.n	67a8 <executeControlWord+0x64>
	
	return false;
    67a6:	2300      	movs	r3, #0
}
    67a8:	0018      	movs	r0, r3
    67aa:	46bd      	mov	sp, r7
    67ac:	b004      	add	sp, #16
    67ae:	bd80      	pop	{r7, pc}
    67b0:	00006b55 	.word	0x00006b55

000067b4 <blockDataControl>:
 ************************** Extended Data Commands ***************************
 *****************************************************************************/
 
// Issue a BlockDataControl() command to enable BlockData access
bool blockDataControl(void)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
	uint8_t enableByte = 0x00;
    67ba:	1dfb      	adds	r3, r7, #7
    67bc:	2200      	movs	r2, #0
    67be:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CONTROL, &enableByte, 1);
    67c0:	1dfb      	adds	r3, r7, #7
    67c2:	2201      	movs	r2, #1
    67c4:	0019      	movs	r1, r3
    67c6:	2061      	movs	r0, #97	; 0x61
    67c8:	4b04      	ldr	r3, [pc, #16]	; (67dc <blockDataControl+0x28>)
    67ca:	4798      	blx	r3
    67cc:	0003      	movs	r3, r0
    67ce:	1e5a      	subs	r2, r3, #1
    67d0:	4193      	sbcs	r3, r2
    67d2:	b2db      	uxtb	r3, r3
}
    67d4:	0018      	movs	r0, r3
    67d6:	46bd      	mov	sp, r7
    67d8:	b002      	add	sp, #8
    67da:	bd80      	pop	{r7, pc}
    67dc:	00006b55 	.word	0x00006b55

000067e0 <blockDataClass>:

// Issue a DataClass() command to set the data class to be accessed
bool blockDataClass(uint8_t id)
{
    67e0:	b580      	push	{r7, lr}
    67e2:	b082      	sub	sp, #8
    67e4:	af00      	add	r7, sp, #0
    67e6:	0002      	movs	r2, r0
    67e8:	1dfb      	adds	r3, r7, #7
    67ea:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATACLASS, &id, 1);
    67ec:	1dfb      	adds	r3, r7, #7
    67ee:	2201      	movs	r2, #1
    67f0:	0019      	movs	r1, r3
    67f2:	203e      	movs	r0, #62	; 0x3e
    67f4:	4b04      	ldr	r3, [pc, #16]	; (6808 <blockDataClass+0x28>)
    67f6:	4798      	blx	r3
    67f8:	0003      	movs	r3, r0
    67fa:	1e5a      	subs	r2, r3, #1
    67fc:	4193      	sbcs	r3, r2
    67fe:	b2db      	uxtb	r3, r3
}
    6800:	0018      	movs	r0, r3
    6802:	46bd      	mov	sp, r7
    6804:	b002      	add	sp, #8
    6806:	bd80      	pop	{r7, pc}
    6808:	00006b55 	.word	0x00006b55

0000680c <blockDataOffset>:

// Issue a DataBlock() command to set the data block to be accessed
bool blockDataOffset(uint8_t offset)
{
    680c:	b580      	push	{r7, lr}
    680e:	b082      	sub	sp, #8
    6810:	af00      	add	r7, sp, #0
    6812:	0002      	movs	r2, r0
    6814:	1dfb      	adds	r3, r7, #7
    6816:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_DATABLOCK, &offset, 1);
    6818:	1dfb      	adds	r3, r7, #7
    681a:	2201      	movs	r2, #1
    681c:	0019      	movs	r1, r3
    681e:	203f      	movs	r0, #63	; 0x3f
    6820:	4b04      	ldr	r3, [pc, #16]	; (6834 <blockDataOffset+0x28>)
    6822:	4798      	blx	r3
    6824:	0003      	movs	r3, r0
    6826:	1e5a      	subs	r2, r3, #1
    6828:	4193      	sbcs	r3, r2
    682a:	b2db      	uxtb	r3, r3
}
    682c:	0018      	movs	r0, r3
    682e:	46bd      	mov	sp, r7
    6830:	b002      	add	sp, #8
    6832:	bd80      	pop	{r7, pc}
    6834:	00006b55 	.word	0x00006b55

00006838 <blockDataChecksum>:

// Read the current checksum using BlockDataCheckSum()
uint8_t blockDataChecksum(void)
{
    6838:	b580      	push	{r7, lr}
    683a:	b082      	sub	sp, #8
    683c:	af00      	add	r7, sp, #0
	uint8_t csum;
	i2cReadBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);
    683e:	1dfb      	adds	r3, r7, #7
    6840:	2201      	movs	r2, #1
    6842:	0019      	movs	r1, r3
    6844:	2060      	movs	r0, #96	; 0x60
    6846:	4b04      	ldr	r3, [pc, #16]	; (6858 <blockDataChecksum+0x20>)
    6848:	4798      	blx	r3
	return csum;
    684a:	1dfb      	adds	r3, r7, #7
    684c:	781b      	ldrb	r3, [r3, #0]
}
    684e:	0018      	movs	r0, r3
    6850:	46bd      	mov	sp, r7
    6852:	b002      	add	sp, #8
    6854:	bd80      	pop	{r7, pc}
    6856:	46c0      	nop			; (mov r8, r8)
    6858:	00006a55 	.word	0x00006a55

0000685c <writeBlockData>:
	return ret;
}

// Use BlockData() to write a byte to an offset of the loaded data
bool writeBlockData(uint8_t offset, uint8_t data)
{
    685c:	b580      	push	{r7, lr}
    685e:	b084      	sub	sp, #16
    6860:	af00      	add	r7, sp, #0
    6862:	0002      	movs	r2, r0
    6864:	1dfb      	adds	r3, r7, #7
    6866:	701a      	strb	r2, [r3, #0]
    6868:	1dbb      	adds	r3, r7, #6
    686a:	1c0a      	adds	r2, r1, #0
    686c:	701a      	strb	r2, [r3, #0]
	uint8_t address = offset + BQ27441_EXTENDED_BLOCKDATA;
    686e:	230f      	movs	r3, #15
    6870:	18fb      	adds	r3, r7, r3
    6872:	1dfa      	adds	r2, r7, #7
    6874:	7812      	ldrb	r2, [r2, #0]
    6876:	3240      	adds	r2, #64	; 0x40
    6878:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(address, &data, 1);
    687a:	1db9      	adds	r1, r7, #6
    687c:	230f      	movs	r3, #15
    687e:	18fb      	adds	r3, r7, r3
    6880:	781b      	ldrb	r3, [r3, #0]
    6882:	2201      	movs	r2, #1
    6884:	0018      	movs	r0, r3
    6886:	4b05      	ldr	r3, [pc, #20]	; (689c <writeBlockData+0x40>)
    6888:	4798      	blx	r3
    688a:	0003      	movs	r3, r0
    688c:	1e5a      	subs	r2, r3, #1
    688e:	4193      	sbcs	r3, r2
    6890:	b2db      	uxtb	r3, r3
}
    6892:	0018      	movs	r0, r3
    6894:	46bd      	mov	sp, r7
    6896:	b004      	add	sp, #16
    6898:	bd80      	pop	{r7, pc}
    689a:	46c0      	nop			; (mov r8, r8)
    689c:	00006b55 	.word	0x00006b55

000068a0 <computeBlockChecksum>:

// Read all 32 bytes of the loaded extended data and compute a 
// checksum based on the values.
uint8_t computeBlockChecksum(void)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b08a      	sub	sp, #40	; 0x28
    68a4:	af00      	add	r7, sp, #0
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);
    68a6:	003b      	movs	r3, r7
    68a8:	2220      	movs	r2, #32
    68aa:	0019      	movs	r1, r3
    68ac:	2040      	movs	r0, #64	; 0x40
    68ae:	4b14      	ldr	r3, [pc, #80]	; (6900 <computeBlockChecksum+0x60>)
    68b0:	4798      	blx	r3

	uint8_t csum = 0;
    68b2:	2327      	movs	r3, #39	; 0x27
    68b4:	18fb      	adds	r3, r7, r3
    68b6:	2200      	movs	r2, #0
    68b8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<32; i++)
    68ba:	2300      	movs	r3, #0
    68bc:	623b      	str	r3, [r7, #32]
    68be:	e00d      	b.n	68dc <computeBlockChecksum+0x3c>
	{
		csum += data[i];
    68c0:	003a      	movs	r2, r7
    68c2:	6a3b      	ldr	r3, [r7, #32]
    68c4:	18d3      	adds	r3, r2, r3
    68c6:	7819      	ldrb	r1, [r3, #0]
    68c8:	2327      	movs	r3, #39	; 0x27
    68ca:	18fb      	adds	r3, r7, r3
    68cc:	2227      	movs	r2, #39	; 0x27
    68ce:	18ba      	adds	r2, r7, r2
    68d0:	7812      	ldrb	r2, [r2, #0]
    68d2:	188a      	adds	r2, r1, r2
    68d4:	701a      	strb	r2, [r3, #0]
{
	uint8_t data[32];
	i2cReadBytes(BQ27441_EXTENDED_BLOCKDATA, data, 32);

	uint8_t csum = 0;
	for (int i=0; i<32; i++)
    68d6:	6a3b      	ldr	r3, [r7, #32]
    68d8:	3301      	adds	r3, #1
    68da:	623b      	str	r3, [r7, #32]
    68dc:	6a3b      	ldr	r3, [r7, #32]
    68de:	2b1f      	cmp	r3, #31
    68e0:	ddee      	ble.n	68c0 <computeBlockChecksum+0x20>
	{
		csum += data[i];
	}
	csum = 255 - csum;
    68e2:	2327      	movs	r3, #39	; 0x27
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	2227      	movs	r2, #39	; 0x27
    68e8:	18ba      	adds	r2, r7, r2
    68ea:	7812      	ldrb	r2, [r2, #0]
    68ec:	43d2      	mvns	r2, r2
    68ee:	701a      	strb	r2, [r3, #0]
	
	return csum;
    68f0:	2327      	movs	r3, #39	; 0x27
    68f2:	18fb      	adds	r3, r7, r3
    68f4:	781b      	ldrb	r3, [r3, #0]
}
    68f6:	0018      	movs	r0, r3
    68f8:	46bd      	mov	sp, r7
    68fa:	b00a      	add	sp, #40	; 0x28
    68fc:	bd80      	pop	{r7, pc}
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	00006a55 	.word	0x00006a55

00006904 <writeBlockChecksum>:

// Use the BlockDataCheckSum() command to write a checksum value
bool writeBlockChecksum(uint8_t csum)
{
    6904:	b580      	push	{r7, lr}
    6906:	b082      	sub	sp, #8
    6908:	af00      	add	r7, sp, #0
    690a:	0002      	movs	r2, r0
    690c:	1dfb      	adds	r3, r7, #7
    690e:	701a      	strb	r2, [r3, #0]
	return i2cWriteBytes(BQ27441_EXTENDED_CHECKSUM, &csum, 1);	
    6910:	1dfb      	adds	r3, r7, #7
    6912:	2201      	movs	r2, #1
    6914:	0019      	movs	r1, r3
    6916:	2060      	movs	r0, #96	; 0x60
    6918:	4b04      	ldr	r3, [pc, #16]	; (692c <writeBlockChecksum+0x28>)
    691a:	4798      	blx	r3
    691c:	0003      	movs	r3, r0
    691e:	1e5a      	subs	r2, r3, #1
    6920:	4193      	sbcs	r3, r2
    6922:	b2db      	uxtb	r3, r3
}
    6924:	0018      	movs	r0, r3
    6926:	46bd      	mov	sp, r7
    6928:	b002      	add	sp, #8
    692a:	bd80      	pop	{r7, pc}
    692c:	00006b55 	.word	0x00006b55

00006930 <writeExtendedData>:
}

// Write a specified number of bytes to extended data specifying a 
// class ID, position offset.
bool writeExtendedData(uint8_t classID, uint8_t offset, uint8_t * data, uint8_t len)
{
    6930:	b590      	push	{r4, r7, lr}
    6932:	b085      	sub	sp, #20
    6934:	af00      	add	r7, sp, #0
    6936:	0004      	movs	r4, r0
    6938:	0008      	movs	r0, r1
    693a:	603a      	str	r2, [r7, #0]
    693c:	0019      	movs	r1, r3
    693e:	1dfb      	adds	r3, r7, #7
    6940:	1c22      	adds	r2, r4, #0
    6942:	701a      	strb	r2, [r3, #0]
    6944:	1dbb      	adds	r3, r7, #6
    6946:	1c02      	adds	r2, r0, #0
    6948:	701a      	strb	r2, [r3, #0]
    694a:	1d7b      	adds	r3, r7, #5
    694c:	1c0a      	adds	r2, r1, #0
    694e:	701a      	strb	r2, [r3, #0]
	if (len > 32)
    6950:	1d7b      	adds	r3, r7, #5
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	2b20      	cmp	r3, #32
    6956:	d901      	bls.n	695c <writeExtendedData+0x2c>
		return false;
    6958:	2300      	movs	r3, #0
    695a:	e063      	b.n	6a24 <writeExtendedData+0xf4>
	
	if (!_userConfigControl) enterConfig(false);
    695c:	4b33      	ldr	r3, [pc, #204]	; (6a2c <writeExtendedData+0xfc>)
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	2201      	movs	r2, #1
    6962:	4053      	eors	r3, r2
    6964:	b2db      	uxtb	r3, r3
    6966:	2b00      	cmp	r3, #0
    6968:	d002      	beq.n	6970 <writeExtendedData+0x40>
    696a:	2000      	movs	r0, #0
    696c:	4b30      	ldr	r3, [pc, #192]	; (6a30 <writeExtendedData+0x100>)
    696e:	4798      	blx	r3
	
	if (!blockDataControl()) // // enable block data memory control
    6970:	4b30      	ldr	r3, [pc, #192]	; (6a34 <writeExtendedData+0x104>)
    6972:	4798      	blx	r3
    6974:	0003      	movs	r3, r0
    6976:	001a      	movs	r2, r3
    6978:	2301      	movs	r3, #1
    697a:	4053      	eors	r3, r2
    697c:	b2db      	uxtb	r3, r3
    697e:	2b00      	cmp	r3, #0
    6980:	d001      	beq.n	6986 <writeExtendedData+0x56>
		return false; // Return false if enable fails
    6982:	2300      	movs	r3, #0
    6984:	e04e      	b.n	6a24 <writeExtendedData+0xf4>
	if (!blockDataClass(classID)) // Write class ID using DataBlockClass()
    6986:	1dfb      	adds	r3, r7, #7
    6988:	781b      	ldrb	r3, [r3, #0]
    698a:	0018      	movs	r0, r3
    698c:	4b2a      	ldr	r3, [pc, #168]	; (6a38 <writeExtendedData+0x108>)
    698e:	4798      	blx	r3
    6990:	0003      	movs	r3, r0
    6992:	001a      	movs	r2, r3
    6994:	2301      	movs	r3, #1
    6996:	4053      	eors	r3, r2
    6998:	b2db      	uxtb	r3, r3
    699a:	2b00      	cmp	r3, #0
    699c:	d001      	beq.n	69a2 <writeExtendedData+0x72>
		return false;
    699e:	2300      	movs	r3, #0
    69a0:	e040      	b.n	6a24 <writeExtendedData+0xf4>
	
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
    69a2:	1dbb      	adds	r3, r7, #6
    69a4:	781b      	ldrb	r3, [r3, #0]
    69a6:	095b      	lsrs	r3, r3, #5
    69a8:	b2db      	uxtb	r3, r3
    69aa:	0018      	movs	r0, r3
    69ac:	4b23      	ldr	r3, [pc, #140]	; (6a3c <writeExtendedData+0x10c>)
    69ae:	4798      	blx	r3
	computeBlockChecksum(); // Compute checksum going in
    69b0:	4b23      	ldr	r3, [pc, #140]	; (6a40 <writeExtendedData+0x110>)
    69b2:	4798      	blx	r3
	uint8_t oldCsum = blockDataChecksum();
    69b4:	230b      	movs	r3, #11
    69b6:	18fc      	adds	r4, r7, r3
    69b8:	4b22      	ldr	r3, [pc, #136]	; (6a44 <writeExtendedData+0x114>)
    69ba:	4798      	blx	r3
    69bc:	0003      	movs	r3, r0
    69be:	7023      	strb	r3, [r4, #0]

	// Write data bytes:
	for (int i = 0; i < len; i++)
    69c0:	2300      	movs	r3, #0
    69c2:	60fb      	str	r3, [r7, #12]
    69c4:	e012      	b.n	69ec <writeExtendedData+0xbc>
	{
		// Write to offset, mod 32 if offset is greater than 32
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
    69c6:	1dbb      	adds	r3, r7, #6
    69c8:	781b      	ldrb	r3, [r3, #0]
    69ca:	221f      	movs	r2, #31
    69cc:	4013      	ands	r3, r2
    69ce:	b2da      	uxtb	r2, r3
    69d0:	68fb      	ldr	r3, [r7, #12]
    69d2:	b2db      	uxtb	r3, r3
    69d4:	18d3      	adds	r3, r2, r3
    69d6:	b2d8      	uxtb	r0, r3
    69d8:	68fb      	ldr	r3, [r7, #12]
    69da:	683a      	ldr	r2, [r7, #0]
    69dc:	18d3      	adds	r3, r2, r3
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	0019      	movs	r1, r3
    69e2:	4b19      	ldr	r3, [pc, #100]	; (6a48 <writeExtendedData+0x118>)
    69e4:	4798      	blx	r3
	blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
	computeBlockChecksum(); // Compute checksum going in
	uint8_t oldCsum = blockDataChecksum();

	// Write data bytes:
	for (int i = 0; i < len; i++)
    69e6:	68fb      	ldr	r3, [r7, #12]
    69e8:	3301      	adds	r3, #1
    69ea:	60fb      	str	r3, [r7, #12]
    69ec:	1d7b      	adds	r3, r7, #5
    69ee:	781a      	ldrb	r2, [r3, #0]
    69f0:	68fb      	ldr	r3, [r7, #12]
    69f2:	429a      	cmp	r2, r3
    69f4:	dce7      	bgt.n	69c6 <writeExtendedData+0x96>
		// The blockDataOffset above sets the 32-bit block
		writeBlockData((offset % 32) + i, data[i]);
	}
	
	// Write new checksum using BlockDataChecksum (0x60)
	uint8_t newCsum = computeBlockChecksum(); // Compute the new checksum
    69f6:	230a      	movs	r3, #10
    69f8:	18fc      	adds	r4, r7, r3
    69fa:	4b11      	ldr	r3, [pc, #68]	; (6a40 <writeExtendedData+0x110>)
    69fc:	4798      	blx	r3
    69fe:	0003      	movs	r3, r0
    6a00:	7023      	strb	r3, [r4, #0]
	writeBlockChecksum(newCsum);
    6a02:	230a      	movs	r3, #10
    6a04:	18fb      	adds	r3, r7, r3
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	0018      	movs	r0, r3
    6a0a:	4b10      	ldr	r3, [pc, #64]	; (6a4c <writeExtendedData+0x11c>)
    6a0c:	4798      	blx	r3

	if (!_userConfigControl) exitConfig(true);
    6a0e:	4b07      	ldr	r3, [pc, #28]	; (6a2c <writeExtendedData+0xfc>)
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	2201      	movs	r2, #1
    6a14:	4053      	eors	r3, r2
    6a16:	b2db      	uxtb	r3, r3
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d002      	beq.n	6a22 <writeExtendedData+0xf2>
    6a1c:	2001      	movs	r0, #1
    6a1e:	4b0c      	ldr	r3, [pc, #48]	; (6a50 <writeExtendedData+0x120>)
    6a20:	4798      	blx	r3
	
	return true;
    6a22:	2301      	movs	r3, #1
}
    6a24:	0018      	movs	r0, r3
    6a26:	46bd      	mov	sp, r7
    6a28:	b005      	add	sp, #20
    6a2a:	bd90      	pop	{r4, r7, pc}
    6a2c:	20000172 	.word	0x20000172
    6a30:	00006445 	.word	0x00006445
    6a34:	000067b5 	.word	0x000067b5
    6a38:	000067e1 	.word	0x000067e1
    6a3c:	0000680d 	.word	0x0000680d
    6a40:	000068a1 	.word	0x000068a1
    6a44:	00006839 	.word	0x00006839
    6a48:	0000685d 	.word	0x0000685d
    6a4c:	00006905 	.word	0x00006905
    6a50:	000064f9 	.word	0x000064f9

00006a54 <i2cReadBytes>:
 ************************ I2C Read and Write Routines ************************
 *****************************************************************************/

// Read a specified number of bytes over I2C at a given subAddress
int16_t i2cReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    6a54:	b580      	push	{r7, lr}
    6a56:	b086      	sub	sp, #24
    6a58:	af00      	add	r7, sp, #0
    6a5a:	6039      	str	r1, [r7, #0]
    6a5c:	0011      	movs	r1, r2
    6a5e:	1dfb      	adds	r3, r7, #7
    6a60:	1c02      	adds	r2, r0, #0
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	1dbb      	adds	r3, r7, #6
    6a66:	1c0a      	adds	r2, r1, #0
    6a68:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;	
    6a6a:	2316      	movs	r3, #22
    6a6c:	18fb      	adds	r3, r7, r3
    6a6e:	22fa      	movs	r2, #250	; 0xfa
    6a70:	00d2      	lsls	r2, r2, #3
    6a72:	801a      	strh	r2, [r3, #0]

	uint8_t write_buffer = subAddress;
    6a74:	2315      	movs	r3, #21
    6a76:	18fb      	adds	r3, r7, r3
    6a78:	1dfa      	adds	r2, r7, #7
    6a7a:	7812      	ldrb	r2, [r2, #0]
    6a7c:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6a7e:	4b31      	ldr	r3, [pc, #196]	; (6b44 <i2cReadBytes+0xf0>)
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	b29a      	uxth	r2, r3
    6a84:	2308      	movs	r3, #8
    6a86:	18fb      	adds	r3, r7, r3
    6a88:	801a      	strh	r2, [r3, #0]
    6a8a:	2308      	movs	r3, #8
    6a8c:	18fb      	adds	r3, r7, r3
    6a8e:	2201      	movs	r2, #1
    6a90:	805a      	strh	r2, [r3, #2]
    6a92:	2308      	movs	r3, #8
    6a94:	18fb      	adds	r3, r7, r3
    6a96:	2215      	movs	r2, #21
    6a98:	18ba      	adds	r2, r7, r2
    6a9a:	605a      	str	r2, [r3, #4]
    6a9c:	2308      	movs	r3, #8
    6a9e:	18fb      	adds	r3, r7, r3
    6aa0:	2200      	movs	r2, #0
    6aa2:	721a      	strb	r2, [r3, #8]
    6aa4:	2308      	movs	r3, #8
    6aa6:	18fb      	adds	r3, r7, r3
    6aa8:	2200      	movs	r2, #0
    6aaa:	725a      	strb	r2, [r3, #9]
    6aac:	2308      	movs	r3, #8
    6aae:	18fb      	adds	r3, r7, r3
    6ab0:	2200      	movs	r2, #0
    6ab2:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6ab4:	e00b      	b.n	6ace <i2cReadBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    6ab6:	2316      	movs	r3, #22
    6ab8:	18fb      	adds	r3, r7, r3
    6aba:	2200      	movs	r2, #0
    6abc:	5e9b      	ldrsh	r3, [r3, r2]
    6abe:	b29a      	uxth	r2, r3
    6ac0:	3a01      	subs	r2, #1
    6ac2:	b291      	uxth	r1, r2
    6ac4:	2216      	movs	r2, #22
    6ac6:	18ba      	adds	r2, r7, r2
    6ac8:	8011      	strh	r1, [r2, #0]
    6aca:	2b00      	cmp	r3, #0
    6acc:	d109      	bne.n	6ae2 <i2cReadBytes+0x8e>
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};


	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6ace:	2308      	movs	r3, #8
    6ad0:	18fa      	adds	r2, r7, r3
    6ad2:	4b1d      	ldr	r3, [pc, #116]	; (6b48 <i2cReadBytes+0xf4>)
    6ad4:	0011      	movs	r1, r2
    6ad6:	0018      	movs	r0, r3
    6ad8:	4b1c      	ldr	r3, [pc, #112]	; (6b4c <i2cReadBytes+0xf8>)
    6ada:	4798      	blx	r3
    6adc:	1e03      	subs	r3, r0, #0
    6ade:	d1ea      	bne.n	6ab6 <i2cReadBytes+0x62>
    6ae0:	e000      	b.n	6ae4 <i2cReadBytes+0x90>
	STATUS_OK) {
		if (timeout--) {
			break;
    6ae2:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    6ae4:	2316      	movs	r3, #22
    6ae6:	18fb      	adds	r3, r7, r3
    6ae8:	22fa      	movs	r2, #250	; 0xfa
    6aea:	00d2      	lsls	r2, r2, #3
    6aec:	801a      	strh	r2, [r3, #0]
	packet.data = dest;
    6aee:	2308      	movs	r3, #8
    6af0:	18fb      	adds	r3, r7, r3
    6af2:	683a      	ldr	r2, [r7, #0]
    6af4:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6af6:	1dbb      	adds	r3, r7, #6
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	b29a      	uxth	r2, r3
    6afc:	2308      	movs	r3, #8
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	805a      	strh	r2, [r3, #2]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6b02:	e00b      	b.n	6b1c <i2cReadBytes+0xc8>
	STATUS_OK) {
		if (timeout--) {
    6b04:	2316      	movs	r3, #22
    6b06:	18fb      	adds	r3, r7, r3
    6b08:	2200      	movs	r2, #0
    6b0a:	5e9b      	ldrsh	r3, [r3, r2]
    6b0c:	b29a      	uxth	r2, r3
    6b0e:	3a01      	subs	r2, #1
    6b10:	b291      	uxth	r1, r2
    6b12:	2216      	movs	r2, #22
    6b14:	18ba      	adds	r2, r7, r2
    6b16:	8011      	strh	r1, [r2, #0]
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d109      	bne.n	6b30 <i2cReadBytes+0xdc>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = dest;
	packet.data_length = count;
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    6b1c:	2308      	movs	r3, #8
    6b1e:	18fa      	adds	r2, r7, r3
    6b20:	4b09      	ldr	r3, [pc, #36]	; (6b48 <i2cReadBytes+0xf4>)
    6b22:	0011      	movs	r1, r2
    6b24:	0018      	movs	r0, r3
    6b26:	4b0a      	ldr	r3, [pc, #40]	; (6b50 <i2cReadBytes+0xfc>)
    6b28:	4798      	blx	r3
    6b2a:	1e03      	subs	r3, r0, #0
    6b2c:	d1ea      	bne.n	6b04 <i2cReadBytes+0xb0>
    6b2e:	e000      	b.n	6b32 <i2cReadBytes+0xde>
	STATUS_OK) {
		if (timeout--) {
			break;
    6b30:	46c0      	nop			; (mov r8, r8)
		{
			dest[i] = Wire.read();
		}
	}*/
	
	return timeout;
    6b32:	2316      	movs	r3, #22
    6b34:	18fb      	adds	r3, r7, r3
    6b36:	2200      	movs	r2, #0
    6b38:	5e9b      	ldrsh	r3, [r3, r2]
}
    6b3a:	0018      	movs	r0, r3
    6b3c:	46bd      	mov	sp, r7
    6b3e:	b006      	add	sp, #24
    6b40:	bd80      	pop	{r7, pc}
    6b42:	46c0      	nop			; (mov r8, r8)
    6b44:	20000171 	.word	0x20000171
    6b48:	200001fc 	.word	0x200001fc
    6b4c:	00001b55 	.word	0x00001b55
    6b50:	0000199d 	.word	0x0000199d

00006b54 <i2cWriteBytes>:

// Write a specified number of bytes over I2C to a given subAddress
uint16_t i2cWriteBytes(uint8_t subAddress, uint8_t * src, uint8_t count)
{
    6b54:	b580      	push	{r7, lr}
    6b56:	b086      	sub	sp, #24
    6b58:	af00      	add	r7, sp, #0
    6b5a:	6039      	str	r1, [r7, #0]
    6b5c:	0011      	movs	r1, r2
    6b5e:	1dfb      	adds	r3, r7, #7
    6b60:	1c02      	adds	r2, r0, #0
    6b62:	701a      	strb	r2, [r3, #0]
    6b64:	1dbb      	adds	r3, r7, #6
    6b66:	1c0a      	adds	r2, r1, #0
    6b68:	701a      	strb	r2, [r3, #0]
	int16_t timeout = BQ72441_I2C_TIMEOUT;
    6b6a:	2316      	movs	r3, #22
    6b6c:	18fb      	adds	r3, r7, r3
    6b6e:	22fa      	movs	r2, #250	; 0xfa
    6b70:	00d2      	lsls	r2, r2, #3
    6b72:	801a      	strh	r2, [r3, #0]
	
	uint8_t write_buffer = subAddress;
    6b74:	2315      	movs	r3, #21
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	1dfa      	adds	r2, r7, #7
    6b7a:	7812      	ldrb	r2, [r2, #0]
    6b7c:	701a      	strb	r2, [r3, #0]

	struct i2c_master_packet packet = {
    6b7e:	4b2f      	ldr	r3, [pc, #188]	; (6c3c <i2cWriteBytes+0xe8>)
    6b80:	781b      	ldrb	r3, [r3, #0]
    6b82:	b29a      	uxth	r2, r3
    6b84:	2308      	movs	r3, #8
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	801a      	strh	r2, [r3, #0]
    6b8a:	2308      	movs	r3, #8
    6b8c:	18fb      	adds	r3, r7, r3
    6b8e:	2201      	movs	r2, #1
    6b90:	805a      	strh	r2, [r3, #2]
    6b92:	2308      	movs	r3, #8
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	2215      	movs	r2, #21
    6b98:	18ba      	adds	r2, r7, r2
    6b9a:	605a      	str	r2, [r3, #4]
    6b9c:	2308      	movs	r3, #8
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	2200      	movs	r2, #0
    6ba2:	721a      	strb	r2, [r3, #8]
    6ba4:	2308      	movs	r3, #8
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	2200      	movs	r2, #0
    6baa:	725a      	strb	r2, [r3, #9]
    6bac:	2308      	movs	r3, #8
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	2200      	movs	r2, #0
    6bb2:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6bb4:	e00b      	b.n	6bce <i2cWriteBytes+0x7a>
	STATUS_OK) {
		if (timeout--) {
    6bb6:	2316      	movs	r3, #22
    6bb8:	18fb      	adds	r3, r7, r3
    6bba:	2200      	movs	r2, #0
    6bbc:	5e9b      	ldrsh	r3, [r3, r2]
    6bbe:	b29a      	uxth	r2, r3
    6bc0:	3a01      	subs	r2, #1
    6bc2:	b291      	uxth	r1, r2
    6bc4:	2216      	movs	r2, #22
    6bc6:	18ba      	adds	r2, r7, r2
    6bc8:	8011      	strh	r1, [r2, #0]
    6bca:	2b00      	cmp	r3, #0
    6bcc:	d109      	bne.n	6be2 <i2cWriteBytes+0x8e>
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6bce:	2308      	movs	r3, #8
    6bd0:	18fa      	adds	r2, r7, r3
    6bd2:	4b1b      	ldr	r3, [pc, #108]	; (6c40 <i2cWriteBytes+0xec>)
    6bd4:	0011      	movs	r1, r2
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b1a      	ldr	r3, [pc, #104]	; (6c44 <i2cWriteBytes+0xf0>)
    6bda:	4798      	blx	r3
    6bdc:	1e03      	subs	r3, r0, #0
    6bde:	d1ea      	bne.n	6bb6 <i2cWriteBytes+0x62>
    6be0:	e000      	b.n	6be4 <i2cWriteBytes+0x90>
	STATUS_OK) {
		if (timeout--) {
			break;
    6be2:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
    6be4:	2316      	movs	r3, #22
    6be6:	18fb      	adds	r3, r7, r3
    6be8:	22fa      	movs	r2, #250	; 0xfa
    6bea:	00d2      	lsls	r2, r2, #3
    6bec:	801a      	strh	r2, [r3, #0]
	packet.data = src;
    6bee:	2308      	movs	r3, #8
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	683a      	ldr	r2, [r7, #0]
    6bf4:	605a      	str	r2, [r3, #4]
	packet.data_length = count;
    6bf6:	1dbb      	adds	r3, r7, #6
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	b29a      	uxth	r2, r3
    6bfc:	2308      	movs	r3, #8
    6bfe:	18fb      	adds	r3, r7, r3
    6c00:	805a      	strh	r2, [r3, #2]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6c02:	e00b      	b.n	6c1c <i2cWriteBytes+0xc8>
	STATUS_OK) {
		if (timeout--) {
    6c04:	2316      	movs	r3, #22
    6c06:	18fb      	adds	r3, r7, r3
    6c08:	2200      	movs	r2, #0
    6c0a:	5e9b      	ldrsh	r3, [r3, r2]
    6c0c:	b29a      	uxth	r2, r3
    6c0e:	3a01      	subs	r2, #1
    6c10:	b291      	uxth	r1, r2
    6c12:	2216      	movs	r2, #22
    6c14:	18ba      	adds	r2, r7, r2
    6c16:	8011      	strh	r1, [r2, #0]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d109      	bne.n	6c30 <i2cWriteBytes+0xdc>
	}
	
	timeout = BQ72441_I2C_TIMEOUT;
	packet.data = src;
	packet.data_length = count;
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    6c1c:	2308      	movs	r3, #8
    6c1e:	18fa      	adds	r2, r7, r3
    6c20:	4b07      	ldr	r3, [pc, #28]	; (6c40 <i2cWriteBytes+0xec>)
    6c22:	0011      	movs	r1, r2
    6c24:	0018      	movs	r0, r3
    6c26:	4b07      	ldr	r3, [pc, #28]	; (6c44 <i2cWriteBytes+0xf0>)
    6c28:	4798      	blx	r3
    6c2a:	1e03      	subs	r3, r0, #0
    6c2c:	d1ea      	bne.n	6c04 <i2cWriteBytes+0xb0>
    6c2e:	e000      	b.n	6c32 <i2cWriteBytes+0xde>
	STATUS_OK) {
		if (timeout--) {
			break;
    6c30:	46c0      	nop			; (mov r8, r8)
	{
		Wire.write(src[i]);
	}	
	Wire.endTransmission(true);*/
	
	return true;	
    6c32:	2301      	movs	r3, #1
}
    6c34:	0018      	movs	r0, r3
    6c36:	46bd      	mov	sp, r7
    6c38:	b006      	add	sp, #24
    6c3a:	bd80      	pop	{r7, pc}
    6c3c:	20000171 	.word	0x20000171
    6c40:	200001fc 	.word	0x200001fc
    6c44:	00001b55 	.word	0x00001b55

00006c48 <configure_LED_PWM>:
void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b0aa      	sub	sp, #168	; 0xa8
    6c4c:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    6c4e:	4a32      	ldr	r2, [pc, #200]	; (6d18 <configure_LED_PWM+0xd0>)
    6c50:	1d3b      	adds	r3, r7, #4
    6c52:	0011      	movs	r1, r2
    6c54:	0018      	movs	r0, r3
    6c56:	4b31      	ldr	r3, [pc, #196]	; (6d1c <configure_LED_PWM+0xd4>)
    6c58:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6c5a:	1d3b      	adds	r3, r7, #4
    6c5c:	4a30      	ldr	r2, [pc, #192]	; (6d20 <configure_LED_PWM+0xd8>)
    6c5e:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6c60:	1d3b      	adds	r3, r7, #4
    6c62:	2202      	movs	r2, #2
    6c64:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6c66:	1d3b      	adds	r3, r7, #4
    6c68:	2200      	movs	r2, #0
    6c6a:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6c6c:	1d3b      	adds	r3, r7, #4
    6c6e:	2200      	movs	r2, #0
    6c70:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6c72:	1d3b      	adds	r3, r7, #4
    6c74:	2298      	movs	r2, #152	; 0x98
    6c76:	2101      	movs	r1, #1
    6c78:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6c7a:	1d3b      	adds	r3, r7, #4
    6c7c:	2299      	movs	r2, #153	; 0x99
    6c7e:	2101      	movs	r1, #1
    6c80:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    6c82:	1d3b      	adds	r3, r7, #4
    6c84:	2215      	movs	r2, #21
    6c86:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    6c88:	1d3b      	adds	r3, r7, #4
    6c8a:	220e      	movs	r2, #14
    6c8c:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    6c8e:	1d3b      	adds	r3, r7, #4
    6c90:	2205      	movs	r2, #5
    6c92:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    6c94:	1d3b      	adds	r3, r7, #4
    6c96:	2205      	movs	r2, #5
    6c98:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    6c9a:	1d3a      	adds	r2, r7, #4
    6c9c:	491e      	ldr	r1, [pc, #120]	; (6d18 <configure_LED_PWM+0xd0>)
    6c9e:	4b21      	ldr	r3, [pc, #132]	; (6d24 <configure_LED_PWM+0xdc>)
    6ca0:	0018      	movs	r0, r3
    6ca2:	4b21      	ldr	r3, [pc, #132]	; (6d28 <configure_LED_PWM+0xe0>)
    6ca4:	4798      	blx	r3
	tcc_enable(&tcc0);
    6ca6:	4b1f      	ldr	r3, [pc, #124]	; (6d24 <configure_LED_PWM+0xdc>)
    6ca8:	0018      	movs	r0, r3
    6caa:	4b20      	ldr	r3, [pc, #128]	; (6d2c <configure_LED_PWM+0xe4>)
    6cac:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    6cae:	4a20      	ldr	r2, [pc, #128]	; (6d30 <configure_LED_PWM+0xe8>)
    6cb0:	1d3b      	adds	r3, r7, #4
    6cb2:	0011      	movs	r1, r2
    6cb4:	0018      	movs	r0, r3
    6cb6:	4b19      	ldr	r3, [pc, #100]	; (6d1c <configure_LED_PWM+0xd4>)
    6cb8:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    6cba:	1d3b      	adds	r3, r7, #4
    6cbc:	4a18      	ldr	r2, [pc, #96]	; (6d20 <configure_LED_PWM+0xd8>)
    6cbe:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    6cc0:	1d3b      	adds	r3, r7, #4
    6cc2:	2202      	movs	r2, #2
    6cc4:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    6cc6:	1d3b      	adds	r3, r7, #4
    6cc8:	2200      	movs	r2, #0
    6cca:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    6ccc:	1d3b      	adds	r3, r7, #4
    6cce:	2200      	movs	r2, #0
    6cd0:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    6cd2:	1d3b      	adds	r3, r7, #4
    6cd4:	2298      	movs	r2, #152	; 0x98
    6cd6:	2101      	movs	r1, #1
    6cd8:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    6cda:	1d3b      	adds	r3, r7, #4
    6cdc:	2299      	movs	r2, #153	; 0x99
    6cde:	2101      	movs	r1, #1
    6ce0:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    6ce2:	1d3b      	adds	r3, r7, #4
    6ce4:	2208      	movs	r2, #8
    6ce6:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    6ce8:	1d3b      	adds	r3, r7, #4
    6cea:	2207      	movs	r2, #7
    6cec:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    6cee:	1d3b      	adds	r3, r7, #4
    6cf0:	2205      	movs	r2, #5
    6cf2:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    6cf4:	1d3b      	adds	r3, r7, #4
    6cf6:	2204      	movs	r2, #4
    6cf8:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    6cfa:	1d3a      	adds	r2, r7, #4
    6cfc:	490c      	ldr	r1, [pc, #48]	; (6d30 <configure_LED_PWM+0xe8>)
    6cfe:	4b0d      	ldr	r3, [pc, #52]	; (6d34 <configure_LED_PWM+0xec>)
    6d00:	0018      	movs	r0, r3
    6d02:	4b09      	ldr	r3, [pc, #36]	; (6d28 <configure_LED_PWM+0xe0>)
    6d04:	4798      	blx	r3
	tcc_enable(&tcc1);
    6d06:	4b0b      	ldr	r3, [pc, #44]	; (6d34 <configure_LED_PWM+0xec>)
    6d08:	0018      	movs	r0, r3
    6d0a:	4b08      	ldr	r3, [pc, #32]	; (6d2c <configure_LED_PWM+0xe4>)
    6d0c:	4798      	blx	r3
}
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	46bd      	mov	sp, r7
    6d12:	b02a      	add	sp, #168	; 0xa8
    6d14:	bd80      	pop	{r7, pc}
    6d16:	46c0      	nop			; (mov r8, r8)
    6d18:	42002000 	.word	0x42002000
    6d1c:	00002151 	.word	0x00002151
    6d20:	0000ffff 	.word	0x0000ffff
    6d24:	20000130 	.word	0x20000130
    6d28:	000027ad 	.word	0x000027ad
    6d2c:	00005385 	.word	0x00005385
    6d30:	42002400 	.word	0x42002400
    6d34:	20000270 	.word	0x20000270

00006d38 <configure_IO_pins>:
///////////////////////////////////////////////////////////////////////////

// Configure the LED selection port as output
void configure_IO_pins(void)
{
    6d38:	b580      	push	{r7, lr}
    6d3a:	b082      	sub	sp, #8
    6d3c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    6d3e:	1d3b      	adds	r3, r7, #4
    6d40:	0018      	movs	r0, r3
    6d42:	4b26      	ldr	r3, [pc, #152]	; (6ddc <configure_IO_pins+0xa4>)
    6d44:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    6d46:	1d3b      	adds	r3, r7, #4
    6d48:	2200      	movs	r2, #0
    6d4a:	701a      	strb	r2, [r3, #0]
	// Right Arrow Button
	port_pin_set_config(PIN_PA04, &config_port_pin);
    6d4c:	1d3b      	adds	r3, r7, #4
    6d4e:	0019      	movs	r1, r3
    6d50:	2004      	movs	r0, #4
    6d52:	4b23      	ldr	r3, [pc, #140]	; (6de0 <configure_IO_pins+0xa8>)
    6d54:	4798      	blx	r3
	// Hall Up*
	port_pin_set_config(PIN_PA06, &config_port_pin);
    6d56:	1d3b      	adds	r3, r7, #4
    6d58:	0019      	movs	r1, r3
    6d5a:	2006      	movs	r0, #6
    6d5c:	4b20      	ldr	r3, [pc, #128]	; (6de0 <configure_IO_pins+0xa8>)
    6d5e:	4798      	blx	r3
	// Hall Down*
	port_pin_set_config(PIN_PA09, &config_port_pin);
    6d60:	1d3b      	adds	r3, r7, #4
    6d62:	0019      	movs	r1, r3
    6d64:	2009      	movs	r0, #9
    6d66:	4b1e      	ldr	r3, [pc, #120]	; (6de0 <configure_IO_pins+0xa8>)
    6d68:	4798      	blx	r3
	// Hall Left*
	port_pin_set_config(PIN_PA10, &config_port_pin);
    6d6a:	1d3b      	adds	r3, r7, #4
    6d6c:	0019      	movs	r1, r3
    6d6e:	200a      	movs	r0, #10
    6d70:	4b1b      	ldr	r3, [pc, #108]	; (6de0 <configure_IO_pins+0xa8>)
    6d72:	4798      	blx	r3
	// Hall Right*
	port_pin_set_config(PIN_PA11, &config_port_pin);
    6d74:	1d3b      	adds	r3, r7, #4
    6d76:	0019      	movs	r1, r3
    6d78:	200b      	movs	r0, #11
    6d7a:	4b19      	ldr	r3, [pc, #100]	; (6de0 <configure_IO_pins+0xa8>)
    6d7c:	4798      	blx	r3
	// Down Arrow Button
	port_pin_set_config(PIN_PA12, &config_port_pin);
    6d7e:	1d3b      	adds	r3, r7, #4
    6d80:	0019      	movs	r1, r3
    6d82:	200c      	movs	r0, #12
    6d84:	4b16      	ldr	r3, [pc, #88]	; (6de0 <configure_IO_pins+0xa8>)
    6d86:	4798      	blx	r3
	// Scroll Button
	port_pin_set_config(PIN_PA13, &config_port_pin);
    6d88:	1d3b      	adds	r3, r7, #4
    6d8a:	0019      	movs	r1, r3
    6d8c:	200d      	movs	r0, #13
    6d8e:	4b14      	ldr	r3, [pc, #80]	; (6de0 <configure_IO_pins+0xa8>)
    6d90:	4798      	blx	r3
	// Right Mouse Button
	port_pin_set_config(PIN_PA15, &config_port_pin);
    6d92:	1d3b      	adds	r3, r7, #4
    6d94:	0019      	movs	r1, r3
    6d96:	200f      	movs	r0, #15
    6d98:	4b11      	ldr	r3, [pc, #68]	; (6de0 <configure_IO_pins+0xa8>)
    6d9a:	4798      	blx	r3
	// Up Arrow Button
	port_pin_set_config(PIN_PA20, &config_port_pin);
    6d9c:	1d3b      	adds	r3, r7, #4
    6d9e:	0019      	movs	r1, r3
    6da0:	2014      	movs	r0, #20
    6da2:	4b0f      	ldr	r3, [pc, #60]	; (6de0 <configure_IO_pins+0xa8>)
    6da4:	4798      	blx	r3
	// Left Mouse Button
	port_pin_set_config(PIN_PB02, &config_port_pin);
    6da6:	1d3b      	adds	r3, r7, #4
    6da8:	0019      	movs	r1, r3
    6daa:	2022      	movs	r0, #34	; 0x22
    6dac:	4b0c      	ldr	r3, [pc, #48]	; (6de0 <configure_IO_pins+0xa8>)
    6dae:	4798      	blx	r3
	// Laser Button
	port_pin_set_config(PIN_PB03, &config_port_pin);
    6db0:	1d3b      	adds	r3, r7, #4
    6db2:	0019      	movs	r1, r3
    6db4:	2023      	movs	r0, #35	; 0x23
    6db6:	4b0a      	ldr	r3, [pc, #40]	; (6de0 <configure_IO_pins+0xa8>)
    6db8:	4798      	blx	r3
	// Left Arrow Button
	port_pin_set_config(PIN_PB09, &config_port_pin);
    6dba:	1d3b      	adds	r3, r7, #4
    6dbc:	0019      	movs	r1, r3
    6dbe:	2029      	movs	r0, #41	; 0x29
    6dc0:	4b07      	ldr	r3, [pc, #28]	; (6de0 <configure_IO_pins+0xa8>)
    6dc2:	4798      	blx	r3
	// Laser Output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    6dc4:	1d3b      	adds	r3, r7, #4
    6dc6:	2201      	movs	r2, #1
    6dc8:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB08, &config_port_pin);
    6dca:	1d3b      	adds	r3, r7, #4
    6dcc:	0019      	movs	r1, r3
    6dce:	2028      	movs	r0, #40	; 0x28
    6dd0:	4b03      	ldr	r3, [pc, #12]	; (6de0 <configure_IO_pins+0xa8>)
    6dd2:	4798      	blx	r3
}
    6dd4:	46c0      	nop			; (mov r8, r8)
    6dd6:	46bd      	mov	sp, r7
    6dd8:	b002      	add	sp, #8
    6dda:	bd80      	pop	{r7, pc}
    6ddc:	00004f4d 	.word	0x00004f4d
    6de0:	00004031 	.word	0x00004031

00006de4 <main>:


int main (void)
{
    6de4:	b590      	push	{r4, r7, lr}
    6de6:	b08b      	sub	sp, #44	; 0x2c
    6de8:	af00      	add	r7, sp, #0
	int receivingNode = 0;
    6dea:	2300      	movs	r3, #0
    6dec:	61fb      	str	r3, [r7, #28]
	bool calibrationLEDS = false;
    6dee:	2327      	movs	r3, #39	; 0x27
    6df0:	18fb      	adds	r3, r7, r3
    6df2:	2200      	movs	r2, #0
    6df4:	701a      	strb	r2, [r3, #0]

	uint16_t state = 0;
    6df6:	231a      	movs	r3, #26
    6df8:	18fb      	adds	r3, r7, r3
    6dfa:	2200      	movs	r2, #0
    6dfc:	801a      	strh	r2, [r3, #0]
	
    /* Initialize system */
	system_init();
    6dfe:	4b98      	ldr	r3, [pc, #608]	; (7060 <main+0x27c>)
    6e00:	4798      	blx	r3
	configure_LED_PWM();
    6e02:	4b98      	ldr	r3, [pc, #608]	; (7064 <main+0x280>)
    6e04:	4798      	blx	r3
	configure_IO_pins();
    6e06:	4b98      	ldr	r3, [pc, #608]	; (7068 <main+0x284>)
    6e08:	4798      	blx	r3
	

	if(!lipo_begin())
    6e0a:	4b98      	ldr	r3, [pc, #608]	; (706c <main+0x288>)
    6e0c:	4798      	blx	r3
    6e0e:	0003      	movs	r3, r0
    6e10:	001a      	movs	r2, r3
    6e12:	2301      	movs	r3, #1
    6e14:	4053      	eors	r3, r2
    6e16:	b2db      	uxtb	r3, r3
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d006      	beq.n	6e2a <main+0x46>
	{
		setTrackBallRGBW(0xFFFF, 0, 0, 0);
    6e1c:	4894      	ldr	r0, [pc, #592]	; (7070 <main+0x28c>)
    6e1e:	2300      	movs	r3, #0
    6e20:	2200      	movs	r2, #0
    6e22:	2100      	movs	r1, #0
    6e24:	4c93      	ldr	r4, [pc, #588]	; (7074 <main+0x290>)
    6e26:	47a0      	blx	r4
		
		for( ; ; )
		{ }
    6e28:	e7fe      	b.n	6e28 <main+0x44>
		
	}
	else
	{
		setTrackBallRGBW(0, 0xFFFF, 0, 0);
    6e2a:	4991      	ldr	r1, [pc, #580]	; (7070 <main+0x28c>)
    6e2c:	2300      	movs	r3, #0
    6e2e:	2200      	movs	r2, #0
    6e30:	2000      	movs	r0, #0
    6e32:	4c90      	ldr	r4, [pc, #576]	; (7074 <main+0x290>)
    6e34:	47a0      	blx	r4
		for(int i = 0; i < 100000; i++)
    6e36:	2300      	movs	r3, #0
    6e38:	623b      	str	r3, [r7, #32]
    6e3a:	e002      	b.n	6e42 <main+0x5e>
    6e3c:	6a3b      	ldr	r3, [r7, #32]
    6e3e:	3301      	adds	r3, #1
    6e40:	623b      	str	r3, [r7, #32]
    6e42:	6a3b      	ldr	r3, [r7, #32]
    6e44:	4a8c      	ldr	r2, [pc, #560]	; (7078 <main+0x294>)
    6e46:	4293      	cmp	r3, r2
    6e48:	ddf8      	ble.n	6e3c <main+0x58>
		{ }
	}

	lipo_setCapacity(Capacity);
    6e4a:	2396      	movs	r3, #150	; 0x96
    6e4c:	00db      	lsls	r3, r3, #3
    6e4e:	0018      	movs	r0, r3
    6e50:	4b8a      	ldr	r3, [pc, #552]	; (707c <main+0x298>)
    6e52:	4798      	blx	r3
		}
	}
	*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    6e54:	2200      	movs	r2, #0
    6e56:	2103      	movs	r1, #3
    6e58:	205b      	movs	r0, #91	; 0x5b
    6e5a:	4b89      	ldr	r3, [pc, #548]	; (7080 <main+0x29c>)
    6e5c:	4798      	blx	r3
	RFM_setHighPower(true);
    6e5e:	2001      	movs	r0, #1
    6e60:	4b88      	ldr	r3, [pc, #544]	; (7084 <main+0x2a0>)
    6e62:	4798      	blx	r3
	if (ENCRYPT){
		RFM_encrypt(ENCRYPTKEY);
    6e64:	4b88      	ldr	r3, [pc, #544]	; (7088 <main+0x2a4>)
    6e66:	0018      	movs	r0, r3
    6e68:	4b88      	ldr	r3, [pc, #544]	; (708c <main+0x2a8>)
    6e6a:	4798      	blx	r3
	}


	int sendlength = 3; //number can be increased 
    6e6c:	2303      	movs	r3, #3
    6e6e:	617b      	str	r3, [r7, #20]
	int index = 0;
    6e70:	2300      	movs	r3, #0
    6e72:	613b      	str	r3, [r7, #16]
	int8_t sendbuffer[16];

	init_wheel();
    6e74:	4b86      	ldr	r3, [pc, #536]	; (7090 <main+0x2ac>)
    6e76:	4798      	blx	r3
	
	while(1) //busy loop
	//sends data after receiving a request message from the dongle
	//sends X axis byte, Y axis byte, button byte
	{
		if (calibrationLEDS){
    6e78:	2327      	movs	r3, #39	; 0x27
    6e7a:	18fb      	adds	r3, r7, r3
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d001      	beq.n	6e86 <main+0xa2>
			ColorCycle();
    6e82:	4b84      	ldr	r3, [pc, #528]	; (7094 <main+0x2b0>)
    6e84:	4798      	blx	r3
			
		static bool button = 0;
		static bool lbutton = 0;
		static bool laserState = 0;

		button = port_pin_get_input_level(PIN_PB03);
    6e86:	2023      	movs	r0, #35	; 0x23
    6e88:	4b83      	ldr	r3, [pc, #524]	; (7098 <main+0x2b4>)
    6e8a:	4798      	blx	r3
    6e8c:	0003      	movs	r3, r0
    6e8e:	001a      	movs	r2, r3
    6e90:	4b82      	ldr	r3, [pc, #520]	; (709c <main+0x2b8>)
    6e92:	701a      	strb	r2, [r3, #0]
		if(button && !lbutton)
    6e94:	4b81      	ldr	r3, [pc, #516]	; (709c <main+0x2b8>)
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d01a      	beq.n	6ed2 <main+0xee>
    6e9c:	4b80      	ldr	r3, [pc, #512]	; (70a0 <main+0x2bc>)
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	2201      	movs	r2, #1
    6ea2:	4053      	eors	r3, r2
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d013      	beq.n	6ed2 <main+0xee>
		{
			laserState = !laserState;
    6eaa:	4b7e      	ldr	r3, [pc, #504]	; (70a4 <main+0x2c0>)
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	1e5a      	subs	r2, r3, #1
    6eb0:	4193      	sbcs	r3, r2
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	2201      	movs	r2, #1
    6eb6:	4053      	eors	r3, r2
    6eb8:	b2db      	uxtb	r3, r3
    6eba:	1c1a      	adds	r2, r3, #0
    6ebc:	2301      	movs	r3, #1
    6ebe:	4013      	ands	r3, r2
    6ec0:	b2da      	uxtb	r2, r3
    6ec2:	4b78      	ldr	r3, [pc, #480]	; (70a4 <main+0x2c0>)
    6ec4:	701a      	strb	r2, [r3, #0]
			port_pin_set_output_level(PIN_PB08, laserState);
    6ec6:	4b77      	ldr	r3, [pc, #476]	; (70a4 <main+0x2c0>)
    6ec8:	781b      	ldrb	r3, [r3, #0]
    6eca:	0019      	movs	r1, r3
    6ecc:	2028      	movs	r0, #40	; 0x28
    6ece:	4b76      	ldr	r3, [pc, #472]	; (70a8 <main+0x2c4>)
    6ed0:	4798      	blx	r3
		}

		//Do the wheel update
		update_values();
    6ed2:	4b76      	ldr	r3, [pc, #472]	; (70ac <main+0x2c8>)
    6ed4:	4798      	blx	r3
		
		getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    6ed6:	003b      	movs	r3, r7
    6ed8:	1c5a      	adds	r2, r3, #1
    6eda:	003b      	movs	r3, r7
    6edc:	0011      	movs	r1, r2
    6ede:	0018      	movs	r0, r3
    6ee0:	4b73      	ldr	r3, [pc, #460]	; (70b0 <main+0x2cc>)
    6ee2:	4798      	blx	r3
		
		lbutton = button;
    6ee4:	4b6d      	ldr	r3, [pc, #436]	; (709c <main+0x2b8>)
    6ee6:	781a      	ldrb	r2, [r3, #0]
    6ee8:	4b6d      	ldr	r3, [pc, #436]	; (70a0 <main+0x2bc>)
    6eea:	701a      	strb	r2, [r3, #0]
		//check if the RFM69 receives a  packet
		//only send info when a packet is received from dongle module			
		if (RFM_receiveDone()) // Got one!
    6eec:	4b71      	ldr	r3, [pc, #452]	; (70b4 <main+0x2d0>)
    6eee:	4798      	blx	r3
    6ef0:	1e03      	subs	r3, r0, #0
    6ef2:	d100      	bne.n	6ef6 <main+0x112>
    6ef4:	e090      	b.n	7018 <main+0x234>
		{
			receivingNode = RFM_SENDERID;
    6ef6:	4b70      	ldr	r3, [pc, #448]	; (70b8 <main+0x2d4>)
    6ef8:	881b      	ldrh	r3, [r3, #0]
    6efa:	b29b      	uxth	r3, r3
    6efc:	61fb      	str	r3, [r7, #28]
			if (RFM_DATA[0] == 'Y'){
    6efe:	4b6f      	ldr	r3, [pc, #444]	; (70bc <main+0x2d8>)
    6f00:	881b      	ldrh	r3, [r3, #0]
    6f02:	b29b      	uxth	r3, r3
    6f04:	2b59      	cmp	r3, #89	; 0x59
    6f06:	d103      	bne.n	6f10 <main+0x12c>
				calibrationLEDS = true;
    6f08:	2327      	movs	r3, #39	; 0x27
    6f0a:	18fb      	adds	r3, r7, r3
    6f0c:	2201      	movs	r2, #1
    6f0e:	701a      	strb	r2, [r3, #0]
			}
			if (RFM_DATA[0] == 'N'){
    6f10:	4b6a      	ldr	r3, [pc, #424]	; (70bc <main+0x2d8>)
    6f12:	881b      	ldrh	r3, [r3, #0]
    6f14:	b29b      	uxth	r3, r3
    6f16:	2b4e      	cmp	r3, #78	; 0x4e
    6f18:	d103      	bne.n	6f22 <main+0x13e>
				calibrationLEDS = false;
    6f1a:	2327      	movs	r3, #39	; 0x27
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	2200      	movs	r2, #0
    6f20:	701a      	strb	r2, [r3, #0]
			}
			// The actual message is contained in the RFM_DATA array,
			// and is RFM_DATALEN bytes in size:
			getScroll(&sendbuffer[0], &sendbuffer[1]); // x and y axis update
    6f22:	003b      	movs	r3, r7
    6f24:	1c5a      	adds	r2, r3, #1
    6f26:	003b      	movs	r3, r7
    6f28:	0011      	movs	r1, r2
    6f2a:	0018      	movs	r0, r3
    6f2c:	4b60      	ldr	r3, [pc, #384]	; (70b0 <main+0x2cc>)
    6f2e:	4798      	blx	r3

			sendbuffer[2] = 0;
    6f30:	003b      	movs	r3, r7
    6f32:	2200      	movs	r2, #0
    6f34:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA20) << 7); // Up
    6f36:	2014      	movs	r0, #20
    6f38:	4b57      	ldr	r3, [pc, #348]	; (7098 <main+0x2b4>)
    6f3a:	4798      	blx	r3
    6f3c:	0003      	movs	r3, r0
    6f3e:	01d9      	lsls	r1, r3, #7
    6f40:	003b      	movs	r3, r7
    6f42:	2202      	movs	r2, #2
    6f44:	569a      	ldrsb	r2, [r3, r2]
    6f46:	b24b      	sxtb	r3, r1
    6f48:	4313      	orrs	r3, r2
    6f4a:	b25a      	sxtb	r2, r3
    6f4c:	003b      	movs	r3, r7
    6f4e:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA12) << 6); // Down
    6f50:	200c      	movs	r0, #12
    6f52:	4b51      	ldr	r3, [pc, #324]	; (7098 <main+0x2b4>)
    6f54:	4798      	blx	r3
    6f56:	0003      	movs	r3, r0
    6f58:	0199      	lsls	r1, r3, #6
    6f5a:	003b      	movs	r3, r7
    6f5c:	2202      	movs	r2, #2
    6f5e:	569a      	ldrsb	r2, [r3, r2]
    6f60:	b24b      	sxtb	r3, r1
    6f62:	4313      	orrs	r3, r2
    6f64:	b25a      	sxtb	r2, r3
    6f66:	003b      	movs	r3, r7
    6f68:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB09) << 5); // Left
    6f6a:	2029      	movs	r0, #41	; 0x29
    6f6c:	4b4a      	ldr	r3, [pc, #296]	; (7098 <main+0x2b4>)
    6f6e:	4798      	blx	r3
    6f70:	0003      	movs	r3, r0
    6f72:	0159      	lsls	r1, r3, #5
    6f74:	003b      	movs	r3, r7
    6f76:	2202      	movs	r2, #2
    6f78:	569a      	ldrsb	r2, [r3, r2]
    6f7a:	b24b      	sxtb	r3, r1
    6f7c:	4313      	orrs	r3, r2
    6f7e:	b25a      	sxtb	r2, r3
    6f80:	003b      	movs	r3, r7
    6f82:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA04) << 4); // Right
    6f84:	2004      	movs	r0, #4
    6f86:	4b44      	ldr	r3, [pc, #272]	; (7098 <main+0x2b4>)
    6f88:	4798      	blx	r3
    6f8a:	0003      	movs	r3, r0
    6f8c:	0119      	lsls	r1, r3, #4
    6f8e:	003b      	movs	r3, r7
    6f90:	2202      	movs	r2, #2
    6f92:	569a      	ldrsb	r2, [r3, r2]
    6f94:	b24b      	sxtb	r3, r1
    6f96:	4313      	orrs	r3, r2
    6f98:	b25a      	sxtb	r2, r3
    6f9a:	003b      	movs	r3, r7
    6f9c:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PB02) << 3); // Left Click
    6f9e:	2022      	movs	r0, #34	; 0x22
    6fa0:	4b3d      	ldr	r3, [pc, #244]	; (7098 <main+0x2b4>)
    6fa2:	4798      	blx	r3
    6fa4:	0003      	movs	r3, r0
    6fa6:	00d9      	lsls	r1, r3, #3
    6fa8:	003b      	movs	r3, r7
    6faa:	2202      	movs	r2, #2
    6fac:	569a      	ldrsb	r2, [r3, r2]
    6fae:	b24b      	sxtb	r3, r1
    6fb0:	4313      	orrs	r3, r2
    6fb2:	b25a      	sxtb	r2, r3
    6fb4:	003b      	movs	r3, r7
    6fb6:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (port_pin_get_input_level(PIN_PA15) << 2); // Right Click
    6fb8:	200f      	movs	r0, #15
    6fba:	4b37      	ldr	r3, [pc, #220]	; (7098 <main+0x2b4>)
    6fbc:	4798      	blx	r3
    6fbe:	0003      	movs	r3, r0
    6fc0:	0099      	lsls	r1, r3, #2
    6fc2:	003b      	movs	r3, r7
    6fc4:	2202      	movs	r2, #2
    6fc6:	569a      	ldrsb	r2, [r3, r2]
    6fc8:	b24b      	sxtb	r3, r1
    6fca:	4313      	orrs	r3, r2
    6fcc:	b25a      	sxtb	r2, r3
    6fce:	003b      	movs	r3, r7
    6fd0:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= (!port_pin_get_input_level(PIN_PA13) << 1); // Middle Click
    6fd2:	200d      	movs	r0, #13
    6fd4:	4b30      	ldr	r3, [pc, #192]	; (7098 <main+0x2b4>)
    6fd6:	4798      	blx	r3
    6fd8:	0003      	movs	r3, r0
    6fda:	001a      	movs	r2, r3
    6fdc:	2301      	movs	r3, #1
    6fde:	4053      	eors	r3, r2
    6fe0:	b2db      	uxtb	r3, r3
    6fe2:	0059      	lsls	r1, r3, #1
    6fe4:	003b      	movs	r3, r7
    6fe6:	2202      	movs	r2, #2
    6fe8:	569a      	ldrsb	r2, [r3, r2]
    6fea:	b24b      	sxtb	r3, r1
    6fec:	4313      	orrs	r3, r2
    6fee:	b25a      	sxtb	r2, r3
    6ff0:	003b      	movs	r3, r7
    6ff2:	709a      	strb	r2, [r3, #2]
			sendbuffer[2] |= laserState;								// Laser State
    6ff4:	003b      	movs	r3, r7
    6ff6:	2202      	movs	r2, #2
    6ff8:	569a      	ldrsb	r2, [r3, r2]
    6ffa:	4b2a      	ldr	r3, [pc, #168]	; (70a4 <main+0x2c0>)
    6ffc:	781b      	ldrb	r3, [r3, #0]
    6ffe:	b25b      	sxtb	r3, r3
    7000:	4313      	orrs	r3, r2
    7002:	b25a      	sxtb	r2, r3
    7004:	003b      	movs	r3, r7
    7006:	709a      	strb	r2, [r3, #2]

			RFM_send(receivingNode, sendbuffer, sendlength, false);
    7008:	69fb      	ldr	r3, [r7, #28]
    700a:	b2d8      	uxtb	r0, r3
    700c:	697b      	ldr	r3, [r7, #20]
    700e:	b2da      	uxtb	r2, r3
    7010:	0039      	movs	r1, r7
    7012:	2300      	movs	r3, #0
    7014:	4c2a      	ldr	r4, [pc, #168]	; (70c0 <main+0x2dc>)
    7016:	47a0      	blx	r4
		}

		state = lipo_soc(FILTERED);
    7018:	231a      	movs	r3, #26
    701a:	18fc      	adds	r4, r7, r3
    701c:	2000      	movs	r0, #0
    701e:	4b29      	ldr	r3, [pc, #164]	; (70c4 <main+0x2e0>)
    7020:	4798      	blx	r3
    7022:	0003      	movs	r3, r0
    7024:	8023      	strh	r3, [r4, #0]

		if(state > 10){
    7026:	231a      	movs	r3, #26
    7028:	18fb      	adds	r3, r7, r3
    702a:	881b      	ldrh	r3, [r3, #0]
    702c:	2b0a      	cmp	r3, #10
    702e:	d906      	bls.n	703e <main+0x25a>
			colorGradient(state);
    7030:	231a      	movs	r3, #26
    7032:	18fb      	adds	r3, r7, r3
    7034:	881b      	ldrh	r3, [r3, #0]
    7036:	0018      	movs	r0, r3
    7038:	4b23      	ldr	r3, [pc, #140]	; (70c8 <main+0x2e4>)
    703a:	4798      	blx	r3
    703c:	e71c      	b.n	6e78 <main+0x94>
		}

		else if(state > 5){
    703e:	231a      	movs	r3, #26
    7040:	18fb      	adds	r3, r7, r3
    7042:	881b      	ldrh	r3, [r3, #0]
    7044:	2b05      	cmp	r3, #5
    7046:	d902      	bls.n	704e <main+0x26a>
			blinkRed();
    7048:	4b20      	ldr	r3, [pc, #128]	; (70cc <main+0x2e8>)
    704a:	4798      	blx	r3
    704c:	e714      	b.n	6e78 <main+0x94>
		}

		else{
			//Put into sleep mode, but I don't know how to do that
			while(lipo_soc(FILTERED) < 0x0005){}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	2000      	movs	r0, #0
    7052:	4b1c      	ldr	r3, [pc, #112]	; (70c4 <main+0x2e0>)
    7054:	4798      	blx	r3
    7056:	1e03      	subs	r3, r0, #0
    7058:	2b04      	cmp	r3, #4
    705a:	d9f9      	bls.n	7050 <main+0x26c>
		}
	}
    705c:	e70c      	b.n	6e78 <main+0x94>
    705e:	46c0      	nop			; (mov r8, r8)
    7060:	00004d95 	.word	0x00004d95
    7064:	00006c49 	.word	0x00006c49
    7068:	00006d39 	.word	0x00006d39
    706c:	00006325 	.word	0x00006325
    7070:	0000ffff 	.word	0x0000ffff
    7074:	000070d1 	.word	0x000070d1
    7078:	0001869f 	.word	0x0001869f
    707c:	00006381 	.word	0x00006381
    7080:	00005801 	.word	0x00005801
    7084:	00005749 	.word	0x00005749
    7088:	00008ee0 	.word	0x00008ee0
    708c:	0000605d 	.word	0x0000605d
    7090:	00000bbd 	.word	0x00000bbd
    7094:	00007145 	.word	0x00007145
    7098:	00004f71 	.word	0x00004f71
    709c:	2000006a 	.word	0x2000006a
    70a0:	2000006b 	.word	0x2000006b
    70a4:	2000006c 	.word	0x2000006c
    70a8:	00004fb5 	.word	0x00004fb5
    70ac:	00000c09 	.word	0x00000c09
    70b0:	00000d65 	.word	0x00000d65
    70b4:	00006001 	.word	0x00006001
    70b8:	20000112 	.word	0x20000112
    70bc:	2000017c 	.word	0x2000017c
    70c0:	00005cf1 	.word	0x00005cf1
    70c4:	000063d9 	.word	0x000063d9
    70c8:	000071fd 	.word	0x000071fd
    70cc:	000072cd 	.word	0x000072cd

000070d0 <setTrackBallRGBW>:
		state = lipo_soc(FILTERED);
	}
}

void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{	
    70d0:	b5b0      	push	{r4, r5, r7, lr}
    70d2:	b082      	sub	sp, #8
    70d4:	af00      	add	r7, sp, #0
    70d6:	0005      	movs	r5, r0
    70d8:	000c      	movs	r4, r1
    70da:	0010      	movs	r0, r2
    70dc:	0019      	movs	r1, r3
    70de:	1dbb      	adds	r3, r7, #6
    70e0:	1c2a      	adds	r2, r5, #0
    70e2:	801a      	strh	r2, [r3, #0]
    70e4:	1d3b      	adds	r3, r7, #4
    70e6:	1c22      	adds	r2, r4, #0
    70e8:	801a      	strh	r2, [r3, #0]
    70ea:	1cbb      	adds	r3, r7, #2
    70ec:	1c02      	adds	r2, r0, #0
    70ee:	801a      	strh	r2, [r3, #0]
    70f0:	003b      	movs	r3, r7
    70f2:	1c0a      	adds	r2, r1, #0
    70f4:	801a      	strh	r2, [r3, #0]
	/* WHITE */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), white);
    70f6:	003b      	movs	r3, r7
    70f8:	881a      	ldrh	r2, [r3, #0]
    70fa:	4b0f      	ldr	r3, [pc, #60]	; (7138 <setTrackBallRGBW+0x68>)
    70fc:	2100      	movs	r1, #0
    70fe:	0018      	movs	r0, r3
    7100:	4b0e      	ldr	r3, [pc, #56]	; (713c <setTrackBallRGBW+0x6c>)
    7102:	4798      	blx	r3
	/* GREEN */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    7104:	1d3b      	adds	r3, r7, #4
    7106:	881a      	ldrh	r2, [r3, #0]
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <setTrackBallRGBW+0x68>)
    710a:	2103      	movs	r1, #3
    710c:	0018      	movs	r0, r3
    710e:	4b0b      	ldr	r3, [pc, #44]	; (713c <setTrackBallRGBW+0x6c>)
    7110:	4798      	blx	r3
	/* BLUE */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), blue);
    7112:	1cbb      	adds	r3, r7, #2
    7114:	881a      	ldrh	r2, [r3, #0]
    7116:	4b0a      	ldr	r3, [pc, #40]	; (7140 <setTrackBallRGBW+0x70>)
    7118:	2100      	movs	r1, #0
    711a:	0018      	movs	r0, r3
    711c:	4b07      	ldr	r3, [pc, #28]	; (713c <setTrackBallRGBW+0x6c>)
    711e:	4798      	blx	r3
	/* RED */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), red);
    7120:	1dbb      	adds	r3, r7, #6
    7122:	881a      	ldrh	r2, [r3, #0]
    7124:	4b06      	ldr	r3, [pc, #24]	; (7140 <setTrackBallRGBW+0x70>)
    7126:	2101      	movs	r1, #1
    7128:	0018      	movs	r0, r3
    712a:	4b04      	ldr	r3, [pc, #16]	; (713c <setTrackBallRGBW+0x6c>)
    712c:	4798      	blx	r3
} 
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	46bd      	mov	sp, r7
    7132:	b002      	add	sp, #8
    7134:	bdb0      	pop	{r4, r5, r7, pc}
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	20000130 	.word	0x20000130
    713c:	00002c55 	.word	0x00002c55
    7140:	20000270 	.word	0x20000270

00007144 <ColorCycle>:

void ColorCycle(void)
{
    7144:	b5b0      	push	{r4, r5, r7, lr}
    7146:	af00      	add	r7, sp, #0
	static int color = 0;
	static int speed = 100;
	static int index = 0;
	if(index == 0)
    7148:	4b27      	ldr	r3, [pc, #156]	; (71e8 <ColorCycle+0xa4>)
    714a:	681b      	ldr	r3, [r3, #0]
    714c:	2b00      	cmp	r3, #0
    714e:	d10c      	bne.n	716a <ColorCycle+0x26>
	{
		setTrackBallRGBW(0xFFFF - color,color,0x0,0x0);
    7150:	4b26      	ldr	r3, [pc, #152]	; (71ec <ColorCycle+0xa8>)
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	b29b      	uxth	r3, r3
    7156:	43db      	mvns	r3, r3
    7158:	b298      	uxth	r0, r3
    715a:	4b24      	ldr	r3, [pc, #144]	; (71ec <ColorCycle+0xa8>)
    715c:	681b      	ldr	r3, [r3, #0]
    715e:	b299      	uxth	r1, r3
    7160:	2300      	movs	r3, #0
    7162:	2200      	movs	r2, #0
    7164:	4c22      	ldr	r4, [pc, #136]	; (71f0 <ColorCycle+0xac>)
    7166:	47a0      	blx	r4
    7168:	e020      	b.n	71ac <ColorCycle+0x68>
	}
	else if(index == 1)
    716a:	4b1f      	ldr	r3, [pc, #124]	; (71e8 <ColorCycle+0xa4>)
    716c:	681b      	ldr	r3, [r3, #0]
    716e:	2b01      	cmp	r3, #1
    7170:	d10c      	bne.n	718c <ColorCycle+0x48>
	{
		setTrackBallRGBW(0x0,0xFFFF - color,color,0x0);
    7172:	4b1e      	ldr	r3, [pc, #120]	; (71ec <ColorCycle+0xa8>)
    7174:	681b      	ldr	r3, [r3, #0]
    7176:	b29b      	uxth	r3, r3
    7178:	43db      	mvns	r3, r3
    717a:	b299      	uxth	r1, r3
    717c:	4b1b      	ldr	r3, [pc, #108]	; (71ec <ColorCycle+0xa8>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	b29a      	uxth	r2, r3
    7182:	2300      	movs	r3, #0
    7184:	2000      	movs	r0, #0
    7186:	4c1a      	ldr	r4, [pc, #104]	; (71f0 <ColorCycle+0xac>)
    7188:	47a0      	blx	r4
    718a:	e00f      	b.n	71ac <ColorCycle+0x68>
	}
	else if(index == 2)
    718c:	4b16      	ldr	r3, [pc, #88]	; (71e8 <ColorCycle+0xa4>)
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	2b02      	cmp	r3, #2
    7192:	d10b      	bne.n	71ac <ColorCycle+0x68>
	{
		setTrackBallRGBW(color,0x0,0xFFFF - color,0x0);
    7194:	4b15      	ldr	r3, [pc, #84]	; (71ec <ColorCycle+0xa8>)
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	b298      	uxth	r0, r3
    719a:	4b14      	ldr	r3, [pc, #80]	; (71ec <ColorCycle+0xa8>)
    719c:	681b      	ldr	r3, [r3, #0]
    719e:	b29b      	uxth	r3, r3
    71a0:	43db      	mvns	r3, r3
    71a2:	b29a      	uxth	r2, r3
    71a4:	2300      	movs	r3, #0
    71a6:	2100      	movs	r1, #0
    71a8:	4c11      	ldr	r4, [pc, #68]	; (71f0 <ColorCycle+0xac>)
    71aa:	47a0      	blx	r4
	}
	
	color += speed;
    71ac:	4b0f      	ldr	r3, [pc, #60]	; (71ec <ColorCycle+0xa8>)
    71ae:	681a      	ldr	r2, [r3, #0]
    71b0:	4b10      	ldr	r3, [pc, #64]	; (71f4 <ColorCycle+0xb0>)
    71b2:	681b      	ldr	r3, [r3, #0]
    71b4:	18d2      	adds	r2, r2, r3
    71b6:	4b0d      	ldr	r3, [pc, #52]	; (71ec <ColorCycle+0xa8>)
    71b8:	601a      	str	r2, [r3, #0]
	if(color >= 0xFFFF)
    71ba:	4b0c      	ldr	r3, [pc, #48]	; (71ec <ColorCycle+0xa8>)
    71bc:	681b      	ldr	r3, [r3, #0]
    71be:	4a0e      	ldr	r2, [pc, #56]	; (71f8 <ColorCycle+0xb4>)
    71c0:	4293      	cmp	r3, r2
    71c2:	dd0e      	ble.n	71e2 <ColorCycle+0x9e>
	{
		color = 0;
    71c4:	4b09      	ldr	r3, [pc, #36]	; (71ec <ColorCycle+0xa8>)
    71c6:	2200      	movs	r2, #0
    71c8:	601a      	str	r2, [r3, #0]
		index++;
    71ca:	4b07      	ldr	r3, [pc, #28]	; (71e8 <ColorCycle+0xa4>)
    71cc:	681b      	ldr	r3, [r3, #0]
    71ce:	1c5a      	adds	r2, r3, #1
    71d0:	4b05      	ldr	r3, [pc, #20]	; (71e8 <ColorCycle+0xa4>)
    71d2:	601a      	str	r2, [r3, #0]

		if(index > 2){
    71d4:	4b04      	ldr	r3, [pc, #16]	; (71e8 <ColorCycle+0xa4>)
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	2b02      	cmp	r3, #2
    71da:	dd02      	ble.n	71e2 <ColorCycle+0x9e>
			index = 0;
    71dc:	4b02      	ldr	r3, [pc, #8]	; (71e8 <ColorCycle+0xa4>)
    71de:	2200      	movs	r2, #0
    71e0:	601a      	str	r2, [r3, #0]
		}
		
	}
}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	46bd      	mov	sp, r7
    71e6:	bdb0      	pop	{r4, r5, r7, pc}
    71e8:	20000070 	.word	0x20000070
    71ec:	20000074 	.word	0x20000074
    71f0:	000070d1 	.word	0x000070d1
    71f4:	20000004 	.word	0x20000004
    71f8:	0000fffe 	.word	0x0000fffe

000071fc <colorGradient>:

void colorGradient(uint16_t state){
    71fc:	b590      	push	{r4, r7, lr}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
    7202:	0002      	movs	r2, r0
    7204:	1dbb      	adds	r3, r7, #6
    7206:	801a      	strh	r2, [r3, #0]
	static int gradient = 0;
	static int updown = 0; //up = 1, down = 0
	static int speed = 17;
	
	//Now check if it's max faded
	if(gradient >= 0xFFFF){ //yes (max)
    7208:	4b2b      	ldr	r3, [pc, #172]	; (72b8 <colorGradient+0xbc>)
    720a:	681b      	ldr	r3, [r3, #0]
    720c:	4a2b      	ldr	r2, [pc, #172]	; (72bc <colorGradient+0xc0>)
    720e:	4293      	cmp	r3, r2
    7210:	dd03      	ble.n	721a <colorGradient+0x1e>
		updown = 0;
    7212:	4b2b      	ldr	r3, [pc, #172]	; (72c0 <colorGradient+0xc4>)
    7214:	2200      	movs	r2, #0
    7216:	601a      	str	r2, [r3, #0]
    7218:	e006      	b.n	7228 <colorGradient+0x2c>
	}

	else if(gradient <= 0){ //No, min
    721a:	4b27      	ldr	r3, [pc, #156]	; (72b8 <colorGradient+0xbc>)
    721c:	681b      	ldr	r3, [r3, #0]
    721e:	2b00      	cmp	r3, #0
    7220:	dc02      	bgt.n	7228 <colorGradient+0x2c>
		updown = 1;
    7222:	4b27      	ldr	r3, [pc, #156]	; (72c0 <colorGradient+0xc4>)
    7224:	2201      	movs	r2, #1
    7226:	601a      	str	r2, [r3, #0]
	}

	//Increment or decrement
	if(updown){
    7228:	4b25      	ldr	r3, [pc, #148]	; (72c0 <colorGradient+0xc4>)
    722a:	681b      	ldr	r3, [r3, #0]
    722c:	2b00      	cmp	r3, #0
    722e:	d007      	beq.n	7240 <colorGradient+0x44>
		gradient += speed;
    7230:	4b21      	ldr	r3, [pc, #132]	; (72b8 <colorGradient+0xbc>)
    7232:	681a      	ldr	r2, [r3, #0]
    7234:	4b23      	ldr	r3, [pc, #140]	; (72c4 <colorGradient+0xc8>)
    7236:	681b      	ldr	r3, [r3, #0]
    7238:	18d2      	adds	r2, r2, r3
    723a:	4b1f      	ldr	r3, [pc, #124]	; (72b8 <colorGradient+0xbc>)
    723c:	601a      	str	r2, [r3, #0]
    723e:	e006      	b.n	724e <colorGradient+0x52>
	}

	else{
		gradient -= speed;
    7240:	4b1d      	ldr	r3, [pc, #116]	; (72b8 <colorGradient+0xbc>)
    7242:	681a      	ldr	r2, [r3, #0]
    7244:	4b1f      	ldr	r3, [pc, #124]	; (72c4 <colorGradient+0xc8>)
    7246:	681b      	ldr	r3, [r3, #0]
    7248:	1ad2      	subs	r2, r2, r3
    724a:	4b1b      	ldr	r3, [pc, #108]	; (72b8 <colorGradient+0xbc>)
    724c:	601a      	str	r2, [r3, #0]
	}

	//See what color the RGB shoud be
	if(state > 65){ //greeen
    724e:	1dbb      	adds	r3, r7, #6
    7250:	881b      	ldrh	r3, [r3, #0]
    7252:	2b41      	cmp	r3, #65	; 0x41
    7254:	d90a      	bls.n	726c <colorGradient+0x70>
		setTrackBallRGBW(0x0, 0xFFFF - gradient, 0x0000, 0x0000);
    7256:	4b18      	ldr	r3, [pc, #96]	; (72b8 <colorGradient+0xbc>)
    7258:	681b      	ldr	r3, [r3, #0]
    725a:	b29b      	uxth	r3, r3
    725c:	43db      	mvns	r3, r3
    725e:	b299      	uxth	r1, r3
    7260:	2300      	movs	r3, #0
    7262:	2200      	movs	r2, #0
    7264:	2000      	movs	r0, #0
    7266:	4c18      	ldr	r4, [pc, #96]	; (72c8 <colorGradient+0xcc>)
    7268:	47a0      	blx	r4
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
	}

	else{}

}
    726a:	e020      	b.n	72ae <colorGradient+0xb2>
	//See what color the RGB shoud be
	if(state > 65){ //greeen
		setTrackBallRGBW(0x0, 0xFFFF - gradient, 0x0000, 0x0000);
	}

	else if(state > 25){ //yellow
    726c:	1dbb      	adds	r3, r7, #6
    726e:	881b      	ldrh	r3, [r3, #0]
    7270:	2b19      	cmp	r3, #25
    7272:	d90e      	bls.n	7292 <colorGradient+0x96>
		setTrackBallRGBW(0xFFFF - gradient, 0xFFFF - gradient, 0x0, 0x0000);
    7274:	4b10      	ldr	r3, [pc, #64]	; (72b8 <colorGradient+0xbc>)
    7276:	681b      	ldr	r3, [r3, #0]
    7278:	b29b      	uxth	r3, r3
    727a:	43db      	mvns	r3, r3
    727c:	b298      	uxth	r0, r3
    727e:	4b0e      	ldr	r3, [pc, #56]	; (72b8 <colorGradient+0xbc>)
    7280:	681b      	ldr	r3, [r3, #0]
    7282:	b29b      	uxth	r3, r3
    7284:	43db      	mvns	r3, r3
    7286:	b299      	uxth	r1, r3
    7288:	2300      	movs	r3, #0
    728a:	2200      	movs	r2, #0
    728c:	4c0e      	ldr	r4, [pc, #56]	; (72c8 <colorGradient+0xcc>)
    728e:	47a0      	blx	r4
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
	}

	else{}

}
    7290:	e00d      	b.n	72ae <colorGradient+0xb2>

	else if(state > 25){ //yellow
		setTrackBallRGBW(0xFFFF - gradient, 0xFFFF - gradient, 0x0, 0x0000);
	}

	else if(state > 10){ //red
    7292:	1dbb      	adds	r3, r7, #6
    7294:	881b      	ldrh	r3, [r3, #0]
    7296:	2b0a      	cmp	r3, #10
    7298:	d909      	bls.n	72ae <colorGradient+0xb2>
		setTrackBallRGBW(0xFFFF - gradient, 0x0, 0x0, 0x0);
    729a:	4b07      	ldr	r3, [pc, #28]	; (72b8 <colorGradient+0xbc>)
    729c:	681b      	ldr	r3, [r3, #0]
    729e:	b29b      	uxth	r3, r3
    72a0:	43db      	mvns	r3, r3
    72a2:	b298      	uxth	r0, r3
    72a4:	2300      	movs	r3, #0
    72a6:	2200      	movs	r2, #0
    72a8:	2100      	movs	r1, #0
    72aa:	4c07      	ldr	r4, [pc, #28]	; (72c8 <colorGradient+0xcc>)
    72ac:	47a0      	blx	r4
	}

	else{}

}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	46bd      	mov	sp, r7
    72b2:	b003      	add	sp, #12
    72b4:	bd90      	pop	{r4, r7, pc}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	20000078 	.word	0x20000078
    72bc:	0000fffe 	.word	0x0000fffe
    72c0:	2000007c 	.word	0x2000007c
    72c4:	20000008 	.word	0x20000008
    72c8:	000070d1 	.word	0x000070d1

000072cc <blinkRed>:


void blinkRed(void){
    72cc:	b5b0      	push	{r4, r5, r7, lr}
    72ce:	af00      	add	r7, sp, #0
	static int time_on = 200;
	static int count = 0;
	static int updown = 0;

	if(count >= time_on){
    72d0:	4b17      	ldr	r3, [pc, #92]	; (7330 <blinkRed+0x64>)
    72d2:	681a      	ldr	r2, [r3, #0]
    72d4:	4b17      	ldr	r3, [pc, #92]	; (7334 <blinkRed+0x68>)
    72d6:	681b      	ldr	r3, [r3, #0]
    72d8:	429a      	cmp	r2, r3
    72da:	db03      	blt.n	72e4 <blinkRed+0x18>
		updown = 0;
    72dc:	4b16      	ldr	r3, [pc, #88]	; (7338 <blinkRed+0x6c>)
    72de:	2200      	movs	r2, #0
    72e0:	601a      	str	r2, [r3, #0]
    72e2:	e006      	b.n	72f2 <blinkRed+0x26>
	}

	else if(count <= 0){
    72e4:	4b12      	ldr	r3, [pc, #72]	; (7330 <blinkRed+0x64>)
    72e6:	681b      	ldr	r3, [r3, #0]
    72e8:	2b00      	cmp	r3, #0
    72ea:	dc02      	bgt.n	72f2 <blinkRed+0x26>
		updown = 1;
    72ec:	4b12      	ldr	r3, [pc, #72]	; (7338 <blinkRed+0x6c>)
    72ee:	2201      	movs	r2, #1
    72f0:	601a      	str	r2, [r3, #0]
	}

	if(updown){
    72f2:	4b11      	ldr	r3, [pc, #68]	; (7338 <blinkRed+0x6c>)
    72f4:	681b      	ldr	r3, [r3, #0]
    72f6:	2b00      	cmp	r3, #0
    72f8:	d00b      	beq.n	7312 <blinkRed+0x46>
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
    72fa:	4810      	ldr	r0, [pc, #64]	; (733c <blinkRed+0x70>)
    72fc:	2300      	movs	r3, #0
    72fe:	2200      	movs	r2, #0
    7300:	2100      	movs	r1, #0
    7302:	4c0f      	ldr	r4, [pc, #60]	; (7340 <blinkRed+0x74>)
    7304:	47a0      	blx	r4
		count++;
    7306:	4b0a      	ldr	r3, [pc, #40]	; (7330 <blinkRed+0x64>)
    7308:	681b      	ldr	r3, [r3, #0]
    730a:	1c5a      	adds	r2, r3, #1
    730c:	4b08      	ldr	r3, [pc, #32]	; (7330 <blinkRed+0x64>)
    730e:	601a      	str	r2, [r3, #0]
	}
	else{
		setTrackBallRGBW(0x0, 0x0, 0x0, 0x0);
		count--;
	}
    7310:	e00a      	b.n	7328 <blinkRed+0x5c>
	if(updown){
		setTrackBallRGBW(0xFFFF, 0x0, 0x0, 0x0);
		count++;
	}
	else{
		setTrackBallRGBW(0x0, 0x0, 0x0, 0x0);
    7312:	2300      	movs	r3, #0
    7314:	2200      	movs	r2, #0
    7316:	2100      	movs	r1, #0
    7318:	2000      	movs	r0, #0
    731a:	4c09      	ldr	r4, [pc, #36]	; (7340 <blinkRed+0x74>)
    731c:	47a0      	blx	r4
		count--;
    731e:	4b04      	ldr	r3, [pc, #16]	; (7330 <blinkRed+0x64>)
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	1e5a      	subs	r2, r3, #1
    7324:	4b02      	ldr	r3, [pc, #8]	; (7330 <blinkRed+0x64>)
    7326:	601a      	str	r2, [r3, #0]
	}
    7328:	46c0      	nop			; (mov r8, r8)
    732a:	46bd      	mov	sp, r7
    732c:	bdb0      	pop	{r4, r5, r7, pc}
    732e:	46c0      	nop			; (mov r8, r8)
    7330:	20000080 	.word	0x20000080
    7334:	2000000c 	.word	0x2000000c
    7338:	20000084 	.word	0x20000084
    733c:	0000ffff 	.word	0x0000ffff
    7340:	000070d1 	.word	0x000070d1

00007344 <__aeabi_uidiv>:
    7344:	2200      	movs	r2, #0
    7346:	0843      	lsrs	r3, r0, #1
    7348:	428b      	cmp	r3, r1
    734a:	d374      	bcc.n	7436 <__aeabi_uidiv+0xf2>
    734c:	0903      	lsrs	r3, r0, #4
    734e:	428b      	cmp	r3, r1
    7350:	d35f      	bcc.n	7412 <__aeabi_uidiv+0xce>
    7352:	0a03      	lsrs	r3, r0, #8
    7354:	428b      	cmp	r3, r1
    7356:	d344      	bcc.n	73e2 <__aeabi_uidiv+0x9e>
    7358:	0b03      	lsrs	r3, r0, #12
    735a:	428b      	cmp	r3, r1
    735c:	d328      	bcc.n	73b0 <__aeabi_uidiv+0x6c>
    735e:	0c03      	lsrs	r3, r0, #16
    7360:	428b      	cmp	r3, r1
    7362:	d30d      	bcc.n	7380 <__aeabi_uidiv+0x3c>
    7364:	22ff      	movs	r2, #255	; 0xff
    7366:	0209      	lsls	r1, r1, #8
    7368:	ba12      	rev	r2, r2
    736a:	0c03      	lsrs	r3, r0, #16
    736c:	428b      	cmp	r3, r1
    736e:	d302      	bcc.n	7376 <__aeabi_uidiv+0x32>
    7370:	1212      	asrs	r2, r2, #8
    7372:	0209      	lsls	r1, r1, #8
    7374:	d065      	beq.n	7442 <__aeabi_uidiv+0xfe>
    7376:	0b03      	lsrs	r3, r0, #12
    7378:	428b      	cmp	r3, r1
    737a:	d319      	bcc.n	73b0 <__aeabi_uidiv+0x6c>
    737c:	e000      	b.n	7380 <__aeabi_uidiv+0x3c>
    737e:	0a09      	lsrs	r1, r1, #8
    7380:	0bc3      	lsrs	r3, r0, #15
    7382:	428b      	cmp	r3, r1
    7384:	d301      	bcc.n	738a <__aeabi_uidiv+0x46>
    7386:	03cb      	lsls	r3, r1, #15
    7388:	1ac0      	subs	r0, r0, r3
    738a:	4152      	adcs	r2, r2
    738c:	0b83      	lsrs	r3, r0, #14
    738e:	428b      	cmp	r3, r1
    7390:	d301      	bcc.n	7396 <__aeabi_uidiv+0x52>
    7392:	038b      	lsls	r3, r1, #14
    7394:	1ac0      	subs	r0, r0, r3
    7396:	4152      	adcs	r2, r2
    7398:	0b43      	lsrs	r3, r0, #13
    739a:	428b      	cmp	r3, r1
    739c:	d301      	bcc.n	73a2 <__aeabi_uidiv+0x5e>
    739e:	034b      	lsls	r3, r1, #13
    73a0:	1ac0      	subs	r0, r0, r3
    73a2:	4152      	adcs	r2, r2
    73a4:	0b03      	lsrs	r3, r0, #12
    73a6:	428b      	cmp	r3, r1
    73a8:	d301      	bcc.n	73ae <__aeabi_uidiv+0x6a>
    73aa:	030b      	lsls	r3, r1, #12
    73ac:	1ac0      	subs	r0, r0, r3
    73ae:	4152      	adcs	r2, r2
    73b0:	0ac3      	lsrs	r3, r0, #11
    73b2:	428b      	cmp	r3, r1
    73b4:	d301      	bcc.n	73ba <__aeabi_uidiv+0x76>
    73b6:	02cb      	lsls	r3, r1, #11
    73b8:	1ac0      	subs	r0, r0, r3
    73ba:	4152      	adcs	r2, r2
    73bc:	0a83      	lsrs	r3, r0, #10
    73be:	428b      	cmp	r3, r1
    73c0:	d301      	bcc.n	73c6 <__aeabi_uidiv+0x82>
    73c2:	028b      	lsls	r3, r1, #10
    73c4:	1ac0      	subs	r0, r0, r3
    73c6:	4152      	adcs	r2, r2
    73c8:	0a43      	lsrs	r3, r0, #9
    73ca:	428b      	cmp	r3, r1
    73cc:	d301      	bcc.n	73d2 <__aeabi_uidiv+0x8e>
    73ce:	024b      	lsls	r3, r1, #9
    73d0:	1ac0      	subs	r0, r0, r3
    73d2:	4152      	adcs	r2, r2
    73d4:	0a03      	lsrs	r3, r0, #8
    73d6:	428b      	cmp	r3, r1
    73d8:	d301      	bcc.n	73de <__aeabi_uidiv+0x9a>
    73da:	020b      	lsls	r3, r1, #8
    73dc:	1ac0      	subs	r0, r0, r3
    73de:	4152      	adcs	r2, r2
    73e0:	d2cd      	bcs.n	737e <__aeabi_uidiv+0x3a>
    73e2:	09c3      	lsrs	r3, r0, #7
    73e4:	428b      	cmp	r3, r1
    73e6:	d301      	bcc.n	73ec <__aeabi_uidiv+0xa8>
    73e8:	01cb      	lsls	r3, r1, #7
    73ea:	1ac0      	subs	r0, r0, r3
    73ec:	4152      	adcs	r2, r2
    73ee:	0983      	lsrs	r3, r0, #6
    73f0:	428b      	cmp	r3, r1
    73f2:	d301      	bcc.n	73f8 <__aeabi_uidiv+0xb4>
    73f4:	018b      	lsls	r3, r1, #6
    73f6:	1ac0      	subs	r0, r0, r3
    73f8:	4152      	adcs	r2, r2
    73fa:	0943      	lsrs	r3, r0, #5
    73fc:	428b      	cmp	r3, r1
    73fe:	d301      	bcc.n	7404 <__aeabi_uidiv+0xc0>
    7400:	014b      	lsls	r3, r1, #5
    7402:	1ac0      	subs	r0, r0, r3
    7404:	4152      	adcs	r2, r2
    7406:	0903      	lsrs	r3, r0, #4
    7408:	428b      	cmp	r3, r1
    740a:	d301      	bcc.n	7410 <__aeabi_uidiv+0xcc>
    740c:	010b      	lsls	r3, r1, #4
    740e:	1ac0      	subs	r0, r0, r3
    7410:	4152      	adcs	r2, r2
    7412:	08c3      	lsrs	r3, r0, #3
    7414:	428b      	cmp	r3, r1
    7416:	d301      	bcc.n	741c <__aeabi_uidiv+0xd8>
    7418:	00cb      	lsls	r3, r1, #3
    741a:	1ac0      	subs	r0, r0, r3
    741c:	4152      	adcs	r2, r2
    741e:	0883      	lsrs	r3, r0, #2
    7420:	428b      	cmp	r3, r1
    7422:	d301      	bcc.n	7428 <__aeabi_uidiv+0xe4>
    7424:	008b      	lsls	r3, r1, #2
    7426:	1ac0      	subs	r0, r0, r3
    7428:	4152      	adcs	r2, r2
    742a:	0843      	lsrs	r3, r0, #1
    742c:	428b      	cmp	r3, r1
    742e:	d301      	bcc.n	7434 <__aeabi_uidiv+0xf0>
    7430:	004b      	lsls	r3, r1, #1
    7432:	1ac0      	subs	r0, r0, r3
    7434:	4152      	adcs	r2, r2
    7436:	1a41      	subs	r1, r0, r1
    7438:	d200      	bcs.n	743c <__aeabi_uidiv+0xf8>
    743a:	4601      	mov	r1, r0
    743c:	4152      	adcs	r2, r2
    743e:	4610      	mov	r0, r2
    7440:	4770      	bx	lr
    7442:	e7ff      	b.n	7444 <__aeabi_uidiv+0x100>
    7444:	b501      	push	{r0, lr}
    7446:	2000      	movs	r0, #0
    7448:	f000 f806 	bl	7458 <__aeabi_idiv0>
    744c:	bd02      	pop	{r1, pc}
    744e:	46c0      	nop			; (mov r8, r8)

00007450 <__aeabi_uidivmod>:
    7450:	2900      	cmp	r1, #0
    7452:	d0f7      	beq.n	7444 <__aeabi_uidiv+0x100>
    7454:	e776      	b.n	7344 <__aeabi_uidiv>
    7456:	4770      	bx	lr

00007458 <__aeabi_idiv0>:
    7458:	4770      	bx	lr
    745a:	46c0      	nop			; (mov r8, r8)

0000745c <__aeabi_dadd>:
    745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    745e:	4656      	mov	r6, sl
    7460:	465f      	mov	r7, fp
    7462:	464d      	mov	r5, r9
    7464:	4644      	mov	r4, r8
    7466:	b4f0      	push	{r4, r5, r6, r7}
    7468:	000f      	movs	r7, r1
    746a:	0ffd      	lsrs	r5, r7, #31
    746c:	46aa      	mov	sl, r5
    746e:	0309      	lsls	r1, r1, #12
    7470:	007c      	lsls	r4, r7, #1
    7472:	002e      	movs	r6, r5
    7474:	005f      	lsls	r7, r3, #1
    7476:	0f45      	lsrs	r5, r0, #29
    7478:	0a49      	lsrs	r1, r1, #9
    747a:	0d7f      	lsrs	r7, r7, #21
    747c:	4329      	orrs	r1, r5
    747e:	00c5      	lsls	r5, r0, #3
    7480:	0318      	lsls	r0, r3, #12
    7482:	46bc      	mov	ip, r7
    7484:	0a40      	lsrs	r0, r0, #9
    7486:	0f57      	lsrs	r7, r2, #29
    7488:	0d64      	lsrs	r4, r4, #21
    748a:	0fdb      	lsrs	r3, r3, #31
    748c:	4338      	orrs	r0, r7
    748e:	00d2      	lsls	r2, r2, #3
    7490:	459a      	cmp	sl, r3
    7492:	d100      	bne.n	7496 <__aeabi_dadd+0x3a>
    7494:	e0aa      	b.n	75ec <__aeabi_dadd+0x190>
    7496:	4666      	mov	r6, ip
    7498:	1ba6      	subs	r6, r4, r6
    749a:	2e00      	cmp	r6, #0
    749c:	dc00      	bgt.n	74a0 <__aeabi_dadd+0x44>
    749e:	e0ff      	b.n	76a0 <__aeabi_dadd+0x244>
    74a0:	4663      	mov	r3, ip
    74a2:	2b00      	cmp	r3, #0
    74a4:	d139      	bne.n	751a <__aeabi_dadd+0xbe>
    74a6:	0003      	movs	r3, r0
    74a8:	4313      	orrs	r3, r2
    74aa:	d000      	beq.n	74ae <__aeabi_dadd+0x52>
    74ac:	e0d9      	b.n	7662 <__aeabi_dadd+0x206>
    74ae:	076b      	lsls	r3, r5, #29
    74b0:	d009      	beq.n	74c6 <__aeabi_dadd+0x6a>
    74b2:	230f      	movs	r3, #15
    74b4:	402b      	ands	r3, r5
    74b6:	2b04      	cmp	r3, #4
    74b8:	d005      	beq.n	74c6 <__aeabi_dadd+0x6a>
    74ba:	1d2b      	adds	r3, r5, #4
    74bc:	42ab      	cmp	r3, r5
    74be:	41ad      	sbcs	r5, r5
    74c0:	426d      	negs	r5, r5
    74c2:	1949      	adds	r1, r1, r5
    74c4:	001d      	movs	r5, r3
    74c6:	020b      	lsls	r3, r1, #8
    74c8:	d400      	bmi.n	74cc <__aeabi_dadd+0x70>
    74ca:	e082      	b.n	75d2 <__aeabi_dadd+0x176>
    74cc:	4bca      	ldr	r3, [pc, #808]	; (77f8 <__aeabi_dadd+0x39c>)
    74ce:	3401      	adds	r4, #1
    74d0:	429c      	cmp	r4, r3
    74d2:	d100      	bne.n	74d6 <__aeabi_dadd+0x7a>
    74d4:	e0fe      	b.n	76d4 <__aeabi_dadd+0x278>
    74d6:	000a      	movs	r2, r1
    74d8:	4656      	mov	r6, sl
    74da:	4bc8      	ldr	r3, [pc, #800]	; (77fc <__aeabi_dadd+0x3a0>)
    74dc:	08ed      	lsrs	r5, r5, #3
    74de:	401a      	ands	r2, r3
    74e0:	0750      	lsls	r0, r2, #29
    74e2:	0564      	lsls	r4, r4, #21
    74e4:	0252      	lsls	r2, r2, #9
    74e6:	4305      	orrs	r5, r0
    74e8:	0b12      	lsrs	r2, r2, #12
    74ea:	0d64      	lsrs	r4, r4, #21
    74ec:	2100      	movs	r1, #0
    74ee:	0312      	lsls	r2, r2, #12
    74f0:	0d0b      	lsrs	r3, r1, #20
    74f2:	051b      	lsls	r3, r3, #20
    74f4:	0564      	lsls	r4, r4, #21
    74f6:	0b12      	lsrs	r2, r2, #12
    74f8:	431a      	orrs	r2, r3
    74fa:	0863      	lsrs	r3, r4, #1
    74fc:	4cc0      	ldr	r4, [pc, #768]	; (7800 <__aeabi_dadd+0x3a4>)
    74fe:	07f6      	lsls	r6, r6, #31
    7500:	4014      	ands	r4, r2
    7502:	431c      	orrs	r4, r3
    7504:	0064      	lsls	r4, r4, #1
    7506:	0864      	lsrs	r4, r4, #1
    7508:	4334      	orrs	r4, r6
    750a:	0028      	movs	r0, r5
    750c:	0021      	movs	r1, r4
    750e:	bc3c      	pop	{r2, r3, r4, r5}
    7510:	4690      	mov	r8, r2
    7512:	4699      	mov	r9, r3
    7514:	46a2      	mov	sl, r4
    7516:	46ab      	mov	fp, r5
    7518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    751a:	4bb7      	ldr	r3, [pc, #732]	; (77f8 <__aeabi_dadd+0x39c>)
    751c:	429c      	cmp	r4, r3
    751e:	d0c6      	beq.n	74ae <__aeabi_dadd+0x52>
    7520:	2380      	movs	r3, #128	; 0x80
    7522:	041b      	lsls	r3, r3, #16
    7524:	4318      	orrs	r0, r3
    7526:	2e38      	cmp	r6, #56	; 0x38
    7528:	dd00      	ble.n	752c <__aeabi_dadd+0xd0>
    752a:	e0eb      	b.n	7704 <__aeabi_dadd+0x2a8>
    752c:	2e1f      	cmp	r6, #31
    752e:	dd00      	ble.n	7532 <__aeabi_dadd+0xd6>
    7530:	e11e      	b.n	7770 <__aeabi_dadd+0x314>
    7532:	2320      	movs	r3, #32
    7534:	1b9b      	subs	r3, r3, r6
    7536:	469c      	mov	ip, r3
    7538:	0003      	movs	r3, r0
    753a:	4667      	mov	r7, ip
    753c:	40bb      	lsls	r3, r7
    753e:	4698      	mov	r8, r3
    7540:	0013      	movs	r3, r2
    7542:	4647      	mov	r7, r8
    7544:	40f3      	lsrs	r3, r6
    7546:	433b      	orrs	r3, r7
    7548:	4667      	mov	r7, ip
    754a:	40ba      	lsls	r2, r7
    754c:	1e57      	subs	r7, r2, #1
    754e:	41ba      	sbcs	r2, r7
    7550:	4313      	orrs	r3, r2
    7552:	0002      	movs	r2, r0
    7554:	40f2      	lsrs	r2, r6
    7556:	1aeb      	subs	r3, r5, r3
    7558:	429d      	cmp	r5, r3
    755a:	41b6      	sbcs	r6, r6
    755c:	001d      	movs	r5, r3
    755e:	1a8a      	subs	r2, r1, r2
    7560:	4276      	negs	r6, r6
    7562:	1b91      	subs	r1, r2, r6
    7564:	020b      	lsls	r3, r1, #8
    7566:	d531      	bpl.n	75cc <__aeabi_dadd+0x170>
    7568:	024a      	lsls	r2, r1, #9
    756a:	0a56      	lsrs	r6, r2, #9
    756c:	2e00      	cmp	r6, #0
    756e:	d100      	bne.n	7572 <__aeabi_dadd+0x116>
    7570:	e0b4      	b.n	76dc <__aeabi_dadd+0x280>
    7572:	0030      	movs	r0, r6
    7574:	f001 fbf0 	bl	8d58 <__clzsi2>
    7578:	0003      	movs	r3, r0
    757a:	3b08      	subs	r3, #8
    757c:	2b1f      	cmp	r3, #31
    757e:	dd00      	ble.n	7582 <__aeabi_dadd+0x126>
    7580:	e0b5      	b.n	76ee <__aeabi_dadd+0x292>
    7582:	2220      	movs	r2, #32
    7584:	0029      	movs	r1, r5
    7586:	1ad2      	subs	r2, r2, r3
    7588:	40d1      	lsrs	r1, r2
    758a:	409e      	lsls	r6, r3
    758c:	000a      	movs	r2, r1
    758e:	409d      	lsls	r5, r3
    7590:	4332      	orrs	r2, r6
    7592:	429c      	cmp	r4, r3
    7594:	dd00      	ble.n	7598 <__aeabi_dadd+0x13c>
    7596:	e0b1      	b.n	76fc <__aeabi_dadd+0x2a0>
    7598:	1b1c      	subs	r4, r3, r4
    759a:	1c63      	adds	r3, r4, #1
    759c:	2b1f      	cmp	r3, #31
    759e:	dd00      	ble.n	75a2 <__aeabi_dadd+0x146>
    75a0:	e0d5      	b.n	774e <__aeabi_dadd+0x2f2>
    75a2:	2120      	movs	r1, #32
    75a4:	0014      	movs	r4, r2
    75a6:	0028      	movs	r0, r5
    75a8:	1ac9      	subs	r1, r1, r3
    75aa:	408c      	lsls	r4, r1
    75ac:	40d8      	lsrs	r0, r3
    75ae:	408d      	lsls	r5, r1
    75b0:	4304      	orrs	r4, r0
    75b2:	40da      	lsrs	r2, r3
    75b4:	1e68      	subs	r0, r5, #1
    75b6:	4185      	sbcs	r5, r0
    75b8:	0011      	movs	r1, r2
    75ba:	4325      	orrs	r5, r4
    75bc:	2400      	movs	r4, #0
    75be:	e776      	b.n	74ae <__aeabi_dadd+0x52>
    75c0:	4641      	mov	r1, r8
    75c2:	4331      	orrs	r1, r6
    75c4:	d100      	bne.n	75c8 <__aeabi_dadd+0x16c>
    75c6:	e234      	b.n	7a32 <__aeabi_dadd+0x5d6>
    75c8:	0031      	movs	r1, r6
    75ca:	4645      	mov	r5, r8
    75cc:	076b      	lsls	r3, r5, #29
    75ce:	d000      	beq.n	75d2 <__aeabi_dadd+0x176>
    75d0:	e76f      	b.n	74b2 <__aeabi_dadd+0x56>
    75d2:	4656      	mov	r6, sl
    75d4:	0748      	lsls	r0, r1, #29
    75d6:	08ed      	lsrs	r5, r5, #3
    75d8:	08c9      	lsrs	r1, r1, #3
    75da:	4305      	orrs	r5, r0
    75dc:	4b86      	ldr	r3, [pc, #536]	; (77f8 <__aeabi_dadd+0x39c>)
    75de:	429c      	cmp	r4, r3
    75e0:	d035      	beq.n	764e <__aeabi_dadd+0x1f2>
    75e2:	030a      	lsls	r2, r1, #12
    75e4:	0564      	lsls	r4, r4, #21
    75e6:	0b12      	lsrs	r2, r2, #12
    75e8:	0d64      	lsrs	r4, r4, #21
    75ea:	e77f      	b.n	74ec <__aeabi_dadd+0x90>
    75ec:	4663      	mov	r3, ip
    75ee:	1ae3      	subs	r3, r4, r3
    75f0:	469b      	mov	fp, r3
    75f2:	2b00      	cmp	r3, #0
    75f4:	dc00      	bgt.n	75f8 <__aeabi_dadd+0x19c>
    75f6:	e08b      	b.n	7710 <__aeabi_dadd+0x2b4>
    75f8:	4667      	mov	r7, ip
    75fa:	2f00      	cmp	r7, #0
    75fc:	d03c      	beq.n	7678 <__aeabi_dadd+0x21c>
    75fe:	4f7e      	ldr	r7, [pc, #504]	; (77f8 <__aeabi_dadd+0x39c>)
    7600:	42bc      	cmp	r4, r7
    7602:	d100      	bne.n	7606 <__aeabi_dadd+0x1aa>
    7604:	e753      	b.n	74ae <__aeabi_dadd+0x52>
    7606:	2780      	movs	r7, #128	; 0x80
    7608:	043f      	lsls	r7, r7, #16
    760a:	4338      	orrs	r0, r7
    760c:	465b      	mov	r3, fp
    760e:	2b38      	cmp	r3, #56	; 0x38
    7610:	dc00      	bgt.n	7614 <__aeabi_dadd+0x1b8>
    7612:	e0f7      	b.n	7804 <__aeabi_dadd+0x3a8>
    7614:	4302      	orrs	r2, r0
    7616:	1e50      	subs	r0, r2, #1
    7618:	4182      	sbcs	r2, r0
    761a:	2000      	movs	r0, #0
    761c:	b2d2      	uxtb	r2, r2
    761e:	1953      	adds	r3, r2, r5
    7620:	1842      	adds	r2, r0, r1
    7622:	42ab      	cmp	r3, r5
    7624:	4189      	sbcs	r1, r1
    7626:	001d      	movs	r5, r3
    7628:	4249      	negs	r1, r1
    762a:	1889      	adds	r1, r1, r2
    762c:	020b      	lsls	r3, r1, #8
    762e:	d5cd      	bpl.n	75cc <__aeabi_dadd+0x170>
    7630:	4b71      	ldr	r3, [pc, #452]	; (77f8 <__aeabi_dadd+0x39c>)
    7632:	3401      	adds	r4, #1
    7634:	429c      	cmp	r4, r3
    7636:	d100      	bne.n	763a <__aeabi_dadd+0x1de>
    7638:	e13d      	b.n	78b6 <__aeabi_dadd+0x45a>
    763a:	2001      	movs	r0, #1
    763c:	4a6f      	ldr	r2, [pc, #444]	; (77fc <__aeabi_dadd+0x3a0>)
    763e:	086b      	lsrs	r3, r5, #1
    7640:	400a      	ands	r2, r1
    7642:	4028      	ands	r0, r5
    7644:	4318      	orrs	r0, r3
    7646:	07d5      	lsls	r5, r2, #31
    7648:	4305      	orrs	r5, r0
    764a:	0851      	lsrs	r1, r2, #1
    764c:	e72f      	b.n	74ae <__aeabi_dadd+0x52>
    764e:	002b      	movs	r3, r5
    7650:	430b      	orrs	r3, r1
    7652:	d100      	bne.n	7656 <__aeabi_dadd+0x1fa>
    7654:	e1cb      	b.n	79ee <__aeabi_dadd+0x592>
    7656:	2380      	movs	r3, #128	; 0x80
    7658:	031b      	lsls	r3, r3, #12
    765a:	430b      	orrs	r3, r1
    765c:	031a      	lsls	r2, r3, #12
    765e:	0b12      	lsrs	r2, r2, #12
    7660:	e744      	b.n	74ec <__aeabi_dadd+0x90>
    7662:	3e01      	subs	r6, #1
    7664:	2e00      	cmp	r6, #0
    7666:	d16d      	bne.n	7744 <__aeabi_dadd+0x2e8>
    7668:	1aae      	subs	r6, r5, r2
    766a:	42b5      	cmp	r5, r6
    766c:	419b      	sbcs	r3, r3
    766e:	1a09      	subs	r1, r1, r0
    7670:	425b      	negs	r3, r3
    7672:	1ac9      	subs	r1, r1, r3
    7674:	0035      	movs	r5, r6
    7676:	e775      	b.n	7564 <__aeabi_dadd+0x108>
    7678:	0007      	movs	r7, r0
    767a:	4317      	orrs	r7, r2
    767c:	d100      	bne.n	7680 <__aeabi_dadd+0x224>
    767e:	e716      	b.n	74ae <__aeabi_dadd+0x52>
    7680:	2301      	movs	r3, #1
    7682:	425b      	negs	r3, r3
    7684:	469c      	mov	ip, r3
    7686:	44e3      	add	fp, ip
    7688:	465b      	mov	r3, fp
    768a:	2b00      	cmp	r3, #0
    768c:	d000      	beq.n	7690 <__aeabi_dadd+0x234>
    768e:	e0e0      	b.n	7852 <__aeabi_dadd+0x3f6>
    7690:	18aa      	adds	r2, r5, r2
    7692:	42aa      	cmp	r2, r5
    7694:	419b      	sbcs	r3, r3
    7696:	1809      	adds	r1, r1, r0
    7698:	425b      	negs	r3, r3
    769a:	1859      	adds	r1, r3, r1
    769c:	0015      	movs	r5, r2
    769e:	e7c5      	b.n	762c <__aeabi_dadd+0x1d0>
    76a0:	2e00      	cmp	r6, #0
    76a2:	d175      	bne.n	7790 <__aeabi_dadd+0x334>
    76a4:	1c66      	adds	r6, r4, #1
    76a6:	0576      	lsls	r6, r6, #21
    76a8:	0d76      	lsrs	r6, r6, #21
    76aa:	2e01      	cmp	r6, #1
    76ac:	dc00      	bgt.n	76b0 <__aeabi_dadd+0x254>
    76ae:	e0f3      	b.n	7898 <__aeabi_dadd+0x43c>
    76b0:	1aae      	subs	r6, r5, r2
    76b2:	46b0      	mov	r8, r6
    76b4:	4545      	cmp	r5, r8
    76b6:	41bf      	sbcs	r7, r7
    76b8:	1a0e      	subs	r6, r1, r0
    76ba:	427f      	negs	r7, r7
    76bc:	1bf6      	subs	r6, r6, r7
    76be:	0237      	lsls	r7, r6, #8
    76c0:	d400      	bmi.n	76c4 <__aeabi_dadd+0x268>
    76c2:	e08f      	b.n	77e4 <__aeabi_dadd+0x388>
    76c4:	1b55      	subs	r5, r2, r5
    76c6:	42aa      	cmp	r2, r5
    76c8:	41b6      	sbcs	r6, r6
    76ca:	1a41      	subs	r1, r0, r1
    76cc:	4276      	negs	r6, r6
    76ce:	1b8e      	subs	r6, r1, r6
    76d0:	469a      	mov	sl, r3
    76d2:	e74b      	b.n	756c <__aeabi_dadd+0x110>
    76d4:	4656      	mov	r6, sl
    76d6:	2200      	movs	r2, #0
    76d8:	2500      	movs	r5, #0
    76da:	e707      	b.n	74ec <__aeabi_dadd+0x90>
    76dc:	0028      	movs	r0, r5
    76de:	f001 fb3b 	bl	8d58 <__clzsi2>
    76e2:	3020      	adds	r0, #32
    76e4:	0003      	movs	r3, r0
    76e6:	3b08      	subs	r3, #8
    76e8:	2b1f      	cmp	r3, #31
    76ea:	dc00      	bgt.n	76ee <__aeabi_dadd+0x292>
    76ec:	e749      	b.n	7582 <__aeabi_dadd+0x126>
    76ee:	002a      	movs	r2, r5
    76f0:	3828      	subs	r0, #40	; 0x28
    76f2:	4082      	lsls	r2, r0
    76f4:	2500      	movs	r5, #0
    76f6:	429c      	cmp	r4, r3
    76f8:	dc00      	bgt.n	76fc <__aeabi_dadd+0x2a0>
    76fa:	e74d      	b.n	7598 <__aeabi_dadd+0x13c>
    76fc:	493f      	ldr	r1, [pc, #252]	; (77fc <__aeabi_dadd+0x3a0>)
    76fe:	1ae4      	subs	r4, r4, r3
    7700:	4011      	ands	r1, r2
    7702:	e6d4      	b.n	74ae <__aeabi_dadd+0x52>
    7704:	4302      	orrs	r2, r0
    7706:	1e50      	subs	r0, r2, #1
    7708:	4182      	sbcs	r2, r0
    770a:	b2d3      	uxtb	r3, r2
    770c:	2200      	movs	r2, #0
    770e:	e722      	b.n	7556 <__aeabi_dadd+0xfa>
    7710:	2b00      	cmp	r3, #0
    7712:	d000      	beq.n	7716 <__aeabi_dadd+0x2ba>
    7714:	e0f3      	b.n	78fe <__aeabi_dadd+0x4a2>
    7716:	1c63      	adds	r3, r4, #1
    7718:	469c      	mov	ip, r3
    771a:	055b      	lsls	r3, r3, #21
    771c:	0d5b      	lsrs	r3, r3, #21
    771e:	2b01      	cmp	r3, #1
    7720:	dc00      	bgt.n	7724 <__aeabi_dadd+0x2c8>
    7722:	e09f      	b.n	7864 <__aeabi_dadd+0x408>
    7724:	4b34      	ldr	r3, [pc, #208]	; (77f8 <__aeabi_dadd+0x39c>)
    7726:	459c      	cmp	ip, r3
    7728:	d100      	bne.n	772c <__aeabi_dadd+0x2d0>
    772a:	e0c3      	b.n	78b4 <__aeabi_dadd+0x458>
    772c:	18aa      	adds	r2, r5, r2
    772e:	1809      	adds	r1, r1, r0
    7730:	42aa      	cmp	r2, r5
    7732:	4180      	sbcs	r0, r0
    7734:	4240      	negs	r0, r0
    7736:	1841      	adds	r1, r0, r1
    7738:	07cd      	lsls	r5, r1, #31
    773a:	0852      	lsrs	r2, r2, #1
    773c:	4315      	orrs	r5, r2
    773e:	0849      	lsrs	r1, r1, #1
    7740:	4664      	mov	r4, ip
    7742:	e6b4      	b.n	74ae <__aeabi_dadd+0x52>
    7744:	4b2c      	ldr	r3, [pc, #176]	; (77f8 <__aeabi_dadd+0x39c>)
    7746:	429c      	cmp	r4, r3
    7748:	d000      	beq.n	774c <__aeabi_dadd+0x2f0>
    774a:	e6ec      	b.n	7526 <__aeabi_dadd+0xca>
    774c:	e6af      	b.n	74ae <__aeabi_dadd+0x52>
    774e:	0011      	movs	r1, r2
    7750:	3c1f      	subs	r4, #31
    7752:	40e1      	lsrs	r1, r4
    7754:	000c      	movs	r4, r1
    7756:	2b20      	cmp	r3, #32
    7758:	d100      	bne.n	775c <__aeabi_dadd+0x300>
    775a:	e07f      	b.n	785c <__aeabi_dadd+0x400>
    775c:	2140      	movs	r1, #64	; 0x40
    775e:	1acb      	subs	r3, r1, r3
    7760:	409a      	lsls	r2, r3
    7762:	4315      	orrs	r5, r2
    7764:	1e6a      	subs	r2, r5, #1
    7766:	4195      	sbcs	r5, r2
    7768:	2100      	movs	r1, #0
    776a:	4325      	orrs	r5, r4
    776c:	2400      	movs	r4, #0
    776e:	e72d      	b.n	75cc <__aeabi_dadd+0x170>
    7770:	0033      	movs	r3, r6
    7772:	0007      	movs	r7, r0
    7774:	3b20      	subs	r3, #32
    7776:	40df      	lsrs	r7, r3
    7778:	003b      	movs	r3, r7
    777a:	2e20      	cmp	r6, #32
    777c:	d070      	beq.n	7860 <__aeabi_dadd+0x404>
    777e:	2740      	movs	r7, #64	; 0x40
    7780:	1bbe      	subs	r6, r7, r6
    7782:	40b0      	lsls	r0, r6
    7784:	4302      	orrs	r2, r0
    7786:	1e50      	subs	r0, r2, #1
    7788:	4182      	sbcs	r2, r0
    778a:	4313      	orrs	r3, r2
    778c:	2200      	movs	r2, #0
    778e:	e6e2      	b.n	7556 <__aeabi_dadd+0xfa>
    7790:	2c00      	cmp	r4, #0
    7792:	d04f      	beq.n	7834 <__aeabi_dadd+0x3d8>
    7794:	4c18      	ldr	r4, [pc, #96]	; (77f8 <__aeabi_dadd+0x39c>)
    7796:	45a4      	cmp	ip, r4
    7798:	d100      	bne.n	779c <__aeabi_dadd+0x340>
    779a:	e0ab      	b.n	78f4 <__aeabi_dadd+0x498>
    779c:	2480      	movs	r4, #128	; 0x80
    779e:	0424      	lsls	r4, r4, #16
    77a0:	4276      	negs	r6, r6
    77a2:	4321      	orrs	r1, r4
    77a4:	2e38      	cmp	r6, #56	; 0x38
    77a6:	dd00      	ble.n	77aa <__aeabi_dadd+0x34e>
    77a8:	e0df      	b.n	796a <__aeabi_dadd+0x50e>
    77aa:	2e1f      	cmp	r6, #31
    77ac:	dd00      	ble.n	77b0 <__aeabi_dadd+0x354>
    77ae:	e143      	b.n	7a38 <__aeabi_dadd+0x5dc>
    77b0:	2720      	movs	r7, #32
    77b2:	1bbc      	subs	r4, r7, r6
    77b4:	46a1      	mov	r9, r4
    77b6:	000c      	movs	r4, r1
    77b8:	464f      	mov	r7, r9
    77ba:	40bc      	lsls	r4, r7
    77bc:	46a0      	mov	r8, r4
    77be:	002c      	movs	r4, r5
    77c0:	4647      	mov	r7, r8
    77c2:	40f4      	lsrs	r4, r6
    77c4:	433c      	orrs	r4, r7
    77c6:	464f      	mov	r7, r9
    77c8:	40bd      	lsls	r5, r7
    77ca:	1e6f      	subs	r7, r5, #1
    77cc:	41bd      	sbcs	r5, r7
    77ce:	40f1      	lsrs	r1, r6
    77d0:	432c      	orrs	r4, r5
    77d2:	1b15      	subs	r5, r2, r4
    77d4:	42aa      	cmp	r2, r5
    77d6:	4192      	sbcs	r2, r2
    77d8:	1a41      	subs	r1, r0, r1
    77da:	4252      	negs	r2, r2
    77dc:	1a89      	subs	r1, r1, r2
    77de:	4664      	mov	r4, ip
    77e0:	469a      	mov	sl, r3
    77e2:	e6bf      	b.n	7564 <__aeabi_dadd+0x108>
    77e4:	4641      	mov	r1, r8
    77e6:	4645      	mov	r5, r8
    77e8:	4331      	orrs	r1, r6
    77ea:	d000      	beq.n	77ee <__aeabi_dadd+0x392>
    77ec:	e6be      	b.n	756c <__aeabi_dadd+0x110>
    77ee:	2600      	movs	r6, #0
    77f0:	2400      	movs	r4, #0
    77f2:	2500      	movs	r5, #0
    77f4:	e6f2      	b.n	75dc <__aeabi_dadd+0x180>
    77f6:	46c0      	nop			; (mov r8, r8)
    77f8:	000007ff 	.word	0x000007ff
    77fc:	ff7fffff 	.word	0xff7fffff
    7800:	800fffff 	.word	0x800fffff
    7804:	2b1f      	cmp	r3, #31
    7806:	dc59      	bgt.n	78bc <__aeabi_dadd+0x460>
    7808:	2720      	movs	r7, #32
    780a:	1aff      	subs	r7, r7, r3
    780c:	46bc      	mov	ip, r7
    780e:	0007      	movs	r7, r0
    7810:	4663      	mov	r3, ip
    7812:	409f      	lsls	r7, r3
    7814:	465b      	mov	r3, fp
    7816:	46b9      	mov	r9, r7
    7818:	0017      	movs	r7, r2
    781a:	40df      	lsrs	r7, r3
    781c:	46b8      	mov	r8, r7
    781e:	464f      	mov	r7, r9
    7820:	4643      	mov	r3, r8
    7822:	431f      	orrs	r7, r3
    7824:	4663      	mov	r3, ip
    7826:	409a      	lsls	r2, r3
    7828:	1e53      	subs	r3, r2, #1
    782a:	419a      	sbcs	r2, r3
    782c:	465b      	mov	r3, fp
    782e:	433a      	orrs	r2, r7
    7830:	40d8      	lsrs	r0, r3
    7832:	e6f4      	b.n	761e <__aeabi_dadd+0x1c2>
    7834:	000c      	movs	r4, r1
    7836:	432c      	orrs	r4, r5
    7838:	d05c      	beq.n	78f4 <__aeabi_dadd+0x498>
    783a:	43f6      	mvns	r6, r6
    783c:	2e00      	cmp	r6, #0
    783e:	d155      	bne.n	78ec <__aeabi_dadd+0x490>
    7840:	1b55      	subs	r5, r2, r5
    7842:	42aa      	cmp	r2, r5
    7844:	41a4      	sbcs	r4, r4
    7846:	1a41      	subs	r1, r0, r1
    7848:	4264      	negs	r4, r4
    784a:	1b09      	subs	r1, r1, r4
    784c:	469a      	mov	sl, r3
    784e:	4664      	mov	r4, ip
    7850:	e688      	b.n	7564 <__aeabi_dadd+0x108>
    7852:	4f96      	ldr	r7, [pc, #600]	; (7aac <__aeabi_dadd+0x650>)
    7854:	42bc      	cmp	r4, r7
    7856:	d000      	beq.n	785a <__aeabi_dadd+0x3fe>
    7858:	e6d8      	b.n	760c <__aeabi_dadd+0x1b0>
    785a:	e628      	b.n	74ae <__aeabi_dadd+0x52>
    785c:	2200      	movs	r2, #0
    785e:	e780      	b.n	7762 <__aeabi_dadd+0x306>
    7860:	2000      	movs	r0, #0
    7862:	e78f      	b.n	7784 <__aeabi_dadd+0x328>
    7864:	000b      	movs	r3, r1
    7866:	432b      	orrs	r3, r5
    7868:	2c00      	cmp	r4, #0
    786a:	d000      	beq.n	786e <__aeabi_dadd+0x412>
    786c:	e0c2      	b.n	79f4 <__aeabi_dadd+0x598>
    786e:	2b00      	cmp	r3, #0
    7870:	d100      	bne.n	7874 <__aeabi_dadd+0x418>
    7872:	e101      	b.n	7a78 <__aeabi_dadd+0x61c>
    7874:	0003      	movs	r3, r0
    7876:	4313      	orrs	r3, r2
    7878:	d100      	bne.n	787c <__aeabi_dadd+0x420>
    787a:	e618      	b.n	74ae <__aeabi_dadd+0x52>
    787c:	18ab      	adds	r3, r5, r2
    787e:	42ab      	cmp	r3, r5
    7880:	41b6      	sbcs	r6, r6
    7882:	1809      	adds	r1, r1, r0
    7884:	4276      	negs	r6, r6
    7886:	1871      	adds	r1, r6, r1
    7888:	020a      	lsls	r2, r1, #8
    788a:	d400      	bmi.n	788e <__aeabi_dadd+0x432>
    788c:	e109      	b.n	7aa2 <__aeabi_dadd+0x646>
    788e:	4a88      	ldr	r2, [pc, #544]	; (7ab0 <__aeabi_dadd+0x654>)
    7890:	001d      	movs	r5, r3
    7892:	4011      	ands	r1, r2
    7894:	4664      	mov	r4, ip
    7896:	e60a      	b.n	74ae <__aeabi_dadd+0x52>
    7898:	2c00      	cmp	r4, #0
    789a:	d15b      	bne.n	7954 <__aeabi_dadd+0x4f8>
    789c:	000e      	movs	r6, r1
    789e:	432e      	orrs	r6, r5
    78a0:	d000      	beq.n	78a4 <__aeabi_dadd+0x448>
    78a2:	e08a      	b.n	79ba <__aeabi_dadd+0x55e>
    78a4:	0001      	movs	r1, r0
    78a6:	4311      	orrs	r1, r2
    78a8:	d100      	bne.n	78ac <__aeabi_dadd+0x450>
    78aa:	e0c2      	b.n	7a32 <__aeabi_dadd+0x5d6>
    78ac:	0001      	movs	r1, r0
    78ae:	0015      	movs	r5, r2
    78b0:	469a      	mov	sl, r3
    78b2:	e5fc      	b.n	74ae <__aeabi_dadd+0x52>
    78b4:	4664      	mov	r4, ip
    78b6:	2100      	movs	r1, #0
    78b8:	2500      	movs	r5, #0
    78ba:	e68f      	b.n	75dc <__aeabi_dadd+0x180>
    78bc:	2320      	movs	r3, #32
    78be:	425b      	negs	r3, r3
    78c0:	469c      	mov	ip, r3
    78c2:	44dc      	add	ip, fp
    78c4:	4663      	mov	r3, ip
    78c6:	0007      	movs	r7, r0
    78c8:	40df      	lsrs	r7, r3
    78ca:	465b      	mov	r3, fp
    78cc:	46bc      	mov	ip, r7
    78ce:	2b20      	cmp	r3, #32
    78d0:	d100      	bne.n	78d4 <__aeabi_dadd+0x478>
    78d2:	e0ac      	b.n	7a2e <__aeabi_dadd+0x5d2>
    78d4:	2340      	movs	r3, #64	; 0x40
    78d6:	465f      	mov	r7, fp
    78d8:	1bdb      	subs	r3, r3, r7
    78da:	4098      	lsls	r0, r3
    78dc:	4302      	orrs	r2, r0
    78de:	1e50      	subs	r0, r2, #1
    78e0:	4182      	sbcs	r2, r0
    78e2:	4663      	mov	r3, ip
    78e4:	4313      	orrs	r3, r2
    78e6:	001a      	movs	r2, r3
    78e8:	2000      	movs	r0, #0
    78ea:	e698      	b.n	761e <__aeabi_dadd+0x1c2>
    78ec:	4c6f      	ldr	r4, [pc, #444]	; (7aac <__aeabi_dadd+0x650>)
    78ee:	45a4      	cmp	ip, r4
    78f0:	d000      	beq.n	78f4 <__aeabi_dadd+0x498>
    78f2:	e757      	b.n	77a4 <__aeabi_dadd+0x348>
    78f4:	0001      	movs	r1, r0
    78f6:	0015      	movs	r5, r2
    78f8:	4664      	mov	r4, ip
    78fa:	469a      	mov	sl, r3
    78fc:	e5d7      	b.n	74ae <__aeabi_dadd+0x52>
    78fe:	2c00      	cmp	r4, #0
    7900:	d139      	bne.n	7976 <__aeabi_dadd+0x51a>
    7902:	000c      	movs	r4, r1
    7904:	432c      	orrs	r4, r5
    7906:	d06e      	beq.n	79e6 <__aeabi_dadd+0x58a>
    7908:	43db      	mvns	r3, r3
    790a:	2b00      	cmp	r3, #0
    790c:	d01a      	beq.n	7944 <__aeabi_dadd+0x4e8>
    790e:	4c67      	ldr	r4, [pc, #412]	; (7aac <__aeabi_dadd+0x650>)
    7910:	45a4      	cmp	ip, r4
    7912:	d068      	beq.n	79e6 <__aeabi_dadd+0x58a>
    7914:	2b38      	cmp	r3, #56	; 0x38
    7916:	dd00      	ble.n	791a <__aeabi_dadd+0x4be>
    7918:	e0a4      	b.n	7a64 <__aeabi_dadd+0x608>
    791a:	2b1f      	cmp	r3, #31
    791c:	dd00      	ble.n	7920 <__aeabi_dadd+0x4c4>
    791e:	e0ae      	b.n	7a7e <__aeabi_dadd+0x622>
    7920:	2420      	movs	r4, #32
    7922:	000f      	movs	r7, r1
    7924:	1ae4      	subs	r4, r4, r3
    7926:	40a7      	lsls	r7, r4
    7928:	46b9      	mov	r9, r7
    792a:	002f      	movs	r7, r5
    792c:	40df      	lsrs	r7, r3
    792e:	46b8      	mov	r8, r7
    7930:	46a3      	mov	fp, r4
    7932:	464f      	mov	r7, r9
    7934:	4644      	mov	r4, r8
    7936:	4327      	orrs	r7, r4
    7938:	465c      	mov	r4, fp
    793a:	40a5      	lsls	r5, r4
    793c:	1e6c      	subs	r4, r5, #1
    793e:	41a5      	sbcs	r5, r4
    7940:	40d9      	lsrs	r1, r3
    7942:	433d      	orrs	r5, r7
    7944:	18ad      	adds	r5, r5, r2
    7946:	4295      	cmp	r5, r2
    7948:	419b      	sbcs	r3, r3
    794a:	1809      	adds	r1, r1, r0
    794c:	425b      	negs	r3, r3
    794e:	1859      	adds	r1, r3, r1
    7950:	4664      	mov	r4, ip
    7952:	e66b      	b.n	762c <__aeabi_dadd+0x1d0>
    7954:	000c      	movs	r4, r1
    7956:	432c      	orrs	r4, r5
    7958:	d115      	bne.n	7986 <__aeabi_dadd+0x52a>
    795a:	0001      	movs	r1, r0
    795c:	4311      	orrs	r1, r2
    795e:	d07b      	beq.n	7a58 <__aeabi_dadd+0x5fc>
    7960:	0001      	movs	r1, r0
    7962:	0015      	movs	r5, r2
    7964:	469a      	mov	sl, r3
    7966:	4c51      	ldr	r4, [pc, #324]	; (7aac <__aeabi_dadd+0x650>)
    7968:	e5a1      	b.n	74ae <__aeabi_dadd+0x52>
    796a:	430d      	orrs	r5, r1
    796c:	1e69      	subs	r1, r5, #1
    796e:	418d      	sbcs	r5, r1
    7970:	2100      	movs	r1, #0
    7972:	b2ec      	uxtb	r4, r5
    7974:	e72d      	b.n	77d2 <__aeabi_dadd+0x376>
    7976:	4c4d      	ldr	r4, [pc, #308]	; (7aac <__aeabi_dadd+0x650>)
    7978:	45a4      	cmp	ip, r4
    797a:	d034      	beq.n	79e6 <__aeabi_dadd+0x58a>
    797c:	2480      	movs	r4, #128	; 0x80
    797e:	0424      	lsls	r4, r4, #16
    7980:	425b      	negs	r3, r3
    7982:	4321      	orrs	r1, r4
    7984:	e7c6      	b.n	7914 <__aeabi_dadd+0x4b8>
    7986:	0004      	movs	r4, r0
    7988:	4314      	orrs	r4, r2
    798a:	d04e      	beq.n	7a2a <__aeabi_dadd+0x5ce>
    798c:	08ed      	lsrs	r5, r5, #3
    798e:	074c      	lsls	r4, r1, #29
    7990:	432c      	orrs	r4, r5
    7992:	2580      	movs	r5, #128	; 0x80
    7994:	08c9      	lsrs	r1, r1, #3
    7996:	032d      	lsls	r5, r5, #12
    7998:	4229      	tst	r1, r5
    799a:	d008      	beq.n	79ae <__aeabi_dadd+0x552>
    799c:	08c6      	lsrs	r6, r0, #3
    799e:	422e      	tst	r6, r5
    79a0:	d105      	bne.n	79ae <__aeabi_dadd+0x552>
    79a2:	08d2      	lsrs	r2, r2, #3
    79a4:	0741      	lsls	r1, r0, #29
    79a6:	4311      	orrs	r1, r2
    79a8:	000c      	movs	r4, r1
    79aa:	469a      	mov	sl, r3
    79ac:	0031      	movs	r1, r6
    79ae:	0f62      	lsrs	r2, r4, #29
    79b0:	00c9      	lsls	r1, r1, #3
    79b2:	00e5      	lsls	r5, r4, #3
    79b4:	4311      	orrs	r1, r2
    79b6:	4c3d      	ldr	r4, [pc, #244]	; (7aac <__aeabi_dadd+0x650>)
    79b8:	e579      	b.n	74ae <__aeabi_dadd+0x52>
    79ba:	0006      	movs	r6, r0
    79bc:	4316      	orrs	r6, r2
    79be:	d100      	bne.n	79c2 <__aeabi_dadd+0x566>
    79c0:	e575      	b.n	74ae <__aeabi_dadd+0x52>
    79c2:	1aae      	subs	r6, r5, r2
    79c4:	46b0      	mov	r8, r6
    79c6:	4545      	cmp	r5, r8
    79c8:	41bf      	sbcs	r7, r7
    79ca:	1a0e      	subs	r6, r1, r0
    79cc:	427f      	negs	r7, r7
    79ce:	1bf6      	subs	r6, r6, r7
    79d0:	0237      	lsls	r7, r6, #8
    79d2:	d400      	bmi.n	79d6 <__aeabi_dadd+0x57a>
    79d4:	e5f4      	b.n	75c0 <__aeabi_dadd+0x164>
    79d6:	1b55      	subs	r5, r2, r5
    79d8:	42aa      	cmp	r2, r5
    79da:	41b6      	sbcs	r6, r6
    79dc:	1a41      	subs	r1, r0, r1
    79de:	4276      	negs	r6, r6
    79e0:	1b89      	subs	r1, r1, r6
    79e2:	469a      	mov	sl, r3
    79e4:	e563      	b.n	74ae <__aeabi_dadd+0x52>
    79e6:	0001      	movs	r1, r0
    79e8:	0015      	movs	r5, r2
    79ea:	4664      	mov	r4, ip
    79ec:	e55f      	b.n	74ae <__aeabi_dadd+0x52>
    79ee:	2200      	movs	r2, #0
    79f0:	2500      	movs	r5, #0
    79f2:	e57b      	b.n	74ec <__aeabi_dadd+0x90>
    79f4:	2b00      	cmp	r3, #0
    79f6:	d03b      	beq.n	7a70 <__aeabi_dadd+0x614>
    79f8:	0003      	movs	r3, r0
    79fa:	4313      	orrs	r3, r2
    79fc:	d015      	beq.n	7a2a <__aeabi_dadd+0x5ce>
    79fe:	08ed      	lsrs	r5, r5, #3
    7a00:	074b      	lsls	r3, r1, #29
    7a02:	432b      	orrs	r3, r5
    7a04:	2580      	movs	r5, #128	; 0x80
    7a06:	08c9      	lsrs	r1, r1, #3
    7a08:	032d      	lsls	r5, r5, #12
    7a0a:	4229      	tst	r1, r5
    7a0c:	d007      	beq.n	7a1e <__aeabi_dadd+0x5c2>
    7a0e:	08c4      	lsrs	r4, r0, #3
    7a10:	422c      	tst	r4, r5
    7a12:	d104      	bne.n	7a1e <__aeabi_dadd+0x5c2>
    7a14:	0741      	lsls	r1, r0, #29
    7a16:	000b      	movs	r3, r1
    7a18:	0021      	movs	r1, r4
    7a1a:	08d2      	lsrs	r2, r2, #3
    7a1c:	4313      	orrs	r3, r2
    7a1e:	00c9      	lsls	r1, r1, #3
    7a20:	0f5a      	lsrs	r2, r3, #29
    7a22:	4311      	orrs	r1, r2
    7a24:	00dd      	lsls	r5, r3, #3
    7a26:	4c21      	ldr	r4, [pc, #132]	; (7aac <__aeabi_dadd+0x650>)
    7a28:	e541      	b.n	74ae <__aeabi_dadd+0x52>
    7a2a:	4c20      	ldr	r4, [pc, #128]	; (7aac <__aeabi_dadd+0x650>)
    7a2c:	e53f      	b.n	74ae <__aeabi_dadd+0x52>
    7a2e:	2000      	movs	r0, #0
    7a30:	e754      	b.n	78dc <__aeabi_dadd+0x480>
    7a32:	2600      	movs	r6, #0
    7a34:	2500      	movs	r5, #0
    7a36:	e5d1      	b.n	75dc <__aeabi_dadd+0x180>
    7a38:	0034      	movs	r4, r6
    7a3a:	000f      	movs	r7, r1
    7a3c:	3c20      	subs	r4, #32
    7a3e:	40e7      	lsrs	r7, r4
    7a40:	003c      	movs	r4, r7
    7a42:	2e20      	cmp	r6, #32
    7a44:	d02b      	beq.n	7a9e <__aeabi_dadd+0x642>
    7a46:	2740      	movs	r7, #64	; 0x40
    7a48:	1bbe      	subs	r6, r7, r6
    7a4a:	40b1      	lsls	r1, r6
    7a4c:	430d      	orrs	r5, r1
    7a4e:	1e69      	subs	r1, r5, #1
    7a50:	418d      	sbcs	r5, r1
    7a52:	2100      	movs	r1, #0
    7a54:	432c      	orrs	r4, r5
    7a56:	e6bc      	b.n	77d2 <__aeabi_dadd+0x376>
    7a58:	2180      	movs	r1, #128	; 0x80
    7a5a:	2600      	movs	r6, #0
    7a5c:	0309      	lsls	r1, r1, #12
    7a5e:	4c13      	ldr	r4, [pc, #76]	; (7aac <__aeabi_dadd+0x650>)
    7a60:	2500      	movs	r5, #0
    7a62:	e5bb      	b.n	75dc <__aeabi_dadd+0x180>
    7a64:	430d      	orrs	r5, r1
    7a66:	1e69      	subs	r1, r5, #1
    7a68:	418d      	sbcs	r5, r1
    7a6a:	2100      	movs	r1, #0
    7a6c:	b2ed      	uxtb	r5, r5
    7a6e:	e769      	b.n	7944 <__aeabi_dadd+0x4e8>
    7a70:	0001      	movs	r1, r0
    7a72:	0015      	movs	r5, r2
    7a74:	4c0d      	ldr	r4, [pc, #52]	; (7aac <__aeabi_dadd+0x650>)
    7a76:	e51a      	b.n	74ae <__aeabi_dadd+0x52>
    7a78:	0001      	movs	r1, r0
    7a7a:	0015      	movs	r5, r2
    7a7c:	e517      	b.n	74ae <__aeabi_dadd+0x52>
    7a7e:	001c      	movs	r4, r3
    7a80:	000f      	movs	r7, r1
    7a82:	3c20      	subs	r4, #32
    7a84:	40e7      	lsrs	r7, r4
    7a86:	003c      	movs	r4, r7
    7a88:	2b20      	cmp	r3, #32
    7a8a:	d00c      	beq.n	7aa6 <__aeabi_dadd+0x64a>
    7a8c:	2740      	movs	r7, #64	; 0x40
    7a8e:	1afb      	subs	r3, r7, r3
    7a90:	4099      	lsls	r1, r3
    7a92:	430d      	orrs	r5, r1
    7a94:	1e69      	subs	r1, r5, #1
    7a96:	418d      	sbcs	r5, r1
    7a98:	2100      	movs	r1, #0
    7a9a:	4325      	orrs	r5, r4
    7a9c:	e752      	b.n	7944 <__aeabi_dadd+0x4e8>
    7a9e:	2100      	movs	r1, #0
    7aa0:	e7d4      	b.n	7a4c <__aeabi_dadd+0x5f0>
    7aa2:	001d      	movs	r5, r3
    7aa4:	e592      	b.n	75cc <__aeabi_dadd+0x170>
    7aa6:	2100      	movs	r1, #0
    7aa8:	e7f3      	b.n	7a92 <__aeabi_dadd+0x636>
    7aaa:	46c0      	nop			; (mov r8, r8)
    7aac:	000007ff 	.word	0x000007ff
    7ab0:	ff7fffff 	.word	0xff7fffff

00007ab4 <__aeabi_ddiv>:
    7ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab6:	4656      	mov	r6, sl
    7ab8:	464d      	mov	r5, r9
    7aba:	4644      	mov	r4, r8
    7abc:	465f      	mov	r7, fp
    7abe:	b4f0      	push	{r4, r5, r6, r7}
    7ac0:	001d      	movs	r5, r3
    7ac2:	030e      	lsls	r6, r1, #12
    7ac4:	004c      	lsls	r4, r1, #1
    7ac6:	0fcb      	lsrs	r3, r1, #31
    7ac8:	b087      	sub	sp, #28
    7aca:	0007      	movs	r7, r0
    7acc:	4692      	mov	sl, r2
    7ace:	4681      	mov	r9, r0
    7ad0:	0b36      	lsrs	r6, r6, #12
    7ad2:	0d64      	lsrs	r4, r4, #21
    7ad4:	4698      	mov	r8, r3
    7ad6:	d06a      	beq.n	7bae <__aeabi_ddiv+0xfa>
    7ad8:	4b6d      	ldr	r3, [pc, #436]	; (7c90 <__aeabi_ddiv+0x1dc>)
    7ada:	429c      	cmp	r4, r3
    7adc:	d035      	beq.n	7b4a <__aeabi_ddiv+0x96>
    7ade:	2280      	movs	r2, #128	; 0x80
    7ae0:	0f43      	lsrs	r3, r0, #29
    7ae2:	0412      	lsls	r2, r2, #16
    7ae4:	4313      	orrs	r3, r2
    7ae6:	00f6      	lsls	r6, r6, #3
    7ae8:	431e      	orrs	r6, r3
    7aea:	00c3      	lsls	r3, r0, #3
    7aec:	4699      	mov	r9, r3
    7aee:	4b69      	ldr	r3, [pc, #420]	; (7c94 <__aeabi_ddiv+0x1e0>)
    7af0:	2700      	movs	r7, #0
    7af2:	469c      	mov	ip, r3
    7af4:	2300      	movs	r3, #0
    7af6:	4464      	add	r4, ip
    7af8:	9302      	str	r3, [sp, #8]
    7afa:	032b      	lsls	r3, r5, #12
    7afc:	0068      	lsls	r0, r5, #1
    7afe:	0b1b      	lsrs	r3, r3, #12
    7b00:	0fed      	lsrs	r5, r5, #31
    7b02:	4651      	mov	r1, sl
    7b04:	469b      	mov	fp, r3
    7b06:	0d40      	lsrs	r0, r0, #21
    7b08:	9500      	str	r5, [sp, #0]
    7b0a:	d100      	bne.n	7b0e <__aeabi_ddiv+0x5a>
    7b0c:	e078      	b.n	7c00 <__aeabi_ddiv+0x14c>
    7b0e:	4b60      	ldr	r3, [pc, #384]	; (7c90 <__aeabi_ddiv+0x1dc>)
    7b10:	4298      	cmp	r0, r3
    7b12:	d06c      	beq.n	7bee <__aeabi_ddiv+0x13a>
    7b14:	465b      	mov	r3, fp
    7b16:	00da      	lsls	r2, r3, #3
    7b18:	0f4b      	lsrs	r3, r1, #29
    7b1a:	2180      	movs	r1, #128	; 0x80
    7b1c:	0409      	lsls	r1, r1, #16
    7b1e:	430b      	orrs	r3, r1
    7b20:	4313      	orrs	r3, r2
    7b22:	469b      	mov	fp, r3
    7b24:	4653      	mov	r3, sl
    7b26:	00d9      	lsls	r1, r3, #3
    7b28:	4b5a      	ldr	r3, [pc, #360]	; (7c94 <__aeabi_ddiv+0x1e0>)
    7b2a:	469c      	mov	ip, r3
    7b2c:	2300      	movs	r3, #0
    7b2e:	4460      	add	r0, ip
    7b30:	4642      	mov	r2, r8
    7b32:	1a20      	subs	r0, r4, r0
    7b34:	406a      	eors	r2, r5
    7b36:	4692      	mov	sl, r2
    7b38:	9001      	str	r0, [sp, #4]
    7b3a:	431f      	orrs	r7, r3
    7b3c:	2f0f      	cmp	r7, #15
    7b3e:	d900      	bls.n	7b42 <__aeabi_ddiv+0x8e>
    7b40:	e0b0      	b.n	7ca4 <__aeabi_ddiv+0x1f0>
    7b42:	4855      	ldr	r0, [pc, #340]	; (7c98 <__aeabi_ddiv+0x1e4>)
    7b44:	00bf      	lsls	r7, r7, #2
    7b46:	59c0      	ldr	r0, [r0, r7]
    7b48:	4687      	mov	pc, r0
    7b4a:	4337      	orrs	r7, r6
    7b4c:	d000      	beq.n	7b50 <__aeabi_ddiv+0x9c>
    7b4e:	e088      	b.n	7c62 <__aeabi_ddiv+0x1ae>
    7b50:	2300      	movs	r3, #0
    7b52:	4699      	mov	r9, r3
    7b54:	3302      	adds	r3, #2
    7b56:	2708      	movs	r7, #8
    7b58:	2600      	movs	r6, #0
    7b5a:	9302      	str	r3, [sp, #8]
    7b5c:	e7cd      	b.n	7afa <__aeabi_ddiv+0x46>
    7b5e:	4643      	mov	r3, r8
    7b60:	46b3      	mov	fp, r6
    7b62:	4649      	mov	r1, r9
    7b64:	9300      	str	r3, [sp, #0]
    7b66:	9b02      	ldr	r3, [sp, #8]
    7b68:	9a00      	ldr	r2, [sp, #0]
    7b6a:	4692      	mov	sl, r2
    7b6c:	2b02      	cmp	r3, #2
    7b6e:	d000      	beq.n	7b72 <__aeabi_ddiv+0xbe>
    7b70:	e1bf      	b.n	7ef2 <__aeabi_ddiv+0x43e>
    7b72:	2100      	movs	r1, #0
    7b74:	4653      	mov	r3, sl
    7b76:	2201      	movs	r2, #1
    7b78:	2600      	movs	r6, #0
    7b7a:	4689      	mov	r9, r1
    7b7c:	401a      	ands	r2, r3
    7b7e:	4b44      	ldr	r3, [pc, #272]	; (7c90 <__aeabi_ddiv+0x1dc>)
    7b80:	2100      	movs	r1, #0
    7b82:	0336      	lsls	r6, r6, #12
    7b84:	0d0c      	lsrs	r4, r1, #20
    7b86:	0524      	lsls	r4, r4, #20
    7b88:	0b36      	lsrs	r6, r6, #12
    7b8a:	4326      	orrs	r6, r4
    7b8c:	4c43      	ldr	r4, [pc, #268]	; (7c9c <__aeabi_ddiv+0x1e8>)
    7b8e:	051b      	lsls	r3, r3, #20
    7b90:	4026      	ands	r6, r4
    7b92:	431e      	orrs	r6, r3
    7b94:	0076      	lsls	r6, r6, #1
    7b96:	07d2      	lsls	r2, r2, #31
    7b98:	0876      	lsrs	r6, r6, #1
    7b9a:	4316      	orrs	r6, r2
    7b9c:	4648      	mov	r0, r9
    7b9e:	0031      	movs	r1, r6
    7ba0:	b007      	add	sp, #28
    7ba2:	bc3c      	pop	{r2, r3, r4, r5}
    7ba4:	4690      	mov	r8, r2
    7ba6:	4699      	mov	r9, r3
    7ba8:	46a2      	mov	sl, r4
    7baa:	46ab      	mov	fp, r5
    7bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bae:	0033      	movs	r3, r6
    7bb0:	4303      	orrs	r3, r0
    7bb2:	d04f      	beq.n	7c54 <__aeabi_ddiv+0x1a0>
    7bb4:	2e00      	cmp	r6, #0
    7bb6:	d100      	bne.n	7bba <__aeabi_ddiv+0x106>
    7bb8:	e1bc      	b.n	7f34 <__aeabi_ddiv+0x480>
    7bba:	0030      	movs	r0, r6
    7bbc:	f001 f8cc 	bl	8d58 <__clzsi2>
    7bc0:	0003      	movs	r3, r0
    7bc2:	3b0b      	subs	r3, #11
    7bc4:	2b1c      	cmp	r3, #28
    7bc6:	dd00      	ble.n	7bca <__aeabi_ddiv+0x116>
    7bc8:	e1ad      	b.n	7f26 <__aeabi_ddiv+0x472>
    7bca:	221d      	movs	r2, #29
    7bcc:	0001      	movs	r1, r0
    7bce:	1ad3      	subs	r3, r2, r3
    7bd0:	3908      	subs	r1, #8
    7bd2:	003a      	movs	r2, r7
    7bd4:	408f      	lsls	r7, r1
    7bd6:	408e      	lsls	r6, r1
    7bd8:	40da      	lsrs	r2, r3
    7bda:	46b9      	mov	r9, r7
    7bdc:	4316      	orrs	r6, r2
    7bde:	4b30      	ldr	r3, [pc, #192]	; (7ca0 <__aeabi_ddiv+0x1ec>)
    7be0:	2700      	movs	r7, #0
    7be2:	469c      	mov	ip, r3
    7be4:	2300      	movs	r3, #0
    7be6:	4460      	add	r0, ip
    7be8:	4244      	negs	r4, r0
    7bea:	9302      	str	r3, [sp, #8]
    7bec:	e785      	b.n	7afa <__aeabi_ddiv+0x46>
    7bee:	4653      	mov	r3, sl
    7bf0:	465a      	mov	r2, fp
    7bf2:	4313      	orrs	r3, r2
    7bf4:	d12c      	bne.n	7c50 <__aeabi_ddiv+0x19c>
    7bf6:	2300      	movs	r3, #0
    7bf8:	2100      	movs	r1, #0
    7bfa:	469b      	mov	fp, r3
    7bfc:	3302      	adds	r3, #2
    7bfe:	e797      	b.n	7b30 <__aeabi_ddiv+0x7c>
    7c00:	430b      	orrs	r3, r1
    7c02:	d020      	beq.n	7c46 <__aeabi_ddiv+0x192>
    7c04:	465b      	mov	r3, fp
    7c06:	2b00      	cmp	r3, #0
    7c08:	d100      	bne.n	7c0c <__aeabi_ddiv+0x158>
    7c0a:	e19e      	b.n	7f4a <__aeabi_ddiv+0x496>
    7c0c:	4658      	mov	r0, fp
    7c0e:	f001 f8a3 	bl	8d58 <__clzsi2>
    7c12:	0003      	movs	r3, r0
    7c14:	3b0b      	subs	r3, #11
    7c16:	2b1c      	cmp	r3, #28
    7c18:	dd00      	ble.n	7c1c <__aeabi_ddiv+0x168>
    7c1a:	e18f      	b.n	7f3c <__aeabi_ddiv+0x488>
    7c1c:	0002      	movs	r2, r0
    7c1e:	4659      	mov	r1, fp
    7c20:	3a08      	subs	r2, #8
    7c22:	4091      	lsls	r1, r2
    7c24:	468b      	mov	fp, r1
    7c26:	211d      	movs	r1, #29
    7c28:	1acb      	subs	r3, r1, r3
    7c2a:	4651      	mov	r1, sl
    7c2c:	40d9      	lsrs	r1, r3
    7c2e:	000b      	movs	r3, r1
    7c30:	4659      	mov	r1, fp
    7c32:	430b      	orrs	r3, r1
    7c34:	4651      	mov	r1, sl
    7c36:	469b      	mov	fp, r3
    7c38:	4091      	lsls	r1, r2
    7c3a:	4b19      	ldr	r3, [pc, #100]	; (7ca0 <__aeabi_ddiv+0x1ec>)
    7c3c:	469c      	mov	ip, r3
    7c3e:	4460      	add	r0, ip
    7c40:	4240      	negs	r0, r0
    7c42:	2300      	movs	r3, #0
    7c44:	e774      	b.n	7b30 <__aeabi_ddiv+0x7c>
    7c46:	2300      	movs	r3, #0
    7c48:	2100      	movs	r1, #0
    7c4a:	469b      	mov	fp, r3
    7c4c:	3301      	adds	r3, #1
    7c4e:	e76f      	b.n	7b30 <__aeabi_ddiv+0x7c>
    7c50:	2303      	movs	r3, #3
    7c52:	e76d      	b.n	7b30 <__aeabi_ddiv+0x7c>
    7c54:	2300      	movs	r3, #0
    7c56:	4699      	mov	r9, r3
    7c58:	3301      	adds	r3, #1
    7c5a:	2704      	movs	r7, #4
    7c5c:	2600      	movs	r6, #0
    7c5e:	9302      	str	r3, [sp, #8]
    7c60:	e74b      	b.n	7afa <__aeabi_ddiv+0x46>
    7c62:	2303      	movs	r3, #3
    7c64:	270c      	movs	r7, #12
    7c66:	9302      	str	r3, [sp, #8]
    7c68:	e747      	b.n	7afa <__aeabi_ddiv+0x46>
    7c6a:	2201      	movs	r2, #1
    7c6c:	1ad5      	subs	r5, r2, r3
    7c6e:	2d38      	cmp	r5, #56	; 0x38
    7c70:	dc00      	bgt.n	7c74 <__aeabi_ddiv+0x1c0>
    7c72:	e1b0      	b.n	7fd6 <__aeabi_ddiv+0x522>
    7c74:	4653      	mov	r3, sl
    7c76:	401a      	ands	r2, r3
    7c78:	2100      	movs	r1, #0
    7c7a:	2300      	movs	r3, #0
    7c7c:	2600      	movs	r6, #0
    7c7e:	4689      	mov	r9, r1
    7c80:	e77e      	b.n	7b80 <__aeabi_ddiv+0xcc>
    7c82:	2300      	movs	r3, #0
    7c84:	2680      	movs	r6, #128	; 0x80
    7c86:	4699      	mov	r9, r3
    7c88:	2200      	movs	r2, #0
    7c8a:	0336      	lsls	r6, r6, #12
    7c8c:	4b00      	ldr	r3, [pc, #0]	; (7c90 <__aeabi_ddiv+0x1dc>)
    7c8e:	e777      	b.n	7b80 <__aeabi_ddiv+0xcc>
    7c90:	000007ff 	.word	0x000007ff
    7c94:	fffffc01 	.word	0xfffffc01
    7c98:	00008ef4 	.word	0x00008ef4
    7c9c:	800fffff 	.word	0x800fffff
    7ca0:	000003f3 	.word	0x000003f3
    7ca4:	455e      	cmp	r6, fp
    7ca6:	d900      	bls.n	7caa <__aeabi_ddiv+0x1f6>
    7ca8:	e172      	b.n	7f90 <__aeabi_ddiv+0x4dc>
    7caa:	d100      	bne.n	7cae <__aeabi_ddiv+0x1fa>
    7cac:	e16d      	b.n	7f8a <__aeabi_ddiv+0x4d6>
    7cae:	9b01      	ldr	r3, [sp, #4]
    7cb0:	464d      	mov	r5, r9
    7cb2:	3b01      	subs	r3, #1
    7cb4:	9301      	str	r3, [sp, #4]
    7cb6:	2300      	movs	r3, #0
    7cb8:	0034      	movs	r4, r6
    7cba:	9302      	str	r3, [sp, #8]
    7cbc:	465b      	mov	r3, fp
    7cbe:	021e      	lsls	r6, r3, #8
    7cc0:	0e0b      	lsrs	r3, r1, #24
    7cc2:	431e      	orrs	r6, r3
    7cc4:	020b      	lsls	r3, r1, #8
    7cc6:	9303      	str	r3, [sp, #12]
    7cc8:	0c33      	lsrs	r3, r6, #16
    7cca:	4699      	mov	r9, r3
    7ccc:	0433      	lsls	r3, r6, #16
    7cce:	0c1b      	lsrs	r3, r3, #16
    7cd0:	4649      	mov	r1, r9
    7cd2:	0020      	movs	r0, r4
    7cd4:	9300      	str	r3, [sp, #0]
    7cd6:	f7ff fb35 	bl	7344 <__aeabi_uidiv>
    7cda:	9b00      	ldr	r3, [sp, #0]
    7cdc:	0037      	movs	r7, r6
    7cde:	4343      	muls	r3, r0
    7ce0:	0006      	movs	r6, r0
    7ce2:	4649      	mov	r1, r9
    7ce4:	0020      	movs	r0, r4
    7ce6:	4698      	mov	r8, r3
    7ce8:	f7ff fbb2 	bl	7450 <__aeabi_uidivmod>
    7cec:	0c2c      	lsrs	r4, r5, #16
    7cee:	0409      	lsls	r1, r1, #16
    7cf0:	430c      	orrs	r4, r1
    7cf2:	45a0      	cmp	r8, r4
    7cf4:	d909      	bls.n	7d0a <__aeabi_ddiv+0x256>
    7cf6:	19e4      	adds	r4, r4, r7
    7cf8:	1e73      	subs	r3, r6, #1
    7cfa:	42a7      	cmp	r7, r4
    7cfc:	d900      	bls.n	7d00 <__aeabi_ddiv+0x24c>
    7cfe:	e15c      	b.n	7fba <__aeabi_ddiv+0x506>
    7d00:	45a0      	cmp	r8, r4
    7d02:	d800      	bhi.n	7d06 <__aeabi_ddiv+0x252>
    7d04:	e159      	b.n	7fba <__aeabi_ddiv+0x506>
    7d06:	3e02      	subs	r6, #2
    7d08:	19e4      	adds	r4, r4, r7
    7d0a:	4643      	mov	r3, r8
    7d0c:	1ae4      	subs	r4, r4, r3
    7d0e:	4649      	mov	r1, r9
    7d10:	0020      	movs	r0, r4
    7d12:	f7ff fb17 	bl	7344 <__aeabi_uidiv>
    7d16:	0003      	movs	r3, r0
    7d18:	9a00      	ldr	r2, [sp, #0]
    7d1a:	4680      	mov	r8, r0
    7d1c:	4353      	muls	r3, r2
    7d1e:	4649      	mov	r1, r9
    7d20:	0020      	movs	r0, r4
    7d22:	469b      	mov	fp, r3
    7d24:	f7ff fb94 	bl	7450 <__aeabi_uidivmod>
    7d28:	042a      	lsls	r2, r5, #16
    7d2a:	0409      	lsls	r1, r1, #16
    7d2c:	0c12      	lsrs	r2, r2, #16
    7d2e:	430a      	orrs	r2, r1
    7d30:	4593      	cmp	fp, r2
    7d32:	d90d      	bls.n	7d50 <__aeabi_ddiv+0x29c>
    7d34:	4643      	mov	r3, r8
    7d36:	19d2      	adds	r2, r2, r7
    7d38:	3b01      	subs	r3, #1
    7d3a:	4297      	cmp	r7, r2
    7d3c:	d900      	bls.n	7d40 <__aeabi_ddiv+0x28c>
    7d3e:	e13a      	b.n	7fb6 <__aeabi_ddiv+0x502>
    7d40:	4593      	cmp	fp, r2
    7d42:	d800      	bhi.n	7d46 <__aeabi_ddiv+0x292>
    7d44:	e137      	b.n	7fb6 <__aeabi_ddiv+0x502>
    7d46:	2302      	movs	r3, #2
    7d48:	425b      	negs	r3, r3
    7d4a:	469c      	mov	ip, r3
    7d4c:	19d2      	adds	r2, r2, r7
    7d4e:	44e0      	add	r8, ip
    7d50:	465b      	mov	r3, fp
    7d52:	1ad2      	subs	r2, r2, r3
    7d54:	4643      	mov	r3, r8
    7d56:	0436      	lsls	r6, r6, #16
    7d58:	4333      	orrs	r3, r6
    7d5a:	469b      	mov	fp, r3
    7d5c:	9903      	ldr	r1, [sp, #12]
    7d5e:	0c18      	lsrs	r0, r3, #16
    7d60:	0c0b      	lsrs	r3, r1, #16
    7d62:	001d      	movs	r5, r3
    7d64:	9305      	str	r3, [sp, #20]
    7d66:	0409      	lsls	r1, r1, #16
    7d68:	465b      	mov	r3, fp
    7d6a:	0c09      	lsrs	r1, r1, #16
    7d6c:	000c      	movs	r4, r1
    7d6e:	041b      	lsls	r3, r3, #16
    7d70:	0c1b      	lsrs	r3, r3, #16
    7d72:	4344      	muls	r4, r0
    7d74:	9104      	str	r1, [sp, #16]
    7d76:	4359      	muls	r1, r3
    7d78:	436b      	muls	r3, r5
    7d7a:	4368      	muls	r0, r5
    7d7c:	191b      	adds	r3, r3, r4
    7d7e:	0c0d      	lsrs	r5, r1, #16
    7d80:	18eb      	adds	r3, r5, r3
    7d82:	429c      	cmp	r4, r3
    7d84:	d903      	bls.n	7d8e <__aeabi_ddiv+0x2da>
    7d86:	2480      	movs	r4, #128	; 0x80
    7d88:	0264      	lsls	r4, r4, #9
    7d8a:	46a4      	mov	ip, r4
    7d8c:	4460      	add	r0, ip
    7d8e:	0c1c      	lsrs	r4, r3, #16
    7d90:	0409      	lsls	r1, r1, #16
    7d92:	041b      	lsls	r3, r3, #16
    7d94:	0c09      	lsrs	r1, r1, #16
    7d96:	1820      	adds	r0, r4, r0
    7d98:	185d      	adds	r5, r3, r1
    7d9a:	4282      	cmp	r2, r0
    7d9c:	d200      	bcs.n	7da0 <__aeabi_ddiv+0x2ec>
    7d9e:	e0de      	b.n	7f5e <__aeabi_ddiv+0x4aa>
    7da0:	d100      	bne.n	7da4 <__aeabi_ddiv+0x2f0>
    7da2:	e0d7      	b.n	7f54 <__aeabi_ddiv+0x4a0>
    7da4:	1a16      	subs	r6, r2, r0
    7da6:	9b02      	ldr	r3, [sp, #8]
    7da8:	469c      	mov	ip, r3
    7daa:	1b5d      	subs	r5, r3, r5
    7dac:	45ac      	cmp	ip, r5
    7dae:	419b      	sbcs	r3, r3
    7db0:	425b      	negs	r3, r3
    7db2:	1af6      	subs	r6, r6, r3
    7db4:	42b7      	cmp	r7, r6
    7db6:	d100      	bne.n	7dba <__aeabi_ddiv+0x306>
    7db8:	e106      	b.n	7fc8 <__aeabi_ddiv+0x514>
    7dba:	4649      	mov	r1, r9
    7dbc:	0030      	movs	r0, r6
    7dbe:	f7ff fac1 	bl	7344 <__aeabi_uidiv>
    7dc2:	9b00      	ldr	r3, [sp, #0]
    7dc4:	0004      	movs	r4, r0
    7dc6:	4343      	muls	r3, r0
    7dc8:	4649      	mov	r1, r9
    7dca:	0030      	movs	r0, r6
    7dcc:	4698      	mov	r8, r3
    7dce:	f7ff fb3f 	bl	7450 <__aeabi_uidivmod>
    7dd2:	0c2e      	lsrs	r6, r5, #16
    7dd4:	0409      	lsls	r1, r1, #16
    7dd6:	430e      	orrs	r6, r1
    7dd8:	45b0      	cmp	r8, r6
    7dda:	d909      	bls.n	7df0 <__aeabi_ddiv+0x33c>
    7ddc:	19f6      	adds	r6, r6, r7
    7dde:	1e63      	subs	r3, r4, #1
    7de0:	42b7      	cmp	r7, r6
    7de2:	d900      	bls.n	7de6 <__aeabi_ddiv+0x332>
    7de4:	e0f3      	b.n	7fce <__aeabi_ddiv+0x51a>
    7de6:	45b0      	cmp	r8, r6
    7de8:	d800      	bhi.n	7dec <__aeabi_ddiv+0x338>
    7dea:	e0f0      	b.n	7fce <__aeabi_ddiv+0x51a>
    7dec:	3c02      	subs	r4, #2
    7dee:	19f6      	adds	r6, r6, r7
    7df0:	4643      	mov	r3, r8
    7df2:	1af3      	subs	r3, r6, r3
    7df4:	4649      	mov	r1, r9
    7df6:	0018      	movs	r0, r3
    7df8:	9302      	str	r3, [sp, #8]
    7dfa:	f7ff faa3 	bl	7344 <__aeabi_uidiv>
    7dfe:	9b00      	ldr	r3, [sp, #0]
    7e00:	0006      	movs	r6, r0
    7e02:	4343      	muls	r3, r0
    7e04:	4649      	mov	r1, r9
    7e06:	9802      	ldr	r0, [sp, #8]
    7e08:	4698      	mov	r8, r3
    7e0a:	f7ff fb21 	bl	7450 <__aeabi_uidivmod>
    7e0e:	042d      	lsls	r5, r5, #16
    7e10:	0409      	lsls	r1, r1, #16
    7e12:	0c2d      	lsrs	r5, r5, #16
    7e14:	430d      	orrs	r5, r1
    7e16:	45a8      	cmp	r8, r5
    7e18:	d909      	bls.n	7e2e <__aeabi_ddiv+0x37a>
    7e1a:	19ed      	adds	r5, r5, r7
    7e1c:	1e73      	subs	r3, r6, #1
    7e1e:	42af      	cmp	r7, r5
    7e20:	d900      	bls.n	7e24 <__aeabi_ddiv+0x370>
    7e22:	e0d6      	b.n	7fd2 <__aeabi_ddiv+0x51e>
    7e24:	45a8      	cmp	r8, r5
    7e26:	d800      	bhi.n	7e2a <__aeabi_ddiv+0x376>
    7e28:	e0d3      	b.n	7fd2 <__aeabi_ddiv+0x51e>
    7e2a:	3e02      	subs	r6, #2
    7e2c:	19ed      	adds	r5, r5, r7
    7e2e:	0424      	lsls	r4, r4, #16
    7e30:	0021      	movs	r1, r4
    7e32:	4643      	mov	r3, r8
    7e34:	4331      	orrs	r1, r6
    7e36:	9e04      	ldr	r6, [sp, #16]
    7e38:	9a05      	ldr	r2, [sp, #20]
    7e3a:	0030      	movs	r0, r6
    7e3c:	1aed      	subs	r5, r5, r3
    7e3e:	040b      	lsls	r3, r1, #16
    7e40:	0c0c      	lsrs	r4, r1, #16
    7e42:	0c1b      	lsrs	r3, r3, #16
    7e44:	4358      	muls	r0, r3
    7e46:	4366      	muls	r6, r4
    7e48:	4353      	muls	r3, r2
    7e4a:	4354      	muls	r4, r2
    7e4c:	199a      	adds	r2, r3, r6
    7e4e:	0c03      	lsrs	r3, r0, #16
    7e50:	189b      	adds	r3, r3, r2
    7e52:	429e      	cmp	r6, r3
    7e54:	d903      	bls.n	7e5e <__aeabi_ddiv+0x3aa>
    7e56:	2280      	movs	r2, #128	; 0x80
    7e58:	0252      	lsls	r2, r2, #9
    7e5a:	4694      	mov	ip, r2
    7e5c:	4464      	add	r4, ip
    7e5e:	0c1a      	lsrs	r2, r3, #16
    7e60:	0400      	lsls	r0, r0, #16
    7e62:	041b      	lsls	r3, r3, #16
    7e64:	0c00      	lsrs	r0, r0, #16
    7e66:	1914      	adds	r4, r2, r4
    7e68:	181b      	adds	r3, r3, r0
    7e6a:	42a5      	cmp	r5, r4
    7e6c:	d350      	bcc.n	7f10 <__aeabi_ddiv+0x45c>
    7e6e:	d04d      	beq.n	7f0c <__aeabi_ddiv+0x458>
    7e70:	2301      	movs	r3, #1
    7e72:	4319      	orrs	r1, r3
    7e74:	4a96      	ldr	r2, [pc, #600]	; (80d0 <__aeabi_ddiv+0x61c>)
    7e76:	9b01      	ldr	r3, [sp, #4]
    7e78:	4694      	mov	ip, r2
    7e7a:	4463      	add	r3, ip
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	dc00      	bgt.n	7e82 <__aeabi_ddiv+0x3ce>
    7e80:	e6f3      	b.n	7c6a <__aeabi_ddiv+0x1b6>
    7e82:	074a      	lsls	r2, r1, #29
    7e84:	d009      	beq.n	7e9a <__aeabi_ddiv+0x3e6>
    7e86:	220f      	movs	r2, #15
    7e88:	400a      	ands	r2, r1
    7e8a:	2a04      	cmp	r2, #4
    7e8c:	d005      	beq.n	7e9a <__aeabi_ddiv+0x3e6>
    7e8e:	1d0a      	adds	r2, r1, #4
    7e90:	428a      	cmp	r2, r1
    7e92:	4189      	sbcs	r1, r1
    7e94:	4249      	negs	r1, r1
    7e96:	448b      	add	fp, r1
    7e98:	0011      	movs	r1, r2
    7e9a:	465a      	mov	r2, fp
    7e9c:	01d2      	lsls	r2, r2, #7
    7e9e:	d508      	bpl.n	7eb2 <__aeabi_ddiv+0x3fe>
    7ea0:	465a      	mov	r2, fp
    7ea2:	4b8c      	ldr	r3, [pc, #560]	; (80d4 <__aeabi_ddiv+0x620>)
    7ea4:	401a      	ands	r2, r3
    7ea6:	4693      	mov	fp, r2
    7ea8:	2280      	movs	r2, #128	; 0x80
    7eaa:	00d2      	lsls	r2, r2, #3
    7eac:	4694      	mov	ip, r2
    7eae:	9b01      	ldr	r3, [sp, #4]
    7eb0:	4463      	add	r3, ip
    7eb2:	4a89      	ldr	r2, [pc, #548]	; (80d8 <__aeabi_ddiv+0x624>)
    7eb4:	4293      	cmp	r3, r2
    7eb6:	dd00      	ble.n	7eba <__aeabi_ddiv+0x406>
    7eb8:	e65b      	b.n	7b72 <__aeabi_ddiv+0xbe>
    7eba:	465a      	mov	r2, fp
    7ebc:	08c9      	lsrs	r1, r1, #3
    7ebe:	0750      	lsls	r0, r2, #29
    7ec0:	4308      	orrs	r0, r1
    7ec2:	0256      	lsls	r6, r2, #9
    7ec4:	4651      	mov	r1, sl
    7ec6:	2201      	movs	r2, #1
    7ec8:	055b      	lsls	r3, r3, #21
    7eca:	4681      	mov	r9, r0
    7ecc:	0b36      	lsrs	r6, r6, #12
    7ece:	0d5b      	lsrs	r3, r3, #21
    7ed0:	400a      	ands	r2, r1
    7ed2:	e655      	b.n	7b80 <__aeabi_ddiv+0xcc>
    7ed4:	2380      	movs	r3, #128	; 0x80
    7ed6:	031b      	lsls	r3, r3, #12
    7ed8:	421e      	tst	r6, r3
    7eda:	d011      	beq.n	7f00 <__aeabi_ddiv+0x44c>
    7edc:	465a      	mov	r2, fp
    7ede:	421a      	tst	r2, r3
    7ee0:	d10e      	bne.n	7f00 <__aeabi_ddiv+0x44c>
    7ee2:	465e      	mov	r6, fp
    7ee4:	431e      	orrs	r6, r3
    7ee6:	0336      	lsls	r6, r6, #12
    7ee8:	0b36      	lsrs	r6, r6, #12
    7eea:	002a      	movs	r2, r5
    7eec:	4689      	mov	r9, r1
    7eee:	4b7b      	ldr	r3, [pc, #492]	; (80dc <__aeabi_ddiv+0x628>)
    7ef0:	e646      	b.n	7b80 <__aeabi_ddiv+0xcc>
    7ef2:	2b03      	cmp	r3, #3
    7ef4:	d100      	bne.n	7ef8 <__aeabi_ddiv+0x444>
    7ef6:	e0e1      	b.n	80bc <__aeabi_ddiv+0x608>
    7ef8:	2b01      	cmp	r3, #1
    7efa:	d1bb      	bne.n	7e74 <__aeabi_ddiv+0x3c0>
    7efc:	401a      	ands	r2, r3
    7efe:	e6bb      	b.n	7c78 <__aeabi_ddiv+0x1c4>
    7f00:	431e      	orrs	r6, r3
    7f02:	0336      	lsls	r6, r6, #12
    7f04:	0b36      	lsrs	r6, r6, #12
    7f06:	4642      	mov	r2, r8
    7f08:	4b74      	ldr	r3, [pc, #464]	; (80dc <__aeabi_ddiv+0x628>)
    7f0a:	e639      	b.n	7b80 <__aeabi_ddiv+0xcc>
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	d0b1      	beq.n	7e74 <__aeabi_ddiv+0x3c0>
    7f10:	197d      	adds	r5, r7, r5
    7f12:	1e4a      	subs	r2, r1, #1
    7f14:	42af      	cmp	r7, r5
    7f16:	d952      	bls.n	7fbe <__aeabi_ddiv+0x50a>
    7f18:	0011      	movs	r1, r2
    7f1a:	42a5      	cmp	r5, r4
    7f1c:	d1a8      	bne.n	7e70 <__aeabi_ddiv+0x3bc>
    7f1e:	9a03      	ldr	r2, [sp, #12]
    7f20:	429a      	cmp	r2, r3
    7f22:	d1a5      	bne.n	7e70 <__aeabi_ddiv+0x3bc>
    7f24:	e7a6      	b.n	7e74 <__aeabi_ddiv+0x3c0>
    7f26:	0003      	movs	r3, r0
    7f28:	003e      	movs	r6, r7
    7f2a:	3b28      	subs	r3, #40	; 0x28
    7f2c:	409e      	lsls	r6, r3
    7f2e:	2300      	movs	r3, #0
    7f30:	4699      	mov	r9, r3
    7f32:	e654      	b.n	7bde <__aeabi_ddiv+0x12a>
    7f34:	f000 ff10 	bl	8d58 <__clzsi2>
    7f38:	3020      	adds	r0, #32
    7f3a:	e641      	b.n	7bc0 <__aeabi_ddiv+0x10c>
    7f3c:	0003      	movs	r3, r0
    7f3e:	4652      	mov	r2, sl
    7f40:	3b28      	subs	r3, #40	; 0x28
    7f42:	409a      	lsls	r2, r3
    7f44:	2100      	movs	r1, #0
    7f46:	4693      	mov	fp, r2
    7f48:	e677      	b.n	7c3a <__aeabi_ddiv+0x186>
    7f4a:	4650      	mov	r0, sl
    7f4c:	f000 ff04 	bl	8d58 <__clzsi2>
    7f50:	3020      	adds	r0, #32
    7f52:	e65e      	b.n	7c12 <__aeabi_ddiv+0x15e>
    7f54:	9b02      	ldr	r3, [sp, #8]
    7f56:	2600      	movs	r6, #0
    7f58:	42ab      	cmp	r3, r5
    7f5a:	d300      	bcc.n	7f5e <__aeabi_ddiv+0x4aa>
    7f5c:	e723      	b.n	7da6 <__aeabi_ddiv+0x2f2>
    7f5e:	9e03      	ldr	r6, [sp, #12]
    7f60:	9902      	ldr	r1, [sp, #8]
    7f62:	46b4      	mov	ip, r6
    7f64:	4461      	add	r1, ip
    7f66:	4688      	mov	r8, r1
    7f68:	45b0      	cmp	r8, r6
    7f6a:	41b6      	sbcs	r6, r6
    7f6c:	465b      	mov	r3, fp
    7f6e:	4276      	negs	r6, r6
    7f70:	19f6      	adds	r6, r6, r7
    7f72:	18b2      	adds	r2, r6, r2
    7f74:	3b01      	subs	r3, #1
    7f76:	9102      	str	r1, [sp, #8]
    7f78:	4297      	cmp	r7, r2
    7f7a:	d213      	bcs.n	7fa4 <__aeabi_ddiv+0x4f0>
    7f7c:	4290      	cmp	r0, r2
    7f7e:	d84f      	bhi.n	8020 <__aeabi_ddiv+0x56c>
    7f80:	d100      	bne.n	7f84 <__aeabi_ddiv+0x4d0>
    7f82:	e08e      	b.n	80a2 <__aeabi_ddiv+0x5ee>
    7f84:	1a16      	subs	r6, r2, r0
    7f86:	469b      	mov	fp, r3
    7f88:	e70d      	b.n	7da6 <__aeabi_ddiv+0x2f2>
    7f8a:	4589      	cmp	r9, r1
    7f8c:	d200      	bcs.n	7f90 <__aeabi_ddiv+0x4dc>
    7f8e:	e68e      	b.n	7cae <__aeabi_ddiv+0x1fa>
    7f90:	0874      	lsrs	r4, r6, #1
    7f92:	464b      	mov	r3, r9
    7f94:	07f6      	lsls	r6, r6, #31
    7f96:	0035      	movs	r5, r6
    7f98:	085b      	lsrs	r3, r3, #1
    7f9a:	431d      	orrs	r5, r3
    7f9c:	464b      	mov	r3, r9
    7f9e:	07db      	lsls	r3, r3, #31
    7fa0:	9302      	str	r3, [sp, #8]
    7fa2:	e68b      	b.n	7cbc <__aeabi_ddiv+0x208>
    7fa4:	4297      	cmp	r7, r2
    7fa6:	d1ed      	bne.n	7f84 <__aeabi_ddiv+0x4d0>
    7fa8:	9903      	ldr	r1, [sp, #12]
    7faa:	9c02      	ldr	r4, [sp, #8]
    7fac:	42a1      	cmp	r1, r4
    7fae:	d9e5      	bls.n	7f7c <__aeabi_ddiv+0x4c8>
    7fb0:	1a3e      	subs	r6, r7, r0
    7fb2:	469b      	mov	fp, r3
    7fb4:	e6f7      	b.n	7da6 <__aeabi_ddiv+0x2f2>
    7fb6:	4698      	mov	r8, r3
    7fb8:	e6ca      	b.n	7d50 <__aeabi_ddiv+0x29c>
    7fba:	001e      	movs	r6, r3
    7fbc:	e6a5      	b.n	7d0a <__aeabi_ddiv+0x256>
    7fbe:	42ac      	cmp	r4, r5
    7fc0:	d83e      	bhi.n	8040 <__aeabi_ddiv+0x58c>
    7fc2:	d074      	beq.n	80ae <__aeabi_ddiv+0x5fa>
    7fc4:	0011      	movs	r1, r2
    7fc6:	e753      	b.n	7e70 <__aeabi_ddiv+0x3bc>
    7fc8:	2101      	movs	r1, #1
    7fca:	4249      	negs	r1, r1
    7fcc:	e752      	b.n	7e74 <__aeabi_ddiv+0x3c0>
    7fce:	001c      	movs	r4, r3
    7fd0:	e70e      	b.n	7df0 <__aeabi_ddiv+0x33c>
    7fd2:	001e      	movs	r6, r3
    7fd4:	e72b      	b.n	7e2e <__aeabi_ddiv+0x37a>
    7fd6:	2d1f      	cmp	r5, #31
    7fd8:	dc3c      	bgt.n	8054 <__aeabi_ddiv+0x5a0>
    7fda:	2320      	movs	r3, #32
    7fdc:	000a      	movs	r2, r1
    7fde:	4658      	mov	r0, fp
    7fe0:	1b5b      	subs	r3, r3, r5
    7fe2:	4098      	lsls	r0, r3
    7fe4:	40ea      	lsrs	r2, r5
    7fe6:	4099      	lsls	r1, r3
    7fe8:	4302      	orrs	r2, r0
    7fea:	1e48      	subs	r0, r1, #1
    7fec:	4181      	sbcs	r1, r0
    7fee:	465e      	mov	r6, fp
    7ff0:	4311      	orrs	r1, r2
    7ff2:	40ee      	lsrs	r6, r5
    7ff4:	074b      	lsls	r3, r1, #29
    7ff6:	d009      	beq.n	800c <__aeabi_ddiv+0x558>
    7ff8:	230f      	movs	r3, #15
    7ffa:	400b      	ands	r3, r1
    7ffc:	2b04      	cmp	r3, #4
    7ffe:	d005      	beq.n	800c <__aeabi_ddiv+0x558>
    8000:	000b      	movs	r3, r1
    8002:	1d19      	adds	r1, r3, #4
    8004:	4299      	cmp	r1, r3
    8006:	419b      	sbcs	r3, r3
    8008:	425b      	negs	r3, r3
    800a:	18f6      	adds	r6, r6, r3
    800c:	0233      	lsls	r3, r6, #8
    800e:	d53c      	bpl.n	808a <__aeabi_ddiv+0x5d6>
    8010:	4653      	mov	r3, sl
    8012:	2201      	movs	r2, #1
    8014:	2100      	movs	r1, #0
    8016:	401a      	ands	r2, r3
    8018:	2600      	movs	r6, #0
    801a:	2301      	movs	r3, #1
    801c:	4689      	mov	r9, r1
    801e:	e5af      	b.n	7b80 <__aeabi_ddiv+0xcc>
    8020:	2302      	movs	r3, #2
    8022:	425b      	negs	r3, r3
    8024:	469c      	mov	ip, r3
    8026:	9c03      	ldr	r4, [sp, #12]
    8028:	44e3      	add	fp, ip
    802a:	46a4      	mov	ip, r4
    802c:	9b02      	ldr	r3, [sp, #8]
    802e:	4463      	add	r3, ip
    8030:	4698      	mov	r8, r3
    8032:	45a0      	cmp	r8, r4
    8034:	41b6      	sbcs	r6, r6
    8036:	4276      	negs	r6, r6
    8038:	19f6      	adds	r6, r6, r7
    803a:	9302      	str	r3, [sp, #8]
    803c:	18b2      	adds	r2, r6, r2
    803e:	e6b1      	b.n	7da4 <__aeabi_ddiv+0x2f0>
    8040:	9803      	ldr	r0, [sp, #12]
    8042:	1e8a      	subs	r2, r1, #2
    8044:	0041      	lsls	r1, r0, #1
    8046:	4281      	cmp	r1, r0
    8048:	41b6      	sbcs	r6, r6
    804a:	4276      	negs	r6, r6
    804c:	19f6      	adds	r6, r6, r7
    804e:	19ad      	adds	r5, r5, r6
    8050:	9103      	str	r1, [sp, #12]
    8052:	e761      	b.n	7f18 <__aeabi_ddiv+0x464>
    8054:	221f      	movs	r2, #31
    8056:	4252      	negs	r2, r2
    8058:	1ad3      	subs	r3, r2, r3
    805a:	465a      	mov	r2, fp
    805c:	40da      	lsrs	r2, r3
    805e:	0013      	movs	r3, r2
    8060:	2d20      	cmp	r5, #32
    8062:	d029      	beq.n	80b8 <__aeabi_ddiv+0x604>
    8064:	2240      	movs	r2, #64	; 0x40
    8066:	4658      	mov	r0, fp
    8068:	1b55      	subs	r5, r2, r5
    806a:	40a8      	lsls	r0, r5
    806c:	4301      	orrs	r1, r0
    806e:	1e48      	subs	r0, r1, #1
    8070:	4181      	sbcs	r1, r0
    8072:	2007      	movs	r0, #7
    8074:	430b      	orrs	r3, r1
    8076:	4018      	ands	r0, r3
    8078:	2600      	movs	r6, #0
    807a:	2800      	cmp	r0, #0
    807c:	d009      	beq.n	8092 <__aeabi_ddiv+0x5de>
    807e:	220f      	movs	r2, #15
    8080:	2600      	movs	r6, #0
    8082:	401a      	ands	r2, r3
    8084:	0019      	movs	r1, r3
    8086:	2a04      	cmp	r2, #4
    8088:	d1bb      	bne.n	8002 <__aeabi_ddiv+0x54e>
    808a:	000b      	movs	r3, r1
    808c:	0770      	lsls	r0, r6, #29
    808e:	0276      	lsls	r6, r6, #9
    8090:	0b36      	lsrs	r6, r6, #12
    8092:	08db      	lsrs	r3, r3, #3
    8094:	4303      	orrs	r3, r0
    8096:	4699      	mov	r9, r3
    8098:	2201      	movs	r2, #1
    809a:	4653      	mov	r3, sl
    809c:	401a      	ands	r2, r3
    809e:	2300      	movs	r3, #0
    80a0:	e56e      	b.n	7b80 <__aeabi_ddiv+0xcc>
    80a2:	9902      	ldr	r1, [sp, #8]
    80a4:	428d      	cmp	r5, r1
    80a6:	d8bb      	bhi.n	8020 <__aeabi_ddiv+0x56c>
    80a8:	469b      	mov	fp, r3
    80aa:	2600      	movs	r6, #0
    80ac:	e67b      	b.n	7da6 <__aeabi_ddiv+0x2f2>
    80ae:	9803      	ldr	r0, [sp, #12]
    80b0:	4298      	cmp	r0, r3
    80b2:	d3c5      	bcc.n	8040 <__aeabi_ddiv+0x58c>
    80b4:	0011      	movs	r1, r2
    80b6:	e732      	b.n	7f1e <__aeabi_ddiv+0x46a>
    80b8:	2000      	movs	r0, #0
    80ba:	e7d7      	b.n	806c <__aeabi_ddiv+0x5b8>
    80bc:	2680      	movs	r6, #128	; 0x80
    80be:	465b      	mov	r3, fp
    80c0:	0336      	lsls	r6, r6, #12
    80c2:	431e      	orrs	r6, r3
    80c4:	0336      	lsls	r6, r6, #12
    80c6:	0b36      	lsrs	r6, r6, #12
    80c8:	9a00      	ldr	r2, [sp, #0]
    80ca:	4689      	mov	r9, r1
    80cc:	4b03      	ldr	r3, [pc, #12]	; (80dc <__aeabi_ddiv+0x628>)
    80ce:	e557      	b.n	7b80 <__aeabi_ddiv+0xcc>
    80d0:	000003ff 	.word	0x000003ff
    80d4:	feffffff 	.word	0xfeffffff
    80d8:	000007fe 	.word	0x000007fe
    80dc:	000007ff 	.word	0x000007ff

000080e0 <__aeabi_dmul>:
    80e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80e2:	465f      	mov	r7, fp
    80e4:	4656      	mov	r6, sl
    80e6:	464d      	mov	r5, r9
    80e8:	4644      	mov	r4, r8
    80ea:	b4f0      	push	{r4, r5, r6, r7}
    80ec:	030d      	lsls	r5, r1, #12
    80ee:	4699      	mov	r9, r3
    80f0:	004e      	lsls	r6, r1, #1
    80f2:	0b2b      	lsrs	r3, r5, #12
    80f4:	b087      	sub	sp, #28
    80f6:	0007      	movs	r7, r0
    80f8:	4692      	mov	sl, r2
    80fa:	4680      	mov	r8, r0
    80fc:	469b      	mov	fp, r3
    80fe:	0d76      	lsrs	r6, r6, #21
    8100:	0fcc      	lsrs	r4, r1, #31
    8102:	2e00      	cmp	r6, #0
    8104:	d069      	beq.n	81da <__aeabi_dmul+0xfa>
    8106:	4b6d      	ldr	r3, [pc, #436]	; (82bc <__aeabi_dmul+0x1dc>)
    8108:	429e      	cmp	r6, r3
    810a:	d035      	beq.n	8178 <__aeabi_dmul+0x98>
    810c:	465b      	mov	r3, fp
    810e:	2280      	movs	r2, #128	; 0x80
    8110:	00dd      	lsls	r5, r3, #3
    8112:	0412      	lsls	r2, r2, #16
    8114:	0f43      	lsrs	r3, r0, #29
    8116:	4313      	orrs	r3, r2
    8118:	432b      	orrs	r3, r5
    811a:	469b      	mov	fp, r3
    811c:	00c3      	lsls	r3, r0, #3
    811e:	4698      	mov	r8, r3
    8120:	4b67      	ldr	r3, [pc, #412]	; (82c0 <__aeabi_dmul+0x1e0>)
    8122:	2700      	movs	r7, #0
    8124:	469c      	mov	ip, r3
    8126:	2300      	movs	r3, #0
    8128:	4466      	add	r6, ip
    812a:	9301      	str	r3, [sp, #4]
    812c:	464a      	mov	r2, r9
    812e:	0315      	lsls	r5, r2, #12
    8130:	0050      	lsls	r0, r2, #1
    8132:	0fd2      	lsrs	r2, r2, #31
    8134:	4653      	mov	r3, sl
    8136:	0b2d      	lsrs	r5, r5, #12
    8138:	0d40      	lsrs	r0, r0, #21
    813a:	4691      	mov	r9, r2
    813c:	d100      	bne.n	8140 <__aeabi_dmul+0x60>
    813e:	e076      	b.n	822e <__aeabi_dmul+0x14e>
    8140:	4a5e      	ldr	r2, [pc, #376]	; (82bc <__aeabi_dmul+0x1dc>)
    8142:	4290      	cmp	r0, r2
    8144:	d06c      	beq.n	8220 <__aeabi_dmul+0x140>
    8146:	2280      	movs	r2, #128	; 0x80
    8148:	0f5b      	lsrs	r3, r3, #29
    814a:	0412      	lsls	r2, r2, #16
    814c:	4313      	orrs	r3, r2
    814e:	4a5c      	ldr	r2, [pc, #368]	; (82c0 <__aeabi_dmul+0x1e0>)
    8150:	00ed      	lsls	r5, r5, #3
    8152:	4694      	mov	ip, r2
    8154:	431d      	orrs	r5, r3
    8156:	4653      	mov	r3, sl
    8158:	2200      	movs	r2, #0
    815a:	00db      	lsls	r3, r3, #3
    815c:	4460      	add	r0, ip
    815e:	4649      	mov	r1, r9
    8160:	1836      	adds	r6, r6, r0
    8162:	1c70      	adds	r0, r6, #1
    8164:	4061      	eors	r1, r4
    8166:	9002      	str	r0, [sp, #8]
    8168:	4317      	orrs	r7, r2
    816a:	2f0f      	cmp	r7, #15
    816c:	d900      	bls.n	8170 <__aeabi_dmul+0x90>
    816e:	e0af      	b.n	82d0 <__aeabi_dmul+0x1f0>
    8170:	4854      	ldr	r0, [pc, #336]	; (82c4 <__aeabi_dmul+0x1e4>)
    8172:	00bf      	lsls	r7, r7, #2
    8174:	59c7      	ldr	r7, [r0, r7]
    8176:	46bf      	mov	pc, r7
    8178:	465b      	mov	r3, fp
    817a:	431f      	orrs	r7, r3
    817c:	d000      	beq.n	8180 <__aeabi_dmul+0xa0>
    817e:	e088      	b.n	8292 <__aeabi_dmul+0x1b2>
    8180:	2300      	movs	r3, #0
    8182:	469b      	mov	fp, r3
    8184:	4698      	mov	r8, r3
    8186:	3302      	adds	r3, #2
    8188:	2708      	movs	r7, #8
    818a:	9301      	str	r3, [sp, #4]
    818c:	e7ce      	b.n	812c <__aeabi_dmul+0x4c>
    818e:	4649      	mov	r1, r9
    8190:	2a02      	cmp	r2, #2
    8192:	d06a      	beq.n	826a <__aeabi_dmul+0x18a>
    8194:	2a03      	cmp	r2, #3
    8196:	d100      	bne.n	819a <__aeabi_dmul+0xba>
    8198:	e209      	b.n	85ae <__aeabi_dmul+0x4ce>
    819a:	2a01      	cmp	r2, #1
    819c:	d000      	beq.n	81a0 <__aeabi_dmul+0xc0>
    819e:	e1bb      	b.n	8518 <__aeabi_dmul+0x438>
    81a0:	4011      	ands	r1, r2
    81a2:	2200      	movs	r2, #0
    81a4:	2300      	movs	r3, #0
    81a6:	2500      	movs	r5, #0
    81a8:	4690      	mov	r8, r2
    81aa:	b2cc      	uxtb	r4, r1
    81ac:	2100      	movs	r1, #0
    81ae:	032d      	lsls	r5, r5, #12
    81b0:	0d0a      	lsrs	r2, r1, #20
    81b2:	0512      	lsls	r2, r2, #20
    81b4:	0b2d      	lsrs	r5, r5, #12
    81b6:	4315      	orrs	r5, r2
    81b8:	4a43      	ldr	r2, [pc, #268]	; (82c8 <__aeabi_dmul+0x1e8>)
    81ba:	051b      	lsls	r3, r3, #20
    81bc:	4015      	ands	r5, r2
    81be:	431d      	orrs	r5, r3
    81c0:	006d      	lsls	r5, r5, #1
    81c2:	07e4      	lsls	r4, r4, #31
    81c4:	086d      	lsrs	r5, r5, #1
    81c6:	4325      	orrs	r5, r4
    81c8:	4640      	mov	r0, r8
    81ca:	0029      	movs	r1, r5
    81cc:	b007      	add	sp, #28
    81ce:	bc3c      	pop	{r2, r3, r4, r5}
    81d0:	4690      	mov	r8, r2
    81d2:	4699      	mov	r9, r3
    81d4:	46a2      	mov	sl, r4
    81d6:	46ab      	mov	fp, r5
    81d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81da:	4303      	orrs	r3, r0
    81dc:	d052      	beq.n	8284 <__aeabi_dmul+0x1a4>
    81de:	465b      	mov	r3, fp
    81e0:	2b00      	cmp	r3, #0
    81e2:	d100      	bne.n	81e6 <__aeabi_dmul+0x106>
    81e4:	e18a      	b.n	84fc <__aeabi_dmul+0x41c>
    81e6:	4658      	mov	r0, fp
    81e8:	f000 fdb6 	bl	8d58 <__clzsi2>
    81ec:	0003      	movs	r3, r0
    81ee:	3b0b      	subs	r3, #11
    81f0:	2b1c      	cmp	r3, #28
    81f2:	dd00      	ble.n	81f6 <__aeabi_dmul+0x116>
    81f4:	e17b      	b.n	84ee <__aeabi_dmul+0x40e>
    81f6:	221d      	movs	r2, #29
    81f8:	1ad3      	subs	r3, r2, r3
    81fa:	003a      	movs	r2, r7
    81fc:	0001      	movs	r1, r0
    81fe:	465d      	mov	r5, fp
    8200:	40da      	lsrs	r2, r3
    8202:	3908      	subs	r1, #8
    8204:	408d      	lsls	r5, r1
    8206:	0013      	movs	r3, r2
    8208:	408f      	lsls	r7, r1
    820a:	432b      	orrs	r3, r5
    820c:	469b      	mov	fp, r3
    820e:	46b8      	mov	r8, r7
    8210:	4b2e      	ldr	r3, [pc, #184]	; (82cc <__aeabi_dmul+0x1ec>)
    8212:	2700      	movs	r7, #0
    8214:	469c      	mov	ip, r3
    8216:	2300      	movs	r3, #0
    8218:	4460      	add	r0, ip
    821a:	4246      	negs	r6, r0
    821c:	9301      	str	r3, [sp, #4]
    821e:	e785      	b.n	812c <__aeabi_dmul+0x4c>
    8220:	4652      	mov	r2, sl
    8222:	432a      	orrs	r2, r5
    8224:	d12c      	bne.n	8280 <__aeabi_dmul+0x1a0>
    8226:	2500      	movs	r5, #0
    8228:	2300      	movs	r3, #0
    822a:	2202      	movs	r2, #2
    822c:	e797      	b.n	815e <__aeabi_dmul+0x7e>
    822e:	4652      	mov	r2, sl
    8230:	432a      	orrs	r2, r5
    8232:	d021      	beq.n	8278 <__aeabi_dmul+0x198>
    8234:	2d00      	cmp	r5, #0
    8236:	d100      	bne.n	823a <__aeabi_dmul+0x15a>
    8238:	e154      	b.n	84e4 <__aeabi_dmul+0x404>
    823a:	0028      	movs	r0, r5
    823c:	f000 fd8c 	bl	8d58 <__clzsi2>
    8240:	0003      	movs	r3, r0
    8242:	3b0b      	subs	r3, #11
    8244:	2b1c      	cmp	r3, #28
    8246:	dd00      	ble.n	824a <__aeabi_dmul+0x16a>
    8248:	e146      	b.n	84d8 <__aeabi_dmul+0x3f8>
    824a:	211d      	movs	r1, #29
    824c:	1acb      	subs	r3, r1, r3
    824e:	4651      	mov	r1, sl
    8250:	0002      	movs	r2, r0
    8252:	40d9      	lsrs	r1, r3
    8254:	4653      	mov	r3, sl
    8256:	3a08      	subs	r2, #8
    8258:	4095      	lsls	r5, r2
    825a:	4093      	lsls	r3, r2
    825c:	430d      	orrs	r5, r1
    825e:	4a1b      	ldr	r2, [pc, #108]	; (82cc <__aeabi_dmul+0x1ec>)
    8260:	4694      	mov	ip, r2
    8262:	4460      	add	r0, ip
    8264:	4240      	negs	r0, r0
    8266:	2200      	movs	r2, #0
    8268:	e779      	b.n	815e <__aeabi_dmul+0x7e>
    826a:	2401      	movs	r4, #1
    826c:	2200      	movs	r2, #0
    826e:	400c      	ands	r4, r1
    8270:	4b12      	ldr	r3, [pc, #72]	; (82bc <__aeabi_dmul+0x1dc>)
    8272:	2500      	movs	r5, #0
    8274:	4690      	mov	r8, r2
    8276:	e799      	b.n	81ac <__aeabi_dmul+0xcc>
    8278:	2500      	movs	r5, #0
    827a:	2300      	movs	r3, #0
    827c:	2201      	movs	r2, #1
    827e:	e76e      	b.n	815e <__aeabi_dmul+0x7e>
    8280:	2203      	movs	r2, #3
    8282:	e76c      	b.n	815e <__aeabi_dmul+0x7e>
    8284:	2300      	movs	r3, #0
    8286:	469b      	mov	fp, r3
    8288:	4698      	mov	r8, r3
    828a:	3301      	adds	r3, #1
    828c:	2704      	movs	r7, #4
    828e:	9301      	str	r3, [sp, #4]
    8290:	e74c      	b.n	812c <__aeabi_dmul+0x4c>
    8292:	2303      	movs	r3, #3
    8294:	270c      	movs	r7, #12
    8296:	9301      	str	r3, [sp, #4]
    8298:	e748      	b.n	812c <__aeabi_dmul+0x4c>
    829a:	2300      	movs	r3, #0
    829c:	2580      	movs	r5, #128	; 0x80
    829e:	4698      	mov	r8, r3
    82a0:	2400      	movs	r4, #0
    82a2:	032d      	lsls	r5, r5, #12
    82a4:	4b05      	ldr	r3, [pc, #20]	; (82bc <__aeabi_dmul+0x1dc>)
    82a6:	e781      	b.n	81ac <__aeabi_dmul+0xcc>
    82a8:	465d      	mov	r5, fp
    82aa:	4643      	mov	r3, r8
    82ac:	9a01      	ldr	r2, [sp, #4]
    82ae:	e76f      	b.n	8190 <__aeabi_dmul+0xb0>
    82b0:	465d      	mov	r5, fp
    82b2:	4643      	mov	r3, r8
    82b4:	0021      	movs	r1, r4
    82b6:	9a01      	ldr	r2, [sp, #4]
    82b8:	e76a      	b.n	8190 <__aeabi_dmul+0xb0>
    82ba:	46c0      	nop			; (mov r8, r8)
    82bc:	000007ff 	.word	0x000007ff
    82c0:	fffffc01 	.word	0xfffffc01
    82c4:	00008f34 	.word	0x00008f34
    82c8:	800fffff 	.word	0x800fffff
    82cc:	000003f3 	.word	0x000003f3
    82d0:	4642      	mov	r2, r8
    82d2:	0c12      	lsrs	r2, r2, #16
    82d4:	4691      	mov	r9, r2
    82d6:	0c1a      	lsrs	r2, r3, #16
    82d8:	4694      	mov	ip, r2
    82da:	4642      	mov	r2, r8
    82dc:	0417      	lsls	r7, r2, #16
    82de:	464a      	mov	r2, r9
    82e0:	041b      	lsls	r3, r3, #16
    82e2:	0c1b      	lsrs	r3, r3, #16
    82e4:	435a      	muls	r2, r3
    82e6:	4660      	mov	r0, ip
    82e8:	4690      	mov	r8, r2
    82ea:	464a      	mov	r2, r9
    82ec:	4342      	muls	r2, r0
    82ee:	0010      	movs	r0, r2
    82f0:	9203      	str	r2, [sp, #12]
    82f2:	4662      	mov	r2, ip
    82f4:	001c      	movs	r4, r3
    82f6:	0c3f      	lsrs	r7, r7, #16
    82f8:	437a      	muls	r2, r7
    82fa:	437c      	muls	r4, r7
    82fc:	4442      	add	r2, r8
    82fe:	9201      	str	r2, [sp, #4]
    8300:	0c22      	lsrs	r2, r4, #16
    8302:	4692      	mov	sl, r2
    8304:	9a01      	ldr	r2, [sp, #4]
    8306:	4452      	add	r2, sl
    8308:	4590      	cmp	r8, r2
    830a:	d906      	bls.n	831a <__aeabi_dmul+0x23a>
    830c:	4682      	mov	sl, r0
    830e:	2080      	movs	r0, #128	; 0x80
    8310:	0240      	lsls	r0, r0, #9
    8312:	4680      	mov	r8, r0
    8314:	44c2      	add	sl, r8
    8316:	4650      	mov	r0, sl
    8318:	9003      	str	r0, [sp, #12]
    831a:	0c10      	lsrs	r0, r2, #16
    831c:	9004      	str	r0, [sp, #16]
    831e:	4648      	mov	r0, r9
    8320:	0424      	lsls	r4, r4, #16
    8322:	0c24      	lsrs	r4, r4, #16
    8324:	0412      	lsls	r2, r2, #16
    8326:	1912      	adds	r2, r2, r4
    8328:	9205      	str	r2, [sp, #20]
    832a:	0c2a      	lsrs	r2, r5, #16
    832c:	042d      	lsls	r5, r5, #16
    832e:	0c2d      	lsrs	r5, r5, #16
    8330:	4368      	muls	r0, r5
    8332:	002c      	movs	r4, r5
    8334:	4682      	mov	sl, r0
    8336:	4648      	mov	r0, r9
    8338:	437c      	muls	r4, r7
    833a:	4350      	muls	r0, r2
    833c:	4681      	mov	r9, r0
    833e:	0c20      	lsrs	r0, r4, #16
    8340:	4680      	mov	r8, r0
    8342:	4357      	muls	r7, r2
    8344:	4457      	add	r7, sl
    8346:	4447      	add	r7, r8
    8348:	45ba      	cmp	sl, r7
    834a:	d903      	bls.n	8354 <__aeabi_dmul+0x274>
    834c:	2080      	movs	r0, #128	; 0x80
    834e:	0240      	lsls	r0, r0, #9
    8350:	4680      	mov	r8, r0
    8352:	44c1      	add	r9, r8
    8354:	0c38      	lsrs	r0, r7, #16
    8356:	043f      	lsls	r7, r7, #16
    8358:	46b8      	mov	r8, r7
    835a:	4448      	add	r0, r9
    835c:	0424      	lsls	r4, r4, #16
    835e:	0c24      	lsrs	r4, r4, #16
    8360:	9001      	str	r0, [sp, #4]
    8362:	9804      	ldr	r0, [sp, #16]
    8364:	44a0      	add	r8, r4
    8366:	4440      	add	r0, r8
    8368:	9004      	str	r0, [sp, #16]
    836a:	4658      	mov	r0, fp
    836c:	0c00      	lsrs	r0, r0, #16
    836e:	4681      	mov	r9, r0
    8370:	4658      	mov	r0, fp
    8372:	0404      	lsls	r4, r0, #16
    8374:	0c20      	lsrs	r0, r4, #16
    8376:	4682      	mov	sl, r0
    8378:	0007      	movs	r7, r0
    837a:	4648      	mov	r0, r9
    837c:	435f      	muls	r7, r3
    837e:	464c      	mov	r4, r9
    8380:	4343      	muls	r3, r0
    8382:	4660      	mov	r0, ip
    8384:	4360      	muls	r0, r4
    8386:	4664      	mov	r4, ip
    8388:	4683      	mov	fp, r0
    838a:	4650      	mov	r0, sl
    838c:	4344      	muls	r4, r0
    838e:	0c38      	lsrs	r0, r7, #16
    8390:	4684      	mov	ip, r0
    8392:	18e4      	adds	r4, r4, r3
    8394:	4464      	add	r4, ip
    8396:	42a3      	cmp	r3, r4
    8398:	d903      	bls.n	83a2 <__aeabi_dmul+0x2c2>
    839a:	2380      	movs	r3, #128	; 0x80
    839c:	025b      	lsls	r3, r3, #9
    839e:	469c      	mov	ip, r3
    83a0:	44e3      	add	fp, ip
    83a2:	4648      	mov	r0, r9
    83a4:	043f      	lsls	r7, r7, #16
    83a6:	0c23      	lsrs	r3, r4, #16
    83a8:	0c3f      	lsrs	r7, r7, #16
    83aa:	0424      	lsls	r4, r4, #16
    83ac:	19e4      	adds	r4, r4, r7
    83ae:	4657      	mov	r7, sl
    83b0:	4368      	muls	r0, r5
    83b2:	436f      	muls	r7, r5
    83b4:	4684      	mov	ip, r0
    83b6:	464d      	mov	r5, r9
    83b8:	4650      	mov	r0, sl
    83ba:	4355      	muls	r5, r2
    83bc:	4342      	muls	r2, r0
    83be:	0c38      	lsrs	r0, r7, #16
    83c0:	4681      	mov	r9, r0
    83c2:	4462      	add	r2, ip
    83c4:	444a      	add	r2, r9
    83c6:	445b      	add	r3, fp
    83c8:	4594      	cmp	ip, r2
    83ca:	d903      	bls.n	83d4 <__aeabi_dmul+0x2f4>
    83cc:	2080      	movs	r0, #128	; 0x80
    83ce:	0240      	lsls	r0, r0, #9
    83d0:	4684      	mov	ip, r0
    83d2:	4465      	add	r5, ip
    83d4:	9803      	ldr	r0, [sp, #12]
    83d6:	043f      	lsls	r7, r7, #16
    83d8:	4683      	mov	fp, r0
    83da:	9804      	ldr	r0, [sp, #16]
    83dc:	0c3f      	lsrs	r7, r7, #16
    83de:	4684      	mov	ip, r0
    83e0:	44e3      	add	fp, ip
    83e2:	45c3      	cmp	fp, r8
    83e4:	4180      	sbcs	r0, r0
    83e6:	4240      	negs	r0, r0
    83e8:	4682      	mov	sl, r0
    83ea:	0410      	lsls	r0, r2, #16
    83ec:	4684      	mov	ip, r0
    83ee:	9801      	ldr	r0, [sp, #4]
    83f0:	4467      	add	r7, ip
    83f2:	4684      	mov	ip, r0
    83f4:	4467      	add	r7, ip
    83f6:	44a3      	add	fp, r4
    83f8:	46bc      	mov	ip, r7
    83fa:	45a3      	cmp	fp, r4
    83fc:	41a4      	sbcs	r4, r4
    83fe:	4699      	mov	r9, r3
    8400:	44d4      	add	ip, sl
    8402:	4264      	negs	r4, r4
    8404:	4287      	cmp	r7, r0
    8406:	41bf      	sbcs	r7, r7
    8408:	45d4      	cmp	ip, sl
    840a:	4180      	sbcs	r0, r0
    840c:	44e1      	add	r9, ip
    840e:	46a0      	mov	r8, r4
    8410:	4599      	cmp	r9, r3
    8412:	419b      	sbcs	r3, r3
    8414:	427f      	negs	r7, r7
    8416:	4240      	negs	r0, r0
    8418:	44c8      	add	r8, r9
    841a:	4307      	orrs	r7, r0
    841c:	0c12      	lsrs	r2, r2, #16
    841e:	18ba      	adds	r2, r7, r2
    8420:	45a0      	cmp	r8, r4
    8422:	41a4      	sbcs	r4, r4
    8424:	425f      	negs	r7, r3
    8426:	003b      	movs	r3, r7
    8428:	4264      	negs	r4, r4
    842a:	4323      	orrs	r3, r4
    842c:	18d7      	adds	r7, r2, r3
    842e:	4643      	mov	r3, r8
    8430:	197d      	adds	r5, r7, r5
    8432:	0ddb      	lsrs	r3, r3, #23
    8434:	026d      	lsls	r5, r5, #9
    8436:	431d      	orrs	r5, r3
    8438:	465b      	mov	r3, fp
    843a:	025a      	lsls	r2, r3, #9
    843c:	9b05      	ldr	r3, [sp, #20]
    843e:	431a      	orrs	r2, r3
    8440:	1e53      	subs	r3, r2, #1
    8442:	419a      	sbcs	r2, r3
    8444:	465b      	mov	r3, fp
    8446:	0ddb      	lsrs	r3, r3, #23
    8448:	431a      	orrs	r2, r3
    844a:	4643      	mov	r3, r8
    844c:	025b      	lsls	r3, r3, #9
    844e:	4313      	orrs	r3, r2
    8450:	01ea      	lsls	r2, r5, #7
    8452:	d507      	bpl.n	8464 <__aeabi_dmul+0x384>
    8454:	2201      	movs	r2, #1
    8456:	085c      	lsrs	r4, r3, #1
    8458:	4013      	ands	r3, r2
    845a:	4323      	orrs	r3, r4
    845c:	07ea      	lsls	r2, r5, #31
    845e:	9e02      	ldr	r6, [sp, #8]
    8460:	4313      	orrs	r3, r2
    8462:	086d      	lsrs	r5, r5, #1
    8464:	4a57      	ldr	r2, [pc, #348]	; (85c4 <__aeabi_dmul+0x4e4>)
    8466:	18b2      	adds	r2, r6, r2
    8468:	2a00      	cmp	r2, #0
    846a:	dd4b      	ble.n	8504 <__aeabi_dmul+0x424>
    846c:	0758      	lsls	r0, r3, #29
    846e:	d009      	beq.n	8484 <__aeabi_dmul+0x3a4>
    8470:	200f      	movs	r0, #15
    8472:	4018      	ands	r0, r3
    8474:	2804      	cmp	r0, #4
    8476:	d005      	beq.n	8484 <__aeabi_dmul+0x3a4>
    8478:	1d18      	adds	r0, r3, #4
    847a:	4298      	cmp	r0, r3
    847c:	419b      	sbcs	r3, r3
    847e:	425b      	negs	r3, r3
    8480:	18ed      	adds	r5, r5, r3
    8482:	0003      	movs	r3, r0
    8484:	01e8      	lsls	r0, r5, #7
    8486:	d504      	bpl.n	8492 <__aeabi_dmul+0x3b2>
    8488:	4a4f      	ldr	r2, [pc, #316]	; (85c8 <__aeabi_dmul+0x4e8>)
    848a:	4015      	ands	r5, r2
    848c:	2280      	movs	r2, #128	; 0x80
    848e:	00d2      	lsls	r2, r2, #3
    8490:	18b2      	adds	r2, r6, r2
    8492:	484e      	ldr	r0, [pc, #312]	; (85cc <__aeabi_dmul+0x4ec>)
    8494:	4282      	cmp	r2, r0
    8496:	dd00      	ble.n	849a <__aeabi_dmul+0x3ba>
    8498:	e6e7      	b.n	826a <__aeabi_dmul+0x18a>
    849a:	2401      	movs	r4, #1
    849c:	08db      	lsrs	r3, r3, #3
    849e:	0768      	lsls	r0, r5, #29
    84a0:	4318      	orrs	r0, r3
    84a2:	026d      	lsls	r5, r5, #9
    84a4:	0553      	lsls	r3, r2, #21
    84a6:	4680      	mov	r8, r0
    84a8:	0b2d      	lsrs	r5, r5, #12
    84aa:	0d5b      	lsrs	r3, r3, #21
    84ac:	400c      	ands	r4, r1
    84ae:	e67d      	b.n	81ac <__aeabi_dmul+0xcc>
    84b0:	2280      	movs	r2, #128	; 0x80
    84b2:	4659      	mov	r1, fp
    84b4:	0312      	lsls	r2, r2, #12
    84b6:	4211      	tst	r1, r2
    84b8:	d008      	beq.n	84cc <__aeabi_dmul+0x3ec>
    84ba:	4215      	tst	r5, r2
    84bc:	d106      	bne.n	84cc <__aeabi_dmul+0x3ec>
    84be:	4315      	orrs	r5, r2
    84c0:	032d      	lsls	r5, r5, #12
    84c2:	4698      	mov	r8, r3
    84c4:	0b2d      	lsrs	r5, r5, #12
    84c6:	464c      	mov	r4, r9
    84c8:	4b41      	ldr	r3, [pc, #260]	; (85d0 <__aeabi_dmul+0x4f0>)
    84ca:	e66f      	b.n	81ac <__aeabi_dmul+0xcc>
    84cc:	465d      	mov	r5, fp
    84ce:	4315      	orrs	r5, r2
    84d0:	032d      	lsls	r5, r5, #12
    84d2:	0b2d      	lsrs	r5, r5, #12
    84d4:	4b3e      	ldr	r3, [pc, #248]	; (85d0 <__aeabi_dmul+0x4f0>)
    84d6:	e669      	b.n	81ac <__aeabi_dmul+0xcc>
    84d8:	0003      	movs	r3, r0
    84da:	4655      	mov	r5, sl
    84dc:	3b28      	subs	r3, #40	; 0x28
    84de:	409d      	lsls	r5, r3
    84e0:	2300      	movs	r3, #0
    84e2:	e6bc      	b.n	825e <__aeabi_dmul+0x17e>
    84e4:	4650      	mov	r0, sl
    84e6:	f000 fc37 	bl	8d58 <__clzsi2>
    84ea:	3020      	adds	r0, #32
    84ec:	e6a8      	b.n	8240 <__aeabi_dmul+0x160>
    84ee:	0003      	movs	r3, r0
    84f0:	3b28      	subs	r3, #40	; 0x28
    84f2:	409f      	lsls	r7, r3
    84f4:	2300      	movs	r3, #0
    84f6:	46bb      	mov	fp, r7
    84f8:	4698      	mov	r8, r3
    84fa:	e689      	b.n	8210 <__aeabi_dmul+0x130>
    84fc:	f000 fc2c 	bl	8d58 <__clzsi2>
    8500:	3020      	adds	r0, #32
    8502:	e673      	b.n	81ec <__aeabi_dmul+0x10c>
    8504:	2401      	movs	r4, #1
    8506:	1aa6      	subs	r6, r4, r2
    8508:	2e38      	cmp	r6, #56	; 0x38
    850a:	dd07      	ble.n	851c <__aeabi_dmul+0x43c>
    850c:	2200      	movs	r2, #0
    850e:	400c      	ands	r4, r1
    8510:	2300      	movs	r3, #0
    8512:	2500      	movs	r5, #0
    8514:	4690      	mov	r8, r2
    8516:	e649      	b.n	81ac <__aeabi_dmul+0xcc>
    8518:	9e02      	ldr	r6, [sp, #8]
    851a:	e7a3      	b.n	8464 <__aeabi_dmul+0x384>
    851c:	2e1f      	cmp	r6, #31
    851e:	dc20      	bgt.n	8562 <__aeabi_dmul+0x482>
    8520:	2220      	movs	r2, #32
    8522:	002c      	movs	r4, r5
    8524:	0018      	movs	r0, r3
    8526:	1b92      	subs	r2, r2, r6
    8528:	40f0      	lsrs	r0, r6
    852a:	4094      	lsls	r4, r2
    852c:	4093      	lsls	r3, r2
    852e:	4304      	orrs	r4, r0
    8530:	1e58      	subs	r0, r3, #1
    8532:	4183      	sbcs	r3, r0
    8534:	431c      	orrs	r4, r3
    8536:	40f5      	lsrs	r5, r6
    8538:	0763      	lsls	r3, r4, #29
    853a:	d009      	beq.n	8550 <__aeabi_dmul+0x470>
    853c:	230f      	movs	r3, #15
    853e:	4023      	ands	r3, r4
    8540:	2b04      	cmp	r3, #4
    8542:	d005      	beq.n	8550 <__aeabi_dmul+0x470>
    8544:	0023      	movs	r3, r4
    8546:	1d1c      	adds	r4, r3, #4
    8548:	429c      	cmp	r4, r3
    854a:	4192      	sbcs	r2, r2
    854c:	4252      	negs	r2, r2
    854e:	18ad      	adds	r5, r5, r2
    8550:	022b      	lsls	r3, r5, #8
    8552:	d51f      	bpl.n	8594 <__aeabi_dmul+0x4b4>
    8554:	2401      	movs	r4, #1
    8556:	2200      	movs	r2, #0
    8558:	400c      	ands	r4, r1
    855a:	2301      	movs	r3, #1
    855c:	2500      	movs	r5, #0
    855e:	4690      	mov	r8, r2
    8560:	e624      	b.n	81ac <__aeabi_dmul+0xcc>
    8562:	201f      	movs	r0, #31
    8564:	002c      	movs	r4, r5
    8566:	4240      	negs	r0, r0
    8568:	1a82      	subs	r2, r0, r2
    856a:	40d4      	lsrs	r4, r2
    856c:	2e20      	cmp	r6, #32
    856e:	d01c      	beq.n	85aa <__aeabi_dmul+0x4ca>
    8570:	2240      	movs	r2, #64	; 0x40
    8572:	1b96      	subs	r6, r2, r6
    8574:	40b5      	lsls	r5, r6
    8576:	432b      	orrs	r3, r5
    8578:	1e58      	subs	r0, r3, #1
    857a:	4183      	sbcs	r3, r0
    857c:	2007      	movs	r0, #7
    857e:	4323      	orrs	r3, r4
    8580:	4018      	ands	r0, r3
    8582:	2500      	movs	r5, #0
    8584:	2800      	cmp	r0, #0
    8586:	d009      	beq.n	859c <__aeabi_dmul+0x4bc>
    8588:	220f      	movs	r2, #15
    858a:	2500      	movs	r5, #0
    858c:	401a      	ands	r2, r3
    858e:	001c      	movs	r4, r3
    8590:	2a04      	cmp	r2, #4
    8592:	d1d8      	bne.n	8546 <__aeabi_dmul+0x466>
    8594:	0023      	movs	r3, r4
    8596:	0768      	lsls	r0, r5, #29
    8598:	026d      	lsls	r5, r5, #9
    859a:	0b2d      	lsrs	r5, r5, #12
    859c:	2401      	movs	r4, #1
    859e:	08db      	lsrs	r3, r3, #3
    85a0:	4303      	orrs	r3, r0
    85a2:	4698      	mov	r8, r3
    85a4:	400c      	ands	r4, r1
    85a6:	2300      	movs	r3, #0
    85a8:	e600      	b.n	81ac <__aeabi_dmul+0xcc>
    85aa:	2500      	movs	r5, #0
    85ac:	e7e3      	b.n	8576 <__aeabi_dmul+0x496>
    85ae:	2280      	movs	r2, #128	; 0x80
    85b0:	2401      	movs	r4, #1
    85b2:	0312      	lsls	r2, r2, #12
    85b4:	4315      	orrs	r5, r2
    85b6:	032d      	lsls	r5, r5, #12
    85b8:	4698      	mov	r8, r3
    85ba:	0b2d      	lsrs	r5, r5, #12
    85bc:	400c      	ands	r4, r1
    85be:	4b04      	ldr	r3, [pc, #16]	; (85d0 <__aeabi_dmul+0x4f0>)
    85c0:	e5f4      	b.n	81ac <__aeabi_dmul+0xcc>
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	000003ff 	.word	0x000003ff
    85c8:	feffffff 	.word	0xfeffffff
    85cc:	000007fe 	.word	0x000007fe
    85d0:	000007ff 	.word	0x000007ff

000085d4 <__aeabi_dsub>:
    85d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85d6:	4657      	mov	r7, sl
    85d8:	464e      	mov	r6, r9
    85da:	4645      	mov	r5, r8
    85dc:	b4e0      	push	{r5, r6, r7}
    85de:	000e      	movs	r6, r1
    85e0:	0011      	movs	r1, r2
    85e2:	0ff2      	lsrs	r2, r6, #31
    85e4:	4692      	mov	sl, r2
    85e6:	00c5      	lsls	r5, r0, #3
    85e8:	0f42      	lsrs	r2, r0, #29
    85ea:	0318      	lsls	r0, r3, #12
    85ec:	0337      	lsls	r7, r6, #12
    85ee:	0074      	lsls	r4, r6, #1
    85f0:	0a40      	lsrs	r0, r0, #9
    85f2:	0f4e      	lsrs	r6, r1, #29
    85f4:	0a7f      	lsrs	r7, r7, #9
    85f6:	4330      	orrs	r0, r6
    85f8:	4ecf      	ldr	r6, [pc, #828]	; (8938 <__aeabi_dsub+0x364>)
    85fa:	4317      	orrs	r7, r2
    85fc:	005a      	lsls	r2, r3, #1
    85fe:	0d64      	lsrs	r4, r4, #21
    8600:	0d52      	lsrs	r2, r2, #21
    8602:	0fdb      	lsrs	r3, r3, #31
    8604:	00c9      	lsls	r1, r1, #3
    8606:	42b2      	cmp	r2, r6
    8608:	d100      	bne.n	860c <__aeabi_dsub+0x38>
    860a:	e0e5      	b.n	87d8 <__aeabi_dsub+0x204>
    860c:	2601      	movs	r6, #1
    860e:	4073      	eors	r3, r6
    8610:	1aa6      	subs	r6, r4, r2
    8612:	46b4      	mov	ip, r6
    8614:	4553      	cmp	r3, sl
    8616:	d100      	bne.n	861a <__aeabi_dsub+0x46>
    8618:	e0af      	b.n	877a <__aeabi_dsub+0x1a6>
    861a:	2e00      	cmp	r6, #0
    861c:	dc00      	bgt.n	8620 <__aeabi_dsub+0x4c>
    861e:	e10d      	b.n	883c <__aeabi_dsub+0x268>
    8620:	2a00      	cmp	r2, #0
    8622:	d13a      	bne.n	869a <__aeabi_dsub+0xc6>
    8624:	0003      	movs	r3, r0
    8626:	430b      	orrs	r3, r1
    8628:	d000      	beq.n	862c <__aeabi_dsub+0x58>
    862a:	e0e4      	b.n	87f6 <__aeabi_dsub+0x222>
    862c:	076b      	lsls	r3, r5, #29
    862e:	d009      	beq.n	8644 <__aeabi_dsub+0x70>
    8630:	230f      	movs	r3, #15
    8632:	402b      	ands	r3, r5
    8634:	2b04      	cmp	r3, #4
    8636:	d005      	beq.n	8644 <__aeabi_dsub+0x70>
    8638:	1d2b      	adds	r3, r5, #4
    863a:	42ab      	cmp	r3, r5
    863c:	41ad      	sbcs	r5, r5
    863e:	426d      	negs	r5, r5
    8640:	197f      	adds	r7, r7, r5
    8642:	001d      	movs	r5, r3
    8644:	023b      	lsls	r3, r7, #8
    8646:	d400      	bmi.n	864a <__aeabi_dsub+0x76>
    8648:	e088      	b.n	875c <__aeabi_dsub+0x188>
    864a:	4bbb      	ldr	r3, [pc, #748]	; (8938 <__aeabi_dsub+0x364>)
    864c:	3401      	adds	r4, #1
    864e:	429c      	cmp	r4, r3
    8650:	d100      	bne.n	8654 <__aeabi_dsub+0x80>
    8652:	e110      	b.n	8876 <__aeabi_dsub+0x2a2>
    8654:	003a      	movs	r2, r7
    8656:	4bb9      	ldr	r3, [pc, #740]	; (893c <__aeabi_dsub+0x368>)
    8658:	4651      	mov	r1, sl
    865a:	401a      	ands	r2, r3
    865c:	2301      	movs	r3, #1
    865e:	0750      	lsls	r0, r2, #29
    8660:	08ed      	lsrs	r5, r5, #3
    8662:	0252      	lsls	r2, r2, #9
    8664:	0564      	lsls	r4, r4, #21
    8666:	4305      	orrs	r5, r0
    8668:	0b12      	lsrs	r2, r2, #12
    866a:	0d64      	lsrs	r4, r4, #21
    866c:	400b      	ands	r3, r1
    866e:	2100      	movs	r1, #0
    8670:	0028      	movs	r0, r5
    8672:	0312      	lsls	r2, r2, #12
    8674:	0d0d      	lsrs	r5, r1, #20
    8676:	0b12      	lsrs	r2, r2, #12
    8678:	0564      	lsls	r4, r4, #21
    867a:	052d      	lsls	r5, r5, #20
    867c:	4315      	orrs	r5, r2
    867e:	0862      	lsrs	r2, r4, #1
    8680:	4caf      	ldr	r4, [pc, #700]	; (8940 <__aeabi_dsub+0x36c>)
    8682:	07db      	lsls	r3, r3, #31
    8684:	402c      	ands	r4, r5
    8686:	4314      	orrs	r4, r2
    8688:	0064      	lsls	r4, r4, #1
    868a:	0864      	lsrs	r4, r4, #1
    868c:	431c      	orrs	r4, r3
    868e:	0021      	movs	r1, r4
    8690:	bc1c      	pop	{r2, r3, r4}
    8692:	4690      	mov	r8, r2
    8694:	4699      	mov	r9, r3
    8696:	46a2      	mov	sl, r4
    8698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    869a:	4ba7      	ldr	r3, [pc, #668]	; (8938 <__aeabi_dsub+0x364>)
    869c:	429c      	cmp	r4, r3
    869e:	d0c5      	beq.n	862c <__aeabi_dsub+0x58>
    86a0:	2380      	movs	r3, #128	; 0x80
    86a2:	041b      	lsls	r3, r3, #16
    86a4:	4318      	orrs	r0, r3
    86a6:	4663      	mov	r3, ip
    86a8:	2b38      	cmp	r3, #56	; 0x38
    86aa:	dd00      	ble.n	86ae <__aeabi_dsub+0xda>
    86ac:	e0fd      	b.n	88aa <__aeabi_dsub+0x2d6>
    86ae:	2b1f      	cmp	r3, #31
    86b0:	dd00      	ble.n	86b4 <__aeabi_dsub+0xe0>
    86b2:	e130      	b.n	8916 <__aeabi_dsub+0x342>
    86b4:	4662      	mov	r2, ip
    86b6:	2320      	movs	r3, #32
    86b8:	1a9b      	subs	r3, r3, r2
    86ba:	0002      	movs	r2, r0
    86bc:	409a      	lsls	r2, r3
    86be:	4666      	mov	r6, ip
    86c0:	4690      	mov	r8, r2
    86c2:	000a      	movs	r2, r1
    86c4:	4099      	lsls	r1, r3
    86c6:	40f2      	lsrs	r2, r6
    86c8:	4646      	mov	r6, r8
    86ca:	1e4b      	subs	r3, r1, #1
    86cc:	4199      	sbcs	r1, r3
    86ce:	4332      	orrs	r2, r6
    86d0:	4311      	orrs	r1, r2
    86d2:	4663      	mov	r3, ip
    86d4:	0002      	movs	r2, r0
    86d6:	40da      	lsrs	r2, r3
    86d8:	1a69      	subs	r1, r5, r1
    86da:	428d      	cmp	r5, r1
    86dc:	419b      	sbcs	r3, r3
    86de:	000d      	movs	r5, r1
    86e0:	1aba      	subs	r2, r7, r2
    86e2:	425b      	negs	r3, r3
    86e4:	1ad7      	subs	r7, r2, r3
    86e6:	023b      	lsls	r3, r7, #8
    86e8:	d535      	bpl.n	8756 <__aeabi_dsub+0x182>
    86ea:	027a      	lsls	r2, r7, #9
    86ec:	0a53      	lsrs	r3, r2, #9
    86ee:	4698      	mov	r8, r3
    86f0:	4643      	mov	r3, r8
    86f2:	2b00      	cmp	r3, #0
    86f4:	d100      	bne.n	86f8 <__aeabi_dsub+0x124>
    86f6:	e0c4      	b.n	8882 <__aeabi_dsub+0x2ae>
    86f8:	4640      	mov	r0, r8
    86fa:	f000 fb2d 	bl	8d58 <__clzsi2>
    86fe:	0003      	movs	r3, r0
    8700:	3b08      	subs	r3, #8
    8702:	2b1f      	cmp	r3, #31
    8704:	dd00      	ble.n	8708 <__aeabi_dsub+0x134>
    8706:	e0c5      	b.n	8894 <__aeabi_dsub+0x2c0>
    8708:	2220      	movs	r2, #32
    870a:	0029      	movs	r1, r5
    870c:	1ad2      	subs	r2, r2, r3
    870e:	4647      	mov	r7, r8
    8710:	40d1      	lsrs	r1, r2
    8712:	409f      	lsls	r7, r3
    8714:	000a      	movs	r2, r1
    8716:	409d      	lsls	r5, r3
    8718:	433a      	orrs	r2, r7
    871a:	429c      	cmp	r4, r3
    871c:	dd00      	ble.n	8720 <__aeabi_dsub+0x14c>
    871e:	e0c0      	b.n	88a2 <__aeabi_dsub+0x2ce>
    8720:	1b1c      	subs	r4, r3, r4
    8722:	1c63      	adds	r3, r4, #1
    8724:	2b1f      	cmp	r3, #31
    8726:	dd00      	ble.n	872a <__aeabi_dsub+0x156>
    8728:	e0e4      	b.n	88f4 <__aeabi_dsub+0x320>
    872a:	2120      	movs	r1, #32
    872c:	0014      	movs	r4, r2
    872e:	0028      	movs	r0, r5
    8730:	1ac9      	subs	r1, r1, r3
    8732:	40d8      	lsrs	r0, r3
    8734:	408c      	lsls	r4, r1
    8736:	408d      	lsls	r5, r1
    8738:	4304      	orrs	r4, r0
    873a:	40da      	lsrs	r2, r3
    873c:	1e68      	subs	r0, r5, #1
    873e:	4185      	sbcs	r5, r0
    8740:	0017      	movs	r7, r2
    8742:	4325      	orrs	r5, r4
    8744:	2400      	movs	r4, #0
    8746:	e771      	b.n	862c <__aeabi_dsub+0x58>
    8748:	4642      	mov	r2, r8
    874a:	4663      	mov	r3, ip
    874c:	431a      	orrs	r2, r3
    874e:	d100      	bne.n	8752 <__aeabi_dsub+0x17e>
    8750:	e24c      	b.n	8bec <__aeabi_dsub+0x618>
    8752:	4667      	mov	r7, ip
    8754:	4645      	mov	r5, r8
    8756:	076b      	lsls	r3, r5, #29
    8758:	d000      	beq.n	875c <__aeabi_dsub+0x188>
    875a:	e769      	b.n	8630 <__aeabi_dsub+0x5c>
    875c:	2301      	movs	r3, #1
    875e:	4651      	mov	r1, sl
    8760:	0778      	lsls	r0, r7, #29
    8762:	08ed      	lsrs	r5, r5, #3
    8764:	08fa      	lsrs	r2, r7, #3
    8766:	400b      	ands	r3, r1
    8768:	4305      	orrs	r5, r0
    876a:	4973      	ldr	r1, [pc, #460]	; (8938 <__aeabi_dsub+0x364>)
    876c:	428c      	cmp	r4, r1
    876e:	d038      	beq.n	87e2 <__aeabi_dsub+0x20e>
    8770:	0312      	lsls	r2, r2, #12
    8772:	0564      	lsls	r4, r4, #21
    8774:	0b12      	lsrs	r2, r2, #12
    8776:	0d64      	lsrs	r4, r4, #21
    8778:	e779      	b.n	866e <__aeabi_dsub+0x9a>
    877a:	2e00      	cmp	r6, #0
    877c:	dc00      	bgt.n	8780 <__aeabi_dsub+0x1ac>
    877e:	e09a      	b.n	88b6 <__aeabi_dsub+0x2e2>
    8780:	2a00      	cmp	r2, #0
    8782:	d047      	beq.n	8814 <__aeabi_dsub+0x240>
    8784:	4a6c      	ldr	r2, [pc, #432]	; (8938 <__aeabi_dsub+0x364>)
    8786:	4294      	cmp	r4, r2
    8788:	d100      	bne.n	878c <__aeabi_dsub+0x1b8>
    878a:	e74f      	b.n	862c <__aeabi_dsub+0x58>
    878c:	2280      	movs	r2, #128	; 0x80
    878e:	0412      	lsls	r2, r2, #16
    8790:	4310      	orrs	r0, r2
    8792:	4662      	mov	r2, ip
    8794:	2a38      	cmp	r2, #56	; 0x38
    8796:	dc00      	bgt.n	879a <__aeabi_dsub+0x1c6>
    8798:	e108      	b.n	89ac <__aeabi_dsub+0x3d8>
    879a:	4301      	orrs	r1, r0
    879c:	1e48      	subs	r0, r1, #1
    879e:	4181      	sbcs	r1, r0
    87a0:	2200      	movs	r2, #0
    87a2:	b2c9      	uxtb	r1, r1
    87a4:	1949      	adds	r1, r1, r5
    87a6:	19d2      	adds	r2, r2, r7
    87a8:	42a9      	cmp	r1, r5
    87aa:	41bf      	sbcs	r7, r7
    87ac:	000d      	movs	r5, r1
    87ae:	427f      	negs	r7, r7
    87b0:	18bf      	adds	r7, r7, r2
    87b2:	023a      	lsls	r2, r7, #8
    87b4:	d400      	bmi.n	87b8 <__aeabi_dsub+0x1e4>
    87b6:	e142      	b.n	8a3e <__aeabi_dsub+0x46a>
    87b8:	4a5f      	ldr	r2, [pc, #380]	; (8938 <__aeabi_dsub+0x364>)
    87ba:	3401      	adds	r4, #1
    87bc:	4294      	cmp	r4, r2
    87be:	d100      	bne.n	87c2 <__aeabi_dsub+0x1ee>
    87c0:	e14e      	b.n	8a60 <__aeabi_dsub+0x48c>
    87c2:	2001      	movs	r0, #1
    87c4:	4a5d      	ldr	r2, [pc, #372]	; (893c <__aeabi_dsub+0x368>)
    87c6:	0869      	lsrs	r1, r5, #1
    87c8:	403a      	ands	r2, r7
    87ca:	4028      	ands	r0, r5
    87cc:	4308      	orrs	r0, r1
    87ce:	07d5      	lsls	r5, r2, #31
    87d0:	4305      	orrs	r5, r0
    87d2:	0857      	lsrs	r7, r2, #1
    87d4:	469a      	mov	sl, r3
    87d6:	e729      	b.n	862c <__aeabi_dsub+0x58>
    87d8:	0006      	movs	r6, r0
    87da:	430e      	orrs	r6, r1
    87dc:	d000      	beq.n	87e0 <__aeabi_dsub+0x20c>
    87de:	e717      	b.n	8610 <__aeabi_dsub+0x3c>
    87e0:	e714      	b.n	860c <__aeabi_dsub+0x38>
    87e2:	0029      	movs	r1, r5
    87e4:	4311      	orrs	r1, r2
    87e6:	d100      	bne.n	87ea <__aeabi_dsub+0x216>
    87e8:	e1f9      	b.n	8bde <__aeabi_dsub+0x60a>
    87ea:	2180      	movs	r1, #128	; 0x80
    87ec:	0309      	lsls	r1, r1, #12
    87ee:	430a      	orrs	r2, r1
    87f0:	0312      	lsls	r2, r2, #12
    87f2:	0b12      	lsrs	r2, r2, #12
    87f4:	e73b      	b.n	866e <__aeabi_dsub+0x9a>
    87f6:	2301      	movs	r3, #1
    87f8:	425b      	negs	r3, r3
    87fa:	4698      	mov	r8, r3
    87fc:	44c4      	add	ip, r8
    87fe:	4663      	mov	r3, ip
    8800:	2b00      	cmp	r3, #0
    8802:	d172      	bne.n	88ea <__aeabi_dsub+0x316>
    8804:	1a69      	subs	r1, r5, r1
    8806:	428d      	cmp	r5, r1
    8808:	419b      	sbcs	r3, r3
    880a:	1a3f      	subs	r7, r7, r0
    880c:	425b      	negs	r3, r3
    880e:	1aff      	subs	r7, r7, r3
    8810:	000d      	movs	r5, r1
    8812:	e768      	b.n	86e6 <__aeabi_dsub+0x112>
    8814:	0002      	movs	r2, r0
    8816:	430a      	orrs	r2, r1
    8818:	d100      	bne.n	881c <__aeabi_dsub+0x248>
    881a:	e707      	b.n	862c <__aeabi_dsub+0x58>
    881c:	2201      	movs	r2, #1
    881e:	4252      	negs	r2, r2
    8820:	4690      	mov	r8, r2
    8822:	44c4      	add	ip, r8
    8824:	4662      	mov	r2, ip
    8826:	2a00      	cmp	r2, #0
    8828:	d000      	beq.n	882c <__aeabi_dsub+0x258>
    882a:	e0e6      	b.n	89fa <__aeabi_dsub+0x426>
    882c:	1869      	adds	r1, r5, r1
    882e:	42a9      	cmp	r1, r5
    8830:	41b6      	sbcs	r6, r6
    8832:	183f      	adds	r7, r7, r0
    8834:	4276      	negs	r6, r6
    8836:	19f7      	adds	r7, r6, r7
    8838:	000d      	movs	r5, r1
    883a:	e7ba      	b.n	87b2 <__aeabi_dsub+0x1de>
    883c:	2e00      	cmp	r6, #0
    883e:	d000      	beq.n	8842 <__aeabi_dsub+0x26e>
    8840:	e080      	b.n	8944 <__aeabi_dsub+0x370>
    8842:	1c62      	adds	r2, r4, #1
    8844:	0552      	lsls	r2, r2, #21
    8846:	0d52      	lsrs	r2, r2, #21
    8848:	2a01      	cmp	r2, #1
    884a:	dc00      	bgt.n	884e <__aeabi_dsub+0x27a>
    884c:	e0f9      	b.n	8a42 <__aeabi_dsub+0x46e>
    884e:	1a6a      	subs	r2, r5, r1
    8850:	4691      	mov	r9, r2
    8852:	454d      	cmp	r5, r9
    8854:	41b6      	sbcs	r6, r6
    8856:	1a3a      	subs	r2, r7, r0
    8858:	4276      	negs	r6, r6
    885a:	1b92      	subs	r2, r2, r6
    885c:	4690      	mov	r8, r2
    885e:	0212      	lsls	r2, r2, #8
    8860:	d400      	bmi.n	8864 <__aeabi_dsub+0x290>
    8862:	e099      	b.n	8998 <__aeabi_dsub+0x3c4>
    8864:	1b4d      	subs	r5, r1, r5
    8866:	42a9      	cmp	r1, r5
    8868:	4189      	sbcs	r1, r1
    886a:	1bc7      	subs	r7, r0, r7
    886c:	4249      	negs	r1, r1
    886e:	1a7a      	subs	r2, r7, r1
    8870:	4690      	mov	r8, r2
    8872:	469a      	mov	sl, r3
    8874:	e73c      	b.n	86f0 <__aeabi_dsub+0x11c>
    8876:	4652      	mov	r2, sl
    8878:	2301      	movs	r3, #1
    887a:	2500      	movs	r5, #0
    887c:	4013      	ands	r3, r2
    887e:	2200      	movs	r2, #0
    8880:	e6f5      	b.n	866e <__aeabi_dsub+0x9a>
    8882:	0028      	movs	r0, r5
    8884:	f000 fa68 	bl	8d58 <__clzsi2>
    8888:	3020      	adds	r0, #32
    888a:	0003      	movs	r3, r0
    888c:	3b08      	subs	r3, #8
    888e:	2b1f      	cmp	r3, #31
    8890:	dc00      	bgt.n	8894 <__aeabi_dsub+0x2c0>
    8892:	e739      	b.n	8708 <__aeabi_dsub+0x134>
    8894:	002a      	movs	r2, r5
    8896:	3828      	subs	r0, #40	; 0x28
    8898:	4082      	lsls	r2, r0
    889a:	2500      	movs	r5, #0
    889c:	429c      	cmp	r4, r3
    889e:	dc00      	bgt.n	88a2 <__aeabi_dsub+0x2ce>
    88a0:	e73e      	b.n	8720 <__aeabi_dsub+0x14c>
    88a2:	4f26      	ldr	r7, [pc, #152]	; (893c <__aeabi_dsub+0x368>)
    88a4:	1ae4      	subs	r4, r4, r3
    88a6:	4017      	ands	r7, r2
    88a8:	e6c0      	b.n	862c <__aeabi_dsub+0x58>
    88aa:	4301      	orrs	r1, r0
    88ac:	1e48      	subs	r0, r1, #1
    88ae:	4181      	sbcs	r1, r0
    88b0:	2200      	movs	r2, #0
    88b2:	b2c9      	uxtb	r1, r1
    88b4:	e710      	b.n	86d8 <__aeabi_dsub+0x104>
    88b6:	2e00      	cmp	r6, #0
    88b8:	d000      	beq.n	88bc <__aeabi_dsub+0x2e8>
    88ba:	e0f1      	b.n	8aa0 <__aeabi_dsub+0x4cc>
    88bc:	1c62      	adds	r2, r4, #1
    88be:	4694      	mov	ip, r2
    88c0:	0552      	lsls	r2, r2, #21
    88c2:	0d52      	lsrs	r2, r2, #21
    88c4:	2a01      	cmp	r2, #1
    88c6:	dc00      	bgt.n	88ca <__aeabi_dsub+0x2f6>
    88c8:	e0a0      	b.n	8a0c <__aeabi_dsub+0x438>
    88ca:	4a1b      	ldr	r2, [pc, #108]	; (8938 <__aeabi_dsub+0x364>)
    88cc:	4594      	cmp	ip, r2
    88ce:	d100      	bne.n	88d2 <__aeabi_dsub+0x2fe>
    88d0:	e0c5      	b.n	8a5e <__aeabi_dsub+0x48a>
    88d2:	1869      	adds	r1, r5, r1
    88d4:	42a9      	cmp	r1, r5
    88d6:	4192      	sbcs	r2, r2
    88d8:	183f      	adds	r7, r7, r0
    88da:	4252      	negs	r2, r2
    88dc:	19d2      	adds	r2, r2, r7
    88de:	0849      	lsrs	r1, r1, #1
    88e0:	07d5      	lsls	r5, r2, #31
    88e2:	430d      	orrs	r5, r1
    88e4:	0857      	lsrs	r7, r2, #1
    88e6:	4664      	mov	r4, ip
    88e8:	e6a0      	b.n	862c <__aeabi_dsub+0x58>
    88ea:	4b13      	ldr	r3, [pc, #76]	; (8938 <__aeabi_dsub+0x364>)
    88ec:	429c      	cmp	r4, r3
    88ee:	d000      	beq.n	88f2 <__aeabi_dsub+0x31e>
    88f0:	e6d9      	b.n	86a6 <__aeabi_dsub+0xd2>
    88f2:	e69b      	b.n	862c <__aeabi_dsub+0x58>
    88f4:	0011      	movs	r1, r2
    88f6:	3c1f      	subs	r4, #31
    88f8:	40e1      	lsrs	r1, r4
    88fa:	000c      	movs	r4, r1
    88fc:	2b20      	cmp	r3, #32
    88fe:	d100      	bne.n	8902 <__aeabi_dsub+0x32e>
    8900:	e080      	b.n	8a04 <__aeabi_dsub+0x430>
    8902:	2140      	movs	r1, #64	; 0x40
    8904:	1acb      	subs	r3, r1, r3
    8906:	409a      	lsls	r2, r3
    8908:	4315      	orrs	r5, r2
    890a:	1e6a      	subs	r2, r5, #1
    890c:	4195      	sbcs	r5, r2
    890e:	2700      	movs	r7, #0
    8910:	4325      	orrs	r5, r4
    8912:	2400      	movs	r4, #0
    8914:	e71f      	b.n	8756 <__aeabi_dsub+0x182>
    8916:	4663      	mov	r3, ip
    8918:	0002      	movs	r2, r0
    891a:	3b20      	subs	r3, #32
    891c:	40da      	lsrs	r2, r3
    891e:	4663      	mov	r3, ip
    8920:	2b20      	cmp	r3, #32
    8922:	d071      	beq.n	8a08 <__aeabi_dsub+0x434>
    8924:	2340      	movs	r3, #64	; 0x40
    8926:	4666      	mov	r6, ip
    8928:	1b9b      	subs	r3, r3, r6
    892a:	4098      	lsls	r0, r3
    892c:	4301      	orrs	r1, r0
    892e:	1e48      	subs	r0, r1, #1
    8930:	4181      	sbcs	r1, r0
    8932:	4311      	orrs	r1, r2
    8934:	2200      	movs	r2, #0
    8936:	e6cf      	b.n	86d8 <__aeabi_dsub+0x104>
    8938:	000007ff 	.word	0x000007ff
    893c:	ff7fffff 	.word	0xff7fffff
    8940:	800fffff 	.word	0x800fffff
    8944:	2c00      	cmp	r4, #0
    8946:	d048      	beq.n	89da <__aeabi_dsub+0x406>
    8948:	4cca      	ldr	r4, [pc, #808]	; (8c74 <__aeabi_dsub+0x6a0>)
    894a:	42a2      	cmp	r2, r4
    894c:	d100      	bne.n	8950 <__aeabi_dsub+0x37c>
    894e:	e0a2      	b.n	8a96 <__aeabi_dsub+0x4c2>
    8950:	4274      	negs	r4, r6
    8952:	46a1      	mov	r9, r4
    8954:	2480      	movs	r4, #128	; 0x80
    8956:	0424      	lsls	r4, r4, #16
    8958:	4327      	orrs	r7, r4
    895a:	464c      	mov	r4, r9
    895c:	2c38      	cmp	r4, #56	; 0x38
    895e:	dd00      	ble.n	8962 <__aeabi_dsub+0x38e>
    8960:	e0db      	b.n	8b1a <__aeabi_dsub+0x546>
    8962:	2c1f      	cmp	r4, #31
    8964:	dd00      	ble.n	8968 <__aeabi_dsub+0x394>
    8966:	e144      	b.n	8bf2 <__aeabi_dsub+0x61e>
    8968:	464e      	mov	r6, r9
    896a:	2420      	movs	r4, #32
    896c:	1ba4      	subs	r4, r4, r6
    896e:	003e      	movs	r6, r7
    8970:	40a6      	lsls	r6, r4
    8972:	46a2      	mov	sl, r4
    8974:	46b0      	mov	r8, r6
    8976:	464c      	mov	r4, r9
    8978:	002e      	movs	r6, r5
    897a:	40e6      	lsrs	r6, r4
    897c:	46b4      	mov	ip, r6
    897e:	4646      	mov	r6, r8
    8980:	4664      	mov	r4, ip
    8982:	4326      	orrs	r6, r4
    8984:	4654      	mov	r4, sl
    8986:	40a5      	lsls	r5, r4
    8988:	1e6c      	subs	r4, r5, #1
    898a:	41a5      	sbcs	r5, r4
    898c:	0034      	movs	r4, r6
    898e:	432c      	orrs	r4, r5
    8990:	464d      	mov	r5, r9
    8992:	40ef      	lsrs	r7, r5
    8994:	1b0d      	subs	r5, r1, r4
    8996:	e028      	b.n	89ea <__aeabi_dsub+0x416>
    8998:	464a      	mov	r2, r9
    899a:	4643      	mov	r3, r8
    899c:	464d      	mov	r5, r9
    899e:	431a      	orrs	r2, r3
    89a0:	d000      	beq.n	89a4 <__aeabi_dsub+0x3d0>
    89a2:	e6a5      	b.n	86f0 <__aeabi_dsub+0x11c>
    89a4:	2300      	movs	r3, #0
    89a6:	2400      	movs	r4, #0
    89a8:	2500      	movs	r5, #0
    89aa:	e6de      	b.n	876a <__aeabi_dsub+0x196>
    89ac:	2a1f      	cmp	r2, #31
    89ae:	dc5a      	bgt.n	8a66 <__aeabi_dsub+0x492>
    89b0:	4666      	mov	r6, ip
    89b2:	2220      	movs	r2, #32
    89b4:	1b92      	subs	r2, r2, r6
    89b6:	0006      	movs	r6, r0
    89b8:	4096      	lsls	r6, r2
    89ba:	4691      	mov	r9, r2
    89bc:	46b0      	mov	r8, r6
    89be:	4662      	mov	r2, ip
    89c0:	000e      	movs	r6, r1
    89c2:	40d6      	lsrs	r6, r2
    89c4:	4642      	mov	r2, r8
    89c6:	4316      	orrs	r6, r2
    89c8:	464a      	mov	r2, r9
    89ca:	4091      	lsls	r1, r2
    89cc:	1e4a      	subs	r2, r1, #1
    89ce:	4191      	sbcs	r1, r2
    89d0:	0002      	movs	r2, r0
    89d2:	4660      	mov	r0, ip
    89d4:	4331      	orrs	r1, r6
    89d6:	40c2      	lsrs	r2, r0
    89d8:	e6e4      	b.n	87a4 <__aeabi_dsub+0x1d0>
    89da:	003c      	movs	r4, r7
    89dc:	432c      	orrs	r4, r5
    89de:	d05a      	beq.n	8a96 <__aeabi_dsub+0x4c2>
    89e0:	43f4      	mvns	r4, r6
    89e2:	46a1      	mov	r9, r4
    89e4:	2c00      	cmp	r4, #0
    89e6:	d152      	bne.n	8a8e <__aeabi_dsub+0x4ba>
    89e8:	1b4d      	subs	r5, r1, r5
    89ea:	42a9      	cmp	r1, r5
    89ec:	4189      	sbcs	r1, r1
    89ee:	1bc7      	subs	r7, r0, r7
    89f0:	4249      	negs	r1, r1
    89f2:	1a7f      	subs	r7, r7, r1
    89f4:	0014      	movs	r4, r2
    89f6:	469a      	mov	sl, r3
    89f8:	e675      	b.n	86e6 <__aeabi_dsub+0x112>
    89fa:	4a9e      	ldr	r2, [pc, #632]	; (8c74 <__aeabi_dsub+0x6a0>)
    89fc:	4294      	cmp	r4, r2
    89fe:	d000      	beq.n	8a02 <__aeabi_dsub+0x42e>
    8a00:	e6c7      	b.n	8792 <__aeabi_dsub+0x1be>
    8a02:	e613      	b.n	862c <__aeabi_dsub+0x58>
    8a04:	2200      	movs	r2, #0
    8a06:	e77f      	b.n	8908 <__aeabi_dsub+0x334>
    8a08:	2000      	movs	r0, #0
    8a0a:	e78f      	b.n	892c <__aeabi_dsub+0x358>
    8a0c:	2c00      	cmp	r4, #0
    8a0e:	d000      	beq.n	8a12 <__aeabi_dsub+0x43e>
    8a10:	e0c8      	b.n	8ba4 <__aeabi_dsub+0x5d0>
    8a12:	003b      	movs	r3, r7
    8a14:	432b      	orrs	r3, r5
    8a16:	d100      	bne.n	8a1a <__aeabi_dsub+0x446>
    8a18:	e10f      	b.n	8c3a <__aeabi_dsub+0x666>
    8a1a:	0003      	movs	r3, r0
    8a1c:	430b      	orrs	r3, r1
    8a1e:	d100      	bne.n	8a22 <__aeabi_dsub+0x44e>
    8a20:	e604      	b.n	862c <__aeabi_dsub+0x58>
    8a22:	1869      	adds	r1, r5, r1
    8a24:	42a9      	cmp	r1, r5
    8a26:	419b      	sbcs	r3, r3
    8a28:	183f      	adds	r7, r7, r0
    8a2a:	425b      	negs	r3, r3
    8a2c:	19df      	adds	r7, r3, r7
    8a2e:	023b      	lsls	r3, r7, #8
    8a30:	d400      	bmi.n	8a34 <__aeabi_dsub+0x460>
    8a32:	e11a      	b.n	8c6a <__aeabi_dsub+0x696>
    8a34:	4b90      	ldr	r3, [pc, #576]	; (8c78 <__aeabi_dsub+0x6a4>)
    8a36:	000d      	movs	r5, r1
    8a38:	401f      	ands	r7, r3
    8a3a:	4664      	mov	r4, ip
    8a3c:	e5f6      	b.n	862c <__aeabi_dsub+0x58>
    8a3e:	469a      	mov	sl, r3
    8a40:	e689      	b.n	8756 <__aeabi_dsub+0x182>
    8a42:	003a      	movs	r2, r7
    8a44:	432a      	orrs	r2, r5
    8a46:	2c00      	cmp	r4, #0
    8a48:	d15c      	bne.n	8b04 <__aeabi_dsub+0x530>
    8a4a:	2a00      	cmp	r2, #0
    8a4c:	d175      	bne.n	8b3a <__aeabi_dsub+0x566>
    8a4e:	0002      	movs	r2, r0
    8a50:	430a      	orrs	r2, r1
    8a52:	d100      	bne.n	8a56 <__aeabi_dsub+0x482>
    8a54:	e0ca      	b.n	8bec <__aeabi_dsub+0x618>
    8a56:	0007      	movs	r7, r0
    8a58:	000d      	movs	r5, r1
    8a5a:	469a      	mov	sl, r3
    8a5c:	e5e6      	b.n	862c <__aeabi_dsub+0x58>
    8a5e:	4664      	mov	r4, ip
    8a60:	2200      	movs	r2, #0
    8a62:	2500      	movs	r5, #0
    8a64:	e681      	b.n	876a <__aeabi_dsub+0x196>
    8a66:	4662      	mov	r2, ip
    8a68:	0006      	movs	r6, r0
    8a6a:	3a20      	subs	r2, #32
    8a6c:	40d6      	lsrs	r6, r2
    8a6e:	4662      	mov	r2, ip
    8a70:	46b0      	mov	r8, r6
    8a72:	2a20      	cmp	r2, #32
    8a74:	d100      	bne.n	8a78 <__aeabi_dsub+0x4a4>
    8a76:	e0b7      	b.n	8be8 <__aeabi_dsub+0x614>
    8a78:	2240      	movs	r2, #64	; 0x40
    8a7a:	4666      	mov	r6, ip
    8a7c:	1b92      	subs	r2, r2, r6
    8a7e:	4090      	lsls	r0, r2
    8a80:	4301      	orrs	r1, r0
    8a82:	4642      	mov	r2, r8
    8a84:	1e48      	subs	r0, r1, #1
    8a86:	4181      	sbcs	r1, r0
    8a88:	4311      	orrs	r1, r2
    8a8a:	2200      	movs	r2, #0
    8a8c:	e68a      	b.n	87a4 <__aeabi_dsub+0x1d0>
    8a8e:	4c79      	ldr	r4, [pc, #484]	; (8c74 <__aeabi_dsub+0x6a0>)
    8a90:	42a2      	cmp	r2, r4
    8a92:	d000      	beq.n	8a96 <__aeabi_dsub+0x4c2>
    8a94:	e761      	b.n	895a <__aeabi_dsub+0x386>
    8a96:	0007      	movs	r7, r0
    8a98:	000d      	movs	r5, r1
    8a9a:	0014      	movs	r4, r2
    8a9c:	469a      	mov	sl, r3
    8a9e:	e5c5      	b.n	862c <__aeabi_dsub+0x58>
    8aa0:	2c00      	cmp	r4, #0
    8aa2:	d141      	bne.n	8b28 <__aeabi_dsub+0x554>
    8aa4:	003c      	movs	r4, r7
    8aa6:	432c      	orrs	r4, r5
    8aa8:	d078      	beq.n	8b9c <__aeabi_dsub+0x5c8>
    8aaa:	43f4      	mvns	r4, r6
    8aac:	46a1      	mov	r9, r4
    8aae:	2c00      	cmp	r4, #0
    8ab0:	d020      	beq.n	8af4 <__aeabi_dsub+0x520>
    8ab2:	4c70      	ldr	r4, [pc, #448]	; (8c74 <__aeabi_dsub+0x6a0>)
    8ab4:	42a2      	cmp	r2, r4
    8ab6:	d071      	beq.n	8b9c <__aeabi_dsub+0x5c8>
    8ab8:	464c      	mov	r4, r9
    8aba:	2c38      	cmp	r4, #56	; 0x38
    8abc:	dd00      	ble.n	8ac0 <__aeabi_dsub+0x4ec>
    8abe:	e0b2      	b.n	8c26 <__aeabi_dsub+0x652>
    8ac0:	2c1f      	cmp	r4, #31
    8ac2:	dd00      	ble.n	8ac6 <__aeabi_dsub+0x4f2>
    8ac4:	e0bc      	b.n	8c40 <__aeabi_dsub+0x66c>
    8ac6:	2620      	movs	r6, #32
    8ac8:	1b34      	subs	r4, r6, r4
    8aca:	46a2      	mov	sl, r4
    8acc:	003c      	movs	r4, r7
    8ace:	4656      	mov	r6, sl
    8ad0:	40b4      	lsls	r4, r6
    8ad2:	464e      	mov	r6, r9
    8ad4:	46a0      	mov	r8, r4
    8ad6:	002c      	movs	r4, r5
    8ad8:	40f4      	lsrs	r4, r6
    8ada:	46a4      	mov	ip, r4
    8adc:	4644      	mov	r4, r8
    8ade:	4666      	mov	r6, ip
    8ae0:	4334      	orrs	r4, r6
    8ae2:	46a4      	mov	ip, r4
    8ae4:	4654      	mov	r4, sl
    8ae6:	40a5      	lsls	r5, r4
    8ae8:	4664      	mov	r4, ip
    8aea:	1e6e      	subs	r6, r5, #1
    8aec:	41b5      	sbcs	r5, r6
    8aee:	4325      	orrs	r5, r4
    8af0:	464c      	mov	r4, r9
    8af2:	40e7      	lsrs	r7, r4
    8af4:	186d      	adds	r5, r5, r1
    8af6:	428d      	cmp	r5, r1
    8af8:	4189      	sbcs	r1, r1
    8afa:	183f      	adds	r7, r7, r0
    8afc:	4249      	negs	r1, r1
    8afe:	19cf      	adds	r7, r1, r7
    8b00:	0014      	movs	r4, r2
    8b02:	e656      	b.n	87b2 <__aeabi_dsub+0x1de>
    8b04:	2a00      	cmp	r2, #0
    8b06:	d12f      	bne.n	8b68 <__aeabi_dsub+0x594>
    8b08:	0002      	movs	r2, r0
    8b0a:	430a      	orrs	r2, r1
    8b0c:	d100      	bne.n	8b10 <__aeabi_dsub+0x53c>
    8b0e:	e084      	b.n	8c1a <__aeabi_dsub+0x646>
    8b10:	0007      	movs	r7, r0
    8b12:	000d      	movs	r5, r1
    8b14:	469a      	mov	sl, r3
    8b16:	4c57      	ldr	r4, [pc, #348]	; (8c74 <__aeabi_dsub+0x6a0>)
    8b18:	e588      	b.n	862c <__aeabi_dsub+0x58>
    8b1a:	433d      	orrs	r5, r7
    8b1c:	1e6f      	subs	r7, r5, #1
    8b1e:	41bd      	sbcs	r5, r7
    8b20:	b2ec      	uxtb	r4, r5
    8b22:	2700      	movs	r7, #0
    8b24:	1b0d      	subs	r5, r1, r4
    8b26:	e760      	b.n	89ea <__aeabi_dsub+0x416>
    8b28:	4c52      	ldr	r4, [pc, #328]	; (8c74 <__aeabi_dsub+0x6a0>)
    8b2a:	42a2      	cmp	r2, r4
    8b2c:	d036      	beq.n	8b9c <__aeabi_dsub+0x5c8>
    8b2e:	4274      	negs	r4, r6
    8b30:	2680      	movs	r6, #128	; 0x80
    8b32:	0436      	lsls	r6, r6, #16
    8b34:	46a1      	mov	r9, r4
    8b36:	4337      	orrs	r7, r6
    8b38:	e7be      	b.n	8ab8 <__aeabi_dsub+0x4e4>
    8b3a:	0002      	movs	r2, r0
    8b3c:	430a      	orrs	r2, r1
    8b3e:	d100      	bne.n	8b42 <__aeabi_dsub+0x56e>
    8b40:	e574      	b.n	862c <__aeabi_dsub+0x58>
    8b42:	1a6a      	subs	r2, r5, r1
    8b44:	4690      	mov	r8, r2
    8b46:	4545      	cmp	r5, r8
    8b48:	41b6      	sbcs	r6, r6
    8b4a:	1a3a      	subs	r2, r7, r0
    8b4c:	4276      	negs	r6, r6
    8b4e:	1b92      	subs	r2, r2, r6
    8b50:	4694      	mov	ip, r2
    8b52:	0212      	lsls	r2, r2, #8
    8b54:	d400      	bmi.n	8b58 <__aeabi_dsub+0x584>
    8b56:	e5f7      	b.n	8748 <__aeabi_dsub+0x174>
    8b58:	1b4d      	subs	r5, r1, r5
    8b5a:	42a9      	cmp	r1, r5
    8b5c:	4189      	sbcs	r1, r1
    8b5e:	1bc7      	subs	r7, r0, r7
    8b60:	4249      	negs	r1, r1
    8b62:	1a7f      	subs	r7, r7, r1
    8b64:	469a      	mov	sl, r3
    8b66:	e561      	b.n	862c <__aeabi_dsub+0x58>
    8b68:	0002      	movs	r2, r0
    8b6a:	430a      	orrs	r2, r1
    8b6c:	d03a      	beq.n	8be4 <__aeabi_dsub+0x610>
    8b6e:	08ed      	lsrs	r5, r5, #3
    8b70:	077c      	lsls	r4, r7, #29
    8b72:	432c      	orrs	r4, r5
    8b74:	2580      	movs	r5, #128	; 0x80
    8b76:	08fa      	lsrs	r2, r7, #3
    8b78:	032d      	lsls	r5, r5, #12
    8b7a:	422a      	tst	r2, r5
    8b7c:	d008      	beq.n	8b90 <__aeabi_dsub+0x5bc>
    8b7e:	08c7      	lsrs	r7, r0, #3
    8b80:	422f      	tst	r7, r5
    8b82:	d105      	bne.n	8b90 <__aeabi_dsub+0x5bc>
    8b84:	0745      	lsls	r5, r0, #29
    8b86:	002c      	movs	r4, r5
    8b88:	003a      	movs	r2, r7
    8b8a:	469a      	mov	sl, r3
    8b8c:	08c9      	lsrs	r1, r1, #3
    8b8e:	430c      	orrs	r4, r1
    8b90:	0f67      	lsrs	r7, r4, #29
    8b92:	00d2      	lsls	r2, r2, #3
    8b94:	00e5      	lsls	r5, r4, #3
    8b96:	4317      	orrs	r7, r2
    8b98:	4c36      	ldr	r4, [pc, #216]	; (8c74 <__aeabi_dsub+0x6a0>)
    8b9a:	e547      	b.n	862c <__aeabi_dsub+0x58>
    8b9c:	0007      	movs	r7, r0
    8b9e:	000d      	movs	r5, r1
    8ba0:	0014      	movs	r4, r2
    8ba2:	e543      	b.n	862c <__aeabi_dsub+0x58>
    8ba4:	003a      	movs	r2, r7
    8ba6:	432a      	orrs	r2, r5
    8ba8:	d043      	beq.n	8c32 <__aeabi_dsub+0x65e>
    8baa:	0002      	movs	r2, r0
    8bac:	430a      	orrs	r2, r1
    8bae:	d019      	beq.n	8be4 <__aeabi_dsub+0x610>
    8bb0:	08ed      	lsrs	r5, r5, #3
    8bb2:	077c      	lsls	r4, r7, #29
    8bb4:	432c      	orrs	r4, r5
    8bb6:	2580      	movs	r5, #128	; 0x80
    8bb8:	08fa      	lsrs	r2, r7, #3
    8bba:	032d      	lsls	r5, r5, #12
    8bbc:	422a      	tst	r2, r5
    8bbe:	d007      	beq.n	8bd0 <__aeabi_dsub+0x5fc>
    8bc0:	08c6      	lsrs	r6, r0, #3
    8bc2:	422e      	tst	r6, r5
    8bc4:	d104      	bne.n	8bd0 <__aeabi_dsub+0x5fc>
    8bc6:	0747      	lsls	r7, r0, #29
    8bc8:	003c      	movs	r4, r7
    8bca:	0032      	movs	r2, r6
    8bcc:	08c9      	lsrs	r1, r1, #3
    8bce:	430c      	orrs	r4, r1
    8bd0:	00d7      	lsls	r7, r2, #3
    8bd2:	0f62      	lsrs	r2, r4, #29
    8bd4:	00e5      	lsls	r5, r4, #3
    8bd6:	4317      	orrs	r7, r2
    8bd8:	469a      	mov	sl, r3
    8bda:	4c26      	ldr	r4, [pc, #152]	; (8c74 <__aeabi_dsub+0x6a0>)
    8bdc:	e526      	b.n	862c <__aeabi_dsub+0x58>
    8bde:	2200      	movs	r2, #0
    8be0:	2500      	movs	r5, #0
    8be2:	e544      	b.n	866e <__aeabi_dsub+0x9a>
    8be4:	4c23      	ldr	r4, [pc, #140]	; (8c74 <__aeabi_dsub+0x6a0>)
    8be6:	e521      	b.n	862c <__aeabi_dsub+0x58>
    8be8:	2000      	movs	r0, #0
    8bea:	e749      	b.n	8a80 <__aeabi_dsub+0x4ac>
    8bec:	2300      	movs	r3, #0
    8bee:	2500      	movs	r5, #0
    8bf0:	e5bb      	b.n	876a <__aeabi_dsub+0x196>
    8bf2:	464c      	mov	r4, r9
    8bf4:	003e      	movs	r6, r7
    8bf6:	3c20      	subs	r4, #32
    8bf8:	40e6      	lsrs	r6, r4
    8bfa:	464c      	mov	r4, r9
    8bfc:	46b4      	mov	ip, r6
    8bfe:	2c20      	cmp	r4, #32
    8c00:	d031      	beq.n	8c66 <__aeabi_dsub+0x692>
    8c02:	2440      	movs	r4, #64	; 0x40
    8c04:	464e      	mov	r6, r9
    8c06:	1ba6      	subs	r6, r4, r6
    8c08:	40b7      	lsls	r7, r6
    8c0a:	433d      	orrs	r5, r7
    8c0c:	1e6c      	subs	r4, r5, #1
    8c0e:	41a5      	sbcs	r5, r4
    8c10:	4664      	mov	r4, ip
    8c12:	432c      	orrs	r4, r5
    8c14:	2700      	movs	r7, #0
    8c16:	1b0d      	subs	r5, r1, r4
    8c18:	e6e7      	b.n	89ea <__aeabi_dsub+0x416>
    8c1a:	2280      	movs	r2, #128	; 0x80
    8c1c:	2300      	movs	r3, #0
    8c1e:	0312      	lsls	r2, r2, #12
    8c20:	4c14      	ldr	r4, [pc, #80]	; (8c74 <__aeabi_dsub+0x6a0>)
    8c22:	2500      	movs	r5, #0
    8c24:	e5a1      	b.n	876a <__aeabi_dsub+0x196>
    8c26:	433d      	orrs	r5, r7
    8c28:	1e6f      	subs	r7, r5, #1
    8c2a:	41bd      	sbcs	r5, r7
    8c2c:	2700      	movs	r7, #0
    8c2e:	b2ed      	uxtb	r5, r5
    8c30:	e760      	b.n	8af4 <__aeabi_dsub+0x520>
    8c32:	0007      	movs	r7, r0
    8c34:	000d      	movs	r5, r1
    8c36:	4c0f      	ldr	r4, [pc, #60]	; (8c74 <__aeabi_dsub+0x6a0>)
    8c38:	e4f8      	b.n	862c <__aeabi_dsub+0x58>
    8c3a:	0007      	movs	r7, r0
    8c3c:	000d      	movs	r5, r1
    8c3e:	e4f5      	b.n	862c <__aeabi_dsub+0x58>
    8c40:	464e      	mov	r6, r9
    8c42:	003c      	movs	r4, r7
    8c44:	3e20      	subs	r6, #32
    8c46:	40f4      	lsrs	r4, r6
    8c48:	46a0      	mov	r8, r4
    8c4a:	464c      	mov	r4, r9
    8c4c:	2c20      	cmp	r4, #32
    8c4e:	d00e      	beq.n	8c6e <__aeabi_dsub+0x69a>
    8c50:	2440      	movs	r4, #64	; 0x40
    8c52:	464e      	mov	r6, r9
    8c54:	1ba4      	subs	r4, r4, r6
    8c56:	40a7      	lsls	r7, r4
    8c58:	433d      	orrs	r5, r7
    8c5a:	1e6f      	subs	r7, r5, #1
    8c5c:	41bd      	sbcs	r5, r7
    8c5e:	4644      	mov	r4, r8
    8c60:	2700      	movs	r7, #0
    8c62:	4325      	orrs	r5, r4
    8c64:	e746      	b.n	8af4 <__aeabi_dsub+0x520>
    8c66:	2700      	movs	r7, #0
    8c68:	e7cf      	b.n	8c0a <__aeabi_dsub+0x636>
    8c6a:	000d      	movs	r5, r1
    8c6c:	e573      	b.n	8756 <__aeabi_dsub+0x182>
    8c6e:	2700      	movs	r7, #0
    8c70:	e7f2      	b.n	8c58 <__aeabi_dsub+0x684>
    8c72:	46c0      	nop			; (mov r8, r8)
    8c74:	000007ff 	.word	0x000007ff
    8c78:	ff7fffff 	.word	0xff7fffff

00008c7c <__aeabi_d2iz>:
    8c7c:	030b      	lsls	r3, r1, #12
    8c7e:	b530      	push	{r4, r5, lr}
    8c80:	4d13      	ldr	r5, [pc, #76]	; (8cd0 <__aeabi_d2iz+0x54>)
    8c82:	0b1a      	lsrs	r2, r3, #12
    8c84:	004b      	lsls	r3, r1, #1
    8c86:	0d5b      	lsrs	r3, r3, #21
    8c88:	0fc9      	lsrs	r1, r1, #31
    8c8a:	2400      	movs	r4, #0
    8c8c:	42ab      	cmp	r3, r5
    8c8e:	dd11      	ble.n	8cb4 <__aeabi_d2iz+0x38>
    8c90:	4c10      	ldr	r4, [pc, #64]	; (8cd4 <__aeabi_d2iz+0x58>)
    8c92:	42a3      	cmp	r3, r4
    8c94:	dc10      	bgt.n	8cb8 <__aeabi_d2iz+0x3c>
    8c96:	2480      	movs	r4, #128	; 0x80
    8c98:	0364      	lsls	r4, r4, #13
    8c9a:	4322      	orrs	r2, r4
    8c9c:	4c0e      	ldr	r4, [pc, #56]	; (8cd8 <__aeabi_d2iz+0x5c>)
    8c9e:	1ae4      	subs	r4, r4, r3
    8ca0:	2c1f      	cmp	r4, #31
    8ca2:	dd0c      	ble.n	8cbe <__aeabi_d2iz+0x42>
    8ca4:	480d      	ldr	r0, [pc, #52]	; (8cdc <__aeabi_d2iz+0x60>)
    8ca6:	1ac3      	subs	r3, r0, r3
    8ca8:	40da      	lsrs	r2, r3
    8caa:	0013      	movs	r3, r2
    8cac:	425c      	negs	r4, r3
    8cae:	2900      	cmp	r1, #0
    8cb0:	d100      	bne.n	8cb4 <__aeabi_d2iz+0x38>
    8cb2:	001c      	movs	r4, r3
    8cb4:	0020      	movs	r0, r4
    8cb6:	bd30      	pop	{r4, r5, pc}
    8cb8:	4b09      	ldr	r3, [pc, #36]	; (8ce0 <__aeabi_d2iz+0x64>)
    8cba:	18cc      	adds	r4, r1, r3
    8cbc:	e7fa      	b.n	8cb4 <__aeabi_d2iz+0x38>
    8cbe:	40e0      	lsrs	r0, r4
    8cc0:	4c08      	ldr	r4, [pc, #32]	; (8ce4 <__aeabi_d2iz+0x68>)
    8cc2:	46a4      	mov	ip, r4
    8cc4:	4463      	add	r3, ip
    8cc6:	409a      	lsls	r2, r3
    8cc8:	0013      	movs	r3, r2
    8cca:	4303      	orrs	r3, r0
    8ccc:	e7ee      	b.n	8cac <__aeabi_d2iz+0x30>
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	000003fe 	.word	0x000003fe
    8cd4:	0000041d 	.word	0x0000041d
    8cd8:	00000433 	.word	0x00000433
    8cdc:	00000413 	.word	0x00000413
    8ce0:	7fffffff 	.word	0x7fffffff
    8ce4:	fffffbed 	.word	0xfffffbed

00008ce8 <__aeabi_ui2d>:
    8ce8:	b570      	push	{r4, r5, r6, lr}
    8cea:	1e05      	subs	r5, r0, #0
    8cec:	d028      	beq.n	8d40 <__aeabi_ui2d+0x58>
    8cee:	f000 f833 	bl	8d58 <__clzsi2>
    8cf2:	4b15      	ldr	r3, [pc, #84]	; (8d48 <__aeabi_ui2d+0x60>)
    8cf4:	4a15      	ldr	r2, [pc, #84]	; (8d4c <__aeabi_ui2d+0x64>)
    8cf6:	1a1b      	subs	r3, r3, r0
    8cf8:	1ad2      	subs	r2, r2, r3
    8cfa:	2a1f      	cmp	r2, #31
    8cfc:	dd16      	ble.n	8d2c <__aeabi_ui2d+0x44>
    8cfe:	002c      	movs	r4, r5
    8d00:	4a13      	ldr	r2, [pc, #76]	; (8d50 <__aeabi_ui2d+0x68>)
    8d02:	2500      	movs	r5, #0
    8d04:	1ad2      	subs	r2, r2, r3
    8d06:	4094      	lsls	r4, r2
    8d08:	055a      	lsls	r2, r3, #21
    8d0a:	0324      	lsls	r4, r4, #12
    8d0c:	0b24      	lsrs	r4, r4, #12
    8d0e:	0d52      	lsrs	r2, r2, #21
    8d10:	2100      	movs	r1, #0
    8d12:	0324      	lsls	r4, r4, #12
    8d14:	0d0b      	lsrs	r3, r1, #20
    8d16:	0b24      	lsrs	r4, r4, #12
    8d18:	051b      	lsls	r3, r3, #20
    8d1a:	4323      	orrs	r3, r4
    8d1c:	4c0d      	ldr	r4, [pc, #52]	; (8d54 <__aeabi_ui2d+0x6c>)
    8d1e:	0512      	lsls	r2, r2, #20
    8d20:	4023      	ands	r3, r4
    8d22:	4313      	orrs	r3, r2
    8d24:	005b      	lsls	r3, r3, #1
    8d26:	0028      	movs	r0, r5
    8d28:	0859      	lsrs	r1, r3, #1
    8d2a:	bd70      	pop	{r4, r5, r6, pc}
    8d2c:	210b      	movs	r1, #11
    8d2e:	002c      	movs	r4, r5
    8d30:	1a08      	subs	r0, r1, r0
    8d32:	40c4      	lsrs	r4, r0
    8d34:	4095      	lsls	r5, r2
    8d36:	0324      	lsls	r4, r4, #12
    8d38:	055a      	lsls	r2, r3, #21
    8d3a:	0b24      	lsrs	r4, r4, #12
    8d3c:	0d52      	lsrs	r2, r2, #21
    8d3e:	e7e7      	b.n	8d10 <__aeabi_ui2d+0x28>
    8d40:	2200      	movs	r2, #0
    8d42:	2400      	movs	r4, #0
    8d44:	e7e4      	b.n	8d10 <__aeabi_ui2d+0x28>
    8d46:	46c0      	nop			; (mov r8, r8)
    8d48:	0000041e 	.word	0x0000041e
    8d4c:	00000433 	.word	0x00000433
    8d50:	00000413 	.word	0x00000413
    8d54:	800fffff 	.word	0x800fffff

00008d58 <__clzsi2>:
    8d58:	211c      	movs	r1, #28
    8d5a:	2301      	movs	r3, #1
    8d5c:	041b      	lsls	r3, r3, #16
    8d5e:	4298      	cmp	r0, r3
    8d60:	d301      	bcc.n	8d66 <__clzsi2+0xe>
    8d62:	0c00      	lsrs	r0, r0, #16
    8d64:	3910      	subs	r1, #16
    8d66:	0a1b      	lsrs	r3, r3, #8
    8d68:	4298      	cmp	r0, r3
    8d6a:	d301      	bcc.n	8d70 <__clzsi2+0x18>
    8d6c:	0a00      	lsrs	r0, r0, #8
    8d6e:	3908      	subs	r1, #8
    8d70:	091b      	lsrs	r3, r3, #4
    8d72:	4298      	cmp	r0, r3
    8d74:	d301      	bcc.n	8d7a <__clzsi2+0x22>
    8d76:	0900      	lsrs	r0, r0, #4
    8d78:	3904      	subs	r1, #4
    8d7a:	a202      	add	r2, pc, #8	; (adr r2, 8d84 <__clzsi2+0x2c>)
    8d7c:	5c10      	ldrb	r0, [r2, r0]
    8d7e:	1840      	adds	r0, r0, r1
    8d80:	4770      	bx	lr
    8d82:	46c0      	nop			; (mov r8, r8)
    8d84:	02020304 	.word	0x02020304
    8d88:	01010101 	.word	0x01010101
	...

00008d94 <__libc_init_array>:
    8d94:	4b0e      	ldr	r3, [pc, #56]	; (8dd0 <__libc_init_array+0x3c>)
    8d96:	b570      	push	{r4, r5, r6, lr}
    8d98:	2500      	movs	r5, #0
    8d9a:	001e      	movs	r6, r3
    8d9c:	4c0d      	ldr	r4, [pc, #52]	; (8dd4 <__libc_init_array+0x40>)
    8d9e:	1ae4      	subs	r4, r4, r3
    8da0:	10a4      	asrs	r4, r4, #2
    8da2:	42a5      	cmp	r5, r4
    8da4:	d004      	beq.n	8db0 <__libc_init_array+0x1c>
    8da6:	00ab      	lsls	r3, r5, #2
    8da8:	58f3      	ldr	r3, [r6, r3]
    8daa:	4798      	blx	r3
    8dac:	3501      	adds	r5, #1
    8dae:	e7f8      	b.n	8da2 <__libc_init_array+0xe>
    8db0:	f000 f8e0 	bl	8f74 <_init>
    8db4:	4b08      	ldr	r3, [pc, #32]	; (8dd8 <__libc_init_array+0x44>)
    8db6:	2500      	movs	r5, #0
    8db8:	001e      	movs	r6, r3
    8dba:	4c08      	ldr	r4, [pc, #32]	; (8ddc <__libc_init_array+0x48>)
    8dbc:	1ae4      	subs	r4, r4, r3
    8dbe:	10a4      	asrs	r4, r4, #2
    8dc0:	42a5      	cmp	r5, r4
    8dc2:	d004      	beq.n	8dce <__libc_init_array+0x3a>
    8dc4:	00ab      	lsls	r3, r5, #2
    8dc6:	58f3      	ldr	r3, [r6, r3]
    8dc8:	4798      	blx	r3
    8dca:	3501      	adds	r5, #1
    8dcc:	e7f8      	b.n	8dc0 <__libc_init_array+0x2c>
    8dce:	bd70      	pop	{r4, r5, r6, pc}
    8dd0:	00008f80 	.word	0x00008f80
    8dd4:	00008f80 	.word	0x00008f80
    8dd8:	00008f80 	.word	0x00008f80
    8ddc:	00008f84 	.word	0x00008f84

00008de0 <memcpy>:
    8de0:	2300      	movs	r3, #0
    8de2:	b510      	push	{r4, lr}
    8de4:	429a      	cmp	r2, r3
    8de6:	d003      	beq.n	8df0 <memcpy+0x10>
    8de8:	5ccc      	ldrb	r4, [r1, r3]
    8dea:	54c4      	strb	r4, [r0, r3]
    8dec:	3301      	adds	r3, #1
    8dee:	e7f9      	b.n	8de4 <memcpy+0x4>
    8df0:	bd10      	pop	{r4, pc}

00008df2 <memset>:
    8df2:	0003      	movs	r3, r0
    8df4:	1882      	adds	r2, r0, r2
    8df6:	4293      	cmp	r3, r2
    8df8:	d002      	beq.n	8e00 <memset+0xe>
    8dfa:	7019      	strb	r1, [r3, #0]
    8dfc:	3301      	adds	r3, #1
    8dfe:	e7fa      	b.n	8df6 <memset+0x4>
    8e00:	4770      	bx	lr
	...

00008e04 <tcc_modules>:
    8e04:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00008e10 <_tcc_gclk_ids>:
    8e10:	1a1a 001b                                   ....

00008e14 <_tcc_apbcmasks>:
    8e14:	0100 0000 0200 0000 0400 0000               ............

00008e20 <_tcc_maxs>:
    8e20:	ffff 00ff ffff 00ff ffff 0000               ............

00008e2c <_tcc_cc_nums>:
    8e2c:	0204 0002                                   ....

00008e30 <_tcc_ow_nums>:
    8e30:	0408 0002                                   ....

00008e34 <_tcc_intflag>:
    8e34:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    8e44:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    8e54:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    8e64:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    8e74:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    8e84:	42de 0000 4356 0000 4356 0000 42fc 0000     .B..VC..VC...B..
    8e94:	42f6 0000 4302 0000 42e4 0000 4308 0000     .B...C...B...C..
    8ea4:	433c 0000 44fc 0000 454c 0000 454c 0000     <C...D..LE..LE..
    8eb4:	4548 0000 44ee 0000 450e 0000 44de 0000     HE...D...E...D..
    8ec4:	4520 0000 4532 0000 5c3e 0000 5c1c 0000      E..2E..>\...\..
    8ed4:	5bfa 0000 5bc8 0000 5b96 0000 4f54 5350     .[...[...[..TOPS
    8ee4:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....
    8ef4:	7ca4 0000 7b72 0000 7c78 0000 7b68 0000     .|..r{..x|..h{..
    8f04:	7c78 0000 7c82 0000 7c78 0000 7b68 0000     x|...|..x|..h{..
    8f14:	7b72 0000 7b72 0000 7c82 0000 7b68 0000     r{..r{...|..h{..
    8f24:	7b5e 0000 7b5e 0000 7b5e 0000 7ed4 0000     ^{..^{..^{...~..
    8f34:	82d0 0000 8190 0000 8190 0000 818e 0000     ................
    8f44:	82a8 0000 82a8 0000 829a 0000 818e 0000     ................
    8f54:	82a8 0000 829a 0000 82a8 0000 818e 0000     ................
    8f64:	82b0 0000 82b0 0000 82b0 0000 84b0 0000     ................

00008f74 <_init>:
    8f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f76:	46c0      	nop			; (mov r8, r8)
    8f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8f7a:	bc08      	pop	{r3}
    8f7c:	469e      	mov	lr, r3
    8f7e:	4770      	bx	lr

00008f80 <__init_array_start>:
    8f80:	000000dd 	.word	0x000000dd

00008f84 <_fini>:
    8f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f86:	46c0      	nop			; (mov r8, r8)
    8f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8f8a:	bc08      	pop	{r3}
    8f8c:	469e      	mov	lr, r3
    8f8e:	4770      	bx	lr

00008f90 <__fini_array_start>:
    8f90:	000000b5 	.word	0x000000b5
