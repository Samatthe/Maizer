
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004914  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00004914  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020c  20000004  00004918  00010004  2**2
                  ALLOC
  3 .stack        00002000  20000210  00004b24  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000292f7  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d7c  00000000  00000000  0003937e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003280  00000000  00000000  0003c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000948  00000000  00000000  0003f37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000818  00000000  00000000  0003fcc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007e14  00000000  00000000  000404da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d21a  00000000  00000000  000482ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e09e  00000000  00000000  00055508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f40  00000000  00000000  000e35a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002210 	.word	0x20002210
       4:	00002dc5 	.word	0x00002dc5
       8:	00002ebd 	.word	0x00002ebd
       c:	00002ebd 	.word	0x00002ebd
	...
      2c:	00002ebd 	.word	0x00002ebd
	...
      38:	00002ebd 	.word	0x00002ebd
      3c:	00002ebd 	.word	0x00002ebd
      40:	00002ebd 	.word	0x00002ebd
      44:	00002ebd 	.word	0x00002ebd
      48:	00002ebd 	.word	0x00002ebd
      4c:	00000ad9 	.word	0x00000ad9
      50:	00000c65 	.word	0x00000c65
      54:	00002ebd 	.word	0x00002ebd
      58:	00002ebd 	.word	0x00002ebd
      5c:	00002ebd 	.word	0x00002ebd
      60:	00002ebd 	.word	0x00002ebd
      64:	00001fa1 	.word	0x00001fa1
      68:	00001fb5 	.word	0x00001fb5
      6c:	00001fc9 	.word	0x00001fc9
      70:	00001fdd 	.word	0x00001fdd
      74:	00001ff1 	.word	0x00001ff1
      78:	00002005 	.word	0x00002005
      7c:	00000cd1 	.word	0x00000cd1
      80:	00000ce5 	.word	0x00000ce5
      84:	00000cf9 	.word	0x00000cf9
      88:	00000d85 	.word	0x00000d85
      8c:	00000d99 	.word	0x00000d99
      90:	00000dad 	.word	0x00000dad
	...
      9c:	00002ebd 	.word	0x00002ebd
      a0:	00002ebd 	.word	0x00002ebd
      a4:	00002ebd 	.word	0x00002ebd
      a8:	00002ebd 	.word	0x00002ebd
      ac:	00002ebd 	.word	0x00002ebd
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00004914 	.word	0x00004914

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00004914 	.word	0x00004914
     108:	20000008 	.word	0x20000008
     10c:	00004914 	.word	0x00004914
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
     196:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	2201      	movs	r2, #1
     19c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	70da      	strb	r2, [r3, #3]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)

000001ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	1c02      	adds	r2, r0, #0
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b8:	4b06      	ldr	r3, [pc, #24]	; (1d4 <system_interrupt_enable+0x28>)
     1ba:	1dfa      	adds	r2, r7, #7
     1bc:	7812      	ldrb	r2, [r2, #0]
     1be:	1c11      	adds	r1, r2, #0
     1c0:	221f      	movs	r2, #31
     1c2:	400a      	ands	r2, r1
     1c4:	2101      	movs	r1, #1
     1c6:	4091      	lsls	r1, r2
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	601a      	str	r2, [r3, #0]
}
     1cc:	46bd      	mov	sp, r7
     1ce:	b002      	add	sp, #8
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	e000e100 	.word	0xe000e100

000001d8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	1c02      	adds	r2, r0, #0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e4:	230f      	movs	r3, #15
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	0952      	lsrs	r2, r2, #5
     1ee:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f0:	230f      	movs	r3, #15
     1f2:	18fb      	adds	r3, r7, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d10c      	bne.n	214 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fa:	4b09      	ldr	r3, [pc, #36]	; (220 <_extint_get_eic_from_channel+0x48>)
     1fc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1fe:	230f      	movs	r3, #15
     200:	18fb      	adds	r3, r7, r3
     202:	781b      	ldrb	r3, [r3, #0]
     204:	009b      	lsls	r3, r3, #2
     206:	2210      	movs	r2, #16
     208:	4694      	mov	ip, r2
     20a:	44bc      	add	ip, r7
     20c:	4463      	add	r3, ip
     20e:	3b08      	subs	r3, #8
     210:	681b      	ldr	r3, [r3, #0]
     212:	e000      	b.n	216 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     214:	2300      	movs	r3, #0
	}
}
     216:	1c18      	adds	r0, r3, #0
     218:	46bd      	mov	sp, r7
     21a:	b004      	add	sp, #16
     21c:	bd80      	pop	{r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	40001800 	.word	0x40001800

00000224 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22a:	4b10      	ldr	r3, [pc, #64]	; (26c <extint_is_syncing+0x48>)
     22c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22e:	2300      	movs	r3, #0
     230:	607b      	str	r3, [r7, #4]
     232:	e012      	b.n	25a <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     234:	687b      	ldr	r3, [r7, #4]
     236:	009b      	lsls	r3, r3, #2
     238:	2208      	movs	r2, #8
     23a:	4694      	mov	ip, r2
     23c:	44bc      	add	ip, r7
     23e:	4463      	add	r3, ip
     240:	3b08      	subs	r3, #8
     242:	681b      	ldr	r3, [r3, #0]
     244:	785b      	ldrb	r3, [r3, #1]
     246:	b2db      	uxtb	r3, r3
     248:	b2db      	uxtb	r3, r3
     24a:	b25b      	sxtb	r3, r3
     24c:	2b00      	cmp	r3, #0
     24e:	da01      	bge.n	254 <extint_is_syncing+0x30>
			return true;
     250:	2301      	movs	r3, #1
     252:	e006      	b.n	262 <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     254:	687b      	ldr	r3, [r7, #4]
     256:	3301      	adds	r3, #1
     258:	607b      	str	r3, [r7, #4]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	2b00      	cmp	r3, #0
     25e:	d0e9      	beq.n	234 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     260:	2300      	movs	r3, #0
}
     262:	1c18      	adds	r0, r3, #0
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2c      	ldr	r3, [pc, #176]	; (328 <_system_extint_init+0xb8>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2000      	movs	r0, #0
     27c:	2140      	movs	r1, #64	; 0x40
     27e:	4b2b      	ldr	r3, [pc, #172]	; (32c <_system_extint_init+0xbc>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	1c3b      	adds	r3, r7, #0
     284:	1c18      	adds	r0, r3, #0
     286:	4b2a      	ldr	r3, [pc, #168]	; (330 <_system_extint_init+0xc0>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	1c3b      	adds	r3, r7, #0
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	1c3b      	adds	r3, r7, #0
     292:	2005      	movs	r0, #5
     294:	1c19      	adds	r1, r3, #0
     296:	4b27      	ldr	r3, [pc, #156]	; (334 <_system_extint_init+0xc4>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b26      	ldr	r3, [pc, #152]	; (338 <_system_extint_init+0xc8>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b16      	ldr	r3, [pc, #88]	; (33c <_system_extint_init+0xcc>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <_system_extint_init+0xd0>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <_system_extint_init+0xd4>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <_system_extint_init+0xd8>)
     320:	4798      	blx	r3
}
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}
     328:	40001800 	.word	0x40001800
     32c:	00000129 	.word	0x00000129
     330:	00000115 	.word	0x00000115
     334:	00002a51 	.word	0x00002a51
     338:	00002a95 	.word	0x00002a95
     33c:	00000225 	.word	0x00000225
     340:	20000060 	.word	0x20000060
     344:	000001ad 	.word	0x000001ad
     348:	0000034d 	.word	0x0000034d

0000034c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_extint_enable+0x58>)
     354:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     356:	2300      	movs	r3, #0
     358:	607b      	str	r3, [r7, #4]
     35a:	e018      	b.n	38e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	009b      	lsls	r3, r3, #2
     360:	2208      	movs	r2, #8
     362:	4694      	mov	ip, r2
     364:	44bc      	add	ip, r7
     366:	4463      	add	r3, ip
     368:	3b08      	subs	r3, #8
     36a:	681a      	ldr	r2, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	2108      	movs	r1, #8
     372:	468c      	mov	ip, r1
     374:	44bc      	add	ip, r7
     376:	4463      	add	r3, ip
     378:	3b08      	subs	r3, #8
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	b2db      	uxtb	r3, r3
     380:	2102      	movs	r1, #2
     382:	430b      	orrs	r3, r1
     384:	b2db      	uxtb	r3, r3
     386:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     388:	687b      	ldr	r3, [r7, #4]
     38a:	3301      	adds	r3, #1
     38c:	607b      	str	r3, [r7, #4]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2b00      	cmp	r3, #0
     392:	d0e3      	beq.n	35c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     394:	46c0      	nop			; (mov r8, r8)
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <_extint_enable+0x5c>)
     398:	4798      	blx	r3
     39a:	1e03      	subs	r3, r0, #0
     39c:	d1fb      	bne.n	396 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	40001800 	.word	0x40001800
     3a8:	00000225 	.word	0x00000225

000003ac <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2200      	movs	r2, #0
     3be:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2201      	movs	r2, #1
     3c4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2201      	movs	r2, #1
     3ca:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2202      	movs	r2, #2
     3d6:	72da      	strb	r2, [r3, #11]
}
     3d8:	46bd      	mov	sp, r7
     3da:	b002      	add	sp, #8
     3dc:	bd80      	pop	{r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)

000003e0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	b086      	sub	sp, #24
     3e4:	af00      	add	r7, sp, #0
     3e6:	1c02      	adds	r2, r0, #0
     3e8:	6039      	str	r1, [r7, #0]
     3ea:	1dfb      	adds	r3, r7, #7
     3ec:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3ee:	2308      	movs	r3, #8
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	4b36      	ldr	r3, [pc, #216]	; (4d0 <extint_chan_set_config+0xf0>)
     3f6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	b2da      	uxtb	r2, r3
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	2308      	movs	r3, #8
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     40c:	683b      	ldr	r3, [r7, #0]
     40e:	7a1a      	ldrb	r2, [r3, #8]
     410:	2308      	movs	r3, #8
     412:	18fb      	adds	r3, r7, r3
     414:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     416:	683b      	ldr	r3, [r7, #0]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	b2da      	uxtb	r2, r3
     41c:	2308      	movs	r3, #8
     41e:	18fb      	adds	r3, r7, r3
     420:	1c10      	adds	r0, r2, #0
     422:	1c19      	adds	r1, r3, #0
     424:	4b2b      	ldr	r3, [pc, #172]	; (4d4 <extint_chan_set_config+0xf4>)
     426:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     428:	1dfb      	adds	r3, r7, #7
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	1c18      	adds	r0, r3, #0
     42e:	4b2a      	ldr	r3, [pc, #168]	; (4d8 <extint_chan_set_config+0xf8>)
     430:	4798      	blx	r3
     432:	1c03      	adds	r3, r0, #0
     434:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     436:	1dfb      	adds	r3, r7, #7
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2207      	movs	r2, #7
     43c:	4013      	ands	r3, r2
     43e:	009b      	lsls	r3, r3, #2
     440:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     442:	683b      	ldr	r3, [r7, #0]
     444:	7adb      	ldrb	r3, [r3, #11]
     446:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     448:	683b      	ldr	r3, [r7, #0]
     44a:	7a9b      	ldrb	r3, [r3, #10]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     450:	697b      	ldr	r3, [r7, #20]
     452:	2208      	movs	r2, #8
     454:	4313      	orrs	r3, r2
     456:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     458:	1dfb      	adds	r3, r7, #7
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	08db      	lsrs	r3, r3, #3
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
     462:	1dfb      	adds	r3, r7, #7
     464:	781b      	ldrb	r3, [r3, #0]
     466:	08db      	lsrs	r3, r3, #3
     468:	b2db      	uxtb	r3, r3
     46a:	1c1a      	adds	r2, r3, #0
     46c:	693b      	ldr	r3, [r7, #16]
     46e:	3206      	adds	r2, #6
     470:	0092      	lsls	r2, r2, #2
     472:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     474:	68fa      	ldr	r2, [r7, #12]
     476:	210f      	movs	r1, #15
     478:	4091      	lsls	r1, r2
     47a:	1c0a      	adds	r2, r1, #0
     47c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     480:	68fb      	ldr	r3, [r7, #12]
     482:	6979      	ldr	r1, [r7, #20]
     484:	4099      	lsls	r1, r3
     486:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	431a      	orrs	r2, r3
     48a:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	1d82      	adds	r2, r0, #6
     490:	0092      	lsls	r2, r2, #2
     492:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     494:	683b      	ldr	r3, [r7, #0]
     496:	7a5b      	ldrb	r3, [r3, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d00a      	beq.n	4b2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     49c:	693b      	ldr	r3, [r7, #16]
     49e:	695a      	ldr	r2, [r3, #20]
     4a0:	1dfb      	adds	r3, r7, #7
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	4099      	lsls	r1, r3
     4a8:	1c0b      	adds	r3, r1, #0
     4aa:	431a      	orrs	r2, r3
     4ac:	693b      	ldr	r3, [r7, #16]
     4ae:	615a      	str	r2, [r3, #20]
     4b0:	e00a      	b.n	4c8 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4b2:	693b      	ldr	r3, [r7, #16]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	1dfa      	adds	r2, r7, #7
     4b8:	7812      	ldrb	r2, [r2, #0]
     4ba:	2101      	movs	r1, #1
     4bc:	4091      	lsls	r1, r2
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	43d2      	mvns	r2, r2
     4c2:	401a      	ands	r2, r3
     4c4:	693b      	ldr	r3, [r7, #16]
     4c6:	615a      	str	r2, [r3, #20]
	}
}
     4c8:	46bd      	mov	sp, r7
     4ca:	b006      	add	sp, #24
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000185 	.word	0x00000185
     4d4:	00002d3d 	.word	0x00002d3d
     4d8:	000001d9 	.word	0x000001d9

000004dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	2200      	movs	r2, #0
     4e8:	701a      	strb	r2, [r3, #0]
}
     4ea:	46bd      	mov	sp, r7
     4ec:	b002      	add	sp, #8
     4ee:	bd80      	pop	{r7, pc}

000004f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	1c02      	adds	r2, r0, #0
     4f8:	6039      	str	r1, [r7, #0]
     4fa:	1dfb      	adds	r3, r7, #7
     4fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     4fe:	1dfb      	adds	r3, r7, #7
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b01      	cmp	r3, #1
     504:	d00a      	beq.n	51c <system_apb_clock_set_mask+0x2c>
     506:	2b02      	cmp	r3, #2
     508:	d00f      	beq.n	52a <system_apb_clock_set_mask+0x3a>
     50a:	2b00      	cmp	r3, #0
     50c:	d114      	bne.n	538 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <system_apb_clock_set_mask+0x58>)
     510:	4a0d      	ldr	r2, [pc, #52]	; (548 <system_apb_clock_set_mask+0x58>)
     512:	6991      	ldr	r1, [r2, #24]
     514:	683a      	ldr	r2, [r7, #0]
     516:	430a      	orrs	r2, r1
     518:	619a      	str	r2, [r3, #24]
			break;
     51a:	e00f      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     51e:	4a0a      	ldr	r2, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     520:	69d1      	ldr	r1, [r2, #28]
     522:	683a      	ldr	r2, [r7, #0]
     524:	430a      	orrs	r2, r1
     526:	61da      	str	r2, [r3, #28]
			break;
     528:	e008      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <system_apb_clock_set_mask+0x58>)
     52c:	4a06      	ldr	r2, [pc, #24]	; (548 <system_apb_clock_set_mask+0x58>)
     52e:	6a11      	ldr	r1, [r2, #32]
     530:	683a      	ldr	r2, [r7, #0]
     532:	430a      	orrs	r2, r1
     534:	621a      	str	r2, [r3, #32]
			break;
     536:	e001      	b.n	53c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     538:	2317      	movs	r3, #23
     53a:	e000      	b.n	53e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     53c:	2300      	movs	r3, #0
}
     53e:	1c18      	adds	r0, r3, #0
     540:	46bd      	mov	sp, r7
     542:	b002      	add	sp, #8
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	40000400 	.word	0x40000400

0000054c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	1c02      	adds	r2, r0, #0
     554:	1dfb      	adds	r3, r7, #7
     556:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <system_interrupt_enable+0x28>)
     55a:	1dfa      	adds	r2, r7, #7
     55c:	7812      	ldrb	r2, [r2, #0]
     55e:	1c11      	adds	r1, r2, #0
     560:	221f      	movs	r2, #31
     562:	400a      	ands	r2, r1
     564:	2101      	movs	r1, #1
     566:	4091      	lsls	r1, r2
     568:	1c0a      	adds	r2, r1, #0
     56a:	601a      	str	r2, [r3, #0]
}
     56c:	46bd      	mov	sp, r7
     56e:	b002      	add	sp, #8
     570:	bd80      	pop	{r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	e000e100 	.word	0xe000e100

00000578 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	1c02      	adds	r2, r0, #0
     580:	1dfb      	adds	r3, r7, #7
     582:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     584:	4a07      	ldr	r2, [pc, #28]	; (5a4 <system_interrupt_disable+0x2c>)
     586:	1dfb      	adds	r3, r7, #7
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	1c19      	adds	r1, r3, #0
     58c:	231f      	movs	r3, #31
     58e:	400b      	ands	r3, r1
     590:	2101      	movs	r1, #1
     592:	4099      	lsls	r1, r3
     594:	1c0b      	adds	r3, r1, #0
     596:	1c19      	adds	r1, r3, #0
     598:	2380      	movs	r3, #128	; 0x80
     59a:	50d1      	str	r1, [r2, r3]
}
     59c:	46bd      	mov	sp, r7
     59e:	b002      	add	sp, #8
     5a0:	bd80      	pop	{r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	e000e100 	.word	0xe000e100

000005a8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b084      	sub	sp, #16
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	7a9b      	ldrb	r3, [r3, #10]
     5ba:	b2db      	uxtb	r3, r3
     5bc:	b2db      	uxtb	r3, r3
     5be:	b25b      	sxtb	r3, r3
     5c0:	2b00      	cmp	r3, #0
     5c2:	da01      	bge.n	5c8 <rtc_count_is_syncing+0x20>
                return true;
     5c4:	2301      	movs	r3, #1
     5c6:	e000      	b.n	5ca <rtc_count_is_syncing+0x22>
        }

        return false;
     5c8:	2300      	movs	r3, #0
}
     5ca:	1c18      	adds	r0, r3, #0
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5e2:	2003      	movs	r0, #3
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <rtc_count_enable+0x38>)
     5e6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	1c18      	adds	r0, r3, #0
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <rtc_count_enable+0x3c>)
     5f0:	4798      	blx	r3
     5f2:	1e03      	subs	r3, r0, #0
     5f4:	d1f9      	bne.n	5ea <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5f6:	68fb      	ldr	r3, [r7, #12]
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	b29b      	uxth	r3, r3
     5fc:	2202      	movs	r2, #2
     5fe:	4313      	orrs	r3, r2
     600:	b29a      	uxth	r2, r3
     602:	68fb      	ldr	r3, [r7, #12]
     604:	801a      	strh	r2, [r3, #0]
}
     606:	46bd      	mov	sp, r7
     608:	b004      	add	sp, #16
     60a:	bd80      	pop	{r7, pc}
     60c:	0000054d 	.word	0x0000054d
     610:	000005a9 	.word	0x000005a9

00000614 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     614:	b580      	push	{r7, lr}
     616:	b084      	sub	sp, #16
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	681b      	ldr	r3, [r3, #0]
     620:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     622:	2003      	movs	r0, #3
     624:	4b09      	ldr	r3, [pc, #36]	; (64c <rtc_count_disable+0x38>)
     626:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	1c18      	adds	r0, r3, #0
     62e:	4b08      	ldr	r3, [pc, #32]	; (650 <rtc_count_disable+0x3c>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     636:	68fb      	ldr	r3, [r7, #12]
     638:	881b      	ldrh	r3, [r3, #0]
     63a:	b29b      	uxth	r3, r3
     63c:	2202      	movs	r2, #2
     63e:	4393      	bics	r3, r2
     640:	b29a      	uxth	r2, r3
     642:	68fb      	ldr	r3, [r7, #12]
     644:	801a      	strh	r2, [r3, #0]
}
     646:	46bd      	mov	sp, r7
     648:	b004      	add	sp, #16
     64a:	bd80      	pop	{r7, pc}
     64c:	00000579 	.word	0x00000579
     650:	000005a9 	.word	0x000005a9

00000654 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     662:	687b      	ldr	r3, [r7, #4]
     664:	1c18      	adds	r0, r3, #0
     666:	4b0d      	ldr	r3, [pc, #52]	; (69c <rtc_count_reset+0x48>)
     668:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2200      	movs	r2, #0
     66e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	1c18      	adds	r0, r3, #0
     67c:	4b08      	ldr	r3, [pc, #32]	; (6a0 <rtc_count_reset+0x4c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	881b      	ldrh	r3, [r3, #0]
     688:	b29b      	uxth	r3, r3
     68a:	2201      	movs	r2, #1
     68c:	4313      	orrs	r3, r2
     68e:	b29a      	uxth	r2, r3
     690:	68fb      	ldr	r3, [r7, #12]
     692:	801a      	strh	r2, [r3, #0]
}
     694:	46bd      	mov	sp, r7
     696:	b004      	add	sp, #16
     698:	bd80      	pop	{r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000615 	.word	0x00000615
     6a0:	000005a9 	.word	0x000005a9

000006a4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6a4:	b580      	push	{r7, lr}
     6a6:	b084      	sub	sp, #16
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
     6ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	881a      	ldrh	r2, [r3, #0]
     6b8:	68bb      	ldr	r3, [r7, #8]
     6ba:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	789b      	ldrb	r3, [r3, #2]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d03c      	beq.n	73e <_rtc_count_set_config+0x9a>
     6c4:	2b01      	cmp	r3, #1
     6c6:	d000      	beq.n	6ca <_rtc_count_set_config+0x26>
     6c8:	e070      	b.n	7ac <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	b29a      	uxth	r2, r3
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	78db      	ldrb	r3, [r3, #3]
     6d8:	2b00      	cmp	r3, #0
     6da:	d007      	beq.n	6ec <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6dc:	68bb      	ldr	r3, [r7, #8]
     6de:	881b      	ldrh	r3, [r3, #0]
     6e0:	b29b      	uxth	r3, r3
     6e2:	2280      	movs	r2, #128	; 0x80
     6e4:	4313      	orrs	r3, r2
     6e6:	b29a      	uxth	r2, r3
     6e8:	68bb      	ldr	r3, [r7, #8]
     6ea:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6ec:	230f      	movs	r3, #15
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	2200      	movs	r2, #0
     6f2:	701a      	strb	r2, [r3, #0]
     6f4:	e01d      	b.n	732 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	1c18      	adds	r0, r3, #0
     6fc:	4b35      	ldr	r3, [pc, #212]	; (7d4 <_rtc_count_set_config+0x130>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     704:	230f      	movs	r3, #15
     706:	18fb      	adds	r3, r7, r3
     708:	781a      	ldrb	r2, [r3, #0]
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	3202      	adds	r2, #2
     70e:	0092      	lsls	r2, r2, #2
     710:	58d2      	ldr	r2, [r2, r3]
     712:	6879      	ldr	r1, [r7, #4]
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	1c08      	adds	r0, r1, #0
     71c:	1c11      	adds	r1, r2, #0
     71e:	1c1a      	adds	r2, r3, #0
     720:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <_rtc_count_set_config+0x134>)
     722:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     724:	230f      	movs	r3, #15
     726:	18fb      	adds	r3, r7, r3
     728:	781a      	ldrb	r2, [r3, #0]
     72a:	230f      	movs	r3, #15
     72c:	18fb      	adds	r3, r7, r3
     72e:	3201      	adds	r2, #1
     730:	701a      	strb	r2, [r3, #0]
     732:	230f      	movs	r3, #15
     734:	18fb      	adds	r3, r7, r3
     736:	781b      	ldrb	r3, [r3, #0]
     738:	2b00      	cmp	r3, #0
     73a:	d0dc      	beq.n	6f6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     73c:	e038      	b.n	7b0 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     73e:	68bb      	ldr	r3, [r7, #8]
     740:	881b      	ldrh	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	2204      	movs	r2, #4
     746:	4313      	orrs	r3, r2
     748:	b29a      	uxth	r2, r3
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     74e:	683b      	ldr	r3, [r7, #0]
     750:	78db      	ldrb	r3, [r3, #3]
     752:	2b00      	cmp	r3, #0
     754:	d001      	beq.n	75a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     756:	2317      	movs	r3, #23
     758:	e038      	b.n	7cc <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     75a:	230e      	movs	r3, #14
     75c:	18fb      	adds	r3, r7, r3
     75e:	2200      	movs	r2, #0
     760:	701a      	strb	r2, [r3, #0]
     762:	e01d      	b.n	7a0 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     764:	46c0      	nop			; (mov r8, r8)
     766:	687b      	ldr	r3, [r7, #4]
     768:	1c18      	adds	r0, r3, #0
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <_rtc_count_set_config+0x130>)
     76c:	4798      	blx	r3
     76e:	1e03      	subs	r3, r0, #0
     770:	d1f9      	bne.n	766 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     772:	230e      	movs	r3, #14
     774:	18fb      	adds	r3, r7, r3
     776:	781a      	ldrb	r2, [r3, #0]
     778:	683b      	ldr	r3, [r7, #0]
     77a:	3202      	adds	r2, #2
     77c:	0092      	lsls	r2, r2, #2
     77e:	58d2      	ldr	r2, [r2, r3]
     780:	6879      	ldr	r1, [r7, #4]
     782:	230e      	movs	r3, #14
     784:	18fb      	adds	r3, r7, r3
     786:	781b      	ldrb	r3, [r3, #0]
     788:	1c08      	adds	r0, r1, #0
     78a:	1c11      	adds	r1, r2, #0
     78c:	1c1a      	adds	r2, r3, #0
     78e:	4b12      	ldr	r3, [pc, #72]	; (7d8 <_rtc_count_set_config+0x134>)
     790:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     792:	230e      	movs	r3, #14
     794:	18fb      	adds	r3, r7, r3
     796:	781a      	ldrb	r2, [r3, #0]
     798:	230e      	movs	r3, #14
     79a:	18fb      	adds	r3, r7, r3
     79c:	3201      	adds	r2, #1
     79e:	701a      	strb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d9dc      	bls.n	764 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7aa:	e001      	b.n	7b0 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7ac:	2317      	movs	r3, #23
     7ae:	e00d      	b.n	7cc <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	791b      	ldrb	r3, [r3, #4]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d008      	beq.n	7ca <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	885b      	ldrh	r3, [r3, #2]
     7bc:	b29b      	uxth	r3, r3
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	01d2      	lsls	r2, r2, #7
     7c2:	4313      	orrs	r3, r2
     7c4:	b29a      	uxth	r2, r3
     7c6:	68bb      	ldr	r3, [r7, #8]
     7c8:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7ca:	2300      	movs	r3, #0
}
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	46bd      	mov	sp, r7
     7d0:	b004      	add	sp, #16
     7d2:	bd80      	pop	{r7, pc}
     7d4:	000005a9 	.word	0x000005a9
     7d8:	00000935 	.word	0x00000935

000007dc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b086      	sub	sp, #24
     7e0:	af00      	add	r7, sp, #0
     7e2:	60f8      	str	r0, [r7, #12]
     7e4:	60b9      	str	r1, [r7, #8]
     7e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	68ba      	ldr	r2, [r7, #8]
     7ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7ee:	2000      	movs	r0, #0
     7f0:	2120      	movs	r1, #32
     7f2:	4b17      	ldr	r3, [pc, #92]	; (850 <rtc_count_init+0x74>)
     7f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7f6:	2314      	movs	r3, #20
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	1c18      	adds	r0, r3, #0
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <rtc_count_init+0x78>)
     7fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     800:	2314      	movs	r3, #20
     802:	18fb      	adds	r3, r7, r3
     804:	2202      	movs	r2, #2
     806:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2004      	movs	r0, #4
     80e:	1c19      	adds	r1, r3, #0
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <rtc_count_init+0x7c>)
     812:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     814:	2004      	movs	r0, #4
     816:	4b11      	ldr	r3, [pc, #68]	; (85c <rtc_count_init+0x80>)
     818:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	1c18      	adds	r0, r3, #0
     81e:	4b10      	ldr	r3, [pc, #64]	; (860 <rtc_count_init+0x84>)
     820:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     822:	687b      	ldr	r3, [r7, #4]
     824:	789a      	ldrb	r2, [r3, #2]
     826:	68fb      	ldr	r3, [r7, #12]
     828:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	791a      	ldrb	r2, [r3, #4]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     832:	4b0c      	ldr	r3, [pc, #48]	; (864 <rtc_count_init+0x88>)
     834:	68fa      	ldr	r2, [r7, #12]
     836:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     838:	68fa      	ldr	r2, [r7, #12]
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	1c10      	adds	r0, r2, #0
     83e:	1c19      	adds	r1, r3, #0
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <rtc_count_init+0x8c>)
     842:	4798      	blx	r3
     844:	1c03      	adds	r3, r0, #0
}
     846:	1c18      	adds	r0, r3, #0
     848:	46bd      	mov	sp, r7
     84a:	b006      	add	sp, #24
     84c:	bd80      	pop	{r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	000004f1 	.word	0x000004f1
     854:	000004dd 	.word	0x000004dd
     858:	00002a51 	.word	0x00002a51
     85c:	00002a95 	.word	0x00002a95
     860:	00000655 	.word	0x00000655
     864:	200000a0 	.word	0x200000a0
     868:	000006a5 	.word	0x000006a5

0000086c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     876:	687b      	ldr	r3, [r7, #4]
     878:	681b      	ldr	r3, [r3, #0]
     87a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	1c18      	adds	r0, r3, #0
     882:	4b10      	ldr	r3, [pc, #64]	; (8c4 <rtc_count_set_count+0x58>)
     884:	4798      	blx	r3
     886:	1e03      	subs	r3, r0, #0
     888:	d1f9      	bne.n	87e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	2b00      	cmp	r3, #0
     890:	d005      	beq.n	89e <rtc_count_set_count+0x32>
     892:	2b01      	cmp	r3, #1
     894:	d10e      	bne.n	8b4 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     896:	68fb      	ldr	r3, [r7, #12]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	611a      	str	r2, [r3, #16]

			break;
     89c:	e00c      	b.n	8b8 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	4a09      	ldr	r2, [pc, #36]	; (8c8 <rtc_count_set_count+0x5c>)
     8a2:	4293      	cmp	r3, r2
     8a4:	d901      	bls.n	8aa <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8a6:	2317      	movs	r3, #23
     8a8:	e007      	b.n	8ba <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8aa:	683b      	ldr	r3, [r7, #0]
     8ac:	b29a      	uxth	r2, r3
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	821a      	strh	r2, [r3, #16]

			break;
     8b2:	e001      	b.n	8b8 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8b4:	2317      	movs	r3, #23
     8b6:	e000      	b.n	8ba <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	1c18      	adds	r0, r3, #0
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	000005a9 	.word	0x000005a9
     8c8:	0000ffff 	.word	0x0000ffff

000008cc <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	795b      	ldrb	r3, [r3, #5]
     8de:	2201      	movs	r2, #1
     8e0:	4053      	eors	r3, r2
     8e2:	b2db      	uxtb	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d009      	beq.n	8fc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	4a10      	ldr	r2, [pc, #64]	; (92c <rtc_count_get_count+0x60>)
     8ec:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	1c18      	adds	r0, r3, #0
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <rtc_count_get_count+0x64>)
     8f6:	4798      	blx	r3
     8f8:	1e03      	subs	r3, r0, #0
     8fa:	d1f9      	bne.n	8f0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	791b      	ldrb	r3, [r3, #4]
     900:	2b00      	cmp	r3, #0
     902:	d005      	beq.n	910 <rtc_count_get_count+0x44>
     904:	2b01      	cmp	r3, #1
     906:	d108      	bne.n	91a <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     908:	68bb      	ldr	r3, [r7, #8]
     90a:	691b      	ldr	r3, [r3, #16]
     90c:	60fb      	str	r3, [r7, #12]

			break;
     90e:	e007      	b.n	920 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	8a1b      	ldrh	r3, [r3, #16]
     914:	b29b      	uxth	r3, r3
     916:	60fb      	str	r3, [r7, #12]

			break;
     918:	e002      	b.n	920 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     91a:	2300      	movs	r3, #0
     91c:	60fb      	str	r3, [r7, #12]
			break;
     91e:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     920:	68fb      	ldr	r3, [r7, #12]
}
     922:	1c18      	adds	r0, r3, #0
     924:	46bd      	mov	sp, r7
     926:	b004      	add	sp, #16
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	ffff8000 	.word	0xffff8000
     930:	000005a9 	.word	0x000005a9

00000934 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     934:	b580      	push	{r7, lr}
     936:	b086      	sub	sp, #24
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	1dfb      	adds	r3, r7, #7
     940:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     942:	68fb      	ldr	r3, [r7, #12]
     944:	681b      	ldr	r3, [r3, #0]
     946:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     948:	46c0      	nop			; (mov r8, r8)
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	1c18      	adds	r0, r3, #0
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <rtc_count_set_compare+0x84>)
     950:	4798      	blx	r3
     952:	1e03      	subs	r3, r0, #0
     954:	d1f9      	bne.n	94a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     956:	68fb      	ldr	r3, [r7, #12]
     958:	791b      	ldrb	r3, [r3, #4]
     95a:	2b00      	cmp	r3, #0
     95c:	d00f      	beq.n	97e <rtc_count_set_compare+0x4a>
     95e:	2b01      	cmp	r3, #1
     960:	d122      	bne.n	9a8 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b01      	cmp	r3, #1
     968:	d901      	bls.n	96e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     96a:	2317      	movs	r3, #23
     96c:	e01f      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     96e:	1dfb      	adds	r3, r7, #7
     970:	781a      	ldrb	r2, [r3, #0]
     972:	697b      	ldr	r3, [r7, #20]
     974:	3206      	adds	r2, #6
     976:	0092      	lsls	r2, r2, #2
     978:	68b9      	ldr	r1, [r7, #8]
     97a:	50d1      	str	r1, [r2, r3]

			break;
     97c:	e016      	b.n	9ac <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     97e:	1dfb      	adds	r3, r7, #7
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b02      	cmp	r3, #2
     984:	d901      	bls.n	98a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     986:	2317      	movs	r3, #23
     988:	e011      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	4a0b      	ldr	r2, [pc, #44]	; (9bc <rtc_count_set_compare+0x88>)
     98e:	4293      	cmp	r3, r2
     990:	d901      	bls.n	996 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e00b      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     996:	1dfb      	adds	r3, r7, #7
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	68bb      	ldr	r3, [r7, #8]
     99c:	b299      	uxth	r1, r3
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	320c      	adds	r2, #12
     9a2:	0052      	lsls	r2, r2, #1
     9a4:	52d1      	strh	r1, [r2, r3]

			break;
     9a6:	e001      	b.n	9ac <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9a8:	231a      	movs	r3, #26
     9aa:	e000      	b.n	9ae <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9ac:	2300      	movs	r3, #0
}
     9ae:	1c18      	adds	r0, r3, #0
     9b0:	46bd      	mov	sp, r7
     9b2:	b006      	add	sp, #24
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	000005a9 	.word	0x000005a9
     9bc:	0000ffff 	.word	0x0000ffff

000009c0 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b084      	sub	sp, #16
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
     9c8:	1c0a      	adds	r2, r1, #0
     9ca:	1cbb      	adds	r3, r7, #2
     9cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	791b      	ldrb	r3, [r3, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d001      	beq.n	9e0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9dc:	2315      	movs	r3, #21
     9de:	e00b      	b.n	9f8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e0:	46c0      	nop			; (mov r8, r8)
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <rtc_count_set_period+0x40>)
     9e8:	4798      	blx	r3
     9ea:	1e03      	subs	r3, r0, #0
     9ec:	d1f9      	bne.n	9e2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	1cba      	adds	r2, r7, #2
     9f2:	8812      	ldrh	r2, [r2, #0]
     9f4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9f6:	2300      	movs	r3, #0
}
     9f8:	1c18      	adds	r0, r3, #0
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	000005a9 	.word	0x000005a9

00000a04 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a04:	b580      	push	{r7, lr}
     a06:	b086      	sub	sp, #24
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a0c:	4b31      	ldr	r3, [pc, #196]	; (ad4 <_rtc_interrupt_handler+0xd0>)
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	0092      	lsls	r2, r2, #2
     a12:	58d3      	ldr	r3, [r2, r3]
     a14:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a16:	697b      	ldr	r3, [r7, #20]
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a1c:	230e      	movs	r3, #14
     a1e:	18fb      	adds	r3, r7, r3
     a20:	697a      	ldr	r2, [r7, #20]
     a22:	8ad2      	ldrh	r2, [r2, #22]
     a24:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a26:	697b      	ldr	r3, [r7, #20]
     a28:	8a9b      	ldrh	r3, [r3, #20]
     a2a:	b29a      	uxth	r2, r3
     a2c:	230e      	movs	r3, #14
     a2e:	18fb      	adds	r3, r7, r3
     a30:	210e      	movs	r1, #14
     a32:	1879      	adds	r1, r7, r1
     a34:	8809      	ldrh	r1, [r1, #0]
     a36:	400a      	ands	r2, r1
     a38:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a3a:	693b      	ldr	r3, [r7, #16]
     a3c:	7a1b      	ldrb	r3, [r3, #8]
     a3e:	b2da      	uxtb	r2, r3
     a40:	230c      	movs	r3, #12
     a42:	18fb      	adds	r3, r7, r3
     a44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a46:	693b      	ldr	r3, [r7, #16]
     a48:	79db      	ldrb	r3, [r3, #7]
     a4a:	b2db      	uxtb	r3, r3
     a4c:	b29a      	uxth	r2, r3
     a4e:	230c      	movs	r3, #12
     a50:	18fb      	adds	r3, r7, r3
     a52:	210c      	movs	r1, #12
     a54:	1879      	adds	r1, r7, r1
     a56:	8809      	ldrh	r1, [r1, #0]
     a58:	400a      	ands	r2, r1
     a5a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a5c:	230c      	movs	r3, #12
     a5e:	18fb      	adds	r3, r7, r3
     a60:	881b      	ldrh	r3, [r3, #0]
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	4013      	ands	r3, r2
     a66:	d00c      	beq.n	a82 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a68:	230e      	movs	r3, #14
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	881b      	ldrh	r3, [r3, #0]
     a6e:	2204      	movs	r2, #4
     a70:	4013      	ands	r3, r2
     a72:	d002      	beq.n	a7a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a74:	697b      	ldr	r3, [r7, #20]
     a76:	691b      	ldr	r3, [r3, #16]
     a78:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a7a:	693b      	ldr	r3, [r7, #16]
     a7c:	2280      	movs	r2, #128	; 0x80
     a7e:	721a      	strb	r2, [r3, #8]
     a80:	e024      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a82:	230c      	movs	r3, #12
     a84:	18fb      	adds	r3, r7, r3
     a86:	881b      	ldrh	r3, [r3, #0]
     a88:	2201      	movs	r2, #1
     a8a:	4013      	ands	r3, r2
     a8c:	d00c      	beq.n	aa8 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a8e:	230e      	movs	r3, #14
     a90:	18fb      	adds	r3, r7, r3
     a92:	881b      	ldrh	r3, [r3, #0]
     a94:	2201      	movs	r2, #1
     a96:	4013      	ands	r3, r2
     a98:	d002      	beq.n	aa0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     a9a:	697b      	ldr	r3, [r7, #20]
     a9c:	689b      	ldr	r3, [r3, #8]
     a9e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa0:	693b      	ldr	r3, [r7, #16]
     aa2:	2201      	movs	r2, #1
     aa4:	721a      	strb	r2, [r3, #8]
     aa6:	e011      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     aa8:	230c      	movs	r3, #12
     aaa:	18fb      	adds	r3, r7, r3
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	2202      	movs	r2, #2
     ab0:	4013      	ands	r3, r2
     ab2:	d00b      	beq.n	acc <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     ab4:	230e      	movs	r3, #14
     ab6:	18fb      	adds	r3, r7, r3
     ab8:	881b      	ldrh	r3, [r3, #0]
     aba:	2202      	movs	r2, #2
     abc:	4013      	ands	r3, r2
     abe:	d002      	beq.n	ac6 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	68db      	ldr	r3, [r3, #12]
     ac4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ac6:	693b      	ldr	r3, [r7, #16]
     ac8:	2202      	movs	r2, #2
     aca:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     acc:	46bd      	mov	sp, r7
     ace:	b006      	add	sp, #24
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	200000a0 	.word	0x200000a0

00000ad8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     adc:	2000      	movs	r0, #0
     ade:	4b02      	ldr	r3, [pc, #8]	; (ae8 <RTC_Handler+0x10>)
     ae0:	4798      	blx	r3
}
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000a05 	.word	0x00000a05

00000aec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     aec:	b580      	push	{r7, lr}
     aee:	b084      	sub	sp, #16
     af0:	af00      	add	r7, sp, #0
     af2:	1c02      	adds	r2, r0, #0
     af4:	1dfb      	adds	r3, r7, #7
     af6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     af8:	230f      	movs	r3, #15
     afa:	18fb      	adds	r3, r7, r3
     afc:	1dfa      	adds	r2, r7, #7
     afe:	7812      	ldrb	r2, [r2, #0]
     b00:	0952      	lsrs	r2, r2, #5
     b02:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     b04:	230f      	movs	r3, #15
     b06:	18fb      	adds	r3, r7, r3
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d10c      	bne.n	b28 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <_extint_get_eic_from_channel+0x48>)
     b10:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     b12:	230f      	movs	r3, #15
     b14:	18fb      	adds	r3, r7, r3
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	009b      	lsls	r3, r3, #2
     b1a:	2210      	movs	r2, #16
     b1c:	4694      	mov	ip, r2
     b1e:	44bc      	add	ip, r7
     b20:	4463      	add	r3, ip
     b22:	3b08      	subs	r3, #8
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	e000      	b.n	b2a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     b28:	2300      	movs	r3, #0
	}
}
     b2a:	1c18      	adds	r0, r3, #0
     b2c:	46bd      	mov	sp, r7
     b2e:	b004      	add	sp, #16
     b30:	bd80      	pop	{r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	40001800 	.word	0x40001800

00000b38 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	1c02      	adds	r2, r0, #0
     b40:	1dfb      	adds	r3, r7, #7
     b42:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	1c18      	adds	r0, r3, #0
     b4a:	4b0b      	ldr	r3, [pc, #44]	; (b78 <extint_chan_is_detected+0x40>)
     b4c:	4798      	blx	r3
     b4e:	1c03      	adds	r3, r0, #0
     b50:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b52:	1dfb      	adds	r3, r7, #7
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	221f      	movs	r2, #31
     b58:	4013      	ands	r3, r2
     b5a:	2201      	movs	r2, #1
     b5c:	409a      	lsls	r2, r3
     b5e:	1c13      	adds	r3, r2, #0
     b60:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     b62:	68fb      	ldr	r3, [r7, #12]
     b64:	691b      	ldr	r3, [r3, #16]
     b66:	68ba      	ldr	r2, [r7, #8]
     b68:	4013      	ands	r3, r2
     b6a:	1e5a      	subs	r2, r3, #1
     b6c:	4193      	sbcs	r3, r2
     b6e:	b2db      	uxtb	r3, r3
}
     b70:	1c18      	adds	r0, r3, #0
     b72:	46bd      	mov	sp, r7
     b74:	b004      	add	sp, #16
     b76:	bd80      	pop	{r7, pc}
     b78:	00000aed 	.word	0x00000aed

00000b7c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
     b82:	1c02      	adds	r2, r0, #0
     b84:	1dfb      	adds	r3, r7, #7
     b86:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	1c18      	adds	r0, r3, #0
     b8e:	4b09      	ldr	r3, [pc, #36]	; (bb4 <extint_chan_clear_detected+0x38>)
     b90:	4798      	blx	r3
     b92:	1c03      	adds	r3, r0, #0
     b94:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	221f      	movs	r2, #31
     b9c:	4013      	ands	r3, r2
     b9e:	2201      	movs	r2, #1
     ba0:	409a      	lsls	r2, r3
     ba2:	1c13      	adds	r3, r2, #0
     ba4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	68ba      	ldr	r2, [r7, #8]
     baa:	611a      	str	r2, [r3, #16]
}
     bac:	46bd      	mov	sp, r7
     bae:	b004      	add	sp, #16
     bb0:	bd80      	pop	{r7, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00000aed 	.word	0x00000aed

00000bb8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	1c11      	adds	r1, r2, #0
     bc4:	1cfb      	adds	r3, r7, #3
     bc6:	1c02      	adds	r2, r0, #0
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	1cbb      	adds	r3, r7, #2
     bcc:	1c0a      	adds	r2, r1, #0
     bce:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     bd0:	1cbb      	adds	r3, r7, #2
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d001      	beq.n	bdc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     bd8:	2317      	movs	r3, #23
     bda:	e019      	b.n	c10 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     bdc:	1cfb      	adds	r3, r7, #3
     bde:	781a      	ldrb	r2, [r3, #0]
     be0:	4b0d      	ldr	r3, [pc, #52]	; (c18 <extint_register_callback+0x60>)
     be2:	0092      	lsls	r2, r2, #2
     be4:	58d3      	ldr	r3, [r2, r3]
     be6:	2b00      	cmp	r3, #0
     be8:	d107      	bne.n	bfa <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     bea:	1cfb      	adds	r3, r7, #3
     bec:	781a      	ldrb	r2, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <extint_register_callback+0x60>)
     bf0:	0092      	lsls	r2, r2, #2
     bf2:	6879      	ldr	r1, [r7, #4]
     bf4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     bf6:	2300      	movs	r3, #0
     bf8:	e00a      	b.n	c10 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     bfa:	1cfb      	adds	r3, r7, #3
     bfc:	781a      	ldrb	r2, [r3, #0]
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <extint_register_callback+0x60>)
     c00:	0092      	lsls	r2, r2, #2
     c02:	58d2      	ldr	r2, [r2, r3]
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	429a      	cmp	r2, r3
     c08:	d101      	bne.n	c0e <extint_register_callback+0x56>
		return STATUS_OK;
     c0a:	2300      	movs	r3, #0
     c0c:	e000      	b.n	c10 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     c0e:	231d      	movs	r3, #29
}
     c10:	1c18      	adds	r0, r3, #0
     c12:	46bd      	mov	sp, r7
     c14:	b002      	add	sp, #8
     c16:	bd80      	pop	{r7, pc}
     c18:	20000060 	.word	0x20000060

00000c1c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b084      	sub	sp, #16
     c20:	af00      	add	r7, sp, #0
     c22:	1c02      	adds	r2, r0, #0
     c24:	1dfb      	adds	r3, r7, #7
     c26:	701a      	strb	r2, [r3, #0]
     c28:	1dbb      	adds	r3, r7, #6
     c2a:	1c0a      	adds	r2, r1, #0
     c2c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c2e:	1dbb      	adds	r3, r7, #6
     c30:	781b      	ldrb	r3, [r3, #0]
     c32:	2b00      	cmp	r3, #0
     c34:	d10e      	bne.n	c54 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     c36:	1dfb      	adds	r3, r7, #7
     c38:	781b      	ldrb	r3, [r3, #0]
     c3a:	1c18      	adds	r0, r3, #0
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <extint_chan_enable_callback+0x44>)
     c3e:	4798      	blx	r3
     c40:	1c03      	adds	r3, r0, #0
     c42:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     c44:	1dfb      	adds	r3, r7, #7
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	2201      	movs	r2, #1
     c4a:	409a      	lsls	r2, r3
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c50:	2300      	movs	r3, #0
     c52:	e000      	b.n	c56 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c54:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     c56:	1c18      	adds	r0, r3, #0
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000aed 	.word	0x00000aed

00000c64 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c64:	b580      	push	{r7, lr}
     c66:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c68:	4b15      	ldr	r3, [pc, #84]	; (cc0 <EIC_Handler+0x5c>)
     c6a:	2200      	movs	r2, #0
     c6c:	701a      	strb	r2, [r3, #0]
     c6e:	e020      	b.n	cb2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     c70:	4b13      	ldr	r3, [pc, #76]	; (cc0 <EIC_Handler+0x5c>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	1c18      	adds	r0, r3, #0
     c76:	4b13      	ldr	r3, [pc, #76]	; (cc4 <EIC_Handler+0x60>)
     c78:	4798      	blx	r3
     c7a:	1e03      	subs	r3, r0, #0
     c7c:	d013      	beq.n	ca6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     c7e:	4b10      	ldr	r3, [pc, #64]	; (cc0 <EIC_Handler+0x5c>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	1c18      	adds	r0, r3, #0
     c84:	4b10      	ldr	r3, [pc, #64]	; (cc8 <EIC_Handler+0x64>)
     c86:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <EIC_Handler+0x5c>)
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	1c1a      	adds	r2, r3, #0
     c8e:	4b0f      	ldr	r3, [pc, #60]	; (ccc <EIC_Handler+0x68>)
     c90:	0092      	lsls	r2, r2, #2
     c92:	58d3      	ldr	r3, [r2, r3]
     c94:	2b00      	cmp	r3, #0
     c96:	d006      	beq.n	ca6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     c98:	4b09      	ldr	r3, [pc, #36]	; (cc0 <EIC_Handler+0x5c>)
     c9a:	781b      	ldrb	r3, [r3, #0]
     c9c:	1c1a      	adds	r2, r3, #0
     c9e:	4b0b      	ldr	r3, [pc, #44]	; (ccc <EIC_Handler+0x68>)
     ca0:	0092      	lsls	r2, r2, #2
     ca2:	58d3      	ldr	r3, [r2, r3]
     ca4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ca6:	4b06      	ldr	r3, [pc, #24]	; (cc0 <EIC_Handler+0x5c>)
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	3301      	adds	r3, #1
     cac:	b2da      	uxtb	r2, r3
     cae:	4b04      	ldr	r3, [pc, #16]	; (cc0 <EIC_Handler+0x5c>)
     cb0:	701a      	strb	r2, [r3, #0]
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <EIC_Handler+0x5c>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2b0f      	cmp	r3, #15
     cb8:	d9da      	bls.n	c70 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     cba:	46bd      	mov	sp, r7
     cbc:	bd80      	pop	{r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	200000a4 	.word	0x200000a4
     cc4:	00000b39 	.word	0x00000b39
     cc8:	00000b7d 	.word	0x00000b7d
     ccc:	20000060 	.word	0x20000060

00000cd0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     cd0:	b580      	push	{r7, lr}
     cd2:	af00      	add	r7, sp, #0
     cd4:	2000      	movs	r0, #0
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <TCC0_Handler+0x10>)
     cd8:	4798      	blx	r3
     cda:	46bd      	mov	sp, r7
     cdc:	bd80      	pop	{r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00000d0d 	.word	0x00000d0d

00000ce4 <TCC1_Handler>:
     ce4:	b580      	push	{r7, lr}
     ce6:	af00      	add	r7, sp, #0
     ce8:	2001      	movs	r0, #1
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <TCC1_Handler+0x10>)
     cec:	4798      	blx	r3
     cee:	46bd      	mov	sp, r7
     cf0:	bd80      	pop	{r7, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00000d0d 	.word	0x00000d0d

00000cf8 <TCC2_Handler>:
     cf8:	b580      	push	{r7, lr}
     cfa:	af00      	add	r7, sp, #0
     cfc:	2002      	movs	r0, #2
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <TCC2_Handler+0x10>)
     d00:	4798      	blx	r3
     d02:	46bd      	mov	sp, r7
     d04:	bd80      	pop	{r7, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000d0d 	.word	0x00000d0d

00000d0c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	b086      	sub	sp, #24
     d10:	af00      	add	r7, sp, #0
     d12:	1c02      	adds	r2, r0, #0
     d14:	1dfb      	adds	r3, r7, #7
     d16:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     d1c:	4b17      	ldr	r3, [pc, #92]	; (d7c <_tcc_interrupt_handler+0x70>)
     d1e:	0092      	lsls	r2, r2, #2
     d20:	58d3      	ldr	r3, [r2, r3]
     d22:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     d24:	693b      	ldr	r3, [r7, #16]
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
     d2a:	693b      	ldr	r3, [r7, #16]
     d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     d2e:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
     d30:	693b      	ldr	r3, [r7, #16]
     d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     d34:	4013      	ands	r3, r2
     d36:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     d38:	2300      	movs	r3, #0
     d3a:	617b      	str	r3, [r7, #20]
     d3c:	e018      	b.n	d70 <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     d3e:	4b10      	ldr	r3, [pc, #64]	; (d80 <_tcc_interrupt_handler+0x74>)
     d40:	697a      	ldr	r2, [r7, #20]
     d42:	0092      	lsls	r2, r2, #2
     d44:	58d3      	ldr	r3, [r2, r3]
     d46:	68fa      	ldr	r2, [r7, #12]
     d48:	4013      	ands	r3, r2
     d4a:	d00e      	beq.n	d6a <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     d4c:	693a      	ldr	r2, [r7, #16]
     d4e:	697b      	ldr	r3, [r7, #20]
     d50:	009b      	lsls	r3, r3, #2
     d52:	18d3      	adds	r3, r2, r3
     d54:	685b      	ldr	r3, [r3, #4]
     d56:	693a      	ldr	r2, [r7, #16]
     d58:	1c10      	adds	r0, r2, #0
     d5a:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     d5c:	693b      	ldr	r3, [r7, #16]
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	4a07      	ldr	r2, [pc, #28]	; (d80 <_tcc_interrupt_handler+0x74>)
     d62:	6979      	ldr	r1, [r7, #20]
     d64:	0089      	lsls	r1, r1, #2
     d66:	588a      	ldr	r2, [r1, r2]
     d68:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     d6a:	697b      	ldr	r3, [r7, #20]
     d6c:	3301      	adds	r3, #1
     d6e:	617b      	str	r3, [r7, #20]
     d70:	697b      	ldr	r3, [r7, #20]
     d72:	2b0b      	cmp	r3, #11
     d74:	dde3      	ble.n	d3e <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     d76:	46bd      	mov	sp, r7
     d78:	b006      	add	sp, #24
     d7a:	bd80      	pop	{r7, pc}
     d7c:	200000a8 	.word	0x200000a8
     d80:	00004820 	.word	0x00004820

00000d84 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     d84:	b580      	push	{r7, lr}
     d86:	af00      	add	r7, sp, #0
     d88:	2000      	movs	r0, #0
     d8a:	4b02      	ldr	r3, [pc, #8]	; (d94 <TC3_Handler+0x10>)
     d8c:	4798      	blx	r3
     d8e:	46bd      	mov	sp, r7
     d90:	bd80      	pop	{r7, pc}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	00000dc1 	.word	0x00000dc1

00000d98 <TC4_Handler>:
     d98:	b580      	push	{r7, lr}
     d9a:	af00      	add	r7, sp, #0
     d9c:	2001      	movs	r0, #1
     d9e:	4b02      	ldr	r3, [pc, #8]	; (da8 <TC4_Handler+0x10>)
     da0:	4798      	blx	r3
     da2:	46bd      	mov	sp, r7
     da4:	bd80      	pop	{r7, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00000dc1 	.word	0x00000dc1

00000dac <TC5_Handler>:
     dac:	b580      	push	{r7, lr}
     dae:	af00      	add	r7, sp, #0
     db0:	2002      	movs	r0, #2
     db2:	4b02      	ldr	r3, [pc, #8]	; (dbc <TC5_Handler+0x10>)
     db4:	4798      	blx	r3
     db6:	46bd      	mov	sp, r7
     db8:	bd80      	pop	{r7, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	00000dc1 	.word	0x00000dc1

00000dc0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b084      	sub	sp, #16
     dc4:	af00      	add	r7, sp, #0
     dc6:	1c02      	adds	r2, r0, #0
     dc8:	1dfb      	adds	r3, r7, #7
     dca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     dcc:	1dfb      	adds	r3, r7, #7
     dce:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     dd0:	4b28      	ldr	r3, [pc, #160]	; (e74 <_tc_interrupt_handler+0xb4>)
     dd2:	0092      	lsls	r2, r2, #2
     dd4:	58d3      	ldr	r3, [r2, r3]
     dd6:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     dd8:	68fb      	ldr	r3, [r7, #12]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	7b9b      	ldrb	r3, [r3, #14]
     dde:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     de0:	68fa      	ldr	r2, [r7, #12]
     de2:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     de4:	4013      	ands	r3, r2
     de6:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     dec:	230b      	movs	r3, #11
     dee:	18fb      	adds	r3, r7, r3
     df0:	400a      	ands	r2, r1
     df2:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     df4:	230b      	movs	r3, #11
     df6:	18fb      	adds	r3, r7, r3
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2201      	movs	r2, #1
     dfc:	4013      	ands	r3, r2
     dfe:	d008      	beq.n	e12 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     e00:	68fb      	ldr	r3, [r7, #12]
     e02:	689b      	ldr	r3, [r3, #8]
     e04:	68fa      	ldr	r2, [r7, #12]
     e06:	1c10      	adds	r0, r2, #0
     e08:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     e0a:	68fb      	ldr	r3, [r7, #12]
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	2201      	movs	r2, #1
     e10:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     e12:	230b      	movs	r3, #11
     e14:	18fb      	adds	r3, r7, r3
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	2202      	movs	r2, #2
     e1a:	4013      	ands	r3, r2
     e1c:	d008      	beq.n	e30 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	68db      	ldr	r3, [r3, #12]
     e22:	68fa      	ldr	r2, [r7, #12]
     e24:	1c10      	adds	r0, r2, #0
     e26:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     e28:	68fb      	ldr	r3, [r7, #12]
     e2a:	681b      	ldr	r3, [r3, #0]
     e2c:	2202      	movs	r2, #2
     e2e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     e30:	230b      	movs	r3, #11
     e32:	18fb      	adds	r3, r7, r3
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2210      	movs	r2, #16
     e38:	4013      	ands	r3, r2
     e3a:	d008      	beq.n	e4e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	691b      	ldr	r3, [r3, #16]
     e40:	68fa      	ldr	r2, [r7, #12]
     e42:	1c10      	adds	r0, r2, #0
     e44:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	2210      	movs	r2, #16
     e4c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     e4e:	230b      	movs	r3, #11
     e50:	18fb      	adds	r3, r7, r3
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	2220      	movs	r2, #32
     e56:	4013      	ands	r3, r2
     e58:	d008      	beq.n	e6c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     e5a:	68fb      	ldr	r3, [r7, #12]
     e5c:	695b      	ldr	r3, [r3, #20]
     e5e:	68fa      	ldr	r2, [r7, #12]
     e60:	1c10      	adds	r0, r2, #0
     e62:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     e64:	68fb      	ldr	r3, [r7, #12]
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	2220      	movs	r2, #32
     e6a:	739a      	strb	r2, [r3, #14]
	}
}
     e6c:	46bd      	mov	sp, r7
     e6e:	b004      	add	sp, #16
     e70:	bd80      	pop	{r7, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	200000b4 	.word	0x200000b4

00000e78 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	2280      	movs	r2, #128	; 0x80
     e84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	2200      	movs	r2, #0
     e8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	2201      	movs	r2, #1
     e90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	2200      	movs	r2, #0
     e96:	70da      	strb	r2, [r3, #3]
}
     e98:	46bd      	mov	sp, r7
     e9a:	b002      	add	sp, #8
     e9c:	bd80      	pop	{r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)

00000ea0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	b084      	sub	sp, #16
     ea4:	af00      	add	r7, sp, #0
     ea6:	1c02      	adds	r2, r0, #0
     ea8:	1dfb      	adds	r3, r7, #7
     eaa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     eac:	230f      	movs	r3, #15
     eae:	18fb      	adds	r3, r7, r3
     eb0:	1dfa      	adds	r2, r7, #7
     eb2:	7812      	ldrb	r2, [r2, #0]
     eb4:	09d2      	lsrs	r2, r2, #7
     eb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     eb8:	230e      	movs	r3, #14
     eba:	18fb      	adds	r3, r7, r3
     ebc:	1dfa      	adds	r2, r7, #7
     ebe:	7812      	ldrb	r2, [r2, #0]
     ec0:	0952      	lsrs	r2, r2, #5
     ec2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     ec6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     ec8:	230f      	movs	r3, #15
     eca:	18fb      	adds	r3, r7, r3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2b00      	cmp	r3, #0
     ed0:	d10f      	bne.n	ef2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     ed2:	230f      	movs	r3, #15
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	009b      	lsls	r3, r3, #2
     eda:	2210      	movs	r2, #16
     edc:	4694      	mov	ip, r2
     ede:	44bc      	add	ip, r7
     ee0:	4463      	add	r3, ip
     ee2:	3b08      	subs	r3, #8
     ee4:	681a      	ldr	r2, [r3, #0]
     ee6:	230e      	movs	r3, #14
     ee8:	18fb      	adds	r3, r7, r3
     eea:	781b      	ldrb	r3, [r3, #0]
     eec:	01db      	lsls	r3, r3, #7
     eee:	18d3      	adds	r3, r2, r3
     ef0:	e000      	b.n	ef4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     ef2:	2300      	movs	r3, #0
	}
}
     ef4:	1c18      	adds	r0, r3, #0
     ef6:	46bd      	mov	sp, r7
     ef8:	b004      	add	sp, #16
     efa:	bd80      	pop	{r7, pc}
     efc:	41004400 	.word	0x41004400

00000f00 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f00:	b580      	push	{r7, lr}
     f02:	b082      	sub	sp, #8
     f04:	af00      	add	r7, sp, #0
     f06:	1c02      	adds	r2, r0, #0
     f08:	1dfb      	adds	r3, r7, #7
     f0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     f0c:	1dfb      	adds	r3, r7, #7
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	1c18      	adds	r0, r3, #0
     f12:	4b03      	ldr	r3, [pc, #12]	; (f20 <port_get_group_from_gpio_pin+0x20>)
     f14:	4798      	blx	r3
     f16:	1c03      	adds	r3, r0, #0
}
     f18:	1c18      	adds	r0, r3, #0
     f1a:	46bd      	mov	sp, r7
     f1c:	b002      	add	sp, #8
     f1e:	bd80      	pop	{r7, pc}
     f20:	00000ea1 	.word	0x00000ea1

00000f24 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     f24:	b580      	push	{r7, lr}
     f26:	b084      	sub	sp, #16
     f28:	af00      	add	r7, sp, #0
     f2a:	1c02      	adds	r2, r0, #0
     f2c:	1dfb      	adds	r3, r7, #7
     f2e:	701a      	strb	r2, [r3, #0]
     f30:	1dbb      	adds	r3, r7, #6
     f32:	1c0a      	adds	r2, r1, #0
     f34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     f36:	1dfb      	adds	r3, r7, #7
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	1c18      	adds	r0, r3, #0
     f3c:	4b0c      	ldr	r3, [pc, #48]	; (f70 <port_pin_set_output_level+0x4c>)
     f3e:	4798      	blx	r3
     f40:	1c03      	adds	r3, r0, #0
     f42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f44:	1dfb      	adds	r3, r7, #7
     f46:	781b      	ldrb	r3, [r3, #0]
     f48:	221f      	movs	r2, #31
     f4a:	4013      	ands	r3, r2
     f4c:	2201      	movs	r2, #1
     f4e:	409a      	lsls	r2, r3
     f50:	1c13      	adds	r3, r2, #0
     f52:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     f54:	1dbb      	adds	r3, r7, #6
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	2b00      	cmp	r3, #0
     f5a:	d003      	beq.n	f64 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     f5c:	68fb      	ldr	r3, [r7, #12]
     f5e:	68ba      	ldr	r2, [r7, #8]
     f60:	619a      	str	r2, [r3, #24]
     f62:	e002      	b.n	f6a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	68ba      	ldr	r2, [r7, #8]
     f68:	615a      	str	r2, [r3, #20]
	}
}
     f6a:	46bd      	mov	sp, r7
     f6c:	b004      	add	sp, #16
     f6e:	bd80      	pop	{r7, pc}
     f70:	00000f01 	.word	0x00000f01

00000f74 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     f74:	b580      	push	{r7, lr}
     f76:	b082      	sub	sp, #8
     f78:	af00      	add	r7, sp, #0
     f7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	2200      	movs	r2, #0
     f80:	701a      	strb	r2, [r3, #0]
}
     f82:	46bd      	mov	sp, r7
     f84:	b002      	add	sp, #8
     f86:	bd80      	pop	{r7, pc}

00000f88 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     f88:	b580      	push	{r7, lr}
     f8a:	b082      	sub	sp, #8
     f8c:	af00      	add	r7, sp, #0
     f8e:	1c02      	adds	r2, r0, #0
     f90:	6039      	str	r1, [r7, #0]
     f92:	1dfb      	adds	r3, r7, #7
     f94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f96:	1dfb      	adds	r3, r7, #7
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b01      	cmp	r3, #1
     f9c:	d00a      	beq.n	fb4 <system_apb_clock_set_mask+0x2c>
     f9e:	2b02      	cmp	r3, #2
     fa0:	d00f      	beq.n	fc2 <system_apb_clock_set_mask+0x3a>
     fa2:	2b00      	cmp	r3, #0
     fa4:	d114      	bne.n	fd0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     fa6:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fa8:	4a0d      	ldr	r2, [pc, #52]	; (fe0 <system_apb_clock_set_mask+0x58>)
     faa:	6991      	ldr	r1, [r2, #24]
     fac:	683a      	ldr	r2, [r7, #0]
     fae:	430a      	orrs	r2, r1
     fb0:	619a      	str	r2, [r3, #24]
			break;
     fb2:	e00f      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     fb4:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fb6:	4a0a      	ldr	r2, [pc, #40]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fb8:	69d1      	ldr	r1, [r2, #28]
     fba:	683a      	ldr	r2, [r7, #0]
     fbc:	430a      	orrs	r2, r1
     fbe:	61da      	str	r2, [r3, #28]
			break;
     fc0:	e008      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fc4:	4a06      	ldr	r2, [pc, #24]	; (fe0 <system_apb_clock_set_mask+0x58>)
     fc6:	6a11      	ldr	r1, [r2, #32]
     fc8:	683a      	ldr	r2, [r7, #0]
     fca:	430a      	orrs	r2, r1
     fcc:	621a      	str	r2, [r3, #32]
			break;
     fce:	e001      	b.n	fd4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     fd0:	2317      	movs	r3, #23
     fd2:	e000      	b.n	fd6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     fd4:	2300      	movs	r3, #0
}
     fd6:	1c18      	adds	r0, r3, #0
     fd8:	46bd      	mov	sp, r7
     fda:	b002      	add	sp, #8
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	40000400 	.word	0x40000400

00000fe4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     fe4:	b580      	push	{r7, lr}
     fe6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <system_is_debugger_present+0x1c>)
     fea:	789b      	ldrb	r3, [r3, #2]
     fec:	b2db      	uxtb	r3, r3
     fee:	1c1a      	adds	r2, r3, #0
     ff0:	2302      	movs	r3, #2
     ff2:	4013      	ands	r3, r2
     ff4:	1e5a      	subs	r2, r3, #1
     ff6:	4193      	sbcs	r3, r2
     ff8:	b2db      	uxtb	r3, r3
}
     ffa:	1c18      	adds	r0, r3, #0
     ffc:	46bd      	mov	sp, r7
     ffe:	bd80      	pop	{r7, pc}
    1000:	41002000 	.word	0x41002000

00001004 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1004:	b580      	push	{r7, lr}
    1006:	b084      	sub	sp, #16
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	7e1b      	ldrb	r3, [r3, #24]
    1016:	b2db      	uxtb	r3, r3
    1018:	1c1a      	adds	r2, r3, #0
    101a:	2301      	movs	r3, #1
    101c:	4013      	ands	r3, r2
    101e:	1e5a      	subs	r2, r3, #1
    1020:	4193      	sbcs	r3, r2
    1022:	b2db      	uxtb	r3, r3
}
    1024:	1c18      	adds	r0, r3, #0
    1026:	46bd      	mov	sp, r7
    1028:	b004      	add	sp, #16
    102a:	bd80      	pop	{r7, pc}

0000102c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    102c:	b580      	push	{r7, lr}
    102e:	b084      	sub	sp, #16
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	7e1b      	ldrb	r3, [r3, #24]
    103e:	b2db      	uxtb	r3, r3
    1040:	1c1a      	adds	r2, r3, #0
    1042:	2304      	movs	r3, #4
    1044:	4013      	ands	r3, r2
    1046:	1e5a      	subs	r2, r3, #1
    1048:	4193      	sbcs	r3, r2
    104a:	b2db      	uxtb	r3, r3
}
    104c:	1c18      	adds	r0, r3, #0
    104e:	46bd      	mov	sp, r7
    1050:	b004      	add	sp, #16
    1052:	bd80      	pop	{r7, pc}

00001054 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1054:	b580      	push	{r7, lr}
    1056:	b084      	sub	sp, #16
    1058:	af00      	add	r7, sp, #0
    105a:	6078      	str	r0, [r7, #4]
    105c:	1c0a      	adds	r2, r1, #0
    105e:	1cbb      	adds	r3, r7, #2
    1060:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	681b      	ldr	r3, [r3, #0]
    1066:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	1c18      	adds	r0, r3, #0
    106c:	4b0a      	ldr	r3, [pc, #40]	; (1098 <spi_write+0x44>)
    106e:	4798      	blx	r3
    1070:	1c03      	adds	r3, r0, #0
    1072:	1c1a      	adds	r2, r3, #0
    1074:	2301      	movs	r3, #1
    1076:	4053      	eors	r3, r2
    1078:	b2db      	uxtb	r3, r3
    107a:	2b00      	cmp	r3, #0
    107c:	d001      	beq.n	1082 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    107e:	2305      	movs	r3, #5
    1080:	e006      	b.n	1090 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1082:	1cbb      	adds	r3, r7, #2
    1084:	881b      	ldrh	r3, [r3, #0]
    1086:	05db      	lsls	r3, r3, #23
    1088:	0dda      	lsrs	r2, r3, #23
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    108e:	2300      	movs	r3, #0
}
    1090:	1c18      	adds	r0, r3, #0
    1092:	46bd      	mov	sp, r7
    1094:	b004      	add	sp, #16
    1096:	bd80      	pop	{r7, pc}
    1098:	00001005 	.word	0x00001005

0000109c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    109c:	b580      	push	{r7, lr}
    109e:	b084      	sub	sp, #16
    10a0:	af00      	add	r7, sp, #0
    10a2:	6078      	str	r0, [r7, #4]
    10a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	681b      	ldr	r3, [r3, #0]
    10aa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	1c18      	adds	r0, r3, #0
    10b0:	4b1b      	ldr	r3, [pc, #108]	; (1120 <spi_read+0x84>)
    10b2:	4798      	blx	r3
    10b4:	1c03      	adds	r3, r0, #0
    10b6:	1c1a      	adds	r2, r3, #0
    10b8:	2301      	movs	r3, #1
    10ba:	4053      	eors	r3, r2
    10bc:	b2db      	uxtb	r3, r3
    10be:	2b00      	cmp	r3, #0
    10c0:	d001      	beq.n	10c6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    10c2:	2310      	movs	r3, #16
    10c4:	e027      	b.n	1116 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    10c6:	230f      	movs	r3, #15
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	2200      	movs	r2, #0
    10cc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	8b5b      	ldrh	r3, [r3, #26]
    10d2:	b29b      	uxth	r3, r3
    10d4:	1c1a      	adds	r2, r3, #0
    10d6:	2304      	movs	r3, #4
    10d8:	4013      	ands	r3, r2
    10da:	d006      	beq.n	10ea <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    10dc:	230f      	movs	r3, #15
    10de:	18fb      	adds	r3, r7, r3
    10e0:	221e      	movs	r2, #30
    10e2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    10e4:	68bb      	ldr	r3, [r7, #8]
    10e6:	2204      	movs	r2, #4
    10e8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	799b      	ldrb	r3, [r3, #6]
    10ee:	2b01      	cmp	r3, #1
    10f0:	d108      	bne.n	1104 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10f2:	68bb      	ldr	r3, [r7, #8]
    10f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10f6:	b29b      	uxth	r3, r3
    10f8:	05db      	lsls	r3, r3, #23
    10fa:	0ddb      	lsrs	r3, r3, #23
    10fc:	b29a      	uxth	r2, r3
    10fe:	683b      	ldr	r3, [r7, #0]
    1100:	801a      	strh	r2, [r3, #0]
    1102:	e005      	b.n	1110 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1104:	68bb      	ldr	r3, [r7, #8]
    1106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1108:	b2db      	uxtb	r3, r3
    110a:	b29a      	uxth	r2, r3
    110c:	683b      	ldr	r3, [r7, #0]
    110e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1110:	230f      	movs	r3, #15
    1112:	18fb      	adds	r3, r7, r3
    1114:	781b      	ldrb	r3, [r3, #0]
}
    1116:	1c18      	adds	r0, r3, #0
    1118:	46bd      	mov	sp, r7
    111a:	b004      	add	sp, #16
    111c:	bd80      	pop	{r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	0000102d 	.word	0x0000102d

00001124 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1124:	b590      	push	{r4, r7, lr}
    1126:	b093      	sub	sp, #76	; 0x4c
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	681b      	ldr	r3, [r3, #0]
    1132:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    113a:	231c      	movs	r3, #28
    113c:	18fb      	adds	r3, r7, r3
    113e:	1c18      	adds	r0, r3, #0
    1140:	4b86      	ldr	r3, [pc, #536]	; (135c <_spi_set_config+0x238>)
    1142:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1144:	231c      	movs	r3, #28
    1146:	18fb      	adds	r3, r7, r3
    1148:	2200      	movs	r2, #0
    114a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    114c:	683b      	ldr	r3, [r7, #0]
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	2b00      	cmp	r3, #0
    1152:	d103      	bne.n	115c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1154:	231c      	movs	r3, #28
    1156:	18fb      	adds	r3, r7, r3
    1158:	2200      	movs	r2, #0
    115a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    115c:	683b      	ldr	r3, [r7, #0]
    115e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1160:	230c      	movs	r3, #12
    1162:	18fb      	adds	r3, r7, r3
    1164:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1166:	683b      	ldr	r3, [r7, #0]
    1168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    116a:	230c      	movs	r3, #12
    116c:	18fb      	adds	r3, r7, r3
    116e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1174:	230c      	movs	r3, #12
    1176:	18fb      	adds	r3, r7, r3
    1178:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    117a:	683b      	ldr	r3, [r7, #0]
    117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    117e:	230c      	movs	r3, #12
    1180:	18fb      	adds	r3, r7, r3
    1182:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1184:	2347      	movs	r3, #71	; 0x47
    1186:	18fb      	adds	r3, r7, r3
    1188:	2200      	movs	r2, #0
    118a:	701a      	strb	r2, [r3, #0]
    118c:	e02c      	b.n	11e8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    118e:	2347      	movs	r3, #71	; 0x47
    1190:	18fb      	adds	r3, r7, r3
    1192:	781a      	ldrb	r2, [r3, #0]
    1194:	230c      	movs	r3, #12
    1196:	18fb      	adds	r3, r7, r3
    1198:	0092      	lsls	r2, r2, #2
    119a:	58d3      	ldr	r3, [r2, r3]
    119c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    119e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11a0:	2b00      	cmp	r3, #0
    11a2:	d109      	bne.n	11b8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11a6:	2347      	movs	r3, #71	; 0x47
    11a8:	18fb      	adds	r3, r7, r3
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	1c10      	adds	r0, r2, #0
    11ae:	1c19      	adds	r1, r3, #0
    11b0:	4b6b      	ldr	r3, [pc, #428]	; (1360 <_spi_set_config+0x23c>)
    11b2:	4798      	blx	r3
    11b4:	1c03      	adds	r3, r0, #0
    11b6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    11b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11ba:	3301      	adds	r3, #1
    11bc:	d00d      	beq.n	11da <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11c0:	b2da      	uxtb	r2, r3
    11c2:	231c      	movs	r3, #28
    11c4:	18fb      	adds	r3, r7, r3
    11c6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    11c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    11ca:	0c1b      	lsrs	r3, r3, #16
    11cc:	b2da      	uxtb	r2, r3
    11ce:	231c      	movs	r3, #28
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	1c10      	adds	r0, r2, #0
    11d4:	1c19      	adds	r1, r3, #0
    11d6:	4b63      	ldr	r3, [pc, #396]	; (1364 <_spi_set_config+0x240>)
    11d8:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11da:	2347      	movs	r3, #71	; 0x47
    11dc:	18fb      	adds	r3, r7, r3
    11de:	781a      	ldrb	r2, [r3, #0]
    11e0:	2347      	movs	r3, #71	; 0x47
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	3201      	adds	r2, #1
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	2347      	movs	r3, #71	; 0x47
    11ea:	18fb      	adds	r3, r7, r3
    11ec:	781b      	ldrb	r3, [r3, #0]
    11ee:	2b03      	cmp	r3, #3
    11f0:	d9cd      	bls.n	118e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    11f2:	683b      	ldr	r3, [r7, #0]
    11f4:	781a      	ldrb	r2, [r3, #0]
    11f6:	687b      	ldr	r3, [r7, #4]
    11f8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	7c1a      	ldrb	r2, [r3, #16]
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1202:	683b      	ldr	r3, [r7, #0]
    1204:	7c9a      	ldrb	r2, [r3, #18]
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    120a:	683b      	ldr	r3, [r7, #0]
    120c:	7d1a      	ldrb	r2, [r3, #20]
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1212:	230a      	movs	r3, #10
    1214:	18fb      	adds	r3, r7, r3
    1216:	2200      	movs	r2, #0
    1218:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    121a:	2300      	movs	r3, #0
    121c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    121e:	2300      	movs	r3, #0
    1220:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1222:	683b      	ldr	r3, [r7, #0]
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b01      	cmp	r3, #1
    1228:	d12b      	bne.n	1282 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	1c18      	adds	r0, r3, #0
    1230:	4b4d      	ldr	r3, [pc, #308]	; (1368 <_spi_set_config+0x244>)
    1232:	4798      	blx	r3
    1234:	1c03      	adds	r3, r0, #0
    1236:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    123a:	3314      	adds	r3, #20
    123c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1240:	b2db      	uxtb	r3, r3
    1242:	1c18      	adds	r0, r3, #0
    1244:	4b49      	ldr	r3, [pc, #292]	; (136c <_spi_set_config+0x248>)
    1246:	4798      	blx	r3
    1248:	1c03      	adds	r3, r0, #0
    124a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    124c:	683b      	ldr	r3, [r7, #0]
    124e:	6999      	ldr	r1, [r3, #24]
    1250:	2323      	movs	r3, #35	; 0x23
    1252:	18fc      	adds	r4, r7, r3
    1254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1256:	230a      	movs	r3, #10
    1258:	18fb      	adds	r3, r7, r3
    125a:	1c08      	adds	r0, r1, #0
    125c:	1c11      	adds	r1, r2, #0
    125e:	1c1a      	adds	r2, r3, #0
    1260:	4b43      	ldr	r3, [pc, #268]	; (1370 <_spi_set_config+0x24c>)
    1262:	4798      	blx	r3
    1264:	1c03      	adds	r3, r0, #0
    1266:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1268:	2323      	movs	r3, #35	; 0x23
    126a:	18fb      	adds	r3, r7, r3
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2b00      	cmp	r3, #0
    1270:	d001      	beq.n	1276 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1272:	2317      	movs	r3, #23
    1274:	e06d      	b.n	1352 <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1276:	230a      	movs	r3, #10
    1278:	18fb      	adds	r3, r7, r3
    127a:	881b      	ldrh	r3, [r3, #0]
    127c:	b2da      	uxtb	r2, r3
    127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1280:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1282:	683b      	ldr	r3, [r7, #0]
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	2b00      	cmp	r3, #0
    1288:	d11a      	bne.n	12c0 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    128a:	683b      	ldr	r3, [r7, #0]
    128c:	699b      	ldr	r3, [r3, #24]
    128e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1290:	683b      	ldr	r3, [r7, #0]
    1292:	8b9b      	ldrh	r3, [r3, #28]
    1294:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    129a:	683a      	ldr	r2, [r7, #0]
    129c:	7f92      	ldrb	r2, [r2, #30]
    129e:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    12a0:	683a      	ldr	r2, [r7, #0]
    12a2:	7fd2      	ldrb	r2, [r2, #31]
    12a4:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    12a6:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    12a8:	431a      	orrs	r2, r3
    12aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12ac:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	2220      	movs	r2, #32
    12b2:	5c9b      	ldrb	r3, [r3, r2]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d003      	beq.n	12c0 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    12b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12ba:	2240      	movs	r2, #64	; 0x40
    12bc:	4313      	orrs	r3, r2
    12be:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    12c0:	683b      	ldr	r3, [r7, #0]
    12c2:	685b      	ldr	r3, [r3, #4]
    12c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12c6:	4313      	orrs	r3, r2
    12c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	689b      	ldr	r3, [r3, #8]
    12ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12d0:	4313      	orrs	r3, r2
    12d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	68db      	ldr	r3, [r3, #12]
    12d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    12da:	4313      	orrs	r3, r2
    12dc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    12de:	683b      	ldr	r3, [r7, #0]
    12e0:	7c1b      	ldrb	r3, [r3, #16]
    12e2:	1c1a      	adds	r2, r3, #0
    12e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12e6:	4313      	orrs	r3, r2
    12e8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	7c5b      	ldrb	r3, [r3, #17]
    12ee:	2b00      	cmp	r3, #0
    12f0:	d103      	bne.n	12fa <_spi_set_config+0x1d6>
    12f2:	4b20      	ldr	r3, [pc, #128]	; (1374 <_spi_set_config+0x250>)
    12f4:	4798      	blx	r3
    12f6:	1e03      	subs	r3, r0, #0
    12f8:	d003      	beq.n	1302 <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    12fc:	2280      	movs	r2, #128	; 0x80
    12fe:	4313      	orrs	r3, r2
    1300:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1302:	683b      	ldr	r3, [r7, #0]
    1304:	7c9b      	ldrb	r3, [r3, #18]
    1306:	2b00      	cmp	r3, #0
    1308:	d004      	beq.n	1314 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    130c:	2280      	movs	r2, #128	; 0x80
    130e:	0292      	lsls	r2, r2, #10
    1310:	4313      	orrs	r3, r2
    1312:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	7cdb      	ldrb	r3, [r3, #19]
    1318:	2b00      	cmp	r3, #0
    131a:	d004      	beq.n	1326 <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    131e:	2280      	movs	r2, #128	; 0x80
    1320:	0092      	lsls	r2, r2, #2
    1322:	4313      	orrs	r3, r2
    1324:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1326:	683b      	ldr	r3, [r7, #0]
    1328:	7d1b      	ldrb	r3, [r3, #20]
    132a:	2b00      	cmp	r3, #0
    132c:	d004      	beq.n	1338 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1330:	2280      	movs	r2, #128	; 0x80
    1332:	0192      	lsls	r2, r2, #6
    1334:	4313      	orrs	r3, r2
    1336:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    133a:	681a      	ldr	r2, [r3, #0]
    133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    133e:	431a      	orrs	r2, r3
    1340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1342:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1346:	685a      	ldr	r2, [r3, #4]
    1348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    134a:	431a      	orrs	r2, r3
    134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    134e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1350:	2300      	movs	r3, #0
}
    1352:	1c18      	adds	r0, r3, #0
    1354:	46bd      	mov	sp, r7
    1356:	b013      	add	sp, #76	; 0x4c
    1358:	bd90      	pop	{r4, r7, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	00000e79 	.word	0x00000e79
    1360:	00001cc5 	.word	0x00001cc5
    1364:	00002d3d 	.word	0x00002d3d
    1368:	00001e81 	.word	0x00001e81
    136c:	00002b75 	.word	0x00002b75
    1370:	00001bbd 	.word	0x00001bbd
    1374:	00000fe5 	.word	0x00000fe5

00001378 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1378:	b590      	push	{r4, r7, lr}
    137a:	b08b      	sub	sp, #44	; 0x2c
    137c:	af00      	add	r7, sp, #0
    137e:	60f8      	str	r0, [r7, #12]
    1380:	60b9      	str	r1, [r7, #8]
    1382:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	68ba      	ldr	r2, [r7, #8]
    1388:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    138a:	68fb      	ldr	r3, [r7, #12]
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1390:	6a3b      	ldr	r3, [r7, #32]
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	2202      	movs	r2, #2
    1396:	4013      	ands	r3, r2
    1398:	d001      	beq.n	139e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    139a:	231c      	movs	r3, #28
    139c:	e0a5      	b.n	14ea <spi_init+0x172>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    139e:	6a3b      	ldr	r3, [r7, #32]
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	2201      	movs	r2, #1
    13a4:	4013      	ands	r3, r2
    13a6:	d001      	beq.n	13ac <spi_init+0x34>
		return STATUS_BUSY;
    13a8:	2305      	movs	r3, #5
    13aa:	e09e      	b.n	14ea <spi_init+0x172>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13ac:	68fb      	ldr	r3, [r7, #12]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	1c18      	adds	r0, r3, #0
    13b2:	4b50      	ldr	r3, [pc, #320]	; (14f4 <spi_init+0x17c>)
    13b4:	4798      	blx	r3
    13b6:	1c03      	adds	r3, r0, #0
    13b8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13ba:	69fb      	ldr	r3, [r7, #28]
    13bc:	3302      	adds	r3, #2
    13be:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13c0:	69fb      	ldr	r3, [r7, #28]
    13c2:	3314      	adds	r3, #20
    13c4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13c6:	69bb      	ldr	r3, [r7, #24]
    13c8:	2201      	movs	r2, #1
    13ca:	409a      	lsls	r2, r3
    13cc:	1c13      	adds	r3, r2, #0
    13ce:	2002      	movs	r0, #2
    13d0:	1c19      	adds	r1, r3, #0
    13d2:	4b49      	ldr	r3, [pc, #292]	; (14f8 <spi_init+0x180>)
    13d4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    13d6:	2310      	movs	r3, #16
    13d8:	18fb      	adds	r3, r7, r3
    13da:	1c18      	adds	r0, r3, #0
    13dc:	4b47      	ldr	r3, [pc, #284]	; (14fc <spi_init+0x184>)
    13de:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	2224      	movs	r2, #36	; 0x24
    13e4:	5c9a      	ldrb	r2, [r3, r2]
    13e6:	2310      	movs	r3, #16
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13ec:	697b      	ldr	r3, [r7, #20]
    13ee:	b2da      	uxtb	r2, r3
    13f0:	2310      	movs	r3, #16
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	1c10      	adds	r0, r2, #0
    13f6:	1c19      	adds	r1, r3, #0
    13f8:	4b41      	ldr	r3, [pc, #260]	; (1500 <spi_init+0x188>)
    13fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13fc:	697b      	ldr	r3, [r7, #20]
    13fe:	b2db      	uxtb	r3, r3
    1400:	1c18      	adds	r0, r3, #0
    1402:	4b40      	ldr	r3, [pc, #256]	; (1504 <spi_init+0x18c>)
    1404:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	2224      	movs	r2, #36	; 0x24
    140a:	5c9b      	ldrb	r3, [r3, r2]
    140c:	1c18      	adds	r0, r3, #0
    140e:	2100      	movs	r1, #0
    1410:	4b3d      	ldr	r3, [pc, #244]	; (1508 <spi_init+0x190>)
    1412:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	2b01      	cmp	r3, #1
    141a:	d105      	bne.n	1428 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    141c:	6a3b      	ldr	r3, [r7, #32]
    141e:	681b      	ldr	r3, [r3, #0]
    1420:	220c      	movs	r2, #12
    1422:	431a      	orrs	r2, r3
    1424:	6a3b      	ldr	r3, [r7, #32]
    1426:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	781b      	ldrb	r3, [r3, #0]
    142c:	2b00      	cmp	r3, #0
    142e:	d105      	bne.n	143c <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1430:	6a3b      	ldr	r3, [r7, #32]
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	2208      	movs	r2, #8
    1436:	431a      	orrs	r2, r3
    1438:	6a3b      	ldr	r3, [r7, #32]
    143a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    143c:	2327      	movs	r3, #39	; 0x27
    143e:	18fb      	adds	r3, r7, r3
    1440:	2200      	movs	r2, #0
    1442:	701a      	strb	r2, [r3, #0]
    1444:	e00f      	b.n	1466 <spi_init+0xee>
		module->callback[i]        = NULL;
    1446:	2327      	movs	r3, #39	; 0x27
    1448:	18fb      	adds	r3, r7, r3
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	68fa      	ldr	r2, [r7, #12]
    144e:	3302      	adds	r3, #2
    1450:	009b      	lsls	r3, r3, #2
    1452:	18d3      	adds	r3, r2, r3
    1454:	2200      	movs	r2, #0
    1456:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1458:	2327      	movs	r3, #39	; 0x27
    145a:	18fb      	adds	r3, r7, r3
    145c:	781a      	ldrb	r2, [r3, #0]
    145e:	2327      	movs	r3, #39	; 0x27
    1460:	18fb      	adds	r3, r7, r3
    1462:	3201      	adds	r2, #1
    1464:	701a      	strb	r2, [r3, #0]
    1466:	2327      	movs	r3, #39	; 0x27
    1468:	18fb      	adds	r3, r7, r3
    146a:	781b      	ldrb	r3, [r3, #0]
    146c:	2b06      	cmp	r3, #6
    146e:	d9ea      	bls.n	1446 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    1470:	68fb      	ldr	r3, [r7, #12]
    1472:	2200      	movs	r2, #0
    1474:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	2200      	movs	r2, #0
    147a:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	2200      	movs	r2, #0
    1480:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1482:	68fb      	ldr	r3, [r7, #12]
    1484:	2200      	movs	r2, #0
    1486:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	2236      	movs	r2, #54	; 0x36
    148c:	2100      	movs	r1, #0
    148e:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	2237      	movs	r2, #55	; 0x37
    1494:	2100      	movs	r1, #0
    1496:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    1498:	68fb      	ldr	r3, [r7, #12]
    149a:	2238      	movs	r2, #56	; 0x38
    149c:	2100      	movs	r1, #0
    149e:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	2203      	movs	r2, #3
    14a4:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    14a6:	68fb      	ldr	r3, [r7, #12]
    14a8:	2200      	movs	r2, #0
    14aa:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    14ac:	68fb      	ldr	r3, [r7, #12]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	2213      	movs	r2, #19
    14b2:	18bc      	adds	r4, r7, r2
    14b4:	1c18      	adds	r0, r3, #0
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <spi_init+0x17c>)
    14b8:	4798      	blx	r3
    14ba:	1c03      	adds	r3, r0, #0
    14bc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    14be:	2313      	movs	r3, #19
    14c0:	18fb      	adds	r3, r7, r3
    14c2:	781a      	ldrb	r2, [r3, #0]
    14c4:	4b11      	ldr	r3, [pc, #68]	; (150c <spi_init+0x194>)
    14c6:	1c10      	adds	r0, r2, #0
    14c8:	1c19      	adds	r1, r3, #0
    14ca:	4b11      	ldr	r3, [pc, #68]	; (1510 <spi_init+0x198>)
    14cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14ce:	2313      	movs	r3, #19
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	781a      	ldrb	r2, [r3, #0]
    14d4:	4b0f      	ldr	r3, [pc, #60]	; (1514 <spi_init+0x19c>)
    14d6:	0092      	lsls	r2, r2, #2
    14d8:	68f9      	ldr	r1, [r7, #12]
    14da:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    14dc:	68fa      	ldr	r2, [r7, #12]
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	1c10      	adds	r0, r2, #0
    14e2:	1c19      	adds	r1, r3, #0
    14e4:	4b0c      	ldr	r3, [pc, #48]	; (1518 <spi_init+0x1a0>)
    14e6:	4798      	blx	r3
    14e8:	1c03      	adds	r3, r0, #0
}
    14ea:	1c18      	adds	r0, r3, #0
    14ec:	46bd      	mov	sp, r7
    14ee:	b00b      	add	sp, #44	; 0x2c
    14f0:	bd90      	pop	{r4, r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	00001e81 	.word	0x00001e81
    14f8:	00000f89 	.word	0x00000f89
    14fc:	00000f75 	.word	0x00000f75
    1500:	00002a51 	.word	0x00002a51
    1504:	00002a95 	.word	0x00002a95
    1508:	00001c39 	.word	0x00001c39
    150c:	000018a1 	.word	0x000018a1
    1510:	00001ee1 	.word	0x00001ee1
    1514:	200000c4 	.word	0x200000c4
    1518:	00001125 	.word	0x00001125

0000151c <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    151c:	b590      	push	{r4, r7, lr}
    151e:	b087      	sub	sp, #28
    1520:	af00      	add	r7, sp, #0
    1522:	60f8      	str	r0, [r7, #12]
    1524:	607a      	str	r2, [r7, #4]
    1526:	230a      	movs	r3, #10
    1528:	18fb      	adds	r3, r7, r3
    152a:	1c0a      	adds	r2, r1, #0
    152c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    152e:	68fb      	ldr	r3, [r7, #12]
    1530:	79db      	ldrb	r3, [r3, #7]
    1532:	2201      	movs	r2, #1
    1534:	4053      	eors	r3, r2
    1536:	b2db      	uxtb	r3, r3
    1538:	2b00      	cmp	r3, #0
    153a:	d001      	beq.n	1540 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    153c:	231c      	movs	r3, #28
    153e:	e082      	b.n	1646 <spi_transceive_wait+0x12a>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1540:	68fb      	ldr	r3, [r7, #12]
    1542:	2238      	movs	r2, #56	; 0x38
    1544:	5c9b      	ldrb	r3, [r3, r2]
    1546:	b2db      	uxtb	r3, r3
    1548:	2b05      	cmp	r3, #5
    154a:	d101      	bne.n	1550 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    154c:	2305      	movs	r3, #5
    154e:	e07a      	b.n	1646 <spi_transceive_wait+0x12a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    1550:	2315      	movs	r3, #21
    1552:	18fb      	adds	r3, r7, r3
    1554:	2200      	movs	r2, #0
    1556:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	795b      	ldrb	r3, [r3, #5]
    155c:	2b00      	cmp	r3, #0
    155e:	d120      	bne.n	15a2 <spi_transceive_wait+0x86>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1560:	2316      	movs	r3, #22
    1562:	18fb      	adds	r3, r7, r3
    1564:	2200      	movs	r2, #0
    1566:	801a      	strh	r2, [r3, #0]
    1568:	e015      	b.n	1596 <spi_transceive_wait+0x7a>
			if (spi_is_ready_to_write(module)) {
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	1c18      	adds	r0, r3, #0
    156e:	4b38      	ldr	r3, [pc, #224]	; (1650 <spi_transceive_wait+0x134>)
    1570:	4798      	blx	r3
    1572:	1e03      	subs	r3, r0, #0
    1574:	d000      	beq.n	1578 <spi_transceive_wait+0x5c>
				break;
    1576:	e014      	b.n	15a2 <spi_transceive_wait+0x86>
			} else if (j == SPI_TIMEOUT) {
    1578:	2316      	movs	r3, #22
    157a:	18fb      	adds	r3, r7, r3
    157c:	881b      	ldrh	r3, [r3, #0]
    157e:	4a35      	ldr	r2, [pc, #212]	; (1654 <spi_transceive_wait+0x138>)
    1580:	4293      	cmp	r3, r2
    1582:	d101      	bne.n	1588 <spi_transceive_wait+0x6c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1584:	2312      	movs	r3, #18
    1586:	e05e      	b.n	1646 <spi_transceive_wait+0x12a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    1588:	2316      	movs	r3, #22
    158a:	18fb      	adds	r3, r7, r3
    158c:	881a      	ldrh	r2, [r3, #0]
    158e:	2316      	movs	r3, #22
    1590:	18fb      	adds	r3, r7, r3
    1592:	3201      	adds	r2, #1
    1594:	801a      	strh	r2, [r3, #0]
    1596:	2316      	movs	r3, #22
    1598:	18fb      	adds	r3, r7, r3
    159a:	881b      	ldrh	r3, [r3, #0]
    159c:	4a2d      	ldr	r2, [pc, #180]	; (1654 <spi_transceive_wait+0x138>)
    159e:	4293      	cmp	r3, r2
    15a0:	d9e3      	bls.n	156a <spi_transceive_wait+0x4e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	68fb      	ldr	r3, [r7, #12]
    15a6:	1c18      	adds	r0, r3, #0
    15a8:	4b29      	ldr	r3, [pc, #164]	; (1650 <spi_transceive_wait+0x134>)
    15aa:	4798      	blx	r3
    15ac:	1c03      	adds	r3, r0, #0
    15ae:	1c1a      	adds	r2, r3, #0
    15b0:	2301      	movs	r3, #1
    15b2:	4053      	eors	r3, r2
    15b4:	b2db      	uxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	d1f4      	bne.n	15a4 <spi_transceive_wait+0x88>
	}

	/* Write data */
	spi_write(module, tx_data);
    15ba:	68fa      	ldr	r2, [r7, #12]
    15bc:	230a      	movs	r3, #10
    15be:	18fb      	adds	r3, r7, r3
    15c0:	881b      	ldrh	r3, [r3, #0]
    15c2:	1c10      	adds	r0, r2, #0
    15c4:	1c19      	adds	r1, r3, #0
    15c6:	4b24      	ldr	r3, [pc, #144]	; (1658 <spi_transceive_wait+0x13c>)
    15c8:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	795b      	ldrb	r3, [r3, #5]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d120      	bne.n	1614 <spi_transceive_wait+0xf8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    15d2:	2316      	movs	r3, #22
    15d4:	18fb      	adds	r3, r7, r3
    15d6:	2200      	movs	r2, #0
    15d8:	801a      	strh	r2, [r3, #0]
    15da:	e015      	b.n	1608 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	1c18      	adds	r0, r3, #0
    15e0:	4b1e      	ldr	r3, [pc, #120]	; (165c <spi_transceive_wait+0x140>)
    15e2:	4798      	blx	r3
    15e4:	1e03      	subs	r3, r0, #0
    15e6:	d000      	beq.n	15ea <spi_transceive_wait+0xce>
				break;
    15e8:	e014      	b.n	1614 <spi_transceive_wait+0xf8>
			} else if (j == SPI_TIMEOUT) {
    15ea:	2316      	movs	r3, #22
    15ec:	18fb      	adds	r3, r7, r3
    15ee:	881b      	ldrh	r3, [r3, #0]
    15f0:	4a18      	ldr	r2, [pc, #96]	; (1654 <spi_transceive_wait+0x138>)
    15f2:	4293      	cmp	r3, r2
    15f4:	d101      	bne.n	15fa <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    15f6:	2312      	movs	r3, #18
    15f8:	e025      	b.n	1646 <spi_transceive_wait+0x12a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    15fa:	2316      	movs	r3, #22
    15fc:	18fb      	adds	r3, r7, r3
    15fe:	881a      	ldrh	r2, [r3, #0]
    1600:	2316      	movs	r3, #22
    1602:	18fb      	adds	r3, r7, r3
    1604:	3201      	adds	r2, #1
    1606:	801a      	strh	r2, [r3, #0]
    1608:	2316      	movs	r3, #22
    160a:	18fb      	adds	r3, r7, r3
    160c:	881b      	ldrh	r3, [r3, #0]
    160e:	4a11      	ldr	r2, [pc, #68]	; (1654 <spi_transceive_wait+0x138>)
    1610:	4293      	cmp	r3, r2
    1612:	d9e3      	bls.n	15dc <spi_transceive_wait+0xc0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    1614:	46c0      	nop			; (mov r8, r8)
    1616:	68fb      	ldr	r3, [r7, #12]
    1618:	1c18      	adds	r0, r3, #0
    161a:	4b10      	ldr	r3, [pc, #64]	; (165c <spi_transceive_wait+0x140>)
    161c:	4798      	blx	r3
    161e:	1c03      	adds	r3, r0, #0
    1620:	1c1a      	adds	r2, r3, #0
    1622:	2301      	movs	r3, #1
    1624:	4053      	eors	r3, r2
    1626:	b2db      	uxtb	r3, r3
    1628:	2b00      	cmp	r3, #0
    162a:	d1f4      	bne.n	1616 <spi_transceive_wait+0xfa>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    162c:	2315      	movs	r3, #21
    162e:	18fc      	adds	r4, r7, r3
    1630:	68fa      	ldr	r2, [r7, #12]
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	1c10      	adds	r0, r2, #0
    1636:	1c19      	adds	r1, r3, #0
    1638:	4b09      	ldr	r3, [pc, #36]	; (1660 <spi_transceive_wait+0x144>)
    163a:	4798      	blx	r3
    163c:	1c03      	adds	r3, r0, #0
    163e:	7023      	strb	r3, [r4, #0]

	return retval;
    1640:	2315      	movs	r3, #21
    1642:	18fb      	adds	r3, r7, r3
    1644:	781b      	ldrb	r3, [r3, #0]
}
    1646:	1c18      	adds	r0, r3, #0
    1648:	46bd      	mov	sp, r7
    164a:	b007      	add	sp, #28
    164c:	bd90      	pop	{r4, r7, pc}
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	00001005 	.word	0x00001005
    1654:	00002710 	.word	0x00002710
    1658:	00001055 	.word	0x00001055
    165c:	0000102d 	.word	0x0000102d
    1660:	0000109d 	.word	0x0000109d

00001664 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1664:	b580      	push	{r7, lr}
    1666:	b086      	sub	sp, #24
    1668:	af00      	add	r7, sp, #0
    166a:	60f8      	str	r0, [r7, #12]
    166c:	60b9      	str	r1, [r7, #8]
    166e:	1dfb      	adds	r3, r7, #7
    1670:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	795b      	ldrb	r3, [r3, #5]
    1676:	2b01      	cmp	r3, #1
    1678:	d001      	beq.n	167e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    167a:	2315      	movs	r3, #21
    167c:	e05c      	b.n	1738 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    167e:	68fb      	ldr	r3, [r7, #12]
    1680:	7a1b      	ldrb	r3, [r3, #8]
    1682:	2201      	movs	r2, #1
    1684:	4053      	eors	r3, r2
    1686:	b2db      	uxtb	r3, r3
    1688:	2b00      	cmp	r3, #0
    168a:	d054      	beq.n	1736 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    168c:	1dfb      	adds	r3, r7, #7
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	2b00      	cmp	r3, #0
    1692:	d04a      	beq.n	172a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1694:	68bb      	ldr	r3, [r7, #8]
    1696:	785b      	ldrb	r3, [r3, #1]
    1698:	2b00      	cmp	r3, #0
    169a:	d03f      	beq.n	171c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    169c:	68fb      	ldr	r3, [r7, #12]
    169e:	1c18      	adds	r0, r3, #0
    16a0:	4b27      	ldr	r3, [pc, #156]	; (1740 <spi_select_slave+0xdc>)
    16a2:	4798      	blx	r3
    16a4:	1c03      	adds	r3, r0, #0
    16a6:	1c1a      	adds	r2, r3, #0
    16a8:	2301      	movs	r3, #1
    16aa:	4053      	eors	r3, r2
    16ac:	b2db      	uxtb	r3, r3
    16ae:	2b00      	cmp	r3, #0
    16b0:	d007      	beq.n	16c2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    16b2:	68bb      	ldr	r3, [r7, #8]
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	1c18      	adds	r0, r3, #0
    16b8:	2101      	movs	r1, #1
    16ba:	4b22      	ldr	r3, [pc, #136]	; (1744 <spi_select_slave+0xe0>)
    16bc:	4798      	blx	r3
					return STATUS_BUSY;
    16be:	2305      	movs	r3, #5
    16c0:	e03a      	b.n	1738 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    16c2:	68bb      	ldr	r3, [r7, #8]
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	1c18      	adds	r0, r3, #0
    16c8:	2100      	movs	r1, #0
    16ca:	4b1e      	ldr	r3, [pc, #120]	; (1744 <spi_select_slave+0xe0>)
    16cc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    16ce:	68bb      	ldr	r3, [r7, #8]
    16d0:	789b      	ldrb	r3, [r3, #2]
    16d2:	b29b      	uxth	r3, r3
    16d4:	68fa      	ldr	r2, [r7, #12]
    16d6:	1c10      	adds	r0, r2, #0
    16d8:	1c19      	adds	r1, r3, #0
    16da:	4b1b      	ldr	r3, [pc, #108]	; (1748 <spi_select_slave+0xe4>)
    16dc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	79db      	ldrb	r3, [r3, #7]
    16e2:	2201      	movs	r2, #1
    16e4:	4053      	eors	r3, r2
    16e6:	b2db      	uxtb	r3, r3
    16e8:	2b00      	cmp	r3, #0
    16ea:	d024      	beq.n	1736 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	68fb      	ldr	r3, [r7, #12]
    16f0:	1c18      	adds	r0, r3, #0
    16f2:	4b16      	ldr	r3, [pc, #88]	; (174c <spi_select_slave+0xe8>)
    16f4:	4798      	blx	r3
    16f6:	1c03      	adds	r3, r0, #0
    16f8:	1c1a      	adds	r2, r3, #0
    16fa:	2301      	movs	r3, #1
    16fc:	4053      	eors	r3, r2
    16fe:	b2db      	uxtb	r3, r3
    1700:	2b00      	cmp	r3, #0
    1702:	d1f4      	bne.n	16ee <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1704:	2316      	movs	r3, #22
    1706:	18fb      	adds	r3, r7, r3
    1708:	2200      	movs	r2, #0
    170a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    170c:	68fa      	ldr	r2, [r7, #12]
    170e:	2316      	movs	r3, #22
    1710:	18fb      	adds	r3, r7, r3
    1712:	1c10      	adds	r0, r2, #0
    1714:	1c19      	adds	r1, r3, #0
    1716:	4b0e      	ldr	r3, [pc, #56]	; (1750 <spi_select_slave+0xec>)
    1718:	4798      	blx	r3
    171a:	e00c      	b.n	1736 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    171c:	68bb      	ldr	r3, [r7, #8]
    171e:	781b      	ldrb	r3, [r3, #0]
    1720:	1c18      	adds	r0, r3, #0
    1722:	2100      	movs	r1, #0
    1724:	4b07      	ldr	r3, [pc, #28]	; (1744 <spi_select_slave+0xe0>)
    1726:	4798      	blx	r3
    1728:	e005      	b.n	1736 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    172a:	68bb      	ldr	r3, [r7, #8]
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	1c18      	adds	r0, r3, #0
    1730:	2101      	movs	r1, #1
    1732:	4b04      	ldr	r3, [pc, #16]	; (1744 <spi_select_slave+0xe0>)
    1734:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1736:	2300      	movs	r3, #0
}
    1738:	1c18      	adds	r0, r3, #0
    173a:	46bd      	mov	sp, r7
    173c:	b006      	add	sp, #24
    173e:	bd80      	pop	{r7, pc}
    1740:	00001005 	.word	0x00001005
    1744:	00000f25 	.word	0x00000f25
    1748:	00001055 	.word	0x00001055
    174c:	0000102d 	.word	0x0000102d
    1750:	0000109d 	.word	0x0000109d

00001754 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1754:	b580      	push	{r7, lr}
    1756:	b084      	sub	sp, #16
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	b2da      	uxtb	r2, r3
    176a:	230e      	movs	r3, #14
    176c:	18fb      	adds	r3, r7, r3
    176e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1774:	1c5a      	adds	r2, r3, #1
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	799b      	ldrb	r3, [r3, #6]
    177e:	2b01      	cmp	r3, #1
    1780:	d112      	bne.n	17a8 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1786:	781b      	ldrb	r3, [r3, #0]
    1788:	b2db      	uxtb	r3, r3
    178a:	021b      	lsls	r3, r3, #8
    178c:	b29a      	uxth	r2, r3
    178e:	230e      	movs	r3, #14
    1790:	18fb      	adds	r3, r7, r3
    1792:	881b      	ldrh	r3, [r3, #0]
    1794:	4313      	orrs	r3, r2
    1796:	b29a      	uxth	r2, r3
    1798:	230e      	movs	r3, #14
    179a:	18fb      	adds	r3, r7, r3
    179c:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17a2:	1c5a      	adds	r2, r3, #1
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    17a8:	230e      	movs	r3, #14
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	881b      	ldrh	r3, [r3, #0]
    17ae:	05db      	lsls	r3, r3, #23
    17b0:	0dda      	lsrs	r2, r3, #23
    17b2:	68bb      	ldr	r3, [r7, #8]
    17b4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    17ba:	b29b      	uxth	r3, r3
    17bc:	3b01      	subs	r3, #1
    17be:	b29a      	uxth	r2, r3
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	869a      	strh	r2, [r3, #52]	; 0x34
}
    17c4:	46bd      	mov	sp, r7
    17c6:	b004      	add	sp, #16
    17c8:	bd80      	pop	{r7, pc}
    17ca:	46c0      	nop			; (mov r8, r8)

000017cc <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b084      	sub	sp, #16
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    17da:	4b07      	ldr	r3, [pc, #28]	; (17f8 <_spi_write_dummy+0x2c>)
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	1c1a      	adds	r2, r3, #0
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    17e8:	b29b      	uxth	r3, r3
    17ea:	3b01      	subs	r3, #1
    17ec:	b29a      	uxth	r2, r3
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    17f2:	46bd      	mov	sp, r7
    17f4:	b004      	add	sp, #16
    17f6:	bd80      	pop	{r7, pc}
    17f8:	200000c0 	.word	0x200000c0

000017fc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	b084      	sub	sp, #16
    1800:	af00      	add	r7, sp, #0
    1802:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    180a:	230a      	movs	r3, #10
    180c:	18fb      	adds	r3, r7, r3
    180e:	2200      	movs	r2, #0
    1810:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1816:	230a      	movs	r3, #10
    1818:	18fb      	adds	r3, r7, r3
    181a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1820:	b29b      	uxth	r3, r3
    1822:	3b01      	subs	r3, #1
    1824:	b29a      	uxth	r2, r3
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	865a      	strh	r2, [r3, #50]	; 0x32
}
    182a:	46bd      	mov	sp, r7
    182c:	b004      	add	sp, #16
    182e:	bd80      	pop	{r7, pc}

00001830 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    1830:	b580      	push	{r7, lr}
    1832:	b084      	sub	sp, #16
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1842:	b29a      	uxth	r2, r3
    1844:	230a      	movs	r3, #10
    1846:	18fb      	adds	r3, r7, r3
    1848:	05d2      	lsls	r2, r2, #23
    184a:	0dd2      	lsrs	r2, r2, #23
    184c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    184e:	687b      	ldr	r3, [r7, #4]
    1850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1852:	220a      	movs	r2, #10
    1854:	18ba      	adds	r2, r7, r2
    1856:	8812      	ldrh	r2, [r2, #0]
    1858:	b2d2      	uxtb	r2, r2
    185a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1860:	1c5a      	adds	r2, r3, #1
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	799b      	ldrb	r3, [r3, #6]
    186a:	2b01      	cmp	r3, #1
    186c:	d10d      	bne.n	188a <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1872:	220a      	movs	r2, #10
    1874:	18ba      	adds	r2, r7, r2
    1876:	8812      	ldrh	r2, [r2, #0]
    1878:	0a12      	lsrs	r2, r2, #8
    187a:	b292      	uxth	r2, r2
    187c:	b2d2      	uxtb	r2, r2
    187e:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1884:	1c5a      	adds	r2, r3, #1
    1886:	687b      	ldr	r3, [r7, #4]
    1888:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    188e:	b29b      	uxth	r3, r3
    1890:	3b01      	subs	r3, #1
    1892:	b29a      	uxth	r2, r3
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1898:	46bd      	mov	sp, r7
    189a:	b004      	add	sp, #16
    189c:	bd80      	pop	{r7, pc}
    189e:	46c0      	nop			; (mov r8, r8)

000018a0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    18a0:	b580      	push	{r7, lr}
    18a2:	b086      	sub	sp, #24
    18a4:	af00      	add	r7, sp, #0
    18a6:	1c02      	adds	r2, r0, #0
    18a8:	1dfb      	adds	r3, r7, #7
    18aa:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    18ac:	1dfb      	adds	r3, r7, #7
    18ae:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    18b0:	4bb8      	ldr	r3, [pc, #736]	; (1b94 <_spi_interrupt_handler+0x2f4>)
    18b2:	0092      	lsls	r2, r2, #2
    18b4:	58d3      	ldr	r3, [r2, r3]
    18b6:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    18b8:	697b      	ldr	r3, [r7, #20]
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    18be:	697b      	ldr	r3, [r7, #20]
    18c0:	2237      	movs	r2, #55	; 0x37
    18c2:	5c9a      	ldrb	r2, [r3, r2]
    18c4:	697b      	ldr	r3, [r7, #20]
    18c6:	2136      	movs	r1, #54	; 0x36
    18c8:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    18ca:	230f      	movs	r3, #15
    18cc:	18fb      	adds	r3, r7, r3
    18ce:	400a      	ands	r2, r1
    18d0:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    18d2:	693b      	ldr	r3, [r7, #16]
    18d4:	7e1b      	ldrb	r3, [r3, #24]
    18d6:	b2da      	uxtb	r2, r3
    18d8:	230c      	movs	r3, #12
    18da:	18fb      	adds	r3, r7, r3
    18dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    18de:	693b      	ldr	r3, [r7, #16]
    18e0:	7d9b      	ldrb	r3, [r3, #22]
    18e2:	b2db      	uxtb	r3, r3
    18e4:	b29a      	uxth	r2, r3
    18e6:	230c      	movs	r3, #12
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	210c      	movs	r1, #12
    18ec:	1879      	adds	r1, r7, r1
    18ee:	8809      	ldrh	r1, [r1, #0]
    18f0:	400a      	ands	r2, r1
    18f2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    18f4:	230c      	movs	r3, #12
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	881b      	ldrh	r3, [r3, #0]
    18fa:	2201      	movs	r2, #1
    18fc:	4013      	ands	r3, r2
    18fe:	d041      	beq.n	1984 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1900:	697b      	ldr	r3, [r7, #20]
    1902:	795b      	ldrb	r3, [r3, #5]
    1904:	2b01      	cmp	r3, #1
    1906:	d110      	bne.n	192a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1908:	697b      	ldr	r3, [r7, #20]
    190a:	7a5b      	ldrb	r3, [r3, #9]
    190c:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    190e:	2b00      	cmp	r3, #0
    1910:	d10b      	bne.n	192a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    1912:	697b      	ldr	r3, [r7, #20]
    1914:	1c18      	adds	r0, r3, #0
    1916:	4ba0      	ldr	r3, [pc, #640]	; (1b98 <_spi_interrupt_handler+0x2f8>)
    1918:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    191a:	697b      	ldr	r3, [r7, #20]
    191c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    191e:	b29b      	uxth	r3, r3
    1920:	2b00      	cmp	r3, #0
    1922:	d102      	bne.n	192a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1924:	693b      	ldr	r3, [r7, #16]
    1926:	2201      	movs	r2, #1
    1928:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    192a:	697b      	ldr	r3, [r7, #20]
    192c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    192e:	2b01      	cmp	r3, #1
    1930:	d104      	bne.n	193c <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    1932:	697b      	ldr	r3, [r7, #20]
    1934:	7a5b      	ldrb	r3, [r3, #9]
    1936:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1938:	2b00      	cmp	r3, #0
    193a:	d108      	bne.n	194e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    193c:	697b      	ldr	r3, [r7, #20]
    193e:	795b      	ldrb	r3, [r3, #5]
    1940:	2b00      	cmp	r3, #0
    1942:	d11f      	bne.n	1984 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	7a5b      	ldrb	r3, [r3, #9]
    1948:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    194a:	2b00      	cmp	r3, #0
    194c:	d01a      	beq.n	1984 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    194e:	697b      	ldr	r3, [r7, #20]
    1950:	1c18      	adds	r0, r3, #0
    1952:	4b92      	ldr	r3, [pc, #584]	; (1b9c <_spi_interrupt_handler+0x2fc>)
    1954:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1956:	697b      	ldr	r3, [r7, #20]
    1958:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    195a:	b29b      	uxth	r3, r3
    195c:	2b00      	cmp	r3, #0
    195e:	d111      	bne.n	1984 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1960:	693b      	ldr	r3, [r7, #16]
    1962:	2201      	movs	r2, #1
    1964:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1966:	697b      	ldr	r3, [r7, #20]
    1968:	7a5b      	ldrb	r3, [r3, #9]
    196a:	b2db      	uxtb	r3, r3
    196c:	2b01      	cmp	r3, #1
    196e:	d109      	bne.n	1984 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    1970:	697b      	ldr	r3, [r7, #20]
    1972:	79db      	ldrb	r3, [r3, #7]
    1974:	2201      	movs	r2, #1
    1976:	4053      	eors	r3, r2
    1978:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    197a:	2b00      	cmp	r3, #0
    197c:	d002      	beq.n	1984 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    197e:	693b      	ldr	r3, [r7, #16]
    1980:	2202      	movs	r2, #2
    1982:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1984:	230c      	movs	r3, #12
    1986:	18fb      	adds	r3, r7, r3
    1988:	881b      	ldrh	r3, [r3, #0]
    198a:	2204      	movs	r2, #4
    198c:	4013      	ands	r3, r2
    198e:	d100      	bne.n	1992 <_spi_interrupt_handler+0xf2>
    1990:	e07e      	b.n	1a90 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1992:	693b      	ldr	r3, [r7, #16]
    1994:	8b5b      	ldrh	r3, [r3, #26]
    1996:	b29b      	uxth	r3, r3
    1998:	1c1a      	adds	r2, r3, #0
    199a:	2304      	movs	r3, #4
    199c:	4013      	ands	r3, r2
    199e:	d022      	beq.n	19e6 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    19a0:	697b      	ldr	r3, [r7, #20]
    19a2:	7a5b      	ldrb	r3, [r3, #9]
    19a4:	b2db      	uxtb	r3, r3
    19a6:	2b01      	cmp	r3, #1
    19a8:	d014      	beq.n	19d4 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    19aa:	697b      	ldr	r3, [r7, #20]
    19ac:	2238      	movs	r2, #56	; 0x38
    19ae:	211e      	movs	r1, #30
    19b0:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    19b2:	697b      	ldr	r3, [r7, #20]
    19b4:	2203      	movs	r2, #3
    19b6:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    19b8:	693b      	ldr	r3, [r7, #16]
    19ba:	2205      	movs	r2, #5
    19bc:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    19be:	230f      	movs	r3, #15
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	2208      	movs	r2, #8
    19c6:	4013      	ands	r3, r2
    19c8:	d004      	beq.n	19d4 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    19ca:	697b      	ldr	r3, [r7, #20]
    19cc:	699b      	ldr	r3, [r3, #24]
    19ce:	697a      	ldr	r2, [r7, #20]
    19d0:	1c10      	adds	r0, r2, #0
    19d2:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    19d4:	693b      	ldr	r3, [r7, #16]
    19d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19d8:	230a      	movs	r3, #10
    19da:	18fb      	adds	r3, r7, r3
    19dc:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    19de:	693b      	ldr	r3, [r7, #16]
    19e0:	2204      	movs	r2, #4
    19e2:	835a      	strh	r2, [r3, #26]
    19e4:	e054      	b.n	1a90 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    19e6:	697b      	ldr	r3, [r7, #20]
    19e8:	7a5b      	ldrb	r3, [r3, #9]
    19ea:	b2db      	uxtb	r3, r3
    19ec:	2b01      	cmp	r3, #1
    19ee:	d11e      	bne.n	1a2e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    19f0:	697b      	ldr	r3, [r7, #20]
    19f2:	1c18      	adds	r0, r3, #0
    19f4:	4b6a      	ldr	r3, [pc, #424]	; (1ba0 <_spi_interrupt_handler+0x300>)
    19f6:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    19f8:	697b      	ldr	r3, [r7, #20]
    19fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    19fc:	b29b      	uxth	r3, r3
    19fe:	2b00      	cmp	r3, #0
    1a00:	d146      	bne.n	1a90 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2204      	movs	r2, #4
    1a06:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	2238      	movs	r2, #56	; 0x38
    1a0c:	2100      	movs	r1, #0
    1a0e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	2203      	movs	r2, #3
    1a14:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1a16:	230f      	movs	r3, #15
    1a18:	18fb      	adds	r3, r7, r3
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	2201      	movs	r2, #1
    1a1e:	4013      	ands	r3, r2
    1a20:	d036      	beq.n	1a90 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1a22:	697b      	ldr	r3, [r7, #20]
    1a24:	68db      	ldr	r3, [r3, #12]
    1a26:	697a      	ldr	r2, [r7, #20]
    1a28:	1c10      	adds	r0, r2, #0
    1a2a:	4798      	blx	r3
    1a2c:	e030      	b.n	1a90 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    1a2e:	697b      	ldr	r3, [r7, #20]
    1a30:	1c18      	adds	r0, r3, #0
    1a32:	4b5c      	ldr	r3, [pc, #368]	; (1ba4 <_spi_interrupt_handler+0x304>)
    1a34:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1a36:	697b      	ldr	r3, [r7, #20]
    1a38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d127      	bne.n	1a90 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    1a40:	697b      	ldr	r3, [r7, #20]
    1a42:	2238      	movs	r2, #56	; 0x38
    1a44:	2100      	movs	r1, #0
    1a46:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1a48:	693b      	ldr	r3, [r7, #16]
    1a4a:	2204      	movs	r2, #4
    1a4c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1a4e:	697b      	ldr	r3, [r7, #20]
    1a50:	7a5b      	ldrb	r3, [r3, #9]
    1a52:	b2db      	uxtb	r3, r3
    1a54:	2b02      	cmp	r3, #2
    1a56:	d10b      	bne.n	1a70 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1a58:	230f      	movs	r3, #15
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	781b      	ldrb	r3, [r3, #0]
    1a5e:	2204      	movs	r2, #4
    1a60:	4013      	ands	r3, r2
    1a62:	d015      	beq.n	1a90 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1a64:	697b      	ldr	r3, [r7, #20]
    1a66:	695b      	ldr	r3, [r3, #20]
    1a68:	697a      	ldr	r2, [r7, #20]
    1a6a:	1c10      	adds	r0, r2, #0
    1a6c:	4798      	blx	r3
    1a6e:	e00f      	b.n	1a90 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1a70:	697b      	ldr	r3, [r7, #20]
    1a72:	7a5b      	ldrb	r3, [r3, #9]
    1a74:	b2db      	uxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d10a      	bne.n	1a90 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1a7a:	230f      	movs	r3, #15
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	2202      	movs	r2, #2
    1a82:	4013      	ands	r3, r2
    1a84:	d004      	beq.n	1a90 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1a86:	697b      	ldr	r3, [r7, #20]
    1a88:	691b      	ldr	r3, [r3, #16]
    1a8a:	697a      	ldr	r2, [r7, #20]
    1a8c:	1c10      	adds	r0, r2, #0
    1a8e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1a90:	230c      	movs	r3, #12
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	881b      	ldrh	r3, [r3, #0]
    1a96:	2202      	movs	r2, #2
    1a98:	4013      	ands	r3, r2
    1a9a:	d046      	beq.n	1b2a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1a9c:	697b      	ldr	r3, [r7, #20]
    1a9e:	795b      	ldrb	r3, [r3, #5]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d11d      	bne.n	1ae0 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1aa4:	693b      	ldr	r3, [r7, #16]
    1aa6:	2207      	movs	r2, #7
    1aa8:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1aaa:	693b      	ldr	r3, [r7, #16]
    1aac:	2202      	movs	r2, #2
    1aae:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1ab0:	697b      	ldr	r3, [r7, #20]
    1ab2:	2203      	movs	r2, #3
    1ab4:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1ab6:	697b      	ldr	r3, [r7, #20]
    1ab8:	2200      	movs	r2, #0
    1aba:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1abc:	697b      	ldr	r3, [r7, #20]
    1abe:	2200      	movs	r2, #0
    1ac0:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    1ac2:	697b      	ldr	r3, [r7, #20]
    1ac4:	2238      	movs	r2, #56	; 0x38
    1ac6:	2100      	movs	r1, #0
    1ac8:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1aca:	230f      	movs	r3, #15
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	781b      	ldrb	r3, [r3, #0]
    1ad0:	2210      	movs	r2, #16
    1ad2:	4013      	ands	r3, r2
    1ad4:	d004      	beq.n	1ae0 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1ad6:	697b      	ldr	r3, [r7, #20]
    1ad8:	69db      	ldr	r3, [r3, #28]
    1ada:	697a      	ldr	r2, [r7, #20]
    1adc:	1c10      	adds	r0, r2, #0
    1ade:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1ae0:	697b      	ldr	r3, [r7, #20]
    1ae2:	795b      	ldrb	r3, [r3, #5]
    1ae4:	2b01      	cmp	r3, #1
    1ae6:	d120      	bne.n	1b2a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1ae8:	697b      	ldr	r3, [r7, #20]
    1aea:	7a5b      	ldrb	r3, [r3, #9]
    1aec:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1aee:	2b01      	cmp	r3, #1
    1af0:	d11b      	bne.n	1b2a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1af2:	697b      	ldr	r3, [r7, #20]
    1af4:	79db      	ldrb	r3, [r3, #7]
    1af6:	2201      	movs	r2, #1
    1af8:	4053      	eors	r3, r2
    1afa:	b2db      	uxtb	r3, r3
    1afc:	2b00      	cmp	r3, #0
    1afe:	d014      	beq.n	1b2a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1b00:	693b      	ldr	r3, [r7, #16]
    1b02:	2202      	movs	r2, #2
    1b04:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1b06:	697b      	ldr	r3, [r7, #20]
    1b08:	2203      	movs	r2, #3
    1b0a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1b0c:	697b      	ldr	r3, [r7, #20]
    1b0e:	2238      	movs	r2, #56	; 0x38
    1b10:	2100      	movs	r1, #0
    1b12:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1b14:	230f      	movs	r3, #15
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	781b      	ldrb	r3, [r3, #0]
    1b1a:	2201      	movs	r2, #1
    1b1c:	4013      	ands	r3, r2
    1b1e:	d004      	beq.n	1b2a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1b20:	697b      	ldr	r3, [r7, #20]
    1b22:	68db      	ldr	r3, [r3, #12]
    1b24:	697a      	ldr	r2, [r7, #20]
    1b26:	1c10      	adds	r0, r2, #0
    1b28:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1b2a:	230c      	movs	r3, #12
    1b2c:	18fb      	adds	r3, r7, r3
    1b2e:	881b      	ldrh	r3, [r3, #0]
    1b30:	2208      	movs	r2, #8
    1b32:	4013      	ands	r3, r2
    1b34:	d014      	beq.n	1b60 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    1b36:	697b      	ldr	r3, [r7, #20]
    1b38:	795b      	ldrb	r3, [r3, #5]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d110      	bne.n	1b60 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1b3e:	693b      	ldr	r3, [r7, #16]
    1b40:	2208      	movs	r2, #8
    1b42:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1b44:	693b      	ldr	r3, [r7, #16]
    1b46:	2208      	movs	r2, #8
    1b48:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1b4a:	230f      	movs	r3, #15
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	781b      	ldrb	r3, [r3, #0]
    1b50:	2220      	movs	r2, #32
    1b52:	4013      	ands	r3, r2
    1b54:	d004      	beq.n	1b60 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1b56:	697b      	ldr	r3, [r7, #20]
    1b58:	6a1b      	ldr	r3, [r3, #32]
    1b5a:	697a      	ldr	r2, [r7, #20]
    1b5c:	1c10      	adds	r0, r2, #0
    1b5e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1b60:	230c      	movs	r3, #12
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	881b      	ldrh	r3, [r3, #0]
    1b66:	2280      	movs	r2, #128	; 0x80
    1b68:	4013      	ands	r3, r2
    1b6a:	d010      	beq.n	1b8e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b6c:	693b      	ldr	r3, [r7, #16]
    1b6e:	2280      	movs	r2, #128	; 0x80
    1b70:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b72:	693b      	ldr	r3, [r7, #16]
    1b74:	2280      	movs	r2, #128	; 0x80
    1b76:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1b78:	230f      	movs	r3, #15
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	781b      	ldrb	r3, [r3, #0]
    1b7e:	2240      	movs	r2, #64	; 0x40
    1b80:	4013      	ands	r3, r2
    1b82:	d004      	beq.n	1b8e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1b84:	697b      	ldr	r3, [r7, #20]
    1b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b88:	697a      	ldr	r2, [r7, #20]
    1b8a:	1c10      	adds	r0, r2, #0
    1b8c:	4798      	blx	r3
		}
	}
#  endif
}
    1b8e:	46bd      	mov	sp, r7
    1b90:	b006      	add	sp, #24
    1b92:	bd80      	pop	{r7, pc}
    1b94:	200000c4 	.word	0x200000c4
    1b98:	000017cd 	.word	0x000017cd
    1b9c:	00001755 	.word	0x00001755
    1ba0:	000017fd 	.word	0x000017fd
    1ba4:	00001831 	.word	0x00001831

00001ba8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1ba8:	b580      	push	{r7, lr}
    1baa:	b082      	sub	sp, #8
    1bac:	af00      	add	r7, sp, #0
    1bae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	2200      	movs	r2, #0
    1bb4:	701a      	strb	r2, [r3, #0]
}
    1bb6:	46bd      	mov	sp, r7
    1bb8:	b002      	add	sp, #8
    1bba:	bd80      	pop	{r7, pc}

00001bbc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1bbc:	b580      	push	{r7, lr}
    1bbe:	b086      	sub	sp, #24
    1bc0:	af00      	add	r7, sp, #0
    1bc2:	60f8      	str	r0, [r7, #12]
    1bc4:	60b9      	str	r1, [r7, #8]
    1bc6:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1bc8:	2316      	movs	r3, #22
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	2200      	movs	r2, #0
    1bce:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1bd0:	68bb      	ldr	r3, [r7, #8]
    1bd2:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1bd4:	68bb      	ldr	r3, [r7, #8]
    1bd6:	085a      	lsrs	r2, r3, #1
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	429a      	cmp	r2, r3
    1bdc:	d201      	bcs.n	1be2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1bde:	2340      	movs	r3, #64	; 0x40
    1be0:	e026      	b.n	1c30 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1be2:	68bb      	ldr	r3, [r7, #8]
    1be4:	085b      	lsrs	r3, r3, #1
    1be6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1be8:	e00a      	b.n	1c00 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1bea:	693a      	ldr	r2, [r7, #16]
    1bec:	68fb      	ldr	r3, [r7, #12]
    1bee:	1ad3      	subs	r3, r2, r3
    1bf0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1bf2:	2316      	movs	r3, #22
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	881a      	ldrh	r2, [r3, #0]
    1bf8:	2316      	movs	r3, #22
    1bfa:	18fb      	adds	r3, r7, r3
    1bfc:	3201      	adds	r2, #1
    1bfe:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1c00:	693a      	ldr	r2, [r7, #16]
    1c02:	68fb      	ldr	r3, [r7, #12]
    1c04:	429a      	cmp	r2, r3
    1c06:	d2f0      	bcs.n	1bea <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1c08:	2316      	movs	r3, #22
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	2216      	movs	r2, #22
    1c0e:	18ba      	adds	r2, r7, r2
    1c10:	8812      	ldrh	r2, [r2, #0]
    1c12:	3a01      	subs	r2, #1
    1c14:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1c16:	2316      	movs	r3, #22
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	881b      	ldrh	r3, [r3, #0]
    1c1c:	2bff      	cmp	r3, #255	; 0xff
    1c1e:	d901      	bls.n	1c24 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c20:	2340      	movs	r3, #64	; 0x40
    1c22:	e005      	b.n	1c30 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	2216      	movs	r2, #22
    1c28:	18ba      	adds	r2, r7, r2
    1c2a:	8812      	ldrh	r2, [r2, #0]
    1c2c:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1c2e:	2300      	movs	r3, #0
	}
}
    1c30:	1c18      	adds	r0, r3, #0
    1c32:	46bd      	mov	sp, r7
    1c34:	b006      	add	sp, #24
    1c36:	bd80      	pop	{r7, pc}

00001c38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	b084      	sub	sp, #16
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	1c02      	adds	r2, r0, #0
    1c40:	1dfb      	adds	r3, r7, #7
    1c42:	701a      	strb	r2, [r3, #0]
    1c44:	1dbb      	adds	r3, r7, #6
    1c46:	1c0a      	adds	r2, r1, #0
    1c48:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1c4a:	4b1a      	ldr	r3, [pc, #104]	; (1cb4 <sercom_set_gclk_generator+0x7c>)
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	2201      	movs	r2, #1
    1c50:	4053      	eors	r3, r2
    1c52:	b2db      	uxtb	r3, r3
    1c54:	2b00      	cmp	r3, #0
    1c56:	d103      	bne.n	1c60 <sercom_set_gclk_generator+0x28>
    1c58:	1dbb      	adds	r3, r7, #6
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d01b      	beq.n	1c98 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1c60:	230c      	movs	r3, #12
    1c62:	18fb      	adds	r3, r7, r3
    1c64:	1c18      	adds	r0, r3, #0
    1c66:	4b14      	ldr	r3, [pc, #80]	; (1cb8 <sercom_set_gclk_generator+0x80>)
    1c68:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1c6a:	230c      	movs	r3, #12
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	1dfa      	adds	r2, r7, #7
    1c70:	7812      	ldrb	r2, [r2, #0]
    1c72:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1c74:	230c      	movs	r3, #12
    1c76:	18fb      	adds	r3, r7, r3
    1c78:	2013      	movs	r0, #19
    1c7a:	1c19      	adds	r1, r3, #0
    1c7c:	4b0f      	ldr	r3, [pc, #60]	; (1cbc <sercom_set_gclk_generator+0x84>)
    1c7e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1c80:	2013      	movs	r0, #19
    1c82:	4b0f      	ldr	r3, [pc, #60]	; (1cc0 <sercom_set_gclk_generator+0x88>)
    1c84:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1c86:	4b0b      	ldr	r3, [pc, #44]	; (1cb4 <sercom_set_gclk_generator+0x7c>)
    1c88:	1dfa      	adds	r2, r7, #7
    1c8a:	7812      	ldrb	r2, [r2, #0]
    1c8c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1c8e:	4b09      	ldr	r3, [pc, #36]	; (1cb4 <sercom_set_gclk_generator+0x7c>)
    1c90:	2201      	movs	r2, #1
    1c92:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1c94:	2300      	movs	r3, #0
    1c96:	e008      	b.n	1caa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <sercom_set_gclk_generator+0x7c>)
    1c9a:	785b      	ldrb	r3, [r3, #1]
    1c9c:	1dfa      	adds	r2, r7, #7
    1c9e:	7812      	ldrb	r2, [r2, #0]
    1ca0:	429a      	cmp	r2, r3
    1ca2:	d101      	bne.n	1ca8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1ca4:	2300      	movs	r3, #0
    1ca6:	e000      	b.n	1caa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1ca8:	231d      	movs	r3, #29
}
    1caa:	1c18      	adds	r0, r3, #0
    1cac:	46bd      	mov	sp, r7
    1cae:	b004      	add	sp, #16
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	20000020 	.word	0x20000020
    1cb8:	00001ba9 	.word	0x00001ba9
    1cbc:	00002a51 	.word	0x00002a51
    1cc0:	00002a95 	.word	0x00002a95

00001cc4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b082      	sub	sp, #8
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	1c0a      	adds	r2, r1, #0
    1cce:	1cfb      	adds	r3, r7, #3
    1cd0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	4a4d      	ldr	r2, [pc, #308]	; (1e0c <_sercom_get_default_pad+0x148>)
    1cd6:	4293      	cmp	r3, r2
    1cd8:	d03f      	beq.n	1d5a <_sercom_get_default_pad+0x96>
    1cda:	4a4c      	ldr	r2, [pc, #304]	; (1e0c <_sercom_get_default_pad+0x148>)
    1cdc:	4293      	cmp	r3, r2
    1cde:	d806      	bhi.n	1cee <_sercom_get_default_pad+0x2a>
    1ce0:	4a4b      	ldr	r2, [pc, #300]	; (1e10 <_sercom_get_default_pad+0x14c>)
    1ce2:	4293      	cmp	r3, r2
    1ce4:	d00f      	beq.n	1d06 <_sercom_get_default_pad+0x42>
    1ce6:	4a4b      	ldr	r2, [pc, #300]	; (1e14 <_sercom_get_default_pad+0x150>)
    1ce8:	4293      	cmp	r3, r2
    1cea:	d021      	beq.n	1d30 <_sercom_get_default_pad+0x6c>
    1cec:	e089      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1cee:	4a4a      	ldr	r2, [pc, #296]	; (1e18 <_sercom_get_default_pad+0x154>)
    1cf0:	4293      	cmp	r3, r2
    1cf2:	d100      	bne.n	1cf6 <_sercom_get_default_pad+0x32>
    1cf4:	e05b      	b.n	1dae <_sercom_get_default_pad+0xea>
    1cf6:	4a49      	ldr	r2, [pc, #292]	; (1e1c <_sercom_get_default_pad+0x158>)
    1cf8:	4293      	cmp	r3, r2
    1cfa:	d100      	bne.n	1cfe <_sercom_get_default_pad+0x3a>
    1cfc:	e06c      	b.n	1dd8 <_sercom_get_default_pad+0x114>
    1cfe:	4a48      	ldr	r2, [pc, #288]	; (1e20 <_sercom_get_default_pad+0x15c>)
    1d00:	4293      	cmp	r3, r2
    1d02:	d03f      	beq.n	1d84 <_sercom_get_default_pad+0xc0>
    1d04:	e07d      	b.n	1e02 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d06:	1cfb      	adds	r3, r7, #3
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	d00a      	beq.n	1d24 <_sercom_get_default_pad+0x60>
    1d0e:	dc02      	bgt.n	1d16 <_sercom_get_default_pad+0x52>
    1d10:	2b00      	cmp	r3, #0
    1d12:	d005      	beq.n	1d20 <_sercom_get_default_pad+0x5c>
    1d14:	e075      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d16:	2b02      	cmp	r3, #2
    1d18:	d006      	beq.n	1d28 <_sercom_get_default_pad+0x64>
    1d1a:	2b03      	cmp	r3, #3
    1d1c:	d006      	beq.n	1d2c <_sercom_get_default_pad+0x68>
    1d1e:	e070      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d20:	4b40      	ldr	r3, [pc, #256]	; (1e24 <_sercom_get_default_pad+0x160>)
    1d22:	e06f      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d24:	4b40      	ldr	r3, [pc, #256]	; (1e28 <_sercom_get_default_pad+0x164>)
    1d26:	e06d      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d28:	4b40      	ldr	r3, [pc, #256]	; (1e2c <_sercom_get_default_pad+0x168>)
    1d2a:	e06b      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d2c:	4b40      	ldr	r3, [pc, #256]	; (1e30 <_sercom_get_default_pad+0x16c>)
    1d2e:	e069      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d30:	1cfb      	adds	r3, r7, #3
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	2b01      	cmp	r3, #1
    1d36:	d00a      	beq.n	1d4e <_sercom_get_default_pad+0x8a>
    1d38:	dc02      	bgt.n	1d40 <_sercom_get_default_pad+0x7c>
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d005      	beq.n	1d4a <_sercom_get_default_pad+0x86>
    1d3e:	e060      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d40:	2b02      	cmp	r3, #2
    1d42:	d006      	beq.n	1d52 <_sercom_get_default_pad+0x8e>
    1d44:	2b03      	cmp	r3, #3
    1d46:	d006      	beq.n	1d56 <_sercom_get_default_pad+0x92>
    1d48:	e05b      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d4a:	2303      	movs	r3, #3
    1d4c:	e05a      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d4e:	4b39      	ldr	r3, [pc, #228]	; (1e34 <_sercom_get_default_pad+0x170>)
    1d50:	e058      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d52:	4b39      	ldr	r3, [pc, #228]	; (1e38 <_sercom_get_default_pad+0x174>)
    1d54:	e056      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d56:	4b39      	ldr	r3, [pc, #228]	; (1e3c <_sercom_get_default_pad+0x178>)
    1d58:	e054      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d5a:	1cfb      	adds	r3, r7, #3
    1d5c:	781b      	ldrb	r3, [r3, #0]
    1d5e:	2b01      	cmp	r3, #1
    1d60:	d00a      	beq.n	1d78 <_sercom_get_default_pad+0xb4>
    1d62:	dc02      	bgt.n	1d6a <_sercom_get_default_pad+0xa6>
    1d64:	2b00      	cmp	r3, #0
    1d66:	d005      	beq.n	1d74 <_sercom_get_default_pad+0xb0>
    1d68:	e04b      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d6a:	2b02      	cmp	r3, #2
    1d6c:	d006      	beq.n	1d7c <_sercom_get_default_pad+0xb8>
    1d6e:	2b03      	cmp	r3, #3
    1d70:	d006      	beq.n	1d80 <_sercom_get_default_pad+0xbc>
    1d72:	e046      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d74:	4b32      	ldr	r3, [pc, #200]	; (1e40 <_sercom_get_default_pad+0x17c>)
    1d76:	e045      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d78:	4b32      	ldr	r3, [pc, #200]	; (1e44 <_sercom_get_default_pad+0x180>)
    1d7a:	e043      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d7c:	4b32      	ldr	r3, [pc, #200]	; (1e48 <_sercom_get_default_pad+0x184>)
    1d7e:	e041      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d80:	4b32      	ldr	r3, [pc, #200]	; (1e4c <_sercom_get_default_pad+0x188>)
    1d82:	e03f      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1d84:	1cfb      	adds	r3, r7, #3
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	2b01      	cmp	r3, #1
    1d8a:	d00a      	beq.n	1da2 <_sercom_get_default_pad+0xde>
    1d8c:	dc02      	bgt.n	1d94 <_sercom_get_default_pad+0xd0>
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d005      	beq.n	1d9e <_sercom_get_default_pad+0xda>
    1d92:	e036      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d94:	2b02      	cmp	r3, #2
    1d96:	d006      	beq.n	1da6 <_sercom_get_default_pad+0xe2>
    1d98:	2b03      	cmp	r3, #3
    1d9a:	d006      	beq.n	1daa <_sercom_get_default_pad+0xe6>
    1d9c:	e031      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1d9e:	4b2c      	ldr	r3, [pc, #176]	; (1e50 <_sercom_get_default_pad+0x18c>)
    1da0:	e030      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1da2:	4b2c      	ldr	r3, [pc, #176]	; (1e54 <_sercom_get_default_pad+0x190>)
    1da4:	e02e      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1da6:	4b2c      	ldr	r3, [pc, #176]	; (1e58 <_sercom_get_default_pad+0x194>)
    1da8:	e02c      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1daa:	4b2c      	ldr	r3, [pc, #176]	; (1e5c <_sercom_get_default_pad+0x198>)
    1dac:	e02a      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dae:	1cfb      	adds	r3, r7, #3
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	2b01      	cmp	r3, #1
    1db4:	d00a      	beq.n	1dcc <_sercom_get_default_pad+0x108>
    1db6:	dc02      	bgt.n	1dbe <_sercom_get_default_pad+0xfa>
    1db8:	2b00      	cmp	r3, #0
    1dba:	d005      	beq.n	1dc8 <_sercom_get_default_pad+0x104>
    1dbc:	e021      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1dbe:	2b02      	cmp	r3, #2
    1dc0:	d006      	beq.n	1dd0 <_sercom_get_default_pad+0x10c>
    1dc2:	2b03      	cmp	r3, #3
    1dc4:	d006      	beq.n	1dd4 <_sercom_get_default_pad+0x110>
    1dc6:	e01c      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1dc8:	4b25      	ldr	r3, [pc, #148]	; (1e60 <_sercom_get_default_pad+0x19c>)
    1dca:	e01b      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dcc:	4b25      	ldr	r3, [pc, #148]	; (1e64 <_sercom_get_default_pad+0x1a0>)
    1dce:	e019      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dd0:	4b25      	ldr	r3, [pc, #148]	; (1e68 <_sercom_get_default_pad+0x1a4>)
    1dd2:	e017      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dd4:	4b25      	ldr	r3, [pc, #148]	; (1e6c <_sercom_get_default_pad+0x1a8>)
    1dd6:	e015      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dd8:	1cfb      	adds	r3, r7, #3
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	2b01      	cmp	r3, #1
    1dde:	d00a      	beq.n	1df6 <_sercom_get_default_pad+0x132>
    1de0:	dc02      	bgt.n	1de8 <_sercom_get_default_pad+0x124>
    1de2:	2b00      	cmp	r3, #0
    1de4:	d005      	beq.n	1df2 <_sercom_get_default_pad+0x12e>
    1de6:	e00c      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1de8:	2b02      	cmp	r3, #2
    1dea:	d006      	beq.n	1dfa <_sercom_get_default_pad+0x136>
    1dec:	2b03      	cmp	r3, #3
    1dee:	d006      	beq.n	1dfe <_sercom_get_default_pad+0x13a>
    1df0:	e007      	b.n	1e02 <_sercom_get_default_pad+0x13e>
    1df2:	4b1f      	ldr	r3, [pc, #124]	; (1e70 <_sercom_get_default_pad+0x1ac>)
    1df4:	e006      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1df6:	4b1f      	ldr	r3, [pc, #124]	; (1e74 <_sercom_get_default_pad+0x1b0>)
    1df8:	e004      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dfa:	4b1f      	ldr	r3, [pc, #124]	; (1e78 <_sercom_get_default_pad+0x1b4>)
    1dfc:	e002      	b.n	1e04 <_sercom_get_default_pad+0x140>
    1dfe:	4b1f      	ldr	r3, [pc, #124]	; (1e7c <_sercom_get_default_pad+0x1b8>)
    1e00:	e000      	b.n	1e04 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1e02:	2300      	movs	r3, #0
}
    1e04:	1c18      	adds	r0, r3, #0
    1e06:	46bd      	mov	sp, r7
    1e08:	b002      	add	sp, #8
    1e0a:	bd80      	pop	{r7, pc}
    1e0c:	42001000 	.word	0x42001000
    1e10:	42000800 	.word	0x42000800
    1e14:	42000c00 	.word	0x42000c00
    1e18:	42001800 	.word	0x42001800
    1e1c:	42001c00 	.word	0x42001c00
    1e20:	42001400 	.word	0x42001400
    1e24:	00040003 	.word	0x00040003
    1e28:	00050003 	.word	0x00050003
    1e2c:	00060003 	.word	0x00060003
    1e30:	00070003 	.word	0x00070003
    1e34:	00010003 	.word	0x00010003
    1e38:	001e0003 	.word	0x001e0003
    1e3c:	001f0003 	.word	0x001f0003
    1e40:	00080003 	.word	0x00080003
    1e44:	00090003 	.word	0x00090003
    1e48:	000a0003 	.word	0x000a0003
    1e4c:	000b0003 	.word	0x000b0003
    1e50:	00100003 	.word	0x00100003
    1e54:	00110003 	.word	0x00110003
    1e58:	00120003 	.word	0x00120003
    1e5c:	00130003 	.word	0x00130003
    1e60:	000c0003 	.word	0x000c0003
    1e64:	000d0003 	.word	0x000d0003
    1e68:	000e0003 	.word	0x000e0003
    1e6c:	000f0003 	.word	0x000f0003
    1e70:	00160003 	.word	0x00160003
    1e74:	00170003 	.word	0x00170003
    1e78:	00180003 	.word	0x00180003
    1e7c:	00190003 	.word	0x00190003

00001e80 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1e80:	b590      	push	{r4, r7, lr}
    1e82:	b08b      	sub	sp, #44	; 0x2c
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1e88:	230c      	movs	r3, #12
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	4a0e      	ldr	r2, [pc, #56]	; (1ec8 <_sercom_get_sercom_inst_index+0x48>)
    1e8e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1e90:	c313      	stmia	r3!, {r0, r1, r4}
    1e92:	ca13      	ldmia	r2!, {r0, r1, r4}
    1e94:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e96:	2300      	movs	r3, #0
    1e98:	627b      	str	r3, [r7, #36]	; 0x24
    1e9a:	e00d      	b.n	1eb8 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	220c      	movs	r2, #12
    1ea0:	18ba      	adds	r2, r7, r2
    1ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1ea4:	0089      	lsls	r1, r1, #2
    1ea6:	588a      	ldr	r2, [r1, r2]
    1ea8:	4293      	cmp	r3, r2
    1eaa:	d102      	bne.n	1eb2 <_sercom_get_sercom_inst_index+0x32>
			return i;
    1eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eae:	b2db      	uxtb	r3, r3
    1eb0:	e006      	b.n	1ec0 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eb4:	3301      	adds	r3, #1
    1eb6:	627b      	str	r3, [r7, #36]	; 0x24
    1eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eba:	2b05      	cmp	r3, #5
    1ebc:	d9ee      	bls.n	1e9c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1ebe:	2300      	movs	r3, #0
}
    1ec0:	1c18      	adds	r0, r3, #0
    1ec2:	46bd      	mov	sp, r7
    1ec4:	b00b      	add	sp, #44	; 0x2c
    1ec6:	bd90      	pop	{r4, r7, pc}
    1ec8:	00004850 	.word	0x00004850

00001ecc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b082      	sub	sp, #8
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	1c02      	adds	r2, r0, #0
    1ed4:	1dfb      	adds	r3, r7, #7
    1ed6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1ed8:	46bd      	mov	sp, r7
    1eda:	b002      	add	sp, #8
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)

00001ee0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b084      	sub	sp, #16
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	1c02      	adds	r2, r0, #0
    1ee8:	6039      	str	r1, [r7, #0]
    1eea:	1dfb      	adds	r3, r7, #7
    1eec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1eee:	4b13      	ldr	r3, [pc, #76]	; (1f3c <_sercom_set_handler+0x5c>)
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	2201      	movs	r2, #1
    1ef4:	4053      	eors	r3, r2
    1ef6:	b2db      	uxtb	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d015      	beq.n	1f28 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1efc:	2300      	movs	r3, #0
    1efe:	60fb      	str	r3, [r7, #12]
    1f00:	e00c      	b.n	1f1c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f02:	4b0f      	ldr	r3, [pc, #60]	; (1f40 <_sercom_set_handler+0x60>)
    1f04:	68fa      	ldr	r2, [r7, #12]
    1f06:	0092      	lsls	r2, r2, #2
    1f08:	490e      	ldr	r1, [pc, #56]	; (1f44 <_sercom_set_handler+0x64>)
    1f0a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1f0c:	4b0e      	ldr	r3, [pc, #56]	; (1f48 <_sercom_set_handler+0x68>)
    1f0e:	68fa      	ldr	r2, [r7, #12]
    1f10:	0092      	lsls	r2, r2, #2
    1f12:	2100      	movs	r1, #0
    1f14:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	3301      	adds	r3, #1
    1f1a:	60fb      	str	r3, [r7, #12]
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	2b05      	cmp	r3, #5
    1f20:	d9ef      	bls.n	1f02 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1f22:	4b06      	ldr	r3, [pc, #24]	; (1f3c <_sercom_set_handler+0x5c>)
    1f24:	2201      	movs	r2, #1
    1f26:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1f28:	1dfb      	adds	r3, r7, #7
    1f2a:	781a      	ldrb	r2, [r3, #0]
    1f2c:	4b04      	ldr	r3, [pc, #16]	; (1f40 <_sercom_set_handler+0x60>)
    1f2e:	0092      	lsls	r2, r2, #2
    1f30:	6839      	ldr	r1, [r7, #0]
    1f32:	50d1      	str	r1, [r2, r3]
}
    1f34:	46bd      	mov	sp, r7
    1f36:	b004      	add	sp, #16
    1f38:	bd80      	pop	{r7, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	20000022 	.word	0x20000022
    1f40:	20000024 	.word	0x20000024
    1f44:	00001ecd 	.word	0x00001ecd
    1f48:	200000c4 	.word	0x200000c4

00001f4c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1f4c:	b590      	push	{r4, r7, lr}
    1f4e:	b085      	sub	sp, #20
    1f50:	af00      	add	r7, sp, #0
    1f52:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1f54:	2308      	movs	r3, #8
    1f56:	18fa      	adds	r2, r7, r3
    1f58:	4b0e      	ldr	r3, [pc, #56]	; (1f94 <_sercom_get_interrupt_vector+0x48>)
    1f5a:	1c11      	adds	r1, r2, #0
    1f5c:	1c1a      	adds	r2, r3, #0
    1f5e:	2306      	movs	r3, #6
    1f60:	1c08      	adds	r0, r1, #0
    1f62:	1c11      	adds	r1, r2, #0
    1f64:	1c1a      	adds	r2, r3, #0
    1f66:	4b0c      	ldr	r3, [pc, #48]	; (1f98 <_sercom_get_interrupt_vector+0x4c>)
    1f68:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1f6a:	230f      	movs	r3, #15
    1f6c:	18fc      	adds	r4, r7, r3
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	1c18      	adds	r0, r3, #0
    1f72:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <_sercom_get_interrupt_vector+0x50>)
    1f74:	4798      	blx	r3
    1f76:	1c03      	adds	r3, r0, #0
    1f78:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1f7a:	230f      	movs	r3, #15
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	2208      	movs	r2, #8
    1f82:	18ba      	adds	r2, r7, r2
    1f84:	5cd3      	ldrb	r3, [r2, r3]
    1f86:	b2db      	uxtb	r3, r3
    1f88:	b25b      	sxtb	r3, r3
}
    1f8a:	1c18      	adds	r0, r3, #0
    1f8c:	46bd      	mov	sp, r7
    1f8e:	b005      	add	sp, #20
    1f90:	bd90      	pop	{r4, r7, pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	00004868 	.word	0x00004868
    1f98:	000047fd 	.word	0x000047fd
    1f9c:	00001e81 	.word	0x00001e81

00001fa0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	4b02      	ldr	r3, [pc, #8]	; (1fb0 <SERCOM0_Handler+0x10>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	2000      	movs	r0, #0
    1faa:	4798      	blx	r3
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	20000024 	.word	0x20000024

00001fb4 <SERCOM1_Handler>:
    1fb4:	b580      	push	{r7, lr}
    1fb6:	af00      	add	r7, sp, #0
    1fb8:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <SERCOM1_Handler+0x10>)
    1fba:	685b      	ldr	r3, [r3, #4]
    1fbc:	2001      	movs	r0, #1
    1fbe:	4798      	blx	r3
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bd80      	pop	{r7, pc}
    1fc4:	20000024 	.word	0x20000024

00001fc8 <SERCOM2_Handler>:
    1fc8:	b580      	push	{r7, lr}
    1fca:	af00      	add	r7, sp, #0
    1fcc:	4b02      	ldr	r3, [pc, #8]	; (1fd8 <SERCOM2_Handler+0x10>)
    1fce:	689b      	ldr	r3, [r3, #8]
    1fd0:	2002      	movs	r0, #2
    1fd2:	4798      	blx	r3
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bd80      	pop	{r7, pc}
    1fd8:	20000024 	.word	0x20000024

00001fdc <SERCOM3_Handler>:
    1fdc:	b580      	push	{r7, lr}
    1fde:	af00      	add	r7, sp, #0
    1fe0:	4b02      	ldr	r3, [pc, #8]	; (1fec <SERCOM3_Handler+0x10>)
    1fe2:	68db      	ldr	r3, [r3, #12]
    1fe4:	2003      	movs	r0, #3
    1fe6:	4798      	blx	r3
    1fe8:	46bd      	mov	sp, r7
    1fea:	bd80      	pop	{r7, pc}
    1fec:	20000024 	.word	0x20000024

00001ff0 <SERCOM4_Handler>:
    1ff0:	b580      	push	{r7, lr}
    1ff2:	af00      	add	r7, sp, #0
    1ff4:	4b02      	ldr	r3, [pc, #8]	; (2000 <STACK_SIZE>)
    1ff6:	691b      	ldr	r3, [r3, #16]
    1ff8:	2004      	movs	r0, #4
    1ffa:	4798      	blx	r3
    1ffc:	46bd      	mov	sp, r7
    1ffe:	bd80      	pop	{r7, pc}
    2000:	20000024 	.word	0x20000024

00002004 <SERCOM5_Handler>:
    2004:	b580      	push	{r7, lr}
    2006:	af00      	add	r7, sp, #0
    2008:	4b02      	ldr	r3, [pc, #8]	; (2014 <SERCOM5_Handler+0x10>)
    200a:	695b      	ldr	r3, [r3, #20]
    200c:	2005      	movs	r0, #5
    200e:	4798      	blx	r3
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}
    2014:	20000024 	.word	0x20000024

00002018 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2018:	b580      	push	{r7, lr}
    201a:	b082      	sub	sp, #8
    201c:	af00      	add	r7, sp, #0
    201e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	2280      	movs	r2, #128	; 0x80
    2024:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	2200      	movs	r2, #0
    202a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2201      	movs	r2, #1
    2030:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	2200      	movs	r2, #0
    2036:	70da      	strb	r2, [r3, #3]
}
    2038:	46bd      	mov	sp, r7
    203a:	b002      	add	sp, #8
    203c:	bd80      	pop	{r7, pc}
    203e:	46c0      	nop			; (mov r8, r8)

00002040 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2040:	b580      	push	{r7, lr}
    2042:	b084      	sub	sp, #16
    2044:	af00      	add	r7, sp, #0
    2046:	1c02      	adds	r2, r0, #0
    2048:	6039      	str	r1, [r7, #0]
    204a:	1dfb      	adds	r3, r7, #7
    204c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    204e:	230c      	movs	r3, #12
    2050:	18fb      	adds	r3, r7, r3
    2052:	1c18      	adds	r0, r3, #0
    2054:	4b0f      	ldr	r3, [pc, #60]	; (2094 <port_pin_set_config+0x54>)
    2056:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2058:	230c      	movs	r3, #12
    205a:	18fb      	adds	r3, r7, r3
    205c:	2280      	movs	r2, #128	; 0x80
    205e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2060:	683b      	ldr	r3, [r7, #0]
    2062:	781a      	ldrb	r2, [r3, #0]
    2064:	230c      	movs	r3, #12
    2066:	18fb      	adds	r3, r7, r3
    2068:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    206a:	683b      	ldr	r3, [r7, #0]
    206c:	785a      	ldrb	r2, [r3, #1]
    206e:	230c      	movs	r3, #12
    2070:	18fb      	adds	r3, r7, r3
    2072:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2074:	683b      	ldr	r3, [r7, #0]
    2076:	789a      	ldrb	r2, [r3, #2]
    2078:	230c      	movs	r3, #12
    207a:	18fb      	adds	r3, r7, r3
    207c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    207e:	1dfb      	adds	r3, r7, #7
    2080:	781a      	ldrb	r2, [r3, #0]
    2082:	230c      	movs	r3, #12
    2084:	18fb      	adds	r3, r7, r3
    2086:	1c10      	adds	r0, r2, #0
    2088:	1c19      	adds	r1, r3, #0
    208a:	4b03      	ldr	r3, [pc, #12]	; (2098 <port_pin_set_config+0x58>)
    208c:	4798      	blx	r3
}
    208e:	46bd      	mov	sp, r7
    2090:	b004      	add	sp, #16
    2092:	bd80      	pop	{r7, pc}
    2094:	00002019 	.word	0x00002019
    2098:	00002d3d 	.word	0x00002d3d

0000209c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    209c:	b580      	push	{r7, lr}
    209e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    20a0:	46bd      	mov	sp, r7
    20a2:	bd80      	pop	{r7, pc}

000020a4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	b082      	sub	sp, #8
    20a8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    20aa:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <cpu_irq_enter_critical+0x44>)
    20ac:	681b      	ldr	r3, [r3, #0]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d112      	bne.n	20d8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    20b2:	f3ef 8310 	mrs	r3, PRIMASK
    20b6:	607b      	str	r3, [r7, #4]
  return(result);
    20b8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    20ba:	2b00      	cmp	r3, #0
    20bc:	d109      	bne.n	20d2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    20be:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    20c0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <cpu_irq_enter_critical+0x48>)
    20c6:	2200      	movs	r2, #0
    20c8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    20ca:	4b09      	ldr	r3, [pc, #36]	; (20f0 <cpu_irq_enter_critical+0x4c>)
    20cc:	2201      	movs	r2, #1
    20ce:	701a      	strb	r2, [r3, #0]
    20d0:	e002      	b.n	20d8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    20d2:	4b07      	ldr	r3, [pc, #28]	; (20f0 <cpu_irq_enter_critical+0x4c>)
    20d4:	2200      	movs	r2, #0
    20d6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    20d8:	4b03      	ldr	r3, [pc, #12]	; (20e8 <cpu_irq_enter_critical+0x44>)
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	1c5a      	adds	r2, r3, #1
    20de:	4b02      	ldr	r3, [pc, #8]	; (20e8 <cpu_irq_enter_critical+0x44>)
    20e0:	601a      	str	r2, [r3, #0]
}
    20e2:	46bd      	mov	sp, r7
    20e4:	b002      	add	sp, #8
    20e6:	bd80      	pop	{r7, pc}
    20e8:	2000003c 	.word	0x2000003c
    20ec:	20000000 	.word	0x20000000
    20f0:	20000040 	.word	0x20000040

000020f4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    20f4:	b580      	push	{r7, lr}
    20f6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    20f8:	4b0a      	ldr	r3, [pc, #40]	; (2124 <cpu_irq_leave_critical+0x30>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	1e5a      	subs	r2, r3, #1
    20fe:	4b09      	ldr	r3, [pc, #36]	; (2124 <cpu_irq_leave_critical+0x30>)
    2100:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2102:	4b08      	ldr	r3, [pc, #32]	; (2124 <cpu_irq_leave_critical+0x30>)
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d10a      	bne.n	2120 <cpu_irq_leave_critical+0x2c>
    210a:	4b07      	ldr	r3, [pc, #28]	; (2128 <cpu_irq_leave_critical+0x34>)
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	b2db      	uxtb	r3, r3
    2110:	2b00      	cmp	r3, #0
    2112:	d005      	beq.n	2120 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2114:	4b05      	ldr	r3, [pc, #20]	; (212c <cpu_irq_leave_critical+0x38>)
    2116:	2201      	movs	r2, #1
    2118:	701a      	strb	r2, [r3, #0]
    211a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    211e:	b662      	cpsie	i
	}
}
    2120:	46bd      	mov	sp, r7
    2122:	bd80      	pop	{r7, pc}
    2124:	2000003c 	.word	0x2000003c
    2128:	20000040 	.word	0x20000040
    212c:	20000000 	.word	0x20000000

00002130 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2138:	687b      	ldr	r3, [r7, #4]
    213a:	2201      	movs	r2, #1
    213c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	2200      	movs	r2, #0
    2142:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	2206      	movs	r2, #6
    2148:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	2200      	movs	r2, #0
    214e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	2200      	movs	r2, #0
    2154:	725a      	strb	r2, [r3, #9]
}
    2156:	46bd      	mov	sp, r7
    2158:	b002      	add	sp, #8
    215a:	bd80      	pop	{r7, pc}

0000215c <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	2201      	movs	r2, #1
    2168:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	2201      	movs	r2, #1
    216e:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	2200      	movs	r2, #0
    2174:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	2201      	movs	r2, #1
    217a:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	2207      	movs	r2, #7
    2180:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	2200      	movs	r2, #0
    2186:	715a      	strb	r2, [r3, #5]
}
    2188:	46bd      	mov	sp, r7
    218a:	b002      	add	sp, #8
    218c:	bd80      	pop	{r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)

00002190 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    2190:	b580      	push	{r7, lr}
    2192:	b082      	sub	sp, #8
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	2203      	movs	r2, #3
    219c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	2200      	movs	r2, #0
    21a2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	2201      	movs	r2, #1
    21a8:	709a      	strb	r2, [r3, #2]
}
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	1c02      	adds	r2, r0, #0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    21bc:	4a03      	ldr	r2, [pc, #12]	; (21cc <system_cpu_clock_set_divider+0x1c>)
    21be:	1dfb      	adds	r3, r7, #7
    21c0:	781b      	ldrb	r3, [r3, #0]
    21c2:	7213      	strb	r3, [r2, #8]
}
    21c4:	46bd      	mov	sp, r7
    21c6:	b002      	add	sp, #8
    21c8:	bd80      	pop	{r7, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	40000400 	.word	0x40000400

000021d0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b082      	sub	sp, #8
    21d4:	af00      	add	r7, sp, #0
    21d6:	1c02      	adds	r2, r0, #0
    21d8:	1dfb      	adds	r3, r7, #7
    21da:	701a      	strb	r2, [r3, #0]
    21dc:	1dbb      	adds	r3, r7, #6
    21de:	1c0a      	adds	r2, r1, #0
    21e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    21e2:	1dfb      	adds	r3, r7, #7
    21e4:	781b      	ldrb	r3, [r3, #0]
    21e6:	2b01      	cmp	r3, #1
    21e8:	d008      	beq.n	21fc <system_apb_clock_set_divider+0x2c>
    21ea:	2b02      	cmp	r3, #2
    21ec:	d00b      	beq.n	2206 <system_apb_clock_set_divider+0x36>
    21ee:	2b00      	cmp	r3, #0
    21f0:	d10e      	bne.n	2210 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    21f2:	4a0b      	ldr	r2, [pc, #44]	; (2220 <system_apb_clock_set_divider+0x50>)
    21f4:	1dbb      	adds	r3, r7, #6
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	7253      	strb	r3, [r2, #9]
			break;
    21fa:	e00b      	b.n	2214 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    21fc:	4a08      	ldr	r2, [pc, #32]	; (2220 <system_apb_clock_set_divider+0x50>)
    21fe:	1dbb      	adds	r3, r7, #6
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	7293      	strb	r3, [r2, #10]
			break;
    2204:	e006      	b.n	2214 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2206:	4a06      	ldr	r2, [pc, #24]	; (2220 <system_apb_clock_set_divider+0x50>)
    2208:	1dbb      	adds	r3, r7, #6
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	72d3      	strb	r3, [r2, #11]
			break;
    220e:	e001      	b.n	2214 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2210:	2317      	movs	r3, #23
    2212:	e000      	b.n	2216 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2214:	2300      	movs	r3, #0
}
    2216:	1c18      	adds	r0, r3, #0
    2218:	46bd      	mov	sp, r7
    221a:	b002      	add	sp, #8
    221c:	bd80      	pop	{r7, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	40000400 	.word	0x40000400

00002224 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2224:	b580      	push	{r7, lr}
    2226:	b082      	sub	sp, #8
    2228:	af00      	add	r7, sp, #0
    222a:	1c02      	adds	r2, r0, #0
    222c:	1dfb      	adds	r3, r7, #7
    222e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2230:	4b08      	ldr	r3, [pc, #32]	; (2254 <system_flash_set_waitstates+0x30>)
    2232:	1dfa      	adds	r2, r7, #7
    2234:	7812      	ldrb	r2, [r2, #0]
    2236:	210f      	movs	r1, #15
    2238:	400a      	ands	r2, r1
    223a:	b2d2      	uxtb	r2, r2
    223c:	210f      	movs	r1, #15
    223e:	400a      	ands	r2, r1
    2240:	0052      	lsls	r2, r2, #1
    2242:	6859      	ldr	r1, [r3, #4]
    2244:	201e      	movs	r0, #30
    2246:	4381      	bics	r1, r0
    2248:	430a      	orrs	r2, r1
    224a:	605a      	str	r2, [r3, #4]
}
    224c:	46bd      	mov	sp, r7
    224e:	b002      	add	sp, #8
    2250:	bd80      	pop	{r7, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	41004000 	.word	0x41004000

00002258 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2258:	b580      	push	{r7, lr}
    225a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    225c:	46c0      	nop			; (mov r8, r8)
    225e:	4b03      	ldr	r3, [pc, #12]	; (226c <_system_dfll_wait_for_sync+0x14>)
    2260:	68db      	ldr	r3, [r3, #12]
    2262:	2210      	movs	r2, #16
    2264:	4013      	ands	r3, r2
    2266:	d0fa      	beq.n	225e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2268:	46bd      	mov	sp, r7
    226a:	bd80      	pop	{r7, pc}
    226c:	40000800 	.word	0x40000800

00002270 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2270:	b580      	push	{r7, lr}
    2272:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2274:	4b0c      	ldr	r3, [pc, #48]	; (22a8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2276:	2202      	movs	r2, #2
    2278:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    227a:	4b0c      	ldr	r3, [pc, #48]	; (22ac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    227c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    227e:	4a0a      	ldr	r2, [pc, #40]	; (22a8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2280:	4b0b      	ldr	r3, [pc, #44]	; (22b0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2282:	689b      	ldr	r3, [r3, #8]
    2284:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2286:	4a08      	ldr	r2, [pc, #32]	; (22a8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2288:	4b09      	ldr	r3, [pc, #36]	; (22b0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    228a:	685b      	ldr	r3, [r3, #4]
    228c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    228e:	4b06      	ldr	r3, [pc, #24]	; (22a8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2290:	2200      	movs	r2, #0
    2292:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2294:	4b05      	ldr	r3, [pc, #20]	; (22ac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2296:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2298:	4a03      	ldr	r2, [pc, #12]	; (22a8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    229a:	4b05      	ldr	r3, [pc, #20]	; (22b0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	b29b      	uxth	r3, r3
    22a0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    22a2:	46bd      	mov	sp, r7
    22a4:	bd80      	pop	{r7, pc}
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	40000800 	.word	0x40000800
    22ac:	00002259 	.word	0x00002259
    22b0:	20000044 	.word	0x20000044

000022b4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    22b4:	b580      	push	{r7, lr}
    22b6:	b082      	sub	sp, #8
    22b8:	af00      	add	r7, sp, #0
    22ba:	1c02      	adds	r2, r0, #0
    22bc:	1dfb      	adds	r3, r7, #7
    22be:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    22c0:	1dfb      	adds	r3, r7, #7
    22c2:	781b      	ldrb	r3, [r3, #0]
    22c4:	2b08      	cmp	r3, #8
    22c6:	d842      	bhi.n	234e <system_clock_source_get_hz+0x9a>
    22c8:	009a      	lsls	r2, r3, #2
    22ca:	4b23      	ldr	r3, [pc, #140]	; (2358 <system_clock_source_get_hz+0xa4>)
    22cc:	18d3      	adds	r3, r2, r3
    22ce:	681b      	ldr	r3, [r3, #0]
    22d0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    22d2:	4b22      	ldr	r3, [pc, #136]	; (235c <system_clock_source_get_hz+0xa8>)
    22d4:	691b      	ldr	r3, [r3, #16]
    22d6:	e03b      	b.n	2350 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    22d8:	4b21      	ldr	r3, [pc, #132]	; (2360 <system_clock_source_get_hz+0xac>)
    22da:	6a1b      	ldr	r3, [r3, #32]
    22dc:	0a1b      	lsrs	r3, r3, #8
    22de:	1c1a      	adds	r2, r3, #0
    22e0:	2303      	movs	r3, #3
    22e2:	4013      	ands	r3, r2
    22e4:	b2db      	uxtb	r3, r3
    22e6:	1c1a      	adds	r2, r3, #0
    22e8:	4b1e      	ldr	r3, [pc, #120]	; (2364 <system_clock_source_get_hz+0xb0>)
    22ea:	40d3      	lsrs	r3, r2
    22ec:	e030      	b.n	2350 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    22ee:	2380      	movs	r3, #128	; 0x80
    22f0:	021b      	lsls	r3, r3, #8
    22f2:	e02d      	b.n	2350 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    22f4:	2380      	movs	r3, #128	; 0x80
    22f6:	021b      	lsls	r3, r3, #8
    22f8:	e02a      	b.n	2350 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    22fa:	4b18      	ldr	r3, [pc, #96]	; (235c <system_clock_source_get_hz+0xa8>)
    22fc:	695b      	ldr	r3, [r3, #20]
    22fe:	e027      	b.n	2350 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2300:	4b16      	ldr	r3, [pc, #88]	; (235c <system_clock_source_get_hz+0xa8>)
    2302:	681b      	ldr	r3, [r3, #0]
    2304:	2202      	movs	r2, #2
    2306:	4013      	ands	r3, r2
    2308:	d101      	bne.n	230e <system_clock_source_get_hz+0x5a>
			return 0;
    230a:	2300      	movs	r3, #0
    230c:	e020      	b.n	2350 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    230e:	4b16      	ldr	r3, [pc, #88]	; (2368 <system_clock_source_get_hz+0xb4>)
    2310:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2312:	4b12      	ldr	r3, [pc, #72]	; (235c <system_clock_source_get_hz+0xa8>)
    2314:	681b      	ldr	r3, [r3, #0]
    2316:	2204      	movs	r2, #4
    2318:	4013      	ands	r3, r2
    231a:	d009      	beq.n	2330 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    231c:	2000      	movs	r0, #0
    231e:	4b13      	ldr	r3, [pc, #76]	; (236c <system_clock_source_get_hz+0xb8>)
    2320:	4798      	blx	r3
    2322:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    2324:	4b0d      	ldr	r3, [pc, #52]	; (235c <system_clock_source_get_hz+0xa8>)
    2326:	689b      	ldr	r3, [r3, #8]
    2328:	041b      	lsls	r3, r3, #16
    232a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    232c:	4353      	muls	r3, r2
    232e:	e00f      	b.n	2350 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2330:	4b0f      	ldr	r3, [pc, #60]	; (2370 <system_clock_source_get_hz+0xbc>)
    2332:	e00d      	b.n	2350 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2334:	4a0a      	ldr	r2, [pc, #40]	; (2360 <system_clock_source_get_hz+0xac>)
    2336:	2350      	movs	r3, #80	; 0x50
    2338:	5cd3      	ldrb	r3, [r2, r3]
    233a:	b2db      	uxtb	r3, r3
    233c:	1c1a      	adds	r2, r3, #0
    233e:	2304      	movs	r3, #4
    2340:	4013      	ands	r3, r2
    2342:	d101      	bne.n	2348 <system_clock_source_get_hz+0x94>
			return 0;
    2344:	2300      	movs	r3, #0
    2346:	e003      	b.n	2350 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    2348:	4b04      	ldr	r3, [pc, #16]	; (235c <system_clock_source_get_hz+0xa8>)
    234a:	68db      	ldr	r3, [r3, #12]
    234c:	e000      	b.n	2350 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    234e:	2300      	movs	r3, #0
	}
}
    2350:	1c18      	adds	r0, r3, #0
    2352:	46bd      	mov	sp, r7
    2354:	b002      	add	sp, #8
    2356:	bd80      	pop	{r7, pc}
    2358:	00004870 	.word	0x00004870
    235c:	20000044 	.word	0x20000044
    2360:	40000800 	.word	0x40000800
    2364:	007a1200 	.word	0x007a1200
    2368:	00002259 	.word	0x00002259
    236c:	00002b75 	.word	0x00002b75
    2370:	02dc6c00 	.word	0x02dc6c00

00002374 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2374:	b580      	push	{r7, lr}
    2376:	b084      	sub	sp, #16
    2378:	af00      	add	r7, sp, #0
    237a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    237c:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <system_clock_source_osc8m_set_config+0x74>)
    237e:	6a1b      	ldr	r3, [r3, #32]
    2380:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	781b      	ldrb	r3, [r3, #0]
    2386:	1c1a      	adds	r2, r3, #0
    2388:	2303      	movs	r3, #3
    238a:	4013      	ands	r3, r2
    238c:	b2da      	uxtb	r2, r3
    238e:	230d      	movs	r3, #13
    2390:	18fb      	adds	r3, r7, r3
    2392:	2103      	movs	r1, #3
    2394:	400a      	ands	r2, r1
    2396:	1c10      	adds	r0, r2, #0
    2398:	781a      	ldrb	r2, [r3, #0]
    239a:	2103      	movs	r1, #3
    239c:	438a      	bics	r2, r1
    239e:	1c11      	adds	r1, r2, #0
    23a0:	1c02      	adds	r2, r0, #0
    23a2:	430a      	orrs	r2, r1
    23a4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	789a      	ldrb	r2, [r3, #2]
    23aa:	230c      	movs	r3, #12
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	01d0      	lsls	r0, r2, #7
    23b0:	781a      	ldrb	r2, [r3, #0]
    23b2:	217f      	movs	r1, #127	; 0x7f
    23b4:	400a      	ands	r2, r1
    23b6:	1c11      	adds	r1, r2, #0
    23b8:	1c02      	adds	r2, r0, #0
    23ba:	430a      	orrs	r2, r1
    23bc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    23be:	687b      	ldr	r3, [r7, #4]
    23c0:	785a      	ldrb	r2, [r3, #1]
    23c2:	230c      	movs	r3, #12
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	2101      	movs	r1, #1
    23c8:	400a      	ands	r2, r1
    23ca:	0190      	lsls	r0, r2, #6
    23cc:	781a      	ldrb	r2, [r3, #0]
    23ce:	2140      	movs	r1, #64	; 0x40
    23d0:	438a      	bics	r2, r1
    23d2:	1c11      	adds	r1, r2, #0
    23d4:	1c02      	adds	r2, r0, #0
    23d6:	430a      	orrs	r2, r1
    23d8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    23da:	4b03      	ldr	r3, [pc, #12]	; (23e8 <system_clock_source_osc8m_set_config+0x74>)
    23dc:	68fa      	ldr	r2, [r7, #12]
    23de:	621a      	str	r2, [r3, #32]
}
    23e0:	46bd      	mov	sp, r7
    23e2:	b004      	add	sp, #16
    23e4:	bd80      	pop	{r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	40000800 	.word	0x40000800

000023ec <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b084      	sub	sp, #16
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    23f4:	4b2f      	ldr	r3, [pc, #188]	; (24b4 <system_clock_source_osc32k_set_config+0xc8>)
    23f6:	699b      	ldr	r3, [r3, #24]
    23f8:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	785a      	ldrb	r2, [r3, #1]
    23fe:	230c      	movs	r3, #12
    2400:	18fb      	adds	r3, r7, r3
    2402:	2101      	movs	r1, #1
    2404:	400a      	ands	r2, r1
    2406:	00d0      	lsls	r0, r2, #3
    2408:	781a      	ldrb	r2, [r3, #0]
    240a:	2108      	movs	r1, #8
    240c:	438a      	bics	r2, r1
    240e:	1c11      	adds	r1, r2, #0
    2410:	1c02      	adds	r2, r0, #0
    2412:	430a      	orrs	r2, r1
    2414:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	789a      	ldrb	r2, [r3, #2]
    241a:	230c      	movs	r3, #12
    241c:	18fb      	adds	r3, r7, r3
    241e:	2101      	movs	r1, #1
    2420:	400a      	ands	r2, r1
    2422:	0090      	lsls	r0, r2, #2
    2424:	781a      	ldrb	r2, [r3, #0]
    2426:	2104      	movs	r1, #4
    2428:	438a      	bics	r2, r1
    242a:	1c11      	adds	r1, r2, #0
    242c:	1c02      	adds	r2, r0, #0
    242e:	430a      	orrs	r2, r1
    2430:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	1c1a      	adds	r2, r3, #0
    2438:	2307      	movs	r3, #7
    243a:	4013      	ands	r3, r2
    243c:	b2da      	uxtb	r2, r3
    243e:	230d      	movs	r3, #13
    2440:	18fb      	adds	r3, r7, r3
    2442:	2107      	movs	r1, #7
    2444:	400a      	ands	r2, r1
    2446:	1c10      	adds	r0, r2, #0
    2448:	781a      	ldrb	r2, [r3, #0]
    244a:	2107      	movs	r1, #7
    244c:	438a      	bics	r2, r1
    244e:	1c11      	adds	r1, r2, #0
    2450:	1c02      	adds	r2, r0, #0
    2452:	430a      	orrs	r2, r1
    2454:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	791a      	ldrb	r2, [r3, #4]
    245a:	230c      	movs	r3, #12
    245c:	18fb      	adds	r3, r7, r3
    245e:	01d0      	lsls	r0, r2, #7
    2460:	781a      	ldrb	r2, [r3, #0]
    2462:	217f      	movs	r1, #127	; 0x7f
    2464:	400a      	ands	r2, r1
    2466:	1c11      	adds	r1, r2, #0
    2468:	1c02      	adds	r2, r0, #0
    246a:	430a      	orrs	r2, r1
    246c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	78da      	ldrb	r2, [r3, #3]
    2472:	230c      	movs	r3, #12
    2474:	18fb      	adds	r3, r7, r3
    2476:	2101      	movs	r1, #1
    2478:	400a      	ands	r2, r1
    247a:	0190      	lsls	r0, r2, #6
    247c:	781a      	ldrb	r2, [r3, #0]
    247e:	2140      	movs	r1, #64	; 0x40
    2480:	438a      	bics	r2, r1
    2482:	1c11      	adds	r1, r2, #0
    2484:	1c02      	adds	r2, r0, #0
    2486:	430a      	orrs	r2, r1
    2488:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	795a      	ldrb	r2, [r3, #5]
    248e:	230d      	movs	r3, #13
    2490:	18fb      	adds	r3, r7, r3
    2492:	2101      	movs	r1, #1
    2494:	400a      	ands	r2, r1
    2496:	0110      	lsls	r0, r2, #4
    2498:	781a      	ldrb	r2, [r3, #0]
    249a:	2110      	movs	r1, #16
    249c:	438a      	bics	r2, r1
    249e:	1c11      	adds	r1, r2, #0
    24a0:	1c02      	adds	r2, r0, #0
    24a2:	430a      	orrs	r2, r1
    24a4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    24a6:	4b03      	ldr	r3, [pc, #12]	; (24b4 <system_clock_source_osc32k_set_config+0xc8>)
    24a8:	68fa      	ldr	r2, [r7, #12]
    24aa:	619a      	str	r2, [r3, #24]
}
    24ac:	46bd      	mov	sp, r7
    24ae:	b004      	add	sp, #16
    24b0:	bd80      	pop	{r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	40000800 	.word	0x40000800

000024b8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b082      	sub	sp, #8
    24bc:	af00      	add	r7, sp, #0
    24be:	1c02      	adds	r2, r0, #0
    24c0:	1dfb      	adds	r3, r7, #7
    24c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    24c4:	1dfb      	adds	r3, r7, #7
    24c6:	781b      	ldrb	r3, [r3, #0]
    24c8:	2b08      	cmp	r3, #8
    24ca:	d83b      	bhi.n	2544 <system_clock_source_enable+0x8c>
    24cc:	009a      	lsls	r2, r3, #2
    24ce:	4b21      	ldr	r3, [pc, #132]	; (2554 <system_clock_source_enable+0x9c>)
    24d0:	18d3      	adds	r3, r2, r3
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    24d6:	4b20      	ldr	r3, [pc, #128]	; (2558 <system_clock_source_enable+0xa0>)
    24d8:	4a1f      	ldr	r2, [pc, #124]	; (2558 <system_clock_source_enable+0xa0>)
    24da:	6a12      	ldr	r2, [r2, #32]
    24dc:	2102      	movs	r1, #2
    24de:	430a      	orrs	r2, r1
    24e0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    24e2:	2300      	movs	r3, #0
    24e4:	e031      	b.n	254a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    24e6:	4b1c      	ldr	r3, [pc, #112]	; (2558 <system_clock_source_enable+0xa0>)
    24e8:	4a1b      	ldr	r2, [pc, #108]	; (2558 <system_clock_source_enable+0xa0>)
    24ea:	6992      	ldr	r2, [r2, #24]
    24ec:	2102      	movs	r1, #2
    24ee:	430a      	orrs	r2, r1
    24f0:	619a      	str	r2, [r3, #24]
		break;
    24f2:	e029      	b.n	2548 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    24f4:	4a18      	ldr	r2, [pc, #96]	; (2558 <system_clock_source_enable+0xa0>)
    24f6:	4b18      	ldr	r3, [pc, #96]	; (2558 <system_clock_source_enable+0xa0>)
    24f8:	8a1b      	ldrh	r3, [r3, #16]
    24fa:	b29b      	uxth	r3, r3
    24fc:	2102      	movs	r1, #2
    24fe:	430b      	orrs	r3, r1
    2500:	b29b      	uxth	r3, r3
    2502:	8213      	strh	r3, [r2, #16]
		break;
    2504:	e020      	b.n	2548 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2506:	4a14      	ldr	r2, [pc, #80]	; (2558 <system_clock_source_enable+0xa0>)
    2508:	4b13      	ldr	r3, [pc, #76]	; (2558 <system_clock_source_enable+0xa0>)
    250a:	8a9b      	ldrh	r3, [r3, #20]
    250c:	b29b      	uxth	r3, r3
    250e:	2102      	movs	r1, #2
    2510:	430b      	orrs	r3, r1
    2512:	b29b      	uxth	r3, r3
    2514:	8293      	strh	r3, [r2, #20]
		break;
    2516:	e017      	b.n	2548 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2518:	4b10      	ldr	r3, [pc, #64]	; (255c <system_clock_source_enable+0xa4>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	2202      	movs	r2, #2
    251e:	431a      	orrs	r2, r3
    2520:	4b0e      	ldr	r3, [pc, #56]	; (255c <system_clock_source_enable+0xa4>)
    2522:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2524:	4b0e      	ldr	r3, [pc, #56]	; (2560 <system_clock_source_enable+0xa8>)
    2526:	4798      	blx	r3
		break;
    2528:	e00e      	b.n	2548 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    252a:	4a0b      	ldr	r2, [pc, #44]	; (2558 <system_clock_source_enable+0xa0>)
    252c:	490a      	ldr	r1, [pc, #40]	; (2558 <system_clock_source_enable+0xa0>)
    252e:	2344      	movs	r3, #68	; 0x44
    2530:	5ccb      	ldrb	r3, [r1, r3]
    2532:	b2db      	uxtb	r3, r3
    2534:	2102      	movs	r1, #2
    2536:	430b      	orrs	r3, r1
    2538:	b2d9      	uxtb	r1, r3
    253a:	2344      	movs	r3, #68	; 0x44
    253c:	54d1      	strb	r1, [r2, r3]
		break;
    253e:	e003      	b.n	2548 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2540:	2300      	movs	r3, #0
    2542:	e002      	b.n	254a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2544:	2317      	movs	r3, #23
    2546:	e000      	b.n	254a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    2548:	2300      	movs	r3, #0
}
    254a:	1c18      	adds	r0, r3, #0
    254c:	46bd      	mov	sp, r7
    254e:	b002      	add	sp, #8
    2550:	bd80      	pop	{r7, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	00004894 	.word	0x00004894
    2558:	40000800 	.word	0x40000800
    255c:	20000044 	.word	0x20000044
    2560:	00002271 	.word	0x00002271

00002564 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2564:	b580      	push	{r7, lr}
    2566:	b082      	sub	sp, #8
    2568:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    256a:	1c3b      	adds	r3, r7, #0
    256c:	2201      	movs	r2, #1
    256e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2570:	2300      	movs	r3, #0
    2572:	607b      	str	r3, [r7, #4]
    2574:	e009      	b.n	258a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	b2da      	uxtb	r2, r3
    257a:	1c3b      	adds	r3, r7, #0
    257c:	1c10      	adds	r0, r2, #0
    257e:	1c19      	adds	r1, r3, #0
    2580:	4b05      	ldr	r3, [pc, #20]	; (2598 <_switch_peripheral_gclk+0x34>)
    2582:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	3301      	adds	r3, #1
    2588:	607b      	str	r3, [r7, #4]
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	2b24      	cmp	r3, #36	; 0x24
    258e:	d9f2      	bls.n	2576 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    2590:	46bd      	mov	sp, r7
    2592:	b002      	add	sp, #8
    2594:	bd80      	pop	{r7, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00002a51 	.word	0x00002a51

0000259c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    259c:	b580      	push	{r7, lr}
    259e:	b0a2      	sub	sp, #136	; 0x88
    25a0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    25a2:	4b4f      	ldr	r3, [pc, #316]	; (26e0 <system_clock_init+0x144>)
    25a4:	22c2      	movs	r2, #194	; 0xc2
    25a6:	00d2      	lsls	r2, r2, #3
    25a8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    25aa:	2000      	movs	r0, #0
    25ac:	4b4d      	ldr	r3, [pc, #308]	; (26e4 <system_clock_init+0x148>)
    25ae:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    25b0:	4b4d      	ldr	r3, [pc, #308]	; (26e8 <system_clock_init+0x14c>)
    25b2:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    25b4:	4b4a      	ldr	r3, [pc, #296]	; (26e0 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    25b6:	4a4d      	ldr	r2, [pc, #308]	; (26ec <system_clock_init+0x150>)
    25b8:	6812      	ldr	r2, [r2, #0]
    25ba:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    25bc:	b2d2      	uxtb	r2, r2
    25be:	1c11      	adds	r1, r2, #0
    25c0:	227f      	movs	r2, #127	; 0x7f
    25c2:	400a      	ands	r2, r1
    25c4:	b2d2      	uxtb	r2, r2
    25c6:	217f      	movs	r1, #127	; 0x7f
    25c8:	400a      	ands	r2, r1
    25ca:	0412      	lsls	r2, r2, #16
    25cc:	6999      	ldr	r1, [r3, #24]
    25ce:	4848      	ldr	r0, [pc, #288]	; (26f0 <system_clock_init+0x154>)
    25d0:	4001      	ands	r1, r0
    25d2:	430a      	orrs	r2, r1
    25d4:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	18fb      	adds	r3, r7, r3
    25da:	1c18      	adds	r0, r3, #0
    25dc:	4b45      	ldr	r3, [pc, #276]	; (26f4 <system_clock_init+0x158>)
    25de:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    25e0:	2380      	movs	r3, #128	; 0x80
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	2207      	movs	r2, #7
    25e6:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    25e8:	2380      	movs	r3, #128	; 0x80
    25ea:	18fb      	adds	r3, r7, r3
    25ec:	2201      	movs	r2, #1
    25ee:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    25f0:	2380      	movs	r3, #128	; 0x80
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	2201      	movs	r2, #1
    25f6:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    25f8:	2380      	movs	r3, #128	; 0x80
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	2201      	movs	r2, #1
    25fe:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2600:	2380      	movs	r3, #128	; 0x80
    2602:	18fb      	adds	r3, r7, r3
    2604:	2200      	movs	r2, #0
    2606:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2608:	2380      	movs	r3, #128	; 0x80
    260a:	18fb      	adds	r3, r7, r3
    260c:	1c18      	adds	r0, r3, #0
    260e:	4b3a      	ldr	r3, [pc, #232]	; (26f8 <system_clock_init+0x15c>)
    2610:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2612:	2004      	movs	r0, #4
    2614:	4b39      	ldr	r3, [pc, #228]	; (26fc <system_clock_init+0x160>)
    2616:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2618:	237c      	movs	r3, #124	; 0x7c
    261a:	18fb      	adds	r3, r7, r3
    261c:	1c18      	adds	r0, r3, #0
    261e:	4b38      	ldr	r3, [pc, #224]	; (2700 <system_clock_init+0x164>)
    2620:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2622:	237c      	movs	r3, #124	; 0x7c
    2624:	18fb      	adds	r3, r7, r3
    2626:	2200      	movs	r2, #0
    2628:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    262a:	237c      	movs	r3, #124	; 0x7c
    262c:	18fb      	adds	r3, r7, r3
    262e:	2201      	movs	r2, #1
    2630:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2632:	237c      	movs	r3, #124	; 0x7c
    2634:	18fb      	adds	r3, r7, r3
    2636:	2200      	movs	r2, #0
    2638:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    263a:	237c      	movs	r3, #124	; 0x7c
    263c:	18fb      	adds	r3, r7, r3
    263e:	1c18      	adds	r0, r3, #0
    2640:	4b30      	ldr	r3, [pc, #192]	; (2704 <system_clock_init+0x168>)
    2642:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2644:	2006      	movs	r0, #6
    2646:	4b2d      	ldr	r3, [pc, #180]	; (26fc <system_clock_init+0x160>)
    2648:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    264a:	4b2f      	ldr	r3, [pc, #188]	; (2708 <system_clock_init+0x16c>)
    264c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    264e:	2358      	movs	r3, #88	; 0x58
    2650:	18fb      	adds	r3, r7, r3
    2652:	1c18      	adds	r0, r3, #0
    2654:	4b2d      	ldr	r3, [pc, #180]	; (270c <system_clock_init+0x170>)
    2656:	4798      	blx	r3
    2658:	2358      	movs	r3, #88	; 0x58
    265a:	18fb      	adds	r3, r7, r3
    265c:	2204      	movs	r2, #4
    265e:	701a      	strb	r2, [r3, #0]
    2660:	2358      	movs	r3, #88	; 0x58
    2662:	18fb      	adds	r3, r7, r3
    2664:	2220      	movs	r2, #32
    2666:	605a      	str	r2, [r3, #4]
    2668:	2358      	movs	r3, #88	; 0x58
    266a:	18fb      	adds	r3, r7, r3
    266c:	2200      	movs	r2, #0
    266e:	721a      	strb	r2, [r3, #8]
    2670:	2358      	movs	r3, #88	; 0x58
    2672:	18fb      	adds	r3, r7, r3
    2674:	2200      	movs	r2, #0
    2676:	725a      	strb	r2, [r3, #9]
    2678:	2358      	movs	r3, #88	; 0x58
    267a:	18fb      	adds	r3, r7, r3
    267c:	2002      	movs	r0, #2
    267e:	1c19      	adds	r1, r3, #0
    2680:	4b23      	ldr	r3, [pc, #140]	; (2710 <system_clock_init+0x174>)
    2682:	4798      	blx	r3
    2684:	2002      	movs	r0, #2
    2686:	4b23      	ldr	r3, [pc, #140]	; (2714 <system_clock_init+0x178>)
    2688:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    268a:	2000      	movs	r0, #0
    268c:	4b22      	ldr	r3, [pc, #136]	; (2718 <system_clock_init+0x17c>)
    268e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2690:	2000      	movs	r0, #0
    2692:	2100      	movs	r1, #0
    2694:	4b21      	ldr	r3, [pc, #132]	; (271c <system_clock_init+0x180>)
    2696:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2698:	2001      	movs	r0, #1
    269a:	2100      	movs	r1, #0
    269c:	4b1f      	ldr	r3, [pc, #124]	; (271c <system_clock_init+0x180>)
    269e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    26a0:	2002      	movs	r0, #2
    26a2:	2100      	movs	r1, #0
    26a4:	4b1d      	ldr	r3, [pc, #116]	; (271c <system_clock_init+0x180>)
    26a6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    26a8:	1d3b      	adds	r3, r7, #4
    26aa:	1c18      	adds	r0, r3, #0
    26ac:	4b17      	ldr	r3, [pc, #92]	; (270c <system_clock_init+0x170>)
    26ae:	4798      	blx	r3
    26b0:	1d3b      	adds	r3, r7, #4
    26b2:	2206      	movs	r2, #6
    26b4:	701a      	strb	r2, [r3, #0]
    26b6:	1d3b      	adds	r3, r7, #4
    26b8:	2201      	movs	r2, #1
    26ba:	605a      	str	r2, [r3, #4]
    26bc:	1d3b      	adds	r3, r7, #4
    26be:	2200      	movs	r2, #0
    26c0:	721a      	strb	r2, [r3, #8]
    26c2:	1d3b      	adds	r3, r7, #4
    26c4:	2200      	movs	r2, #0
    26c6:	725a      	strb	r2, [r3, #9]
    26c8:	1d3b      	adds	r3, r7, #4
    26ca:	2000      	movs	r0, #0
    26cc:	1c19      	adds	r1, r3, #0
    26ce:	4b10      	ldr	r3, [pc, #64]	; (2710 <system_clock_init+0x174>)
    26d0:	4798      	blx	r3
    26d2:	2000      	movs	r0, #0
    26d4:	4b0f      	ldr	r3, [pc, #60]	; (2714 <system_clock_init+0x178>)
    26d6:	4798      	blx	r3
#endif
}
    26d8:	46bd      	mov	sp, r7
    26da:	b022      	add	sp, #136	; 0x88
    26dc:	bd80      	pop	{r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	40000800 	.word	0x40000800
    26e4:	00002225 	.word	0x00002225
    26e8:	00002565 	.word	0x00002565
    26ec:	00806024 	.word	0x00806024
    26f0:	ff80ffff 	.word	0xff80ffff
    26f4:	0000215d 	.word	0x0000215d
    26f8:	000023ed 	.word	0x000023ed
    26fc:	000024b9 	.word	0x000024b9
    2700:	00002191 	.word	0x00002191
    2704:	00002375 	.word	0x00002375
    2708:	000027c1 	.word	0x000027c1
    270c:	00002131 	.word	0x00002131
    2710:	000027f1 	.word	0x000027f1
    2714:	00002911 	.word	0x00002911
    2718:	000021b1 	.word	0x000021b1
    271c:	000021d1 	.word	0x000021d1

00002720 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2720:	b580      	push	{r7, lr}
    2722:	b082      	sub	sp, #8
    2724:	af00      	add	r7, sp, #0
    2726:	1c02      	adds	r2, r0, #0
    2728:	6039      	str	r1, [r7, #0]
    272a:	1dfb      	adds	r3, r7, #7
    272c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    272e:	1dfb      	adds	r3, r7, #7
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	2b01      	cmp	r3, #1
    2734:	d00a      	beq.n	274c <system_apb_clock_set_mask+0x2c>
    2736:	2b02      	cmp	r3, #2
    2738:	d00f      	beq.n	275a <system_apb_clock_set_mask+0x3a>
    273a:	2b00      	cmp	r3, #0
    273c:	d114      	bne.n	2768 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    273e:	4b0e      	ldr	r3, [pc, #56]	; (2778 <system_apb_clock_set_mask+0x58>)
    2740:	4a0d      	ldr	r2, [pc, #52]	; (2778 <system_apb_clock_set_mask+0x58>)
    2742:	6991      	ldr	r1, [r2, #24]
    2744:	683a      	ldr	r2, [r7, #0]
    2746:	430a      	orrs	r2, r1
    2748:	619a      	str	r2, [r3, #24]
			break;
    274a:	e00f      	b.n	276c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    274c:	4b0a      	ldr	r3, [pc, #40]	; (2778 <system_apb_clock_set_mask+0x58>)
    274e:	4a0a      	ldr	r2, [pc, #40]	; (2778 <system_apb_clock_set_mask+0x58>)
    2750:	69d1      	ldr	r1, [r2, #28]
    2752:	683a      	ldr	r2, [r7, #0]
    2754:	430a      	orrs	r2, r1
    2756:	61da      	str	r2, [r3, #28]
			break;
    2758:	e008      	b.n	276c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    275a:	4b07      	ldr	r3, [pc, #28]	; (2778 <system_apb_clock_set_mask+0x58>)
    275c:	4a06      	ldr	r2, [pc, #24]	; (2778 <system_apb_clock_set_mask+0x58>)
    275e:	6a11      	ldr	r1, [r2, #32]
    2760:	683a      	ldr	r2, [r7, #0]
    2762:	430a      	orrs	r2, r1
    2764:	621a      	str	r2, [r3, #32]
			break;
    2766:	e001      	b.n	276c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2768:	2317      	movs	r3, #23
    276a:	e000      	b.n	276e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    276c:	2300      	movs	r3, #0
}
    276e:	1c18      	adds	r0, r3, #0
    2770:	46bd      	mov	sp, r7
    2772:	b002      	add	sp, #8
    2774:	bd80      	pop	{r7, pc}
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	40000400 	.word	0x40000400

0000277c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    277c:	b580      	push	{r7, lr}
    277e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2780:	4b01      	ldr	r3, [pc, #4]	; (2788 <system_interrupt_enter_critical_section+0xc>)
    2782:	4798      	blx	r3
}
    2784:	46bd      	mov	sp, r7
    2786:	bd80      	pop	{r7, pc}
    2788:	000020a5 	.word	0x000020a5

0000278c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    278c:	b580      	push	{r7, lr}
    278e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2790:	4b01      	ldr	r3, [pc, #4]	; (2798 <system_interrupt_leave_critical_section+0xc>)
    2792:	4798      	blx	r3
}
    2794:	46bd      	mov	sp, r7
    2796:	bd80      	pop	{r7, pc}
    2798:	000020f5 	.word	0x000020f5

0000279c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    279c:	b580      	push	{r7, lr}
    279e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <system_gclk_is_syncing+0x20>)
    27a2:	785b      	ldrb	r3, [r3, #1]
    27a4:	b2db      	uxtb	r3, r3
    27a6:	b2db      	uxtb	r3, r3
    27a8:	b25b      	sxtb	r3, r3
    27aa:	2b00      	cmp	r3, #0
    27ac:	da01      	bge.n	27b2 <system_gclk_is_syncing+0x16>
		return true;
    27ae:	2301      	movs	r3, #1
    27b0:	e000      	b.n	27b4 <system_gclk_is_syncing+0x18>
	}

	return false;
    27b2:	2300      	movs	r3, #0
}
    27b4:	1c18      	adds	r0, r3, #0
    27b6:	46bd      	mov	sp, r7
    27b8:	bd80      	pop	{r7, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	40000c00 	.word	0x40000c00

000027c0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    27c4:	2000      	movs	r0, #0
    27c6:	2108      	movs	r1, #8
    27c8:	4b07      	ldr	r3, [pc, #28]	; (27e8 <system_gclk_init+0x28>)
    27ca:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    27cc:	4b07      	ldr	r3, [pc, #28]	; (27ec <system_gclk_init+0x2c>)
    27ce:	2201      	movs	r2, #1
    27d0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	4b05      	ldr	r3, [pc, #20]	; (27ec <system_gclk_init+0x2c>)
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	b2db      	uxtb	r3, r3
    27da:	1c1a      	adds	r2, r3, #0
    27dc:	2301      	movs	r3, #1
    27de:	4013      	ands	r3, r2
    27e0:	d1f8      	bne.n	27d4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	00002721 	.word	0x00002721
    27ec:	40000c00 	.word	0x40000c00

000027f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b086      	sub	sp, #24
    27f4:	af00      	add	r7, sp, #0
    27f6:	1c02      	adds	r2, r0, #0
    27f8:	6039      	str	r1, [r7, #0]
    27fa:	1dfb      	adds	r3, r7, #7
    27fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    27fe:	1dfb      	adds	r3, r7, #7
    2800:	781b      	ldrb	r3, [r3, #0]
    2802:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2804:	1dfb      	adds	r3, r7, #7
    2806:	781b      	ldrb	r3, [r3, #0]
    2808:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    280a:	683b      	ldr	r3, [r7, #0]
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	021b      	lsls	r3, r3, #8
    2810:	1c1a      	adds	r2, r3, #0
    2812:	697b      	ldr	r3, [r7, #20]
    2814:	4313      	orrs	r3, r2
    2816:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2818:	683b      	ldr	r3, [r7, #0]
    281a:	785b      	ldrb	r3, [r3, #1]
    281c:	2b00      	cmp	r3, #0
    281e:	d004      	beq.n	282a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2820:	697b      	ldr	r3, [r7, #20]
    2822:	2280      	movs	r2, #128	; 0x80
    2824:	02d2      	lsls	r2, r2, #11
    2826:	4313      	orrs	r3, r2
    2828:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    282a:	683b      	ldr	r3, [r7, #0]
    282c:	7a5b      	ldrb	r3, [r3, #9]
    282e:	2b00      	cmp	r3, #0
    2830:	d004      	beq.n	283c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2832:	697b      	ldr	r3, [r7, #20]
    2834:	2280      	movs	r2, #128	; 0x80
    2836:	0312      	lsls	r2, r2, #12
    2838:	4313      	orrs	r3, r2
    283a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    283c:	683b      	ldr	r3, [r7, #0]
    283e:	685b      	ldr	r3, [r3, #4]
    2840:	2b01      	cmp	r3, #1
    2842:	d92c      	bls.n	289e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2844:	683b      	ldr	r3, [r7, #0]
    2846:	685a      	ldr	r2, [r3, #4]
    2848:	683b      	ldr	r3, [r7, #0]
    284a:	685b      	ldr	r3, [r3, #4]
    284c:	3b01      	subs	r3, #1
    284e:	4013      	ands	r3, r2
    2850:	d11a      	bne.n	2888 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2852:	2300      	movs	r3, #0
    2854:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2856:	2302      	movs	r3, #2
    2858:	60bb      	str	r3, [r7, #8]
    285a:	e005      	b.n	2868 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    285c:	68fb      	ldr	r3, [r7, #12]
    285e:	3301      	adds	r3, #1
    2860:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2862:	68bb      	ldr	r3, [r7, #8]
    2864:	005b      	lsls	r3, r3, #1
    2866:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2868:	683b      	ldr	r3, [r7, #0]
    286a:	685a      	ldr	r2, [r3, #4]
    286c:	68bb      	ldr	r3, [r7, #8]
    286e:	429a      	cmp	r2, r3
    2870:	d8f4      	bhi.n	285c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2872:	68fb      	ldr	r3, [r7, #12]
    2874:	021b      	lsls	r3, r3, #8
    2876:	693a      	ldr	r2, [r7, #16]
    2878:	4313      	orrs	r3, r2
    287a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    287c:	697b      	ldr	r3, [r7, #20]
    287e:	2280      	movs	r2, #128	; 0x80
    2880:	0352      	lsls	r2, r2, #13
    2882:	4313      	orrs	r3, r2
    2884:	617b      	str	r3, [r7, #20]
    2886:	e00a      	b.n	289e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2888:	683b      	ldr	r3, [r7, #0]
    288a:	685b      	ldr	r3, [r3, #4]
    288c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    288e:	693a      	ldr	r2, [r7, #16]
    2890:	4313      	orrs	r3, r2
    2892:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2894:	697b      	ldr	r3, [r7, #20]
    2896:	2280      	movs	r2, #128	; 0x80
    2898:	0292      	lsls	r2, r2, #10
    289a:	4313      	orrs	r3, r2
    289c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    289e:	683b      	ldr	r3, [r7, #0]
    28a0:	7a1b      	ldrb	r3, [r3, #8]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d004      	beq.n	28b0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    28a6:	697b      	ldr	r3, [r7, #20]
    28a8:	2280      	movs	r2, #128	; 0x80
    28aa:	0392      	lsls	r2, r2, #14
    28ac:	4313      	orrs	r3, r2
    28ae:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    28b0:	46c0      	nop			; (mov r8, r8)
    28b2:	4b12      	ldr	r3, [pc, #72]	; (28fc <system_gclk_gen_set_config+0x10c>)
    28b4:	4798      	blx	r3
    28b6:	1e03      	subs	r3, r0, #0
    28b8:	d1fb      	bne.n	28b2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    28ba:	4b11      	ldr	r3, [pc, #68]	; (2900 <system_gclk_gen_set_config+0x110>)
    28bc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    28be:	4a11      	ldr	r2, [pc, #68]	; (2904 <system_gclk_gen_set_config+0x114>)
    28c0:	1dfb      	adds	r3, r7, #7
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	4b0c      	ldr	r3, [pc, #48]	; (28fc <system_gclk_gen_set_config+0x10c>)
    28ca:	4798      	blx	r3
    28cc:	1e03      	subs	r3, r0, #0
    28ce:	d1fb      	bne.n	28c8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    28d0:	4b0d      	ldr	r3, [pc, #52]	; (2908 <system_gclk_gen_set_config+0x118>)
    28d2:	693a      	ldr	r2, [r7, #16]
    28d4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	4b08      	ldr	r3, [pc, #32]	; (28fc <system_gclk_gen_set_config+0x10c>)
    28da:	4798      	blx	r3
    28dc:	1e03      	subs	r3, r0, #0
    28de:	d1fb      	bne.n	28d8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    28e0:	4b09      	ldr	r3, [pc, #36]	; (2908 <system_gclk_gen_set_config+0x118>)
    28e2:	4a09      	ldr	r2, [pc, #36]	; (2908 <system_gclk_gen_set_config+0x118>)
    28e4:	6851      	ldr	r1, [r2, #4]
    28e6:	2280      	movs	r2, #128	; 0x80
    28e8:	0252      	lsls	r2, r2, #9
    28ea:	4011      	ands	r1, r2
    28ec:	697a      	ldr	r2, [r7, #20]
    28ee:	430a      	orrs	r2, r1
    28f0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    28f2:	4b06      	ldr	r3, [pc, #24]	; (290c <system_gclk_gen_set_config+0x11c>)
    28f4:	4798      	blx	r3
}
    28f6:	46bd      	mov	sp, r7
    28f8:	b006      	add	sp, #24
    28fa:	bd80      	pop	{r7, pc}
    28fc:	0000279d 	.word	0x0000279d
    2900:	0000277d 	.word	0x0000277d
    2904:	40000c08 	.word	0x40000c08
    2908:	40000c00 	.word	0x40000c00
    290c:	0000278d 	.word	0x0000278d

00002910 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2910:	b580      	push	{r7, lr}
    2912:	b082      	sub	sp, #8
    2914:	af00      	add	r7, sp, #0
    2916:	1c02      	adds	r2, r0, #0
    2918:	1dfb      	adds	r3, r7, #7
    291a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    291c:	46c0      	nop			; (mov r8, r8)
    291e:	4b0d      	ldr	r3, [pc, #52]	; (2954 <system_gclk_gen_enable+0x44>)
    2920:	4798      	blx	r3
    2922:	1e03      	subs	r3, r0, #0
    2924:	d1fb      	bne.n	291e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2926:	4b0c      	ldr	r3, [pc, #48]	; (2958 <system_gclk_gen_enable+0x48>)
    2928:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    292a:	4a0c      	ldr	r2, [pc, #48]	; (295c <system_gclk_gen_enable+0x4c>)
    292c:	1dfb      	adds	r3, r7, #7
    292e:	781b      	ldrb	r3, [r3, #0]
    2930:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	4b07      	ldr	r3, [pc, #28]	; (2954 <system_gclk_gen_enable+0x44>)
    2936:	4798      	blx	r3
    2938:	1e03      	subs	r3, r0, #0
    293a:	d1fb      	bne.n	2934 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    293c:	4b08      	ldr	r3, [pc, #32]	; (2960 <system_gclk_gen_enable+0x50>)
    293e:	4a08      	ldr	r2, [pc, #32]	; (2960 <system_gclk_gen_enable+0x50>)
    2940:	6852      	ldr	r2, [r2, #4]
    2942:	2180      	movs	r1, #128	; 0x80
    2944:	0249      	lsls	r1, r1, #9
    2946:	430a      	orrs	r2, r1
    2948:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    294a:	4b06      	ldr	r3, [pc, #24]	; (2964 <system_gclk_gen_enable+0x54>)
    294c:	4798      	blx	r3
}
    294e:	46bd      	mov	sp, r7
    2950:	b002      	add	sp, #8
    2952:	bd80      	pop	{r7, pc}
    2954:	0000279d 	.word	0x0000279d
    2958:	0000277d 	.word	0x0000277d
    295c:	40000c04 	.word	0x40000c04
    2960:	40000c00 	.word	0x40000c00
    2964:	0000278d 	.word	0x0000278d

00002968 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2968:	b580      	push	{r7, lr}
    296a:	b086      	sub	sp, #24
    296c:	af00      	add	r7, sp, #0
    296e:	1c02      	adds	r2, r0, #0
    2970:	1dfb      	adds	r3, r7, #7
    2972:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2974:	46c0      	nop			; (mov r8, r8)
    2976:	4b2e      	ldr	r3, [pc, #184]	; (2a30 <system_gclk_gen_get_hz+0xc8>)
    2978:	4798      	blx	r3
    297a:	1e03      	subs	r3, r0, #0
    297c:	d1fb      	bne.n	2976 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    297e:	4b2d      	ldr	r3, [pc, #180]	; (2a34 <system_gclk_gen_get_hz+0xcc>)
    2980:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2982:	4a2d      	ldr	r2, [pc, #180]	; (2a38 <system_gclk_gen_get_hz+0xd0>)
    2984:	1dfb      	adds	r3, r7, #7
    2986:	781b      	ldrb	r3, [r3, #0]
    2988:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	4b28      	ldr	r3, [pc, #160]	; (2a30 <system_gclk_gen_get_hz+0xc8>)
    298e:	4798      	blx	r3
    2990:	1e03      	subs	r3, r0, #0
    2992:	d1fb      	bne.n	298c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2994:	4b29      	ldr	r3, [pc, #164]	; (2a3c <system_gclk_gen_get_hz+0xd4>)
    2996:	685b      	ldr	r3, [r3, #4]
    2998:	0a1b      	lsrs	r3, r3, #8
    299a:	1c1a      	adds	r2, r3, #0
    299c:	231f      	movs	r3, #31
    299e:	4013      	ands	r3, r2
    29a0:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    29a2:	1c18      	adds	r0, r3, #0
    29a4:	4b26      	ldr	r3, [pc, #152]	; (2a40 <system_gclk_gen_get_hz+0xd8>)
    29a6:	4798      	blx	r3
    29a8:	1c03      	adds	r3, r0, #0
    29aa:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29ac:	4a22      	ldr	r2, [pc, #136]	; (2a38 <system_gclk_gen_get_hz+0xd0>)
    29ae:	1dfb      	adds	r3, r7, #7
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    29b4:	4b21      	ldr	r3, [pc, #132]	; (2a3c <system_gclk_gen_get_hz+0xd4>)
    29b6:	685b      	ldr	r3, [r3, #4]
    29b8:	0d1b      	lsrs	r3, r3, #20
    29ba:	1c1a      	adds	r2, r3, #0
    29bc:	2301      	movs	r3, #1
    29be:	4013      	ands	r3, r2
    29c0:	b2da      	uxtb	r2, r3
    29c2:	2313      	movs	r3, #19
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    29c8:	4a1e      	ldr	r2, [pc, #120]	; (2a44 <system_gclk_gen_get_hz+0xdc>)
    29ca:	1dfb      	adds	r3, r7, #7
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    29d0:	46c0      	nop			; (mov r8, r8)
    29d2:	4b17      	ldr	r3, [pc, #92]	; (2a30 <system_gclk_gen_get_hz+0xc8>)
    29d4:	4798      	blx	r3
    29d6:	1e03      	subs	r3, r0, #0
    29d8:	d1fb      	bne.n	29d2 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    29da:	4b18      	ldr	r3, [pc, #96]	; (2a3c <system_gclk_gen_get_hz+0xd4>)
    29dc:	689b      	ldr	r3, [r3, #8]
    29de:	0a1b      	lsrs	r3, r3, #8
    29e0:	1c1a      	adds	r2, r3, #0
    29e2:	2300      	movs	r3, #0
    29e4:	439a      	bics	r2, r3
    29e6:	1c13      	adds	r3, r2, #0
    29e8:	b29b      	uxth	r3, r3
    29ea:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    29ec:	4b16      	ldr	r3, [pc, #88]	; (2a48 <system_gclk_gen_get_hz+0xe0>)
    29ee:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    29f0:	2313      	movs	r3, #19
    29f2:	18fb      	adds	r3, r7, r3
    29f4:	781b      	ldrb	r3, [r3, #0]
    29f6:	2b00      	cmp	r3, #0
    29f8:	d109      	bne.n	2a0e <system_gclk_gen_get_hz+0xa6>
    29fa:	68fb      	ldr	r3, [r7, #12]
    29fc:	2b01      	cmp	r3, #1
    29fe:	d906      	bls.n	2a0e <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    2a00:	4b12      	ldr	r3, [pc, #72]	; (2a4c <system_gclk_gen_get_hz+0xe4>)
    2a02:	6978      	ldr	r0, [r7, #20]
    2a04:	68f9      	ldr	r1, [r7, #12]
    2a06:	4798      	blx	r3
    2a08:	1c03      	adds	r3, r0, #0
    2a0a:	617b      	str	r3, [r7, #20]
    2a0c:	e00a      	b.n	2a24 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    2a0e:	2313      	movs	r3, #19
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d005      	beq.n	2a24 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    2a18:	68fb      	ldr	r3, [r7, #12]
    2a1a:	3301      	adds	r3, #1
    2a1c:	1c1a      	adds	r2, r3, #0
    2a1e:	697b      	ldr	r3, [r7, #20]
    2a20:	40d3      	lsrs	r3, r2
    2a22:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2a24:	697b      	ldr	r3, [r7, #20]
}
    2a26:	1c18      	adds	r0, r3, #0
    2a28:	46bd      	mov	sp, r7
    2a2a:	b006      	add	sp, #24
    2a2c:	bd80      	pop	{r7, pc}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	0000279d 	.word	0x0000279d
    2a34:	0000277d 	.word	0x0000277d
    2a38:	40000c04 	.word	0x40000c04
    2a3c:	40000c00 	.word	0x40000c00
    2a40:	000022b5 	.word	0x000022b5
    2a44:	40000c08 	.word	0x40000c08
    2a48:	0000278d 	.word	0x0000278d
    2a4c:	000044ad 	.word	0x000044ad

00002a50 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b084      	sub	sp, #16
    2a54:	af00      	add	r7, sp, #0
    2a56:	1c02      	adds	r2, r0, #0
    2a58:	6039      	str	r1, [r7, #0]
    2a5a:	1dfb      	adds	r3, r7, #7
    2a5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2a5e:	1dfb      	adds	r3, r7, #7
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2a64:	683b      	ldr	r3, [r7, #0]
    2a66:	781b      	ldrb	r3, [r3, #0]
    2a68:	021b      	lsls	r3, r3, #8
    2a6a:	1c1a      	adds	r2, r3, #0
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	4313      	orrs	r3, r2
    2a70:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2a72:	1dfb      	adds	r3, r7, #7
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	1c18      	adds	r0, r3, #0
    2a78:	4b04      	ldr	r3, [pc, #16]	; (2a8c <system_gclk_chan_set_config+0x3c>)
    2a7a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <system_gclk_chan_set_config+0x40>)
    2a7e:	68fa      	ldr	r2, [r7, #12]
    2a80:	b292      	uxth	r2, r2
    2a82:	805a      	strh	r2, [r3, #2]
}
    2a84:	46bd      	mov	sp, r7
    2a86:	b004      	add	sp, #16
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	00002ad9 	.word	0x00002ad9
    2a90:	40000c00 	.word	0x40000c00

00002a94 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	1c02      	adds	r2, r0, #0
    2a9c:	1dfb      	adds	r3, r7, #7
    2a9e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2aa0:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <system_gclk_chan_enable+0x34>)
    2aa2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2aa4:	4a09      	ldr	r2, [pc, #36]	; (2acc <system_gclk_chan_enable+0x38>)
    2aa6:	1dfb      	adds	r3, r7, #7
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2aac:	4908      	ldr	r1, [pc, #32]	; (2ad0 <system_gclk_chan_enable+0x3c>)
    2aae:	4b08      	ldr	r3, [pc, #32]	; (2ad0 <system_gclk_chan_enable+0x3c>)
    2ab0:	885b      	ldrh	r3, [r3, #2]
    2ab2:	b29b      	uxth	r3, r3
    2ab4:	2280      	movs	r2, #128	; 0x80
    2ab6:	01d2      	lsls	r2, r2, #7
    2ab8:	4313      	orrs	r3, r2
    2aba:	b29b      	uxth	r3, r3
    2abc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <system_gclk_chan_enable+0x40>)
    2ac0:	4798      	blx	r3
}
    2ac2:	46bd      	mov	sp, r7
    2ac4:	b002      	add	sp, #8
    2ac6:	bd80      	pop	{r7, pc}
    2ac8:	0000277d 	.word	0x0000277d
    2acc:	40000c02 	.word	0x40000c02
    2ad0:	40000c00 	.word	0x40000c00
    2ad4:	0000278d 	.word	0x0000278d

00002ad8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b084      	sub	sp, #16
    2adc:	af00      	add	r7, sp, #0
    2ade:	1c02      	adds	r2, r0, #0
    2ae0:	1dfb      	adds	r3, r7, #7
    2ae2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2ae4:	4b1d      	ldr	r3, [pc, #116]	; (2b5c <system_gclk_chan_disable+0x84>)
    2ae6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ae8:	4a1d      	ldr	r2, [pc, #116]	; (2b60 <system_gclk_chan_disable+0x88>)
    2aea:	1dfb      	adds	r3, r7, #7
    2aec:	781b      	ldrb	r3, [r3, #0]
    2aee:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2af0:	4b1c      	ldr	r3, [pc, #112]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2af2:	885b      	ldrh	r3, [r3, #2]
    2af4:	b29b      	uxth	r3, r3
    2af6:	0a1b      	lsrs	r3, r3, #8
    2af8:	1c1a      	adds	r2, r3, #0
    2afa:	230f      	movs	r3, #15
    2afc:	4013      	ands	r3, r2
    2afe:	b2db      	uxtb	r3, r3
    2b00:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2b02:	4b18      	ldr	r3, [pc, #96]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2b04:	885a      	ldrh	r2, [r3, #2]
    2b06:	4918      	ldr	r1, [pc, #96]	; (2b68 <system_gclk_chan_disable+0x90>)
    2b08:	400a      	ands	r2, r1
    2b0a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2b0c:	4a15      	ldr	r2, [pc, #84]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2b0e:	4b15      	ldr	r3, [pc, #84]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2b10:	885b      	ldrh	r3, [r3, #2]
    2b12:	b29b      	uxth	r3, r3
    2b14:	4915      	ldr	r1, [pc, #84]	; (2b6c <system_gclk_chan_disable+0x94>)
    2b16:	400b      	ands	r3, r1
    2b18:	b29b      	uxth	r3, r3
    2b1a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	4b11      	ldr	r3, [pc, #68]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2b20:	885b      	ldrh	r3, [r3, #2]
    2b22:	b29b      	uxth	r3, r3
    2b24:	1c1a      	adds	r2, r3, #0
    2b26:	2380      	movs	r3, #128	; 0x80
    2b28:	01db      	lsls	r3, r3, #7
    2b2a:	4013      	ands	r3, r2
    2b2c:	d1f7      	bne.n	2b1e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2b2e:	4b0d      	ldr	r3, [pc, #52]	; (2b64 <system_gclk_chan_disable+0x8c>)
    2b30:	68fa      	ldr	r2, [r7, #12]
    2b32:	b2d2      	uxtb	r2, r2
    2b34:	1c11      	adds	r1, r2, #0
    2b36:	220f      	movs	r2, #15
    2b38:	400a      	ands	r2, r1
    2b3a:	b2d2      	uxtb	r2, r2
    2b3c:	1c11      	adds	r1, r2, #0
    2b3e:	220f      	movs	r2, #15
    2b40:	400a      	ands	r2, r1
    2b42:	0210      	lsls	r0, r2, #8
    2b44:	885a      	ldrh	r2, [r3, #2]
    2b46:	4908      	ldr	r1, [pc, #32]	; (2b68 <system_gclk_chan_disable+0x90>)
    2b48:	400a      	ands	r2, r1
    2b4a:	1c11      	adds	r1, r2, #0
    2b4c:	1c02      	adds	r2, r0, #0
    2b4e:	430a      	orrs	r2, r1
    2b50:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    2b52:	4b07      	ldr	r3, [pc, #28]	; (2b70 <system_gclk_chan_disable+0x98>)
    2b54:	4798      	blx	r3
}
    2b56:	46bd      	mov	sp, r7
    2b58:	b004      	add	sp, #16
    2b5a:	bd80      	pop	{r7, pc}
    2b5c:	0000277d 	.word	0x0000277d
    2b60:	40000c02 	.word	0x40000c02
    2b64:	40000c00 	.word	0x40000c00
    2b68:	fffff0ff 	.word	0xfffff0ff
    2b6c:	ffffbfff 	.word	0xffffbfff
    2b70:	0000278d 	.word	0x0000278d

00002b74 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2b74:	b580      	push	{r7, lr}
    2b76:	b084      	sub	sp, #16
    2b78:	af00      	add	r7, sp, #0
    2b7a:	1c02      	adds	r2, r0, #0
    2b7c:	1dfb      	adds	r3, r7, #7
    2b7e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2b80:	4b0e      	ldr	r3, [pc, #56]	; (2bbc <system_gclk_chan_get_hz+0x48>)
    2b82:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b84:	4a0e      	ldr	r2, [pc, #56]	; (2bc0 <system_gclk_chan_get_hz+0x4c>)
    2b86:	1dfb      	adds	r3, r7, #7
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2b8c:	4b0d      	ldr	r3, [pc, #52]	; (2bc4 <system_gclk_chan_get_hz+0x50>)
    2b8e:	885b      	ldrh	r3, [r3, #2]
    2b90:	b29b      	uxth	r3, r3
    2b92:	0a1b      	lsrs	r3, r3, #8
    2b94:	1c1a      	adds	r2, r3, #0
    2b96:	230f      	movs	r3, #15
    2b98:	4013      	ands	r3, r2
    2b9a:	b2da      	uxtb	r2, r3
    2b9c:	230f      	movs	r3, #15
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    2ba2:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <system_gclk_chan_get_hz+0x54>)
    2ba4:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2ba6:	230f      	movs	r3, #15
    2ba8:	18fb      	adds	r3, r7, r3
    2baa:	781b      	ldrb	r3, [r3, #0]
    2bac:	1c18      	adds	r0, r3, #0
    2bae:	4b07      	ldr	r3, [pc, #28]	; (2bcc <system_gclk_chan_get_hz+0x58>)
    2bb0:	4798      	blx	r3
    2bb2:	1c03      	adds	r3, r0, #0
}
    2bb4:	1c18      	adds	r0, r3, #0
    2bb6:	46bd      	mov	sp, r7
    2bb8:	b004      	add	sp, #16
    2bba:	bd80      	pop	{r7, pc}
    2bbc:	0000277d 	.word	0x0000277d
    2bc0:	40000c02 	.word	0x40000c02
    2bc4:	40000c00 	.word	0x40000c00
    2bc8:	0000278d 	.word	0x0000278d
    2bcc:	00002969 	.word	0x00002969

00002bd0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b084      	sub	sp, #16
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	1c02      	adds	r2, r0, #0
    2bd8:	1dfb      	adds	r3, r7, #7
    2bda:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2bdc:	230f      	movs	r3, #15
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	1dfa      	adds	r2, r7, #7
    2be2:	7812      	ldrb	r2, [r2, #0]
    2be4:	09d2      	lsrs	r2, r2, #7
    2be6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2be8:	230e      	movs	r3, #14
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	1dfa      	adds	r2, r7, #7
    2bee:	7812      	ldrb	r2, [r2, #0]
    2bf0:	0952      	lsrs	r2, r2, #5
    2bf2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2bf4:	4b0d      	ldr	r3, [pc, #52]	; (2c2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2bf6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2bf8:	230f      	movs	r3, #15
    2bfa:	18fb      	adds	r3, r7, r3
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d10f      	bne.n	2c22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2c02:	230f      	movs	r3, #15
    2c04:	18fb      	adds	r3, r7, r3
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	009b      	lsls	r3, r3, #2
    2c0a:	2210      	movs	r2, #16
    2c0c:	4694      	mov	ip, r2
    2c0e:	44bc      	add	ip, r7
    2c10:	4463      	add	r3, ip
    2c12:	3b08      	subs	r3, #8
    2c14:	681a      	ldr	r2, [r3, #0]
    2c16:	230e      	movs	r3, #14
    2c18:	18fb      	adds	r3, r7, r3
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	01db      	lsls	r3, r3, #7
    2c1e:	18d3      	adds	r3, r2, r3
    2c20:	e000      	b.n	2c24 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2c22:	2300      	movs	r3, #0
	}
}
    2c24:	1c18      	adds	r0, r3, #0
    2c26:	46bd      	mov	sp, r7
    2c28:	b004      	add	sp, #16
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	41004400 	.word	0x41004400

00002c30 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b088      	sub	sp, #32
    2c34:	af00      	add	r7, sp, #0
    2c36:	60f8      	str	r0, [r7, #12]
    2c38:	60b9      	str	r1, [r7, #8]
    2c3a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2c3c:	2300      	movs	r3, #0
    2c3e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	78db      	ldrb	r3, [r3, #3]
    2c44:	2201      	movs	r2, #1
    2c46:	4053      	eors	r3, r2
    2c48:	b2db      	uxtb	r3, r3
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d035      	beq.n	2cba <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	2b80      	cmp	r3, #128	; 0x80
    2c54:	d00b      	beq.n	2c6e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2c56:	69fb      	ldr	r3, [r7, #28]
    2c58:	2280      	movs	r2, #128	; 0x80
    2c5a:	0252      	lsls	r2, r2, #9
    2c5c:	4313      	orrs	r3, r2
    2c5e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	061b      	lsls	r3, r3, #24
    2c66:	1c1a      	adds	r2, r3, #0
    2c68:	69fb      	ldr	r3, [r7, #28]
    2c6a:	4313      	orrs	r3, r2
    2c6c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	785b      	ldrb	r3, [r3, #1]
    2c72:	2b00      	cmp	r3, #0
    2c74:	d003      	beq.n	2c7e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2c7a:	2b02      	cmp	r3, #2
    2c7c:	d110      	bne.n	2ca0 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2c7e:	69fb      	ldr	r3, [r7, #28]
    2c80:	2280      	movs	r2, #128	; 0x80
    2c82:	0292      	lsls	r2, r2, #10
    2c84:	4313      	orrs	r3, r2
    2c86:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	789b      	ldrb	r3, [r3, #2]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d004      	beq.n	2c9a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2c90:	69fb      	ldr	r3, [r7, #28]
    2c92:	2280      	movs	r2, #128	; 0x80
    2c94:	02d2      	lsls	r2, r2, #11
    2c96:	4313      	orrs	r3, r2
    2c98:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2c9a:	68fb      	ldr	r3, [r7, #12]
    2c9c:	68ba      	ldr	r2, [r7, #8]
    2c9e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	785b      	ldrb	r3, [r3, #1]
    2ca4:	2b01      	cmp	r3, #1
    2ca6:	d003      	beq.n	2cb0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2cac:	2b02      	cmp	r3, #2
    2cae:	d107      	bne.n	2cc0 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2cb0:	69fb      	ldr	r3, [r7, #28]
    2cb2:	4a21      	ldr	r2, [pc, #132]	; (2d38 <_system_pinmux_config+0x108>)
    2cb4:	4013      	ands	r3, r2
    2cb6:	61fb      	str	r3, [r7, #28]
    2cb8:	e002      	b.n	2cc0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2cba:	68fb      	ldr	r3, [r7, #12]
    2cbc:	68ba      	ldr	r2, [r7, #8]
    2cbe:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2cc0:	68bb      	ldr	r3, [r7, #8]
    2cc2:	041b      	lsls	r3, r3, #16
    2cc4:	0c1b      	lsrs	r3, r3, #16
    2cc6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2cc8:	68bb      	ldr	r3, [r7, #8]
    2cca:	0c1b      	lsrs	r3, r3, #16
    2ccc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cce:	69ba      	ldr	r2, [r7, #24]
    2cd0:	69fb      	ldr	r3, [r7, #28]
    2cd2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2cd4:	22a0      	movs	r2, #160	; 0xa0
    2cd6:	05d2      	lsls	r2, r2, #23
    2cd8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cda:	68fb      	ldr	r3, [r7, #12]
    2cdc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cde:	697a      	ldr	r2, [r7, #20]
    2ce0:	69fb      	ldr	r3, [r7, #28]
    2ce2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ce4:	22d0      	movs	r2, #208	; 0xd0
    2ce6:	0612      	lsls	r2, r2, #24
    2ce8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	78db      	ldrb	r3, [r3, #3]
    2cf2:	2201      	movs	r2, #1
    2cf4:	4053      	eors	r3, r2
    2cf6:	b2db      	uxtb	r3, r3
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d01a      	beq.n	2d32 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2cfc:	69fa      	ldr	r2, [r7, #28]
    2cfe:	2380      	movs	r3, #128	; 0x80
    2d00:	02db      	lsls	r3, r3, #11
    2d02:	4013      	ands	r3, r2
    2d04:	d00a      	beq.n	2d1c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	789b      	ldrb	r3, [r3, #2]
    2d0a:	2b01      	cmp	r3, #1
    2d0c:	d103      	bne.n	2d16 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2d0e:	68fb      	ldr	r3, [r7, #12]
    2d10:	68ba      	ldr	r2, [r7, #8]
    2d12:	619a      	str	r2, [r3, #24]
    2d14:	e002      	b.n	2d1c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	68ba      	ldr	r2, [r7, #8]
    2d1a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	785b      	ldrb	r3, [r3, #1]
    2d20:	2b01      	cmp	r3, #1
    2d22:	d003      	beq.n	2d2c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d28:	2b02      	cmp	r3, #2
    2d2a:	d102      	bne.n	2d32 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2d2c:	68fb      	ldr	r3, [r7, #12]
    2d2e:	68ba      	ldr	r2, [r7, #8]
    2d30:	609a      	str	r2, [r3, #8]
		}
	}
}
    2d32:	46bd      	mov	sp, r7
    2d34:	b008      	add	sp, #32
    2d36:	bd80      	pop	{r7, pc}
    2d38:	fffbffff 	.word	0xfffbffff

00002d3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b084      	sub	sp, #16
    2d40:	af00      	add	r7, sp, #0
    2d42:	1c02      	adds	r2, r0, #0
    2d44:	6039      	str	r1, [r7, #0]
    2d46:	1dfb      	adds	r3, r7, #7
    2d48:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2d4a:	1dfb      	adds	r3, r7, #7
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	1c18      	adds	r0, r3, #0
    2d50:	4b0b      	ldr	r3, [pc, #44]	; (2d80 <system_pinmux_pin_set_config+0x44>)
    2d52:	4798      	blx	r3
    2d54:	1c03      	adds	r3, r0, #0
    2d56:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2d58:	1dfb      	adds	r3, r7, #7
    2d5a:	781b      	ldrb	r3, [r3, #0]
    2d5c:	221f      	movs	r2, #31
    2d5e:	4013      	ands	r3, r2
    2d60:	2201      	movs	r2, #1
    2d62:	409a      	lsls	r2, r3
    2d64:	1c13      	adds	r3, r2, #0
    2d66:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2d68:	68f9      	ldr	r1, [r7, #12]
    2d6a:	68ba      	ldr	r2, [r7, #8]
    2d6c:	683b      	ldr	r3, [r7, #0]
    2d6e:	1c08      	adds	r0, r1, #0
    2d70:	1c11      	adds	r1, r2, #0
    2d72:	1c1a      	adds	r2, r3, #0
    2d74:	4b03      	ldr	r3, [pc, #12]	; (2d84 <system_pinmux_pin_set_config+0x48>)
    2d76:	4798      	blx	r3
}
    2d78:	46bd      	mov	sp, r7
    2d7a:	b004      	add	sp, #16
    2d7c:	bd80      	pop	{r7, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	00002bd1 	.word	0x00002bd1
    2d84:	00002c31 	.word	0x00002c31

00002d88 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	af00      	add	r7, sp, #0
	return;
    2d8c:	46c0      	nop			; (mov r8, r8)
}
    2d8e:	46bd      	mov	sp, r7
    2d90:	bd80      	pop	{r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)

00002d94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <system_init+0x1c>)
    2d9a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <system_init+0x20>)
    2d9e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2da0:	4b05      	ldr	r3, [pc, #20]	; (2db8 <system_init+0x24>)
    2da2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2da4:	4b05      	ldr	r3, [pc, #20]	; (2dbc <system_init+0x28>)
    2da6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2da8:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <system_init+0x2c>)
    2daa:	4798      	blx	r3
}
    2dac:	46bd      	mov	sp, r7
    2dae:	bd80      	pop	{r7, pc}
    2db0:	0000259d 	.word	0x0000259d
    2db4:	0000209d 	.word	0x0000209d
    2db8:	00002d89 	.word	0x00002d89
    2dbc:	00000271 	.word	0x00000271
    2dc0:	00002d89 	.word	0x00002d89

00002dc4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b082      	sub	sp, #8
    2dc8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2dca:	4b2f      	ldr	r3, [pc, #188]	; (2e88 <Reset_Handler+0xc4>)
    2dcc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2dce:	4b2f      	ldr	r3, [pc, #188]	; (2e8c <Reset_Handler+0xc8>)
    2dd0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2dd2:	687a      	ldr	r2, [r7, #4]
    2dd4:	683b      	ldr	r3, [r7, #0]
    2dd6:	429a      	cmp	r2, r3
    2dd8:	d00c      	beq.n	2df4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2dda:	e007      	b.n	2dec <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2ddc:	683b      	ldr	r3, [r7, #0]
    2dde:	1d1a      	adds	r2, r3, #4
    2de0:	603a      	str	r2, [r7, #0]
    2de2:	687a      	ldr	r2, [r7, #4]
    2de4:	1d11      	adds	r1, r2, #4
    2de6:	6079      	str	r1, [r7, #4]
    2de8:	6812      	ldr	r2, [r2, #0]
    2dea:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2dec:	683a      	ldr	r2, [r7, #0]
    2dee:	4b28      	ldr	r3, [pc, #160]	; (2e90 <Reset_Handler+0xcc>)
    2df0:	429a      	cmp	r2, r3
    2df2:	d3f3      	bcc.n	2ddc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2df4:	4b27      	ldr	r3, [pc, #156]	; (2e94 <Reset_Handler+0xd0>)
    2df6:	603b      	str	r3, [r7, #0]
    2df8:	e004      	b.n	2e04 <Reset_Handler+0x40>
                *pDest++ = 0;
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	1d1a      	adds	r2, r3, #4
    2dfe:	603a      	str	r2, [r7, #0]
    2e00:	2200      	movs	r2, #0
    2e02:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2e04:	683a      	ldr	r2, [r7, #0]
    2e06:	4b24      	ldr	r3, [pc, #144]	; (2e98 <Reset_Handler+0xd4>)
    2e08:	429a      	cmp	r2, r3
    2e0a:	d3f6      	bcc.n	2dfa <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2e0c:	4b23      	ldr	r3, [pc, #140]	; (2e9c <Reset_Handler+0xd8>)
    2e0e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e10:	4b23      	ldr	r3, [pc, #140]	; (2ea0 <Reset_Handler+0xdc>)
    2e12:	687a      	ldr	r2, [r7, #4]
    2e14:	21ff      	movs	r1, #255	; 0xff
    2e16:	438a      	bics	r2, r1
    2e18:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2e1a:	4a22      	ldr	r2, [pc, #136]	; (2ea4 <Reset_Handler+0xe0>)
    2e1c:	2390      	movs	r3, #144	; 0x90
    2e1e:	005b      	lsls	r3, r3, #1
    2e20:	2102      	movs	r1, #2
    2e22:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2e24:	4b20      	ldr	r3, [pc, #128]	; (2ea8 <Reset_Handler+0xe4>)
    2e26:	78da      	ldrb	r2, [r3, #3]
    2e28:	2103      	movs	r1, #3
    2e2a:	438a      	bics	r2, r1
    2e2c:	1c11      	adds	r1, r2, #0
    2e2e:	2202      	movs	r2, #2
    2e30:	430a      	orrs	r2, r1
    2e32:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2e34:	4b1c      	ldr	r3, [pc, #112]	; (2ea8 <Reset_Handler+0xe4>)
    2e36:	78da      	ldrb	r2, [r3, #3]
    2e38:	210c      	movs	r1, #12
    2e3a:	438a      	bics	r2, r1
    2e3c:	1c11      	adds	r1, r2, #0
    2e3e:	2208      	movs	r2, #8
    2e40:	430a      	orrs	r2, r1
    2e42:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2e44:	4b19      	ldr	r3, [pc, #100]	; (2eac <Reset_Handler+0xe8>)
    2e46:	7b9a      	ldrb	r2, [r3, #14]
    2e48:	2130      	movs	r1, #48	; 0x30
    2e4a:	438a      	bics	r2, r1
    2e4c:	1c11      	adds	r1, r2, #0
    2e4e:	2220      	movs	r2, #32
    2e50:	430a      	orrs	r2, r1
    2e52:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e54:	4b15      	ldr	r3, [pc, #84]	; (2eac <Reset_Handler+0xe8>)
    2e56:	7b9a      	ldrb	r2, [r3, #14]
    2e58:	210c      	movs	r1, #12
    2e5a:	438a      	bics	r2, r1
    2e5c:	1c11      	adds	r1, r2, #0
    2e5e:	2208      	movs	r2, #8
    2e60:	430a      	orrs	r2, r1
    2e62:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e64:	4b11      	ldr	r3, [pc, #68]	; (2eac <Reset_Handler+0xe8>)
    2e66:	7b9a      	ldrb	r2, [r3, #14]
    2e68:	2103      	movs	r1, #3
    2e6a:	438a      	bics	r2, r1
    2e6c:	1c11      	adds	r1, r2, #0
    2e6e:	2202      	movs	r2, #2
    2e70:	430a      	orrs	r2, r1
    2e72:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e74:	4b0e      	ldr	r3, [pc, #56]	; (2eb0 <Reset_Handler+0xec>)
    2e76:	685a      	ldr	r2, [r3, #4]
    2e78:	2180      	movs	r1, #128	; 0x80
    2e7a:	430a      	orrs	r2, r1
    2e7c:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    2e7e:	4b0d      	ldr	r3, [pc, #52]	; (2eb4 <Reset_Handler+0xf0>)
    2e80:	4798      	blx	r3

        /* Branch to main function */
        main();
    2e82:	4b0d      	ldr	r3, [pc, #52]	; (2eb8 <Reset_Handler+0xf4>)
    2e84:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2e86:	e7fe      	b.n	2e86 <Reset_Handler+0xc2>
    2e88:	00004914 	.word	0x00004914
    2e8c:	20000000 	.word	0x20000000
    2e90:	20000004 	.word	0x20000004
    2e94:	20000004 	.word	0x20000004
    2e98:	20000210 	.word	0x20000210
    2e9c:	00000000 	.word	0x00000000
    2ea0:	e000ed00 	.word	0xe000ed00
    2ea4:	41007000 	.word	0x41007000
    2ea8:	41005000 	.word	0x41005000
    2eac:	41004800 	.word	0x41004800
    2eb0:	41004000 	.word	0x41004000
    2eb4:	000047b1 	.word	0x000047b1
    2eb8:	00004391 	.word	0x00004391

00002ebc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	af00      	add	r7, sp, #0
        while (1) {
        }
    2ec0:	e7fe      	b.n	2ec0 <Dummy_Handler+0x4>
    2ec2:	46c0      	nop			; (mov r8, r8)

00002ec4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b084      	sub	sp, #16
    2ec8:	af00      	add	r7, sp, #0
    2eca:	1c02      	adds	r2, r0, #0
    2ecc:	1dfb      	adds	r3, r7, #7
    2ece:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2ed0:	230f      	movs	r3, #15
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	1dfa      	adds	r2, r7, #7
    2ed6:	7812      	ldrb	r2, [r2, #0]
    2ed8:	09d2      	lsrs	r2, r2, #7
    2eda:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2edc:	230e      	movs	r3, #14
    2ede:	18fb      	adds	r3, r7, r3
    2ee0:	1dfa      	adds	r2, r7, #7
    2ee2:	7812      	ldrb	r2, [r2, #0]
    2ee4:	0952      	lsrs	r2, r2, #5
    2ee6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2ee8:	4b0d      	ldr	r3, [pc, #52]	; (2f20 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2eea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2eec:	230f      	movs	r3, #15
    2eee:	18fb      	adds	r3, r7, r3
    2ef0:	781b      	ldrb	r3, [r3, #0]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d10f      	bne.n	2f16 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2ef6:	230f      	movs	r3, #15
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	2210      	movs	r2, #16
    2f00:	4694      	mov	ip, r2
    2f02:	44bc      	add	ip, r7
    2f04:	4463      	add	r3, ip
    2f06:	3b08      	subs	r3, #8
    2f08:	681a      	ldr	r2, [r3, #0]
    2f0a:	230e      	movs	r3, #14
    2f0c:	18fb      	adds	r3, r7, r3
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	01db      	lsls	r3, r3, #7
    2f12:	18d3      	adds	r3, r2, r3
    2f14:	e000      	b.n	2f18 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2f16:	2300      	movs	r3, #0
	}
}
    2f18:	1c18      	adds	r0, r3, #0
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b004      	add	sp, #16
    2f1e:	bd80      	pop	{r7, pc}
    2f20:	41004400 	.word	0x41004400

00002f24 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b082      	sub	sp, #8
    2f28:	af00      	add	r7, sp, #0
    2f2a:	1c02      	adds	r2, r0, #0
    2f2c:	1dfb      	adds	r3, r7, #7
    2f2e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2f30:	1dfb      	adds	r3, r7, #7
    2f32:	781b      	ldrb	r3, [r3, #0]
    2f34:	1c18      	adds	r0, r3, #0
    2f36:	4b03      	ldr	r3, [pc, #12]	; (2f44 <port_get_group_from_gpio_pin+0x20>)
    2f38:	4798      	blx	r3
    2f3a:	1c03      	adds	r3, r0, #0
}
    2f3c:	1c18      	adds	r0, r3, #0
    2f3e:	46bd      	mov	sp, r7
    2f40:	b002      	add	sp, #8
    2f42:	bd80      	pop	{r7, pc}
    2f44:	00002ec5 	.word	0x00002ec5

00002f48 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2f48:	b580      	push	{r7, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	2200      	movs	r2, #0
    2f54:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	2201      	movs	r2, #1
    2f5a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	2200      	movs	r2, #0
    2f60:	709a      	strb	r2, [r3, #2]
}
    2f62:	46bd      	mov	sp, r7
    2f64:	b002      	add	sp, #8
    2f66:	bd80      	pop	{r7, pc}

00002f68 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b084      	sub	sp, #16
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	1c02      	adds	r2, r0, #0
    2f70:	1dfb      	adds	r3, r7, #7
    2f72:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2f74:	1dfb      	adds	r3, r7, #7
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	1c18      	adds	r0, r3, #0
    2f7a:	4b0b      	ldr	r3, [pc, #44]	; (2fa8 <port_pin_get_input_level+0x40>)
    2f7c:	4798      	blx	r3
    2f7e:	1c03      	adds	r3, r0, #0
    2f80:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f82:	1dfb      	adds	r3, r7, #7
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	221f      	movs	r2, #31
    2f88:	4013      	ands	r3, r2
    2f8a:	2201      	movs	r2, #1
    2f8c:	409a      	lsls	r2, r3
    2f8e:	1c13      	adds	r3, r2, #0
    2f90:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2f92:	68fb      	ldr	r3, [r7, #12]
    2f94:	6a1b      	ldr	r3, [r3, #32]
    2f96:	68ba      	ldr	r2, [r7, #8]
    2f98:	4013      	ands	r3, r2
    2f9a:	1e5a      	subs	r2, r3, #1
    2f9c:	4193      	sbcs	r3, r2
    2f9e:	b2db      	uxtb	r3, r3
}
    2fa0:	1c18      	adds	r0, r3, #0
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b004      	add	sp, #16
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	00002f25 	.word	0x00002f25

00002fac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	b084      	sub	sp, #16
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	1c02      	adds	r2, r0, #0
    2fb4:	1dfb      	adds	r3, r7, #7
    2fb6:	701a      	strb	r2, [r3, #0]
    2fb8:	1dbb      	adds	r3, r7, #6
    2fba:	1c0a      	adds	r2, r1, #0
    2fbc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2fbe:	1dfb      	adds	r3, r7, #7
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	1c18      	adds	r0, r3, #0
    2fc4:	4b0c      	ldr	r3, [pc, #48]	; (2ff8 <port_pin_set_output_level+0x4c>)
    2fc6:	4798      	blx	r3
    2fc8:	1c03      	adds	r3, r0, #0
    2fca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2fcc:	1dfb      	adds	r3, r7, #7
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	221f      	movs	r2, #31
    2fd2:	4013      	ands	r3, r2
    2fd4:	2201      	movs	r2, #1
    2fd6:	409a      	lsls	r2, r3
    2fd8:	1c13      	adds	r3, r2, #0
    2fda:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2fdc:	1dbb      	adds	r3, r7, #6
    2fde:	781b      	ldrb	r3, [r3, #0]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d003      	beq.n	2fec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2fe4:	68fb      	ldr	r3, [r7, #12]
    2fe6:	68ba      	ldr	r2, [r7, #8]
    2fe8:	619a      	str	r2, [r3, #24]
    2fea:	e002      	b.n	2ff2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2fec:	68fb      	ldr	r3, [r7, #12]
    2fee:	68ba      	ldr	r2, [r7, #8]
    2ff0:	615a      	str	r2, [r3, #20]
	}
}
    2ff2:	46bd      	mov	sp, r7
    2ff4:	b004      	add	sp, #16
    2ff6:	bd80      	pop	{r7, pc}
    2ff8:	00002f25 	.word	0x00002f25

00002ffc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3000:	4b03      	ldr	r3, [pc, #12]	; (3010 <system_interrupt_enable_global+0x14>)
    3002:	2201      	movs	r2, #1
    3004:	701a      	strb	r2, [r3, #0]
    3006:	f3bf 8f5f 	dmb	sy
    300a:	b662      	cpsie	i
}
    300c:	46bd      	mov	sp, r7
    300e:	bd80      	pop	{r7, pc}
    3010:	20000000 	.word	0x20000000

00003014 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    3014:	b580      	push	{r7, lr}
    3016:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3018:	b672      	cpsid	i
    301a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    301e:	4b02      	ldr	r3, [pc, #8]	; (3028 <system_interrupt_disable_global+0x14>)
    3020:	2200      	movs	r2, #0
    3022:	701a      	strb	r2, [r3, #0]
}
    3024:	46bd      	mov	sp, r7
    3026:	bd80      	pop	{r7, pc}
    3028:	20000000 	.word	0x20000000

0000302c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    302c:	b580      	push	{r7, lr}
    302e:	b082      	sub	sp, #8
    3030:	af00      	add	r7, sp, #0
    3032:	1c02      	adds	r2, r0, #0
    3034:	1dfb      	adds	r3, r7, #7
    3036:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3038:	4b06      	ldr	r3, [pc, #24]	; (3054 <system_interrupt_enable+0x28>)
    303a:	1dfa      	adds	r2, r7, #7
    303c:	7812      	ldrb	r2, [r2, #0]
    303e:	1c11      	adds	r1, r2, #0
    3040:	221f      	movs	r2, #31
    3042:	400a      	ands	r2, r1
    3044:	2101      	movs	r1, #1
    3046:	4091      	lsls	r1, r2
    3048:	1c0a      	adds	r2, r1, #0
    304a:	601a      	str	r2, [r3, #0]
}
    304c:	46bd      	mov	sp, r7
    304e:	b002      	add	sp, #8
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	e000e100 	.word	0xe000e100

00003058 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    3058:	b580      	push	{r7, lr}
    305a:	b084      	sub	sp, #16
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	22a0      	movs	r2, #160	; 0xa0
    3064:	0112      	lsls	r2, r2, #4
    3066:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	2201      	movs	r2, #1
    306c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	2200      	movs	r2, #0
    3072:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	2200      	movs	r2, #0
    3078:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    307a:	230f      	movs	r3, #15
    307c:	18fb      	adds	r3, r7, r3
    307e:	2200      	movs	r2, #0
    3080:	701a      	strb	r2, [r3, #0]
    3082:	e00e      	b.n	30a2 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    3084:	230f      	movs	r3, #15
    3086:	18fb      	adds	r3, r7, r3
    3088:	781a      	ldrb	r2, [r3, #0]
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	3202      	adds	r2, #2
    308e:	0092      	lsls	r2, r2, #2
    3090:	2100      	movs	r1, #0
    3092:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    3094:	230f      	movs	r3, #15
    3096:	18fb      	adds	r3, r7, r3
    3098:	781a      	ldrb	r2, [r3, #0]
    309a:	230f      	movs	r3, #15
    309c:	18fb      	adds	r3, r7, r3
    309e:	3201      	adds	r2, #1
    30a0:	701a      	strb	r2, [r3, #0]
    30a2:	230f      	movs	r3, #15
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	2b01      	cmp	r3, #1
    30aa:	d9eb      	bls.n	3084 <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    30ac:	46bd      	mov	sp, r7
    30ae:	b004      	add	sp, #16
    30b0:	bd80      	pop	{r7, pc}
    30b2:	46c0      	nop			; (mov r8, r8)

000030b4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b084      	sub	sp, #16
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	681b      	ldr	r3, [r3, #0]
    30c0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    30c2:	68fb      	ldr	r3, [r7, #12]
    30c4:	69db      	ldr	r3, [r3, #28]
    30c6:	1e5a      	subs	r2, r3, #1
    30c8:	4193      	sbcs	r3, r2
    30ca:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    30cc:	1c18      	adds	r0, r3, #0
    30ce:	46bd      	mov	sp, r7
    30d0:	b004      	add	sp, #16
    30d2:	bd80      	pop	{r7, pc}

000030d4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	b082      	sub	sp, #8
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	2201      	movs	r2, #1
    30e0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	2200      	movs	r2, #0
    30e6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	2200      	movs	r2, #0
    30ec:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	22c0      	movs	r2, #192	; 0xc0
    30f2:	0392      	lsls	r2, r2, #14
    30f4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	2200      	movs	r2, #0
    30fa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	2200      	movs	r2, #0
    3100:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2201      	movs	r2, #1
    3106:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	2201      	movs	r2, #1
    310c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	2200      	movs	r2, #0
    3112:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	2224      	movs	r2, #36	; 0x24
    3118:	2100      	movs	r1, #0
    311a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	3318      	adds	r3, #24
    3120:	1c18      	adds	r0, r3, #0
    3122:	2100      	movs	r1, #0
    3124:	220c      	movs	r2, #12
    3126:	4b0a      	ldr	r3, [pc, #40]	; (3150 <spi_get_config_defaults+0x7c>)
    3128:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	4a09      	ldr	r2, [pc, #36]	; (3154 <spi_get_config_defaults+0x80>)
    312e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	2200      	movs	r2, #0
    3134:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	2200      	movs	r2, #0
    313a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	2200      	movs	r2, #0
    3140:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	2200      	movs	r2, #0
    3146:	635a      	str	r2, [r3, #52]	; 0x34

};
    3148:	46bd      	mov	sp, r7
    314a:	b002      	add	sp, #8
    314c:	bd80      	pop	{r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	0000480f 	.word	0x0000480f
    3154:	000186a0 	.word	0x000186a0

00003158 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    3158:	b580      	push	{r7, lr}
    315a:	b082      	sub	sp, #8
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	220a      	movs	r2, #10
    3164:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    3166:	687b      	ldr	r3, [r7, #4]
    3168:	2200      	movs	r2, #0
    316a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	2200      	movs	r2, #0
    3170:	709a      	strb	r2, [r3, #2]
}
    3172:	46bd      	mov	sp, r7
    3174:	b002      	add	sp, #8
    3176:	bd80      	pop	{r7, pc}

00003178 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    3178:	b580      	push	{r7, lr}
    317a:	b084      	sub	sp, #16
    317c:	af00      	add	r7, sp, #0
    317e:	6078      	str	r0, [r7, #4]
    3180:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3182:	683b      	ldr	r3, [r7, #0]
    3184:	781a      	ldrb	r2, [r3, #0]
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    318a:	683b      	ldr	r3, [r7, #0]
    318c:	785a      	ldrb	r2, [r3, #1]
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    3192:	683b      	ldr	r3, [r7, #0]
    3194:	789a      	ldrb	r2, [r3, #2]
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    319a:	230c      	movs	r3, #12
    319c:	18fb      	adds	r3, r7, r3
    319e:	1c18      	adds	r0, r3, #0
    31a0:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <spi_attach_slave+0x58>)
    31a2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    31a4:	230c      	movs	r3, #12
    31a6:	18fb      	adds	r3, r7, r3
    31a8:	2201      	movs	r2, #1
    31aa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	781a      	ldrb	r2, [r3, #0]
    31b0:	230c      	movs	r3, #12
    31b2:	18fb      	adds	r3, r7, r3
    31b4:	1c10      	adds	r0, r2, #0
    31b6:	1c19      	adds	r1, r3, #0
    31b8:	4b06      	ldr	r3, [pc, #24]	; (31d4 <spi_attach_slave+0x5c>)
    31ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	781b      	ldrb	r3, [r3, #0]
    31c0:	1c18      	adds	r0, r3, #0
    31c2:	2101      	movs	r1, #1
    31c4:	4b04      	ldr	r3, [pc, #16]	; (31d8 <spi_attach_slave+0x60>)
    31c6:	4798      	blx	r3
}
    31c8:	46bd      	mov	sp, r7
    31ca:	b004      	add	sp, #16
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	00002f49 	.word	0x00002f49
    31d4:	00002041 	.word	0x00002041
    31d8:	00002fad 	.word	0x00002fad

000031dc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b084      	sub	sp, #16
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	681b      	ldr	r3, [r3, #0]
    31e8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	1c18      	adds	r0, r3, #0
    31f0:	4b0a      	ldr	r3, [pc, #40]	; (321c <spi_enable+0x40>)
    31f2:	4798      	blx	r3
    31f4:	1c03      	adds	r3, r0, #0
    31f6:	1c18      	adds	r0, r3, #0
    31f8:	4b09      	ldr	r3, [pc, #36]	; (3220 <spi_enable+0x44>)
    31fa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	1c18      	adds	r0, r3, #0
    3202:	4b08      	ldr	r3, [pc, #32]	; (3224 <spi_enable+0x48>)
    3204:	4798      	blx	r3
    3206:	1e03      	subs	r3, r0, #0
    3208:	d1f9      	bne.n	31fe <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	2202      	movs	r2, #2
    3210:	431a      	orrs	r2, r3
    3212:	68fb      	ldr	r3, [r7, #12]
    3214:	601a      	str	r2, [r3, #0]
}
    3216:	46bd      	mov	sp, r7
    3218:	b004      	add	sp, #16
    321a:	bd80      	pop	{r7, pc}
    321c:	00001f4d 	.word	0x00001f4d
    3220:	0000302d 	.word	0x0000302d
    3224:	000030b5 	.word	0x000030b5

00003228 <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    3228:	b580      	push	{r7, lr}
    322a:	b082      	sub	sp, #8
    322c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    322e:	1d3b      	adds	r3, r7, #4
    3230:	1c18      	adds	r0, r3, #0
    3232:	4b06      	ldr	r3, [pc, #24]	; (324c <configure_port_pins+0x24>)
    3234:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    3236:	1d3b      	adds	r3, r7, #4
    3238:	2200      	movs	r2, #0
    323a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    323c:	1d3b      	adds	r3, r7, #4
    323e:	2003      	movs	r0, #3
    3240:	1c19      	adds	r1, r3, #0
    3242:	4b03      	ldr	r3, [pc, #12]	; (3250 <configure_port_pins+0x28>)
    3244:	4798      	blx	r3
}
    3246:	46bd      	mov	sp, r7
    3248:	b002      	add	sp, #8
    324a:	bd80      	pop	{r7, pc}
    324c:	00002f49 	.word	0x00002f49
    3250:	00002041 	.word	0x00002041

00003254 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    3254:	b580      	push	{r7, lr}
    3256:	b084      	sub	sp, #16
    3258:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    325a:	1d3b      	adds	r3, r7, #4
    325c:	1c18      	adds	r0, r3, #0
    325e:	4b0b      	ldr	r3, [pc, #44]	; (328c <configure_extint_channel+0x38>)
    3260:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    3262:	1d3b      	adds	r3, r7, #4
    3264:	2203      	movs	r2, #3
    3266:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    3268:	1d3b      	adds	r3, r7, #4
    326a:	2200      	movs	r2, #0
    326c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    326e:	1d3b      	adds	r3, r7, #4
    3270:	2201      	movs	r2, #1
    3272:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3274:	1d3b      	adds	r3, r7, #4
    3276:	2201      	movs	r2, #1
    3278:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    327a:	1d3b      	adds	r3, r7, #4
    327c:	2003      	movs	r0, #3
    327e:	1c19      	adds	r1, r3, #0
    3280:	4b03      	ldr	r3, [pc, #12]	; (3290 <configure_extint_channel+0x3c>)
    3282:	4798      	blx	r3
}
    3284:	46bd      	mov	sp, r7
    3286:	b004      	add	sp, #16
    3288:	bd80      	pop	{r7, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	000003ad 	.word	0x000003ad
    3290:	000003e1 	.word	0x000003e1

00003294 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    3294:	b580      	push	{r7, lr}
    3296:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    3298:	4b05      	ldr	r3, [pc, #20]	; (32b0 <configure_extint_callbacks+0x1c>)
    329a:	1c18      	adds	r0, r3, #0
    329c:	2103      	movs	r1, #3
    329e:	2200      	movs	r2, #0
    32a0:	4b04      	ldr	r3, [pc, #16]	; (32b4 <configure_extint_callbacks+0x20>)
    32a2:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    32a4:	2003      	movs	r0, #3
    32a6:	2100      	movs	r1, #0
    32a8:	4b03      	ldr	r3, [pc, #12]	; (32b8 <configure_extint_callbacks+0x24>)
    32aa:	4798      	blx	r3
}
    32ac:	46bd      	mov	sp, r7
    32ae:	bd80      	pop	{r7, pc}
    32b0:	00003ff5 	.word	0x00003ff5
    32b4:	00000bb9 	.word	0x00000bb9
    32b8:	00000c1d 	.word	0x00000c1d

000032bc <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b090      	sub	sp, #64	; 0x40
    32c0:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    32c2:	1d3b      	adds	r3, r7, #4
    32c4:	1c18      	adds	r0, r3, #0
    32c6:	4b22      	ldr	r3, [pc, #136]	; (3350 <configure_RFM69_spi+0x94>)
    32c8:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    32ca:	1d3b      	adds	r3, r7, #4
    32cc:	2212      	movs	r2, #18
    32ce:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    32d0:	4a20      	ldr	r2, [pc, #128]	; (3354 <configure_RFM69_spi+0x98>)
    32d2:	1d3b      	adds	r3, r7, #4
    32d4:	1c10      	adds	r0, r2, #0
    32d6:	1c19      	adds	r1, r3, #0
    32d8:	4b1f      	ldr	r3, [pc, #124]	; (3358 <configure_RFM69_spi+0x9c>)
    32da:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    32dc:	2308      	movs	r3, #8
    32de:	18fb      	adds	r3, r7, r3
    32e0:	1c18      	adds	r0, r3, #0
    32e2:	4b1e      	ldr	r3, [pc, #120]	; (335c <configure_RFM69_spi+0xa0>)
    32e4:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    32e6:	2308      	movs	r3, #8
    32e8:	18fb      	adds	r3, r7, r3
    32ea:	22c0      	movs	r2, #192	; 0xc0
    32ec:	0392      	lsls	r2, r2, #14
    32ee:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    32f0:	2308      	movs	r3, #8
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	4a1a      	ldr	r2, [pc, #104]	; (3360 <configure_RFM69_spi+0xa4>)
    32f6:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    32f8:	2308      	movs	r3, #8
    32fa:	18fb      	adds	r3, r7, r3
    32fc:	4a19      	ldr	r2, [pc, #100]	; (3364 <configure_RFM69_spi+0xa8>)
    32fe:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    3300:	2308      	movs	r3, #8
    3302:	18fb      	adds	r3, r7, r3
    3304:	2201      	movs	r2, #1
    3306:	4252      	negs	r2, r2
    3308:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    330a:	2308      	movs	r3, #8
    330c:	18fb      	adds	r3, r7, r3
    330e:	4a16      	ldr	r2, [pc, #88]	; (3368 <configure_RFM69_spi+0xac>)
    3310:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    3312:	2308      	movs	r3, #8
    3314:	18fb      	adds	r3, r7, r3
    3316:	2200      	movs	r2, #0
    3318:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    331a:	2308      	movs	r3, #8
    331c:	18fb      	adds	r3, r7, r3
    331e:	2200      	movs	r2, #0
    3320:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    3322:	4a12      	ldr	r2, [pc, #72]	; (336c <configure_RFM69_spi+0xb0>)
    3324:	4912      	ldr	r1, [pc, #72]	; (3370 <configure_RFM69_spi+0xb4>)
    3326:	2308      	movs	r3, #8
    3328:	18fb      	adds	r3, r7, r3
    332a:	1c10      	adds	r0, r2, #0
    332c:	1c1a      	adds	r2, r3, #0
    332e:	4b11      	ldr	r3, [pc, #68]	; (3374 <configure_RFM69_spi+0xb8>)
    3330:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    3332:	4b0e      	ldr	r3, [pc, #56]	; (336c <configure_RFM69_spi+0xb0>)
    3334:	1c18      	adds	r0, r3, #0
    3336:	4b10      	ldr	r3, [pc, #64]	; (3378 <configure_RFM69_spi+0xbc>)
    3338:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    333a:	4a0c      	ldr	r2, [pc, #48]	; (336c <configure_RFM69_spi+0xb0>)
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <configure_RFM69_spi+0x98>)
    333e:	1c10      	adds	r0, r2, #0
    3340:	1c19      	adds	r1, r3, #0
    3342:	2200      	movs	r2, #0
    3344:	4b0d      	ldr	r3, [pc, #52]	; (337c <configure_RFM69_spi+0xc0>)
    3346:	4798      	blx	r3
}
    3348:	46bd      	mov	sp, r7
    334a:	b010      	add	sp, #64	; 0x40
    334c:	bd80      	pop	{r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	00003159 	.word	0x00003159
    3354:	2000020c 	.word	0x2000020c
    3358:	00003179 	.word	0x00003179
    335c:	000030d5 	.word	0x000030d5
    3360:	00100002 	.word	0x00100002
    3364:	00110002 	.word	0x00110002
    3368:	00130002 	.word	0x00130002
    336c:	200001cc 	.word	0x200001cc
    3370:	42000c00 	.word	0x42000c00
    3374:	00001379 	.word	0x00001379
    3378:	000031dd 	.word	0x000031dd
    337c:	00001665 	.word	0x00001665

00003380 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    3380:	b580      	push	{r7, lr}
    3382:	b084      	sub	sp, #16
    3384:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    3386:	1c3b      	adds	r3, r7, #0
    3388:	1c18      	adds	r0, r3, #0
    338a:	4b0f      	ldr	r3, [pc, #60]	; (33c8 <configure_rtc_count+0x48>)
    338c:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    338e:	1c3b      	adds	r3, r7, #0
    3390:	2200      	movs	r2, #0
    3392:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    3394:	1c3b      	adds	r3, r7, #0
    3396:	2200      	movs	r2, #0
    3398:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    339a:	1c3b      	adds	r3, r7, #0
    339c:	2201      	movs	r2, #1
    339e:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    33a0:	4a0a      	ldr	r2, [pc, #40]	; (33cc <configure_rtc_count+0x4c>)
    33a2:	490b      	ldr	r1, [pc, #44]	; (33d0 <configure_rtc_count+0x50>)
    33a4:	1c3b      	adds	r3, r7, #0
    33a6:	1c10      	adds	r0, r2, #0
    33a8:	1c1a      	adds	r2, r3, #0
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <configure_rtc_count+0x54>)
    33ac:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    33ae:	4b07      	ldr	r3, [pc, #28]	; (33cc <configure_rtc_count+0x4c>)
    33b0:	1c18      	adds	r0, r3, #0
    33b2:	4b09      	ldr	r3, [pc, #36]	; (33d8 <configure_rtc_count+0x58>)
    33b4:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    33b6:	4b05      	ldr	r3, [pc, #20]	; (33cc <configure_rtc_count+0x4c>)
    33b8:	4a08      	ldr	r2, [pc, #32]	; (33dc <configure_rtc_count+0x5c>)
    33ba:	1c18      	adds	r0, r3, #0
    33bc:	1c11      	adds	r1, r2, #0
    33be:	4b08      	ldr	r3, [pc, #32]	; (33e0 <configure_rtc_count+0x60>)
    33c0:	4798      	blx	r3
}
    33c2:	46bd      	mov	sp, r7
    33c4:	b004      	add	sp, #16
    33c6:	bd80      	pop	{r7, pc}
    33c8:	00003059 	.word	0x00003059
    33cc:	200000e0 	.word	0x200000e0
    33d0:	40001400 	.word	0x40001400
    33d4:	000007dd 	.word	0x000007dd
    33d8:	000005d5 	.word	0x000005d5
    33dc:	00002710 	.word	0x00002710
    33e0:	000009c1 	.word	0x000009c1

000033e4 <reset_millis>:

void reset_millis(void)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    33e8:	4b05      	ldr	r3, [pc, #20]	; (3400 <reset_millis+0x1c>)
    33ea:	1c18      	adds	r0, r3, #0
    33ec:	2100      	movs	r1, #0
    33ee:	4b05      	ldr	r3, [pc, #20]	; (3404 <reset_millis+0x20>)
    33f0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    33f2:	4b03      	ldr	r3, [pc, #12]	; (3400 <reset_millis+0x1c>)
    33f4:	1c18      	adds	r0, r3, #0
    33f6:	4b04      	ldr	r3, [pc, #16]	; (3408 <reset_millis+0x24>)
    33f8:	4798      	blx	r3
}
    33fa:	46bd      	mov	sp, r7
    33fc:	bd80      	pop	{r7, pc}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	200000e0 	.word	0x200000e0
    3404:	0000086d 	.word	0x0000086d
    3408:	000005d5 	.word	0x000005d5

0000340c <millis>:

uint32_t millis(void)
{
    340c:	b580      	push	{r7, lr}
    340e:	b082      	sub	sp, #8
    3410:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    3412:	2300      	movs	r3, #0
    3414:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    3416:	4b05      	ldr	r3, [pc, #20]	; (342c <millis+0x20>)
    3418:	1c18      	adds	r0, r3, #0
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <millis+0x24>)
    341c:	4798      	blx	r3
    341e:	1c03      	adds	r3, r0, #0
    3420:	607b      	str	r3, [r7, #4]
	return milli;
    3422:	687b      	ldr	r3, [r7, #4]
}
    3424:	1c18      	adds	r0, r3, #0
    3426:	46bd      	mov	sp, r7
    3428:	b002      	add	sp, #8
    342a:	bd80      	pop	{r7, pc}
    342c:	200000e0 	.word	0x200000e0
    3430:	000008cd 	.word	0x000008cd

00003434 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    3434:	b590      	push	{r4, r7, lr}
    3436:	b085      	sub	sp, #20
    3438:	af00      	add	r7, sp, #0
    343a:	1c04      	adds	r4, r0, #0
    343c:	6039      	str	r1, [r7, #0]
    343e:	1c10      	adds	r0, r2, #0
    3440:	1c19      	adds	r1, r3, #0
    3442:	1dfb      	adds	r3, r7, #7
    3444:	1c22      	adds	r2, r4, #0
    3446:	701a      	strb	r2, [r3, #0]
    3448:	1dbb      	adds	r3, r7, #6
    344a:	1c02      	adds	r2, r0, #0
    344c:	701a      	strb	r2, [r3, #0]
    344e:	1d7b      	adds	r3, r7, #5
    3450:	1c0a      	adds	r2, r1, #0
    3452:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    3454:	2001      	movs	r0, #1
    3456:	4b50      	ldr	r3, [pc, #320]	; (3598 <sendFrame+0x164>)
    3458:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	2027      	movs	r0, #39	; 0x27
    345e:	4b4f      	ldr	r3, [pc, #316]	; (359c <sendFrame+0x168>)
    3460:	4798      	blx	r3
    3462:	1c03      	adds	r3, r0, #0
    3464:	b2db      	uxtb	r3, r3
    3466:	b25b      	sxtb	r3, r3
    3468:	2b00      	cmp	r3, #0
    346a:	daf7      	bge.n	345c <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    346c:	2025      	movs	r0, #37	; 0x25
    346e:	2100      	movs	r1, #0
    3470:	4b4b      	ldr	r3, [pc, #300]	; (35a0 <sendFrame+0x16c>)
    3472:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    3474:	1dbb      	adds	r3, r7, #6
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	2b3d      	cmp	r3, #61	; 0x3d
    347a:	d902      	bls.n	3482 <sendFrame+0x4e>
    347c:	1dbb      	adds	r3, r7, #6
    347e:	223d      	movs	r2, #61	; 0x3d
    3480:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    3482:	230e      	movs	r3, #14
    3484:	18fb      	adds	r3, r7, r3
    3486:	2200      	movs	r2, #0
    3488:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    348a:	2320      	movs	r3, #32
    348c:	18fb      	adds	r3, r7, r3
    348e:	781b      	ldrb	r3, [r3, #0]
    3490:	2b00      	cmp	r3, #0
    3492:	d004      	beq.n	349e <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    3494:	230e      	movs	r3, #14
    3496:	18fb      	adds	r3, r7, r3
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	701a      	strb	r2, [r3, #0]
    349c:	e007      	b.n	34ae <sendFrame+0x7a>
	else if (requestACK)
    349e:	1d7b      	adds	r3, r7, #5
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d003      	beq.n	34ae <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    34a6:	230e      	movs	r3, #14
    34a8:	18fb      	adds	r3, r7, r3
    34aa:	2240      	movs	r2, #64	; 0x40
    34ac:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	select();
    34ae:	4b3d      	ldr	r3, [pc, #244]	; (35a4 <sendFrame+0x170>)
    34b0:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    34b2:	4a3d      	ldr	r2, [pc, #244]	; (35a8 <sendFrame+0x174>)
    34b4:	4b3d      	ldr	r3, [pc, #244]	; (35ac <sendFrame+0x178>)
    34b6:	1c10      	adds	r0, r2, #0
    34b8:	2180      	movs	r1, #128	; 0x80
    34ba:	1c1a      	adds	r2, r3, #0
    34bc:	4b3c      	ldr	r3, [pc, #240]	; (35b0 <sendFrame+0x17c>)
    34be:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    34c0:	1dbb      	adds	r3, r7, #6
    34c2:	781b      	ldrb	r3, [r3, #0]
    34c4:	b29b      	uxth	r3, r3
    34c6:	3303      	adds	r3, #3
    34c8:	b29a      	uxth	r2, r3
    34ca:	4937      	ldr	r1, [pc, #220]	; (35a8 <sendFrame+0x174>)
    34cc:	4b37      	ldr	r3, [pc, #220]	; (35ac <sendFrame+0x178>)
    34ce:	1c08      	adds	r0, r1, #0
    34d0:	1c11      	adds	r1, r2, #0
    34d2:	1c1a      	adds	r2, r3, #0
    34d4:	4b36      	ldr	r3, [pc, #216]	; (35b0 <sendFrame+0x17c>)
    34d6:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    34d8:	1dfb      	adds	r3, r7, #7
    34da:	781b      	ldrb	r3, [r3, #0]
    34dc:	b29a      	uxth	r2, r3
    34de:	4932      	ldr	r1, [pc, #200]	; (35a8 <sendFrame+0x174>)
    34e0:	4b32      	ldr	r3, [pc, #200]	; (35ac <sendFrame+0x178>)
    34e2:	1c08      	adds	r0, r1, #0
    34e4:	1c11      	adds	r1, r2, #0
    34e6:	1c1a      	adds	r2, r3, #0
    34e8:	4b31      	ldr	r3, [pc, #196]	; (35b0 <sendFrame+0x17c>)
    34ea:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    34ec:	4b31      	ldr	r3, [pc, #196]	; (35b4 <sendFrame+0x180>)
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	b2db      	uxtb	r3, r3
    34f2:	b29a      	uxth	r2, r3
    34f4:	492c      	ldr	r1, [pc, #176]	; (35a8 <sendFrame+0x174>)
    34f6:	4b2d      	ldr	r3, [pc, #180]	; (35ac <sendFrame+0x178>)
    34f8:	1c08      	adds	r0, r1, #0
    34fa:	1c11      	adds	r1, r2, #0
    34fc:	1c1a      	adds	r2, r3, #0
    34fe:	4b2c      	ldr	r3, [pc, #176]	; (35b0 <sendFrame+0x17c>)
    3500:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    3502:	230e      	movs	r3, #14
    3504:	18fb      	adds	r3, r7, r3
    3506:	781b      	ldrb	r3, [r3, #0]
    3508:	b2db      	uxtb	r3, r3
    350a:	b29a      	uxth	r2, r3
    350c:	4926      	ldr	r1, [pc, #152]	; (35a8 <sendFrame+0x174>)
    350e:	4b27      	ldr	r3, [pc, #156]	; (35ac <sendFrame+0x178>)
    3510:	1c08      	adds	r0, r1, #0
    3512:	1c11      	adds	r1, r2, #0
    3514:	1c1a      	adds	r2, r3, #0
    3516:	4b26      	ldr	r3, [pc, #152]	; (35b0 <sendFrame+0x17c>)
    3518:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    351a:	230f      	movs	r3, #15
    351c:	18fb      	adds	r3, r7, r3
    351e:	2200      	movs	r2, #0
    3520:	701a      	strb	r2, [r3, #0]
    3522:	e014      	b.n	354e <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    3524:	230f      	movs	r3, #15
    3526:	18fb      	adds	r3, r7, r3
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	683a      	ldr	r2, [r7, #0]
    352c:	18d3      	adds	r3, r2, r3
    352e:	781b      	ldrb	r3, [r3, #0]
    3530:	b29a      	uxth	r2, r3
    3532:	491d      	ldr	r1, [pc, #116]	; (35a8 <sendFrame+0x174>)
    3534:	4b1d      	ldr	r3, [pc, #116]	; (35ac <sendFrame+0x178>)
    3536:	1c08      	adds	r0, r1, #0
    3538:	1c11      	adds	r1, r2, #0
    353a:	1c1a      	adds	r2, r3, #0
    353c:	4b1c      	ldr	r3, [pc, #112]	; (35b0 <sendFrame+0x17c>)
    353e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    3540:	230f      	movs	r3, #15
    3542:	18fb      	adds	r3, r7, r3
    3544:	781a      	ldrb	r2, [r3, #0]
    3546:	230f      	movs	r3, #15
    3548:	18fb      	adds	r3, r7, r3
    354a:	3201      	adds	r2, #1
    354c:	701a      	strb	r2, [r3, #0]
    354e:	230f      	movs	r3, #15
    3550:	18fa      	adds	r2, r7, r3
    3552:	1dbb      	adds	r3, r7, #6
    3554:	7812      	ldrb	r2, [r2, #0]
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	429a      	cmp	r2, r3
    355a:	d3e3      	bcc.n	3524 <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    355c:	4b16      	ldr	r3, [pc, #88]	; (35b8 <sendFrame+0x184>)
    355e:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    3560:	2004      	movs	r0, #4
    3562:	4b0d      	ldr	r3, [pc, #52]	; (3598 <sendFrame+0x164>)
    3564:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    3566:	4b15      	ldr	r3, [pc, #84]	; (35bc <sendFrame+0x188>)
    3568:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	2003      	movs	r0, #3
    356e:	4b14      	ldr	r3, [pc, #80]	; (35c0 <sendFrame+0x18c>)
    3570:	4798      	blx	r3
    3572:	1c03      	adds	r3, r0, #0
    3574:	1c1a      	adds	r2, r3, #0
    3576:	2301      	movs	r3, #1
    3578:	4053      	eors	r3, r2
    357a:	b2db      	uxtb	r3, r3
    357c:	2b00      	cmp	r3, #0
    357e:	d005      	beq.n	358c <sendFrame+0x158>
    3580:	4b10      	ldr	r3, [pc, #64]	; (35c4 <sendFrame+0x190>)
    3582:	4798      	blx	r3
    3584:	1e02      	subs	r2, r0, #0
    3586:	4b10      	ldr	r3, [pc, #64]	; (35c8 <sendFrame+0x194>)
    3588:	429a      	cmp	r2, r3
    358a:	d9ef      	bls.n	356c <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    358c:	2001      	movs	r0, #1
    358e:	4b02      	ldr	r3, [pc, #8]	; (3598 <sendFrame+0x164>)
    3590:	4798      	blx	r3
}
    3592:	46bd      	mov	sp, r7
    3594:	b005      	add	sp, #20
    3596:	bd90      	pop	{r4, r7, pc}
    3598:	000039ed 	.word	0x000039ed
    359c:	00004201 	.word	0x00004201
    35a0:	0000426d 	.word	0x0000426d
    35a4:	000042d1 	.word	0x000042d1
    35a8:	200001cc 	.word	0x200001cc
    35ac:	2000005c 	.word	0x2000005c
    35b0:	0000151d 	.word	0x0000151d
    35b4:	2000013c 	.word	0x2000013c
    35b8:	000042fd 	.word	0x000042fd
    35bc:	000033e5 	.word	0x000033e5
    35c0:	00002f69 	.word	0x00002f69
    35c4:	0000340d 	.word	0x0000340d
    35c8:	000003e7 	.word	0x000003e7

000035cc <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    35cc:	b580      	push	{r7, lr}
    35ce:	b082      	sub	sp, #8
    35d0:	af00      	add	r7, sp, #0
    35d2:	1c02      	adds	r2, r0, #0
    35d4:	1dfb      	adds	r3, r7, #7
    35d6:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    35d8:	4b1a      	ldr	r3, [pc, #104]	; (3644 <RFM_setHighPower+0x78>)
    35da:	1dfa      	adds	r2, r7, #7
    35dc:	7812      	ldrb	r2, [r2, #0]
    35de:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    35e0:	4b18      	ldr	r3, [pc, #96]	; (3644 <RFM_setHighPower+0x78>)
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	b2db      	uxtb	r3, r3
    35e6:	2b00      	cmp	r3, #0
    35e8:	d001      	beq.n	35ee <RFM_setHighPower+0x22>
    35ea:	230f      	movs	r3, #15
    35ec:	e000      	b.n	35f0 <RFM_setHighPower+0x24>
    35ee:	231a      	movs	r3, #26
    35f0:	2013      	movs	r0, #19
    35f2:	1c19      	adds	r1, r3, #0
    35f4:	4b14      	ldr	r3, [pc, #80]	; (3648 <RFM_setHighPower+0x7c>)
    35f6:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    35f8:	4b12      	ldr	r3, [pc, #72]	; (3644 <RFM_setHighPower+0x78>)
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	b2db      	uxtb	r3, r3
    35fe:	2b00      	cmp	r3, #0
    3600:	d012      	beq.n	3628 <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    3602:	2011      	movs	r0, #17
    3604:	4b11      	ldr	r3, [pc, #68]	; (364c <RFM_setHighPower+0x80>)
    3606:	4798      	blx	r3
    3608:	1c03      	adds	r3, r0, #0
    360a:	b2db      	uxtb	r3, r3
    360c:	1c1a      	adds	r2, r3, #0
    360e:	231f      	movs	r3, #31
    3610:	4013      	ands	r3, r2
    3612:	b2db      	uxtb	r3, r3
    3614:	1c1a      	adds	r2, r3, #0
    3616:	2360      	movs	r3, #96	; 0x60
    3618:	4313      	orrs	r3, r2
    361a:	b2db      	uxtb	r3, r3
    361c:	b2db      	uxtb	r3, r3
    361e:	2011      	movs	r0, #17
    3620:	1c19      	adds	r1, r3, #0
    3622:	4b09      	ldr	r3, [pc, #36]	; (3648 <RFM_setHighPower+0x7c>)
    3624:	4798      	blx	r3
    3626:	e009      	b.n	363c <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    3628:	4b09      	ldr	r3, [pc, #36]	; (3650 <RFM_setHighPower+0x84>)
    362a:	781b      	ldrb	r3, [r3, #0]
    362c:	2280      	movs	r2, #128	; 0x80
    362e:	4252      	negs	r2, r2
    3630:	4313      	orrs	r3, r2
    3632:	b2db      	uxtb	r3, r3
    3634:	2011      	movs	r0, #17
    3636:	1c19      	adds	r1, r3, #0
    3638:	4b03      	ldr	r3, [pc, #12]	; (3648 <RFM_setHighPower+0x7c>)
    363a:	4798      	blx	r3
}
    363c:	46bd      	mov	sp, r7
    363e:	b002      	add	sp, #8
    3640:	bd80      	pop	{r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	200001c8 	.word	0x200001c8
    3648:	0000426d 	.word	0x0000426d
    364c:	00004201 	.word	0x00004201
    3650:	200000f8 	.word	0x200000f8

00003654 <RFM69>:

void RFM69()
{
    3654:	b580      	push	{r7, lr}
    3656:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    3658:	4b06      	ldr	r3, [pc, #24]	; (3674 <RFM69+0x20>)
    365a:	2201      	movs	r2, #1
    365c:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    365e:	4b06      	ldr	r3, [pc, #24]	; (3678 <RFM69+0x24>)
    3660:	2200      	movs	r2, #0
    3662:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <RFM69+0x28>)
    3666:	221f      	movs	r2, #31
    3668:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    366a:	4b05      	ldr	r3, [pc, #20]	; (3680 <RFM69+0x2c>)
    366c:	2200      	movs	r2, #0
    366e:	701a      	strb	r2, [r3, #0]
}
    3670:	46bd      	mov	sp, r7
    3672:	bd80      	pop	{r7, pc}
    3674:	200001c6 	.word	0x200001c6
    3678:	20000142 	.word	0x20000142
    367c:	200000f8 	.word	0x200000f8
    3680:	200001c8 	.word	0x200001c8

00003684 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    3684:	b590      	push	{r4, r7, lr}
    3686:	b091      	sub	sp, #68	; 0x44
    3688:	af00      	add	r7, sp, #0
    368a:	1c04      	adds	r4, r0, #0
    368c:	1c08      	adds	r0, r1, #0
    368e:	1c11      	adds	r1, r2, #0
    3690:	1dfb      	adds	r3, r7, #7
    3692:	1c22      	adds	r2, r4, #0
    3694:	701a      	strb	r2, [r3, #0]
    3696:	1dbb      	adds	r3, r7, #6
    3698:	1c02      	adds	r2, r0, #0
    369a:	701a      	strb	r2, [r3, #0]
    369c:	1d7b      	adds	r3, r7, #5
    369e:	1c0a      	adds	r2, r1, #0
    36a0:	701a      	strb	r2, [r3, #0]
  RFM69();
    36a2:	4bc2      	ldr	r3, [pc, #776]	; (39ac <RFM_initialize+0x328>)
    36a4:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    36a6:	2310      	movs	r3, #16
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	2201      	movs	r2, #1
    36ac:	701a      	strb	r2, [r3, #0]
    36ae:	2310      	movs	r3, #16
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	2204      	movs	r2, #4
    36b4:	705a      	strb	r2, [r3, #1]
    36b6:	2310      	movs	r3, #16
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	2202      	movs	r2, #2
    36bc:	709a      	strb	r2, [r3, #2]
    36be:	2310      	movs	r3, #16
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	2200      	movs	r2, #0
    36c4:	70da      	strb	r2, [r3, #3]
    36c6:	2310      	movs	r3, #16
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	2203      	movs	r2, #3
    36cc:	711a      	strb	r2, [r3, #4]
    36ce:	2310      	movs	r3, #16
    36d0:	18fb      	adds	r3, r7, r3
    36d2:	2202      	movs	r2, #2
    36d4:	715a      	strb	r2, [r3, #5]
    36d6:	2310      	movs	r3, #16
    36d8:	18fb      	adds	r3, r7, r3
    36da:	2204      	movs	r2, #4
    36dc:	719a      	strb	r2, [r3, #6]
    36de:	2310      	movs	r3, #16
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	2240      	movs	r2, #64	; 0x40
    36e4:	71da      	strb	r2, [r3, #7]
    36e6:	2310      	movs	r3, #16
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	2205      	movs	r2, #5
    36ec:	721a      	strb	r2, [r3, #8]
    36ee:	2310      	movs	r3, #16
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	2203      	movs	r2, #3
    36f4:	725a      	strb	r2, [r3, #9]
    36f6:	2310      	movs	r3, #16
    36f8:	18fb      	adds	r3, r7, r3
    36fa:	2206      	movs	r2, #6
    36fc:	729a      	strb	r2, [r3, #10]
    36fe:	2310      	movs	r3, #16
    3700:	18fb      	adds	r3, r7, r3
    3702:	2233      	movs	r2, #51	; 0x33
    3704:	72da      	strb	r2, [r3, #11]
    3706:	2310      	movs	r3, #16
    3708:	18fb      	adds	r3, r7, r3
    370a:	2207      	movs	r2, #7
    370c:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    370e:	1dfb      	adds	r3, r7, #7
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	2b1f      	cmp	r3, #31
    3714:	d00d      	beq.n	3732 <RFM_initialize+0xae>
    3716:	1dfb      	adds	r3, r7, #7
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	2b2b      	cmp	r3, #43	; 0x2b
    371c:	d007      	beq.n	372e <RFM_initialize+0xaa>
    371e:	1dfb      	adds	r3, r7, #7
    3720:	781b      	ldrb	r3, [r3, #0]
    3722:	2b56      	cmp	r3, #86	; 0x56
    3724:	d101      	bne.n	372a <RFM_initialize+0xa6>
    3726:	23d9      	movs	r3, #217	; 0xd9
    3728:	e004      	b.n	3734 <RFM_initialize+0xb0>
    372a:	23e4      	movs	r3, #228	; 0xe4
    372c:	e002      	b.n	3734 <RFM_initialize+0xb0>
    372e:	236c      	movs	r3, #108	; 0x6c
    3730:	e000      	b.n	3734 <RFM_initialize+0xb0>
    3732:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    3734:	2210      	movs	r2, #16
    3736:	18ba      	adds	r2, r7, r2
    3738:	7353      	strb	r3, [r2, #13]
    373a:	2310      	movs	r3, #16
    373c:	18fb      	adds	r3, r7, r3
    373e:	2208      	movs	r2, #8
    3740:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    3742:	1dfb      	adds	r3, r7, #7
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	2b1f      	cmp	r3, #31
    3748:	d00d      	beq.n	3766 <RFM_initialize+0xe2>
    374a:	1dfb      	adds	r3, r7, #7
    374c:	781b      	ldrb	r3, [r3, #0]
    374e:	2b2b      	cmp	r3, #43	; 0x2b
    3750:	d007      	beq.n	3762 <RFM_initialize+0xde>
    3752:	1dfb      	adds	r3, r7, #7
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b56      	cmp	r3, #86	; 0x56
    3758:	d101      	bne.n	375e <RFM_initialize+0xda>
    375a:	2300      	movs	r3, #0
    375c:	e004      	b.n	3768 <RFM_initialize+0xe4>
    375e:	23c0      	movs	r3, #192	; 0xc0
    3760:	e002      	b.n	3768 <RFM_initialize+0xe4>
    3762:	2340      	movs	r3, #64	; 0x40
    3764:	e000      	b.n	3768 <RFM_initialize+0xe4>
    3766:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    3768:	2210      	movs	r2, #16
    376a:	18ba      	adds	r2, r7, r2
    376c:	73d3      	strb	r3, [r2, #15]
    376e:	2310      	movs	r3, #16
    3770:	18fb      	adds	r3, r7, r3
    3772:	2209      	movs	r2, #9
    3774:	741a      	strb	r2, [r3, #16]
    3776:	2310      	movs	r3, #16
    3778:	18fb      	adds	r3, r7, r3
    377a:	2200      	movs	r2, #0
    377c:	745a      	strb	r2, [r3, #17]
    377e:	2310      	movs	r3, #16
    3780:	18fb      	adds	r3, r7, r3
    3782:	2219      	movs	r2, #25
    3784:	749a      	strb	r2, [r3, #18]
    3786:	2310      	movs	r3, #16
    3788:	18fb      	adds	r3, r7, r3
    378a:	2242      	movs	r2, #66	; 0x42
    378c:	74da      	strb	r2, [r3, #19]
    378e:	2310      	movs	r3, #16
    3790:	18fb      	adds	r3, r7, r3
    3792:	2225      	movs	r2, #37	; 0x25
    3794:	751a      	strb	r2, [r3, #20]
    3796:	2310      	movs	r3, #16
    3798:	18fb      	adds	r3, r7, r3
    379a:	2240      	movs	r2, #64	; 0x40
    379c:	755a      	strb	r2, [r3, #21]
    379e:	2310      	movs	r3, #16
    37a0:	18fb      	adds	r3, r7, r3
    37a2:	2226      	movs	r2, #38	; 0x26
    37a4:	759a      	strb	r2, [r3, #22]
    37a6:	2310      	movs	r3, #16
    37a8:	18fb      	adds	r3, r7, r3
    37aa:	2207      	movs	r2, #7
    37ac:	75da      	strb	r2, [r3, #23]
    37ae:	2310      	movs	r3, #16
    37b0:	18fb      	adds	r3, r7, r3
    37b2:	2228      	movs	r2, #40	; 0x28
    37b4:	761a      	strb	r2, [r3, #24]
    37b6:	2310      	movs	r3, #16
    37b8:	18fb      	adds	r3, r7, r3
    37ba:	2210      	movs	r2, #16
    37bc:	765a      	strb	r2, [r3, #25]
    37be:	2310      	movs	r3, #16
    37c0:	18fb      	adds	r3, r7, r3
    37c2:	2229      	movs	r2, #41	; 0x29
    37c4:	769a      	strb	r2, [r3, #26]
    37c6:	2310      	movs	r3, #16
    37c8:	18fb      	adds	r3, r7, r3
    37ca:	22dc      	movs	r2, #220	; 0xdc
    37cc:	76da      	strb	r2, [r3, #27]
    37ce:	2310      	movs	r3, #16
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	222e      	movs	r2, #46	; 0x2e
    37d4:	771a      	strb	r2, [r3, #28]
    37d6:	2310      	movs	r3, #16
    37d8:	18fb      	adds	r3, r7, r3
    37da:	2288      	movs	r2, #136	; 0x88
    37dc:	775a      	strb	r2, [r3, #29]
    37de:	2310      	movs	r3, #16
    37e0:	18fb      	adds	r3, r7, r3
    37e2:	222f      	movs	r2, #47	; 0x2f
    37e4:	779a      	strb	r2, [r3, #30]
    37e6:	2310      	movs	r3, #16
    37e8:	18fb      	adds	r3, r7, r3
    37ea:	222d      	movs	r2, #45	; 0x2d
    37ec:	77da      	strb	r2, [r3, #31]
    37ee:	2310      	movs	r3, #16
    37f0:	18fb      	adds	r3, r7, r3
    37f2:	2220      	movs	r2, #32
    37f4:	2130      	movs	r1, #48	; 0x30
    37f6:	5499      	strb	r1, [r3, r2]
    37f8:	2310      	movs	r3, #16
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	1d7a      	adds	r2, r7, #5
    37fe:	2121      	movs	r1, #33	; 0x21
    3800:	7812      	ldrb	r2, [r2, #0]
    3802:	545a      	strb	r2, [r3, r1]
    3804:	2310      	movs	r3, #16
    3806:	18fb      	adds	r3, r7, r3
    3808:	2222      	movs	r2, #34	; 0x22
    380a:	2137      	movs	r1, #55	; 0x37
    380c:	5499      	strb	r1, [r3, r2]
    380e:	2310      	movs	r3, #16
    3810:	18fb      	adds	r3, r7, r3
    3812:	2223      	movs	r2, #35	; 0x23
    3814:	2190      	movs	r1, #144	; 0x90
    3816:	5499      	strb	r1, [r3, r2]
    3818:	2310      	movs	r3, #16
    381a:	18fb      	adds	r3, r7, r3
    381c:	2224      	movs	r2, #36	; 0x24
    381e:	2138      	movs	r1, #56	; 0x38
    3820:	5499      	strb	r1, [r3, r2]
    3822:	2310      	movs	r3, #16
    3824:	18fb      	adds	r3, r7, r3
    3826:	2225      	movs	r2, #37	; 0x25
    3828:	2142      	movs	r1, #66	; 0x42
    382a:	5499      	strb	r1, [r3, r2]
    382c:	2310      	movs	r3, #16
    382e:	18fb      	adds	r3, r7, r3
    3830:	2226      	movs	r2, #38	; 0x26
    3832:	213c      	movs	r1, #60	; 0x3c
    3834:	5499      	strb	r1, [r3, r2]
    3836:	2310      	movs	r3, #16
    3838:	18fb      	adds	r3, r7, r3
    383a:	2227      	movs	r2, #39	; 0x27
    383c:	218f      	movs	r1, #143	; 0x8f
    383e:	5499      	strb	r1, [r3, r2]
    3840:	2310      	movs	r3, #16
    3842:	18fb      	adds	r3, r7, r3
    3844:	2228      	movs	r2, #40	; 0x28
    3846:	213d      	movs	r1, #61	; 0x3d
    3848:	5499      	strb	r1, [r3, r2]
    384a:	2310      	movs	r3, #16
    384c:	18fb      	adds	r3, r7, r3
    384e:	2229      	movs	r2, #41	; 0x29
    3850:	2112      	movs	r1, #18
    3852:	5499      	strb	r1, [r3, r2]
    3854:	2310      	movs	r3, #16
    3856:	18fb      	adds	r3, r7, r3
    3858:	222a      	movs	r2, #42	; 0x2a
    385a:	216f      	movs	r1, #111	; 0x6f
    385c:	5499      	strb	r1, [r3, r2]
    385e:	2310      	movs	r3, #16
    3860:	18fb      	adds	r3, r7, r3
    3862:	222b      	movs	r2, #43	; 0x2b
    3864:	2130      	movs	r1, #48	; 0x30
    3866:	5499      	strb	r1, [r3, r2]
    3868:	2310      	movs	r3, #16
    386a:	18fb      	adds	r3, r7, r3
    386c:	222c      	movs	r2, #44	; 0x2c
    386e:	21ff      	movs	r1, #255	; 0xff
    3870:	5499      	strb	r1, [r3, r2]
    3872:	2310      	movs	r3, #16
    3874:	18fb      	adds	r3, r7, r3
    3876:	222d      	movs	r2, #45	; 0x2d
    3878:	2100      	movs	r1, #0
    387a:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    387c:	4b4c      	ldr	r3, [pc, #304]	; (39b0 <RFM_initialize+0x32c>)
    387e:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    3880:	4b4c      	ldr	r3, [pc, #304]	; (39b4 <RFM_initialize+0x330>)
    3882:	4798      	blx	r3
  configure_port_pins();
    3884:	4b4c      	ldr	r3, [pc, #304]	; (39b8 <RFM_initialize+0x334>)
    3886:	4798      	blx	r3
  configure_extint_channel();
    3888:	4b4c      	ldr	r3, [pc, #304]	; (39bc <RFM_initialize+0x338>)
    388a:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    388c:	4b4c      	ldr	r3, [pc, #304]	; (39c0 <RFM_initialize+0x33c>)
    388e:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    3890:	230f      	movs	r3, #15
    3892:	18fb      	adds	r3, r7, r3
    3894:	2232      	movs	r2, #50	; 0x32
    3896:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    3898:	202f      	movs	r0, #47	; 0x2f
    389a:	21aa      	movs	r1, #170	; 0xaa
    389c:	4b49      	ldr	r3, [pc, #292]	; (39c4 <RFM_initialize+0x340>)
    389e:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    38a0:	202f      	movs	r0, #47	; 0x2f
    38a2:	4b49      	ldr	r3, [pc, #292]	; (39c8 <RFM_initialize+0x344>)
    38a4:	4798      	blx	r3
    38a6:	1e03      	subs	r3, r0, #0
    38a8:	2baa      	cmp	r3, #170	; 0xaa
    38aa:	d008      	beq.n	38be <RFM_initialize+0x23a>
    38ac:	4b47      	ldr	r3, [pc, #284]	; (39cc <RFM_initialize+0x348>)
    38ae:	4798      	blx	r3
    38b0:	1c02      	adds	r2, r0, #0
    38b2:	230f      	movs	r3, #15
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	b2db      	uxtb	r3, r3
    38ba:	429a      	cmp	r2, r3
    38bc:	d3ec      	bcc.n	3898 <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    38be:	4b40      	ldr	r3, [pc, #256]	; (39c0 <RFM_initialize+0x33c>)
    38c0:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    38c2:	202f      	movs	r0, #47	; 0x2f
    38c4:	2155      	movs	r1, #85	; 0x55
    38c6:	4b3f      	ldr	r3, [pc, #252]	; (39c4 <RFM_initialize+0x340>)
    38c8:	4798      	blx	r3
    38ca:	202f      	movs	r0, #47	; 0x2f
    38cc:	4b3e      	ldr	r3, [pc, #248]	; (39c8 <RFM_initialize+0x344>)
    38ce:	4798      	blx	r3
    38d0:	1e03      	subs	r3, r0, #0
    38d2:	2b55      	cmp	r3, #85	; 0x55
    38d4:	d008      	beq.n	38e8 <RFM_initialize+0x264>
    38d6:	4b3d      	ldr	r3, [pc, #244]	; (39cc <RFM_initialize+0x348>)
    38d8:	4798      	blx	r3
    38da:	1c02      	adds	r2, r0, #0
    38dc:	230f      	movs	r3, #15
    38de:	18fb      	adds	r3, r7, r3
    38e0:	781b      	ldrb	r3, [r3, #0]
    38e2:	b2db      	uxtb	r3, r3
    38e4:	429a      	cmp	r2, r3
    38e6:	d3ec      	bcc.n	38c2 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    38e8:	233f      	movs	r3, #63	; 0x3f
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	2200      	movs	r2, #0
    38ee:	701a      	strb	r2, [r3, #0]
    38f0:	e01a      	b.n	3928 <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    38f2:	233f      	movs	r3, #63	; 0x3f
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	781a      	ldrb	r2, [r3, #0]
    38f8:	2310      	movs	r3, #16
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	0052      	lsls	r2, r2, #1
    38fe:	5cd1      	ldrb	r1, [r2, r3]
    3900:	233f      	movs	r3, #63	; 0x3f
    3902:	18fb      	adds	r3, r7, r3
    3904:	781b      	ldrb	r3, [r3, #0]
    3906:	2210      	movs	r2, #16
    3908:	18ba      	adds	r2, r7, r2
    390a:	005b      	lsls	r3, r3, #1
    390c:	18d3      	adds	r3, r2, r3
    390e:	3301      	adds	r3, #1
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	1c08      	adds	r0, r1, #0
    3914:	1c19      	adds	r1, r3, #0
    3916:	4b2b      	ldr	r3, [pc, #172]	; (39c4 <RFM_initialize+0x340>)
    3918:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    391a:	233f      	movs	r3, #63	; 0x3f
    391c:	18fb      	adds	r3, r7, r3
    391e:	781a      	ldrb	r2, [r3, #0]
    3920:	233f      	movs	r3, #63	; 0x3f
    3922:	18fb      	adds	r3, r7, r3
    3924:	3201      	adds	r2, #1
    3926:	701a      	strb	r2, [r3, #0]
    3928:	233f      	movs	r3, #63	; 0x3f
    392a:	18fb      	adds	r3, r7, r3
    392c:	781a      	ldrb	r2, [r3, #0]
    392e:	2310      	movs	r3, #16
    3930:	18fb      	adds	r3, r7, r3
    3932:	0052      	lsls	r2, r2, #1
    3934:	5cd3      	ldrb	r3, [r2, r3]
    3936:	2bff      	cmp	r3, #255	; 0xff
    3938:	d1db      	bne.n	38f2 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    393a:	2000      	movs	r0, #0
    393c:	4b24      	ldr	r3, [pc, #144]	; (39d0 <RFM_initialize+0x34c>)
    393e:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    3940:	4b24      	ldr	r3, [pc, #144]	; (39d4 <RFM_initialize+0x350>)
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	b2db      	uxtb	r3, r3
    3946:	1c18      	adds	r0, r3, #0
    3948:	4b23      	ldr	r3, [pc, #140]	; (39d8 <RFM_initialize+0x354>)
    394a:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    394c:	2001      	movs	r0, #1
    394e:	4b23      	ldr	r3, [pc, #140]	; (39dc <RFM_initialize+0x358>)
    3950:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    3952:	4b1b      	ldr	r3, [pc, #108]	; (39c0 <RFM_initialize+0x33c>)
    3954:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	2027      	movs	r0, #39	; 0x27
    395a:	4b1b      	ldr	r3, [pc, #108]	; (39c8 <RFM_initialize+0x344>)
    395c:	4798      	blx	r3
    395e:	1c03      	adds	r3, r0, #0
    3960:	b2db      	uxtb	r3, r3
    3962:	b25b      	sxtb	r3, r3
    3964:	2b00      	cmp	r3, #0
    3966:	db08      	blt.n	397a <RFM_initialize+0x2f6>
    3968:	4b18      	ldr	r3, [pc, #96]	; (39cc <RFM_initialize+0x348>)
    396a:	4798      	blx	r3
    396c:	1c02      	adds	r2, r0, #0
    396e:	230f      	movs	r3, #15
    3970:	18fb      	adds	r3, r7, r3
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	b2db      	uxtb	r3, r3
    3976:	429a      	cmp	r2, r3
    3978:	d3ee      	bcc.n	3958 <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
    397a:	4b14      	ldr	r3, [pc, #80]	; (39cc <RFM_initialize+0x348>)
    397c:	4798      	blx	r3
    397e:	1c02      	adds	r2, r0, #0
    3980:	230f      	movs	r3, #15
    3982:	18fb      	adds	r3, r7, r3
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	b2db      	uxtb	r3, r3
    3988:	429a      	cmp	r2, r3
    398a:	d301      	bcc.n	3990 <RFM_initialize+0x30c>
    return false;
    398c:	2300      	movs	r3, #0
    398e:	e009      	b.n	39a4 <RFM_initialize+0x320>
  _inISR = false;
    3990:	4b13      	ldr	r3, [pc, #76]	; (39e0 <RFM_initialize+0x35c>)
    3992:	2200      	movs	r2, #0
    3994:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    3996:	4b13      	ldr	r3, [pc, #76]	; (39e4 <RFM_initialize+0x360>)
    3998:	4798      	blx	r3

  _address = nodeID;
    399a:	4b13      	ldr	r3, [pc, #76]	; (39e8 <RFM_initialize+0x364>)
    399c:	1dba      	adds	r2, r7, #6
    399e:	7812      	ldrb	r2, [r2, #0]
    39a0:	701a      	strb	r2, [r3, #0]
  return true;
    39a2:	2301      	movs	r3, #1
}
    39a4:	1c18      	adds	r0, r3, #0
    39a6:	46bd      	mov	sp, r7
    39a8:	b011      	add	sp, #68	; 0x44
    39aa:	bd90      	pop	{r4, r7, pc}
    39ac:	00003655 	.word	0x00003655
    39b0:	000032bd 	.word	0x000032bd
    39b4:	00003381 	.word	0x00003381
    39b8:	00003229 	.word	0x00003229
    39bc:	00003255 	.word	0x00003255
    39c0:	000033e5 	.word	0x000033e5
    39c4:	0000426d 	.word	0x0000426d
    39c8:	00004201 	.word	0x00004201
    39cc:	0000340d 	.word	0x0000340d
    39d0:	00004101 	.word	0x00004101
    39d4:	200001c8 	.word	0x200001c8
    39d8:	000035cd 	.word	0x000035cd
    39dc:	000039ed 	.word	0x000039ed
    39e0:	200000f9 	.word	0x200000f9
    39e4:	00003295 	.word	0x00003295
    39e8:	2000013c 	.word	0x2000013c

000039ec <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    39ec:	b580      	push	{r7, lr}
    39ee:	b082      	sub	sp, #8
    39f0:	af00      	add	r7, sp, #0
    39f2:	1c02      	adds	r2, r0, #0
    39f4:	1dfb      	adds	r3, r7, #7
    39f6:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    39f8:	1dfb      	adds	r3, r7, #7
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	b29a      	uxth	r2, r3
    39fe:	4b4c      	ldr	r3, [pc, #304]	; (3b30 <setMode+0x144>)
    3a00:	881b      	ldrh	r3, [r3, #0]
    3a02:	b29b      	uxth	r3, r3
    3a04:	429a      	cmp	r2, r3
    3a06:	d100      	bne.n	3a0a <setMode+0x1e>
    return;
    3a08:	e08e      	b.n	3b28 <setMode+0x13c>

  switch (newMode) {
    3a0a:	1dfb      	adds	r3, r7, #7
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	2b04      	cmp	r3, #4
    3a10:	d900      	bls.n	3a14 <setMode+0x28>
    3a12:	e088      	b.n	3b26 <setMode+0x13a>
    3a14:	009a      	lsls	r2, r3, #2
    3a16:	4b47      	ldr	r3, [pc, #284]	; (3b34 <setMode+0x148>)
    3a18:	18d3      	adds	r3, r2, r3
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    3a1e:	2001      	movs	r0, #1
    3a20:	4b45      	ldr	r3, [pc, #276]	; (3b38 <setMode+0x14c>)
    3a22:	4798      	blx	r3
    3a24:	1c03      	adds	r3, r0, #0
    3a26:	b2db      	uxtb	r3, r3
    3a28:	1c1a      	adds	r2, r3, #0
    3a2a:	231c      	movs	r3, #28
    3a2c:	439a      	bics	r2, r3
    3a2e:	1c13      	adds	r3, r2, #0
    3a30:	b2db      	uxtb	r3, r3
    3a32:	1c1a      	adds	r2, r3, #0
    3a34:	230c      	movs	r3, #12
    3a36:	4313      	orrs	r3, r2
    3a38:	b2db      	uxtb	r3, r3
    3a3a:	b2db      	uxtb	r3, r3
    3a3c:	2001      	movs	r0, #1
    3a3e:	1c19      	adds	r1, r3, #0
    3a40:	4b3e      	ldr	r3, [pc, #248]	; (3b3c <setMode+0x150>)
    3a42:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    3a44:	4b3e      	ldr	r3, [pc, #248]	; (3b40 <setMode+0x154>)
    3a46:	781b      	ldrb	r3, [r3, #0]
    3a48:	b2db      	uxtb	r3, r3
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d003      	beq.n	3a56 <setMode+0x6a>
    3a4e:	2001      	movs	r0, #1
    3a50:	4b3c      	ldr	r3, [pc, #240]	; (3b44 <setMode+0x158>)
    3a52:	4798      	blx	r3
      break;
    3a54:	e053      	b.n	3afe <setMode+0x112>
    3a56:	e052      	b.n	3afe <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    3a58:	2001      	movs	r0, #1
    3a5a:	4b37      	ldr	r3, [pc, #220]	; (3b38 <setMode+0x14c>)
    3a5c:	4798      	blx	r3
    3a5e:	1c03      	adds	r3, r0, #0
    3a60:	b2db      	uxtb	r3, r3
    3a62:	1c1a      	adds	r2, r3, #0
    3a64:	231c      	movs	r3, #28
    3a66:	439a      	bics	r2, r3
    3a68:	1c13      	adds	r3, r2, #0
    3a6a:	b2db      	uxtb	r3, r3
    3a6c:	1c1a      	adds	r2, r3, #0
    3a6e:	2310      	movs	r3, #16
    3a70:	4313      	orrs	r3, r2
    3a72:	b2db      	uxtb	r3, r3
    3a74:	b2db      	uxtb	r3, r3
    3a76:	2001      	movs	r0, #1
    3a78:	1c19      	adds	r1, r3, #0
    3a7a:	4b30      	ldr	r3, [pc, #192]	; (3b3c <setMode+0x150>)
    3a7c:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    3a7e:	4b30      	ldr	r3, [pc, #192]	; (3b40 <setMode+0x154>)
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	b2db      	uxtb	r3, r3
    3a84:	2b00      	cmp	r3, #0
    3a86:	d003      	beq.n	3a90 <setMode+0xa4>
    3a88:	2000      	movs	r0, #0
    3a8a:	4b2e      	ldr	r3, [pc, #184]	; (3b44 <setMode+0x158>)
    3a8c:	4798      	blx	r3
      break;
    3a8e:	e036      	b.n	3afe <setMode+0x112>
    3a90:	e035      	b.n	3afe <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    3a92:	2001      	movs	r0, #1
    3a94:	4b28      	ldr	r3, [pc, #160]	; (3b38 <setMode+0x14c>)
    3a96:	4798      	blx	r3
    3a98:	1c03      	adds	r3, r0, #0
    3a9a:	b2db      	uxtb	r3, r3
    3a9c:	1c1a      	adds	r2, r3, #0
    3a9e:	231c      	movs	r3, #28
    3aa0:	439a      	bics	r2, r3
    3aa2:	1c13      	adds	r3, r2, #0
    3aa4:	b2db      	uxtb	r3, r3
    3aa6:	1c1a      	adds	r2, r3, #0
    3aa8:	2308      	movs	r3, #8
    3aaa:	4313      	orrs	r3, r2
    3aac:	b2db      	uxtb	r3, r3
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	2001      	movs	r0, #1
    3ab2:	1c19      	adds	r1, r3, #0
    3ab4:	4b21      	ldr	r3, [pc, #132]	; (3b3c <setMode+0x150>)
    3ab6:	4798      	blx	r3
      break;
    3ab8:	e021      	b.n	3afe <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    3aba:	2001      	movs	r0, #1
    3abc:	4b1e      	ldr	r3, [pc, #120]	; (3b38 <setMode+0x14c>)
    3abe:	4798      	blx	r3
    3ac0:	1c03      	adds	r3, r0, #0
    3ac2:	b2db      	uxtb	r3, r3
    3ac4:	1c1a      	adds	r2, r3, #0
    3ac6:	231c      	movs	r3, #28
    3ac8:	439a      	bics	r2, r3
    3aca:	1c13      	adds	r3, r2, #0
    3acc:	b2db      	uxtb	r3, r3
    3ace:	1c1a      	adds	r2, r3, #0
    3ad0:	2304      	movs	r3, #4
    3ad2:	4313      	orrs	r3, r2
    3ad4:	b2db      	uxtb	r3, r3
    3ad6:	b2db      	uxtb	r3, r3
    3ad8:	2001      	movs	r0, #1
    3ada:	1c19      	adds	r1, r3, #0
    3adc:	4b17      	ldr	r3, [pc, #92]	; (3b3c <setMode+0x150>)
    3ade:	4798      	blx	r3
      break;
    3ae0:	e00d      	b.n	3afe <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    3ae2:	2001      	movs	r0, #1
    3ae4:	4b14      	ldr	r3, [pc, #80]	; (3b38 <setMode+0x14c>)
    3ae6:	4798      	blx	r3
    3ae8:	1c03      	adds	r3, r0, #0
    3aea:	1c1a      	adds	r2, r3, #0
    3aec:	231c      	movs	r3, #28
    3aee:	439a      	bics	r2, r3
    3af0:	1c13      	adds	r3, r2, #0
    3af2:	b2db      	uxtb	r3, r3
    3af4:	2001      	movs	r0, #1
    3af6:	1c19      	adds	r1, r3, #0
    3af8:	4b10      	ldr	r3, [pc, #64]	; (3b3c <setMode+0x150>)
    3afa:	4798      	blx	r3
      break;
    3afc:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    3afe:	46c0      	nop			; (mov r8, r8)
    3b00:	4b0b      	ldr	r3, [pc, #44]	; (3b30 <setMode+0x144>)
    3b02:	881b      	ldrh	r3, [r3, #0]
    3b04:	b29b      	uxth	r3, r3
    3b06:	2b00      	cmp	r3, #0
    3b08:	d107      	bne.n	3b1a <setMode+0x12e>
    3b0a:	2027      	movs	r0, #39	; 0x27
    3b0c:	4b0a      	ldr	r3, [pc, #40]	; (3b38 <setMode+0x14c>)
    3b0e:	4798      	blx	r3
    3b10:	1c03      	adds	r3, r0, #0
    3b12:	b2db      	uxtb	r3, r3
    3b14:	b25b      	sxtb	r3, r3
    3b16:	2b00      	cmp	r3, #0
    3b18:	daf2      	bge.n	3b00 <setMode+0x114>

  _mode = newMode;
    3b1a:	1dfb      	adds	r3, r7, #7
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	b29a      	uxth	r2, r3
    3b20:	4b03      	ldr	r3, [pc, #12]	; (3b30 <setMode+0x144>)
    3b22:	801a      	strh	r2, [r3, #0]
    3b24:	e000      	b.n	3b28 <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    3b26:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    3b28:	46bd      	mov	sp, r7
    3b2a:	b002      	add	sp, #8
    3b2c:	bd80      	pop	{r7, pc}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	200001c6 	.word	0x200001c6
    3b34:	000048b8 	.word	0x000048b8
    3b38:	00004201 	.word	0x00004201
    3b3c:	0000426d 	.word	0x0000426d
    3b40:	200001c8 	.word	0x200001c8
    3b44:	00004329 	.word	0x00004329

00003b48 <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    3b4c:	4b0b      	ldr	r3, [pc, #44]	; (3b7c <canSend+0x34>)
    3b4e:	881b      	ldrh	r3, [r3, #0]
    3b50:	b29b      	uxth	r3, r3
    3b52:	2b03      	cmp	r3, #3
    3b54:	d10e      	bne.n	3b74 <canSend+0x2c>
    3b56:	4b0a      	ldr	r3, [pc, #40]	; (3b80 <canSend+0x38>)
    3b58:	881b      	ldrh	r3, [r3, #0]
    3b5a:	b29b      	uxth	r3, r3
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d109      	bne.n	3b74 <canSend+0x2c>
    3b60:	4b08      	ldr	r3, [pc, #32]	; (3b84 <canSend+0x3c>)
    3b62:	4798      	blx	r3
    3b64:	1c03      	adds	r3, r0, #0
    3b66:	335a      	adds	r3, #90	; 0x5a
    3b68:	da04      	bge.n	3b74 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    3b6a:	2001      	movs	r0, #1
    3b6c:	4b06      	ldr	r3, [pc, #24]	; (3b88 <canSend+0x40>)
    3b6e:	4798      	blx	r3
    return true;
    3b70:	2301      	movs	r3, #1
    3b72:	e000      	b.n	3b76 <canSend+0x2e>
  }
  return false;
    3b74:	2300      	movs	r3, #0
}
    3b76:	1c18      	adds	r0, r3, #0
    3b78:	46bd      	mov	sp, r7
    3b7a:	bd80      	pop	{r7, pc}
    3b7c:	200001c6 	.word	0x200001c6
    3b80:	200001c0 	.word	0x200001c0
    3b84:	000041bd 	.word	0x000041bd
    3b88:	000039ed 	.word	0x000039ed

00003b8c <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    3b8c:	b590      	push	{r4, r7, lr}
    3b8e:	b085      	sub	sp, #20
    3b90:	af02      	add	r7, sp, #8
    3b92:	1c04      	adds	r4, r0, #0
    3b94:	6039      	str	r1, [r7, #0]
    3b96:	1c10      	adds	r0, r2, #0
    3b98:	1c19      	adds	r1, r3, #0
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	1c22      	adds	r2, r4, #0
    3b9e:	701a      	strb	r2, [r3, #0]
    3ba0:	1dbb      	adds	r3, r7, #6
    3ba2:	1c02      	adds	r2, r0, #0
    3ba4:	701a      	strb	r2, [r3, #0]
    3ba6:	1d7b      	adds	r3, r7, #5
    3ba8:	1c0a      	adds	r2, r1, #0
    3baa:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    3bac:	203d      	movs	r0, #61	; 0x3d
    3bae:	4b17      	ldr	r3, [pc, #92]	; (3c0c <RFM_send+0x80>)
    3bb0:	4798      	blx	r3
    3bb2:	1c03      	adds	r3, r0, #0
    3bb4:	1c1a      	adds	r2, r3, #0
    3bb6:	2304      	movs	r3, #4
    3bb8:	4313      	orrs	r3, r2
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	203d      	movs	r0, #61	; 0x3d
    3bbe:	1c19      	adds	r1, r3, #0
    3bc0:	4b13      	ldr	r3, [pc, #76]	; (3c10 <RFM_send+0x84>)
    3bc2:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    3bc4:	4b13      	ldr	r3, [pc, #76]	; (3c14 <RFM_send+0x88>)
    3bc6:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    3bc8:	e001      	b.n	3bce <RFM_send+0x42>
    3bca:	4b13      	ldr	r3, [pc, #76]	; (3c18 <RFM_send+0x8c>)
    3bcc:	4798      	blx	r3
    3bce:	4b13      	ldr	r3, [pc, #76]	; (3c1c <RFM_send+0x90>)
    3bd0:	4798      	blx	r3
    3bd2:	1c03      	adds	r3, r0, #0
    3bd4:	1c1a      	adds	r2, r3, #0
    3bd6:	2301      	movs	r3, #1
    3bd8:	4053      	eors	r3, r2
    3bda:	b2db      	uxtb	r3, r3
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d005      	beq.n	3bec <RFM_send+0x60>
    3be0:	4b0f      	ldr	r3, [pc, #60]	; (3c20 <RFM_send+0x94>)
    3be2:	4798      	blx	r3
    3be4:	1e02      	subs	r2, r0, #0
    3be6:	4b0f      	ldr	r3, [pc, #60]	; (3c24 <RFM_send+0x98>)
    3be8:	429a      	cmp	r2, r3
    3bea:	d9ee      	bls.n	3bca <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    3bec:	1dfb      	adds	r3, r7, #7
    3bee:	7818      	ldrb	r0, [r3, #0]
    3bf0:	6839      	ldr	r1, [r7, #0]
    3bf2:	1dbb      	adds	r3, r7, #6
    3bf4:	781a      	ldrb	r2, [r3, #0]
    3bf6:	1d7b      	adds	r3, r7, #5
    3bf8:	781c      	ldrb	r4, [r3, #0]
    3bfa:	2300      	movs	r3, #0
    3bfc:	9300      	str	r3, [sp, #0]
    3bfe:	1c23      	adds	r3, r4, #0
    3c00:	4c09      	ldr	r4, [pc, #36]	; (3c28 <RFM_send+0x9c>)
    3c02:	47a0      	blx	r4
}
    3c04:	46bd      	mov	sp, r7
    3c06:	b003      	add	sp, #12
    3c08:	bd90      	pop	{r4, r7, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	00004201 	.word	0x00004201
    3c10:	0000426d 	.word	0x0000426d
    3c14:	000033e5 	.word	0x000033e5
    3c18:	000040a5 	.word	0x000040a5
    3c1c:	00003b49 	.word	0x00003b49
    3c20:	0000340d 	.word	0x0000340d
    3c24:	000003e7 	.word	0x000003e7
    3c28:	00003435 	.word	0x00003435

00003c2c <RFM_sendWithRetry>:
// and it handles all the ACK requesting/retrying for you :)
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
    3c2c:	b590      	push	{r4, r7, lr}
    3c2e:	b085      	sub	sp, #20
    3c30:	af00      	add	r7, sp, #0
    3c32:	1c04      	adds	r4, r0, #0
    3c34:	6039      	str	r1, [r7, #0]
    3c36:	1c10      	adds	r0, r2, #0
    3c38:	1c19      	adds	r1, r3, #0
    3c3a:	1dfb      	adds	r3, r7, #7
    3c3c:	1c22      	adds	r2, r4, #0
    3c3e:	701a      	strb	r2, [r3, #0]
    3c40:	1dbb      	adds	r3, r7, #6
    3c42:	1c02      	adds	r2, r0, #0
    3c44:	701a      	strb	r2, [r3, #0]
    3c46:	1d7b      	adds	r3, r7, #5
    3c48:	1c0a      	adds	r2, r1, #0
    3c4a:	701a      	strb	r2, [r3, #0]
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    3c4c:	230f      	movs	r3, #15
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	2200      	movs	r2, #0
    3c52:	701a      	strb	r2, [r3, #0]
    3c54:	e025      	b.n	3ca2 <RFM_sendWithRetry+0x76>
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    3c56:	1dfb      	adds	r3, r7, #7
    3c58:	7819      	ldrb	r1, [r3, #0]
    3c5a:	683a      	ldr	r2, [r7, #0]
    3c5c:	1dbb      	adds	r3, r7, #6
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	1c08      	adds	r0, r1, #0
    3c62:	1c11      	adds	r1, r2, #0
    3c64:	1c1a      	adds	r2, r3, #0
    3c66:	2301      	movs	r3, #1
    3c68:	4c14      	ldr	r4, [pc, #80]	; (3cbc <RFM_sendWithRetry+0x90>)
    3c6a:	47a0      	blx	r4
    reset_millis(); //sentTime = millis(); // CHANGE //
    3c6c:	4b14      	ldr	r3, [pc, #80]	; (3cc0 <RFM_sendWithRetry+0x94>)
    3c6e:	4798      	blx	r3
    while (millis() < retryWaitTime) // CHANGE //
    3c70:	e008      	b.n	3c84 <RFM_sendWithRetry+0x58>
    {
      if (ACKReceived(toAddress))
    3c72:	1dfb      	adds	r3, r7, #7
    3c74:	781b      	ldrb	r3, [r3, #0]
    3c76:	1c18      	adds	r0, r3, #0
    3c78:	4b12      	ldr	r3, [pc, #72]	; (3cc4 <RFM_sendWithRetry+0x98>)
    3c7a:	4798      	blx	r3
    3c7c:	1e03      	subs	r3, r0, #0
    3c7e:	d001      	beq.n	3c84 <RFM_sendWithRetry+0x58>
      {
        return true;
    3c80:	2301      	movs	r3, #1
    3c82:	e016      	b.n	3cb2 <RFM_sendWithRetry+0x86>
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
  {
    RFM_send(toAddress, buffer, bufferSize, true);
    reset_millis(); //sentTime = millis(); // CHANGE //
    while (millis() < retryWaitTime) // CHANGE //
    3c84:	4b10      	ldr	r3, [pc, #64]	; (3cc8 <RFM_sendWithRetry+0x9c>)
    3c86:	4798      	blx	r3
    3c88:	1c02      	adds	r2, r0, #0
    3c8a:	2320      	movs	r3, #32
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	781b      	ldrb	r3, [r3, #0]
    3c90:	429a      	cmp	r2, r3
    3c92:	d3ee      	bcc.n	3c72 <RFM_sendWithRetry+0x46>
// The reason for the semi-automaton is that the lib is interrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5..8ms at 50kbps@915MHz
bool RFM_sendWithRetry(uint8_t toAddress, const void* buffer, uint8_t bufferSize, uint8_t retries, uint8_t retryWaitTime) {
  //uint32_t sentTime;
  for (uint8_t i = 0; i <= retries; i++)
    3c94:	230f      	movs	r3, #15
    3c96:	18fb      	adds	r3, r7, r3
    3c98:	781a      	ldrb	r2, [r3, #0]
    3c9a:	230f      	movs	r3, #15
    3c9c:	18fb      	adds	r3, r7, r3
    3c9e:	3201      	adds	r2, #1
    3ca0:	701a      	strb	r2, [r3, #0]
    3ca2:	230f      	movs	r3, #15
    3ca4:	18fa      	adds	r2, r7, r3
    3ca6:	1d7b      	adds	r3, r7, #5
    3ca8:	7812      	ldrb	r2, [r2, #0]
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	429a      	cmp	r2, r3
    3cae:	d9d2      	bls.n	3c56 <RFM_sendWithRetry+0x2a>
      {
        return true;
      }
    }
  }
  return false;
    3cb0:	2300      	movs	r3, #0
}
    3cb2:	1c18      	adds	r0, r3, #0
    3cb4:	46bd      	mov	sp, r7
    3cb6:	b005      	add	sp, #20
    3cb8:	bd90      	pop	{r4, r7, pc}
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	00003b8d 	.word	0x00003b8d
    3cc0:	000033e5 	.word	0x000033e5
    3cc4:	00003ccd 	.word	0x00003ccd
    3cc8:	0000340d 	.word	0x0000340d

00003ccc <ACKReceived>:

// should be polled immediately after sending a packet with ACK request
bool ACKReceived(uint8_t fromNodeID) {
    3ccc:	b580      	push	{r7, lr}
    3cce:	b082      	sub	sp, #8
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	1c02      	adds	r2, r0, #0
    3cd4:	1dfb      	adds	r3, r7, #7
    3cd6:	701a      	strb	r2, [r3, #0]
  if (RFM_receiveDone())
    3cd8:	4b10      	ldr	r3, [pc, #64]	; (3d1c <ACKReceived+0x50>)
    3cda:	4798      	blx	r3
    3cdc:	1e03      	subs	r3, r0, #0
    3cde:	d018      	beq.n	3d12 <ACKReceived+0x46>
    return (RFM_SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
    3ce0:	1dfb      	adds	r3, r7, #7
    3ce2:	781b      	ldrb	r3, [r3, #0]
    3ce4:	b29a      	uxth	r2, r3
    3ce6:	4b0e      	ldr	r3, [pc, #56]	; (3d20 <ACKReceived+0x54>)
    3ce8:	881b      	ldrh	r3, [r3, #0]
    3cea:	b29b      	uxth	r3, r3
    3cec:	429a      	cmp	r2, r3
    3cee:	d003      	beq.n	3cf8 <ACKReceived+0x2c>
    3cf0:	1dfb      	adds	r3, r7, #7
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	2bff      	cmp	r3, #255	; 0xff
    3cf6:	d106      	bne.n	3d06 <ACKReceived+0x3a>
    3cf8:	4b0a      	ldr	r3, [pc, #40]	; (3d24 <ACKReceived+0x58>)
    3cfa:	881b      	ldrh	r3, [r3, #0]
    3cfc:	b29b      	uxth	r3, r3
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d001      	beq.n	3d06 <ACKReceived+0x3a>
    3d02:	2301      	movs	r3, #1
    3d04:	e000      	b.n	3d08 <ACKReceived+0x3c>
    3d06:	2300      	movs	r3, #0
    3d08:	1c1a      	adds	r2, r3, #0
    3d0a:	2301      	movs	r3, #1
    3d0c:	4013      	ands	r3, r2
    3d0e:	b2db      	uxtb	r3, r3
    3d10:	e000      	b.n	3d14 <ACKReceived+0x48>
  return false;
    3d12:	2300      	movs	r3, #0
}
    3d14:	1c18      	adds	r0, r3, #0
    3d16:	46bd      	mov	sp, r7
    3d18:	b002      	add	sp, #8
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	000040a5 	.word	0x000040a5
    3d20:	200000de 	.word	0x200000de
    3d24:	2000013e 	.word	0x2000013e

00003d28 <RFM_ACKRequested>:

// check whether an ACK was requested in the last received packet (non-broadcasted packet)
bool RFM_ACKRequested() {
    3d28:	b580      	push	{r7, lr}
    3d2a:	af00      	add	r7, sp, #0
  return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
    3d2c:	4b09      	ldr	r3, [pc, #36]	; (3d54 <RFM_ACKRequested+0x2c>)
    3d2e:	881b      	ldrh	r3, [r3, #0]
    3d30:	b29b      	uxth	r3, r3
    3d32:	2b00      	cmp	r3, #0
    3d34:	d006      	beq.n	3d44 <RFM_ACKRequested+0x1c>
    3d36:	4b08      	ldr	r3, [pc, #32]	; (3d58 <RFM_ACKRequested+0x30>)
    3d38:	881b      	ldrh	r3, [r3, #0]
    3d3a:	b29b      	uxth	r3, r3
    3d3c:	2bff      	cmp	r3, #255	; 0xff
    3d3e:	d001      	beq.n	3d44 <RFM_ACKRequested+0x1c>
    3d40:	2301      	movs	r3, #1
    3d42:	e000      	b.n	3d46 <RFM_ACKRequested+0x1e>
    3d44:	2300      	movs	r3, #0
    3d46:	1c1a      	adds	r2, r3, #0
    3d48:	2301      	movs	r3, #1
    3d4a:	4013      	ands	r3, r2
    3d4c:	b2db      	uxtb	r3, r3
}
    3d4e:	1c18      	adds	r0, r3, #0
    3d50:	46bd      	mov	sp, r7
    3d52:	bd80      	pop	{r7, pc}
    3d54:	200001c2 	.word	0x200001c2
    3d58:	200001c4 	.word	0x200001c4

00003d5c <RFM_sendACK>:

// should be called immediately after reception in case sender wants ACK
void RFM_sendACK(const void* buffer, uint8_t bufferSize) {
    3d5c:	b590      	push	{r4, r7, lr}
    3d5e:	b087      	sub	sp, #28
    3d60:	af02      	add	r7, sp, #8
    3d62:	6078      	str	r0, [r7, #4]
    3d64:	1c0a      	adds	r2, r1, #0
    3d66:	1cfb      	adds	r3, r7, #3
    3d68:	701a      	strb	r2, [r3, #0]
  ACK_REQUESTED = 0;   // TWS added to make sure we don't end up in a timing race and infinite loop sending Acks
    3d6a:	4b26      	ldr	r3, [pc, #152]	; (3e04 <RFM_sendACK+0xa8>)
    3d6c:	2200      	movs	r2, #0
    3d6e:	801a      	strh	r2, [r3, #0]
  volatile uint8_t sender = RFM_SENDERID;
    3d70:	4b25      	ldr	r3, [pc, #148]	; (3e08 <RFM_sendACK+0xac>)
    3d72:	881b      	ldrh	r3, [r3, #0]
    3d74:	b29b      	uxth	r3, r3
    3d76:	b2da      	uxtb	r2, r3
    3d78:	230f      	movs	r3, #15
    3d7a:	18fb      	adds	r3, r7, r3
    3d7c:	701a      	strb	r2, [r3, #0]
  volatile int16_t _RSSI = RFM_RSSI; // save payload received RSSI value
    3d7e:	4b23      	ldr	r3, [pc, #140]	; (3e0c <RFM_sendACK+0xb0>)
    3d80:	881b      	ldrh	r3, [r3, #0]
    3d82:	b29a      	uxth	r2, r3
    3d84:	230c      	movs	r3, #12
    3d86:	18fb      	adds	r3, r7, r3
    3d88:	801a      	strh	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    3d8a:	203d      	movs	r0, #61	; 0x3d
    3d8c:	4b20      	ldr	r3, [pc, #128]	; (3e10 <RFM_sendACK+0xb4>)
    3d8e:	4798      	blx	r3
    3d90:	1c03      	adds	r3, r0, #0
    3d92:	1c1a      	adds	r2, r3, #0
    3d94:	2304      	movs	r3, #4
    3d96:	4313      	orrs	r3, r2
    3d98:	b2db      	uxtb	r3, r3
    3d9a:	203d      	movs	r0, #61	; 0x3d
    3d9c:	1c19      	adds	r1, r3, #0
    3d9e:	4b1d      	ldr	r3, [pc, #116]	; (3e14 <RFM_sendACK+0xb8>)
    3da0:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    3da2:	4b1d      	ldr	r3, [pc, #116]	; (3e18 <RFM_sendACK+0xbc>)
    3da4:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    3da6:	e001      	b.n	3dac <RFM_sendACK+0x50>
    3da8:	4b1c      	ldr	r3, [pc, #112]	; (3e1c <RFM_sendACK+0xc0>)
    3daa:	4798      	blx	r3
    3dac:	4b1c      	ldr	r3, [pc, #112]	; (3e20 <RFM_sendACK+0xc4>)
    3dae:	4798      	blx	r3
    3db0:	1c03      	adds	r3, r0, #0
    3db2:	1c1a      	adds	r2, r3, #0
    3db4:	2301      	movs	r3, #1
    3db6:	4053      	eors	r3, r2
    3db8:	b2db      	uxtb	r3, r3
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d005      	beq.n	3dca <RFM_sendACK+0x6e>
    3dbe:	4b19      	ldr	r3, [pc, #100]	; (3e24 <RFM_sendACK+0xc8>)
    3dc0:	4798      	blx	r3
    3dc2:	1e02      	subs	r2, r0, #0
    3dc4:	4b18      	ldr	r3, [pc, #96]	; (3e28 <RFM_sendACK+0xcc>)
    3dc6:	429a      	cmp	r2, r3
    3dc8:	d9ee      	bls.n	3da8 <RFM_sendACK+0x4c>
  RFM_SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by RFM_receiveDone()
    3dca:	230f      	movs	r3, #15
    3dcc:	18fb      	adds	r3, r7, r3
    3dce:	781b      	ldrb	r3, [r3, #0]
    3dd0:	b2db      	uxtb	r3, r3
    3dd2:	b29a      	uxth	r2, r3
    3dd4:	4b0c      	ldr	r3, [pc, #48]	; (3e08 <RFM_sendACK+0xac>)
    3dd6:	801a      	strh	r2, [r3, #0]
  sendFrame(sender, buffer, bufferSize, false, true);
    3dd8:	230f      	movs	r3, #15
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	b2d8      	uxtb	r0, r3
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	1cfb      	adds	r3, r7, #3
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	2301      	movs	r3, #1
    3de8:	9300      	str	r3, [sp, #0]
    3dea:	2300      	movs	r3, #0
    3dec:	4c0f      	ldr	r4, [pc, #60]	; (3e2c <RFM_sendACK+0xd0>)
    3dee:	47a0      	blx	r4
  RFM_RSSI = _RSSI; // restore payload RSSI
    3df0:	230c      	movs	r3, #12
    3df2:	18fb      	adds	r3, r7, r3
    3df4:	881b      	ldrh	r3, [r3, #0]
    3df6:	b29a      	uxth	r2, r3
    3df8:	4b04      	ldr	r3, [pc, #16]	; (3e0c <RFM_sendACK+0xb0>)
    3dfa:	801a      	strh	r2, [r3, #0]
}
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b005      	add	sp, #20
    3e00:	bd90      	pop	{r4, r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	200001c2 	.word	0x200001c2
    3e08:	200000de 	.word	0x200000de
    3e0c:	20000208 	.word	0x20000208
    3e10:	00004201 	.word	0x00004201
    3e14:	0000426d 	.word	0x0000426d
    3e18:	000033e5 	.word	0x000033e5
    3e1c:	000040a5 	.word	0x000040a5
    3e20:	00003b49 	.word	0x00003b49
    3e24:	0000340d 	.word	0x0000340d
    3e28:	000003e7 	.word	0x000003e7
    3e2c:	00003435 	.word	0x00003435

00003e30 <interruptHandler>:

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    3e30:	b580      	push	{r7, lr}
    3e32:	b082      	sub	sp, #8
    3e34:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    3e36:	4b5b      	ldr	r3, [pc, #364]	; (3fa4 <interruptHandler+0x174>)
    3e38:	881b      	ldrh	r3, [r3, #0]
    3e3a:	b29b      	uxth	r3, r3
    3e3c:	2b03      	cmp	r3, #3
    3e3e:	d000      	beq.n	3e42 <interruptHandler+0x12>
    3e40:	e0a7      	b.n	3f92 <interruptHandler+0x162>
    3e42:	2028      	movs	r0, #40	; 0x28
    3e44:	4b58      	ldr	r3, [pc, #352]	; (3fa8 <interruptHandler+0x178>)
    3e46:	4798      	blx	r3
    3e48:	1c03      	adds	r3, r0, #0
    3e4a:	1c1a      	adds	r2, r3, #0
    3e4c:	2304      	movs	r3, #4
    3e4e:	4013      	ands	r3, r2
    3e50:	d100      	bne.n	3e54 <interruptHandler+0x24>
    3e52:	e09e      	b.n	3f92 <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    3e54:	2001      	movs	r0, #1
    3e56:	4b55      	ldr	r3, [pc, #340]	; (3fac <interruptHandler+0x17c>)
    3e58:	4798      	blx	r3
    select();
    3e5a:	4b55      	ldr	r3, [pc, #340]	; (3fb0 <interruptHandler+0x180>)
    3e5c:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    3e5e:	4a55      	ldr	r2, [pc, #340]	; (3fb4 <interruptHandler+0x184>)
    3e60:	4b55      	ldr	r3, [pc, #340]	; (3fb8 <interruptHandler+0x188>)
    3e62:	1c10      	adds	r0, r2, #0
    3e64:	2100      	movs	r1, #0
    3e66:	1c1a      	adds	r2, r3, #0
    3e68:	4b54      	ldr	r3, [pc, #336]	; (3fbc <interruptHandler+0x18c>)
    3e6a:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    3e6c:	4a51      	ldr	r2, [pc, #324]	; (3fb4 <interruptHandler+0x184>)
    3e6e:	4b54      	ldr	r3, [pc, #336]	; (3fc0 <interruptHandler+0x190>)
    3e70:	1c10      	adds	r0, r2, #0
    3e72:	2100      	movs	r1, #0
    3e74:	1c1a      	adds	r2, r3, #0
    3e76:	4b51      	ldr	r3, [pc, #324]	; (3fbc <interruptHandler+0x18c>)
    3e78:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    3e7a:	4b51      	ldr	r3, [pc, #324]	; (3fc0 <interruptHandler+0x190>)
    3e7c:	881b      	ldrh	r3, [r3, #0]
    3e7e:	b29b      	uxth	r3, r3
    3e80:	2b42      	cmp	r3, #66	; 0x42
    3e82:	d803      	bhi.n	3e8c <interruptHandler+0x5c>
    3e84:	4b4e      	ldr	r3, [pc, #312]	; (3fc0 <interruptHandler+0x190>)
    3e86:	881b      	ldrh	r3, [r3, #0]
    3e88:	b29a      	uxth	r2, r3
    3e8a:	e000      	b.n	3e8e <interruptHandler+0x5e>
    3e8c:	2242      	movs	r2, #66	; 0x42
    3e8e:	4b4c      	ldr	r3, [pc, #304]	; (3fc0 <interruptHandler+0x190>)
    3e90:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    3e92:	4a48      	ldr	r2, [pc, #288]	; (3fb4 <interruptHandler+0x184>)
    3e94:	4b4b      	ldr	r3, [pc, #300]	; (3fc4 <interruptHandler+0x194>)
    3e96:	1c10      	adds	r0, r2, #0
    3e98:	2100      	movs	r1, #0
    3e9a:	1c1a      	adds	r2, r3, #0
    3e9c:	4b47      	ldr	r3, [pc, #284]	; (3fbc <interruptHandler+0x18c>)
    3e9e:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    3ea0:	4b49      	ldr	r3, [pc, #292]	; (3fc8 <interruptHandler+0x198>)
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	b2db      	uxtb	r3, r3
    3ea6:	2201      	movs	r2, #1
    3ea8:	4053      	eors	r3, r2
    3eaa:	b2db      	uxtb	r3, r3
    3eac:	2b00      	cmp	r3, #0
    3eae:	d00d      	beq.n	3ecc <interruptHandler+0x9c>
    3eb0:	4b46      	ldr	r3, [pc, #280]	; (3fcc <interruptHandler+0x19c>)
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	b2db      	uxtb	r3, r3
    3eb6:	b29a      	uxth	r2, r3
    3eb8:	4b42      	ldr	r3, [pc, #264]	; (3fc4 <interruptHandler+0x194>)
    3eba:	881b      	ldrh	r3, [r3, #0]
    3ebc:	b29b      	uxth	r3, r3
    3ebe:	429a      	cmp	r2, r3
    3ec0:	d004      	beq.n	3ecc <interruptHandler+0x9c>
    3ec2:	4b40      	ldr	r3, [pc, #256]	; (3fc4 <interruptHandler+0x194>)
    3ec4:	881b      	ldrh	r3, [r3, #0]
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	2bff      	cmp	r3, #255	; 0xff
    3eca:	d104      	bne.n	3ed6 <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    3ecc:	4b3c      	ldr	r3, [pc, #240]	; (3fc0 <interruptHandler+0x190>)
    3ece:	881b      	ldrh	r3, [r3, #0]
    3ed0:	b29b      	uxth	r3, r3
    3ed2:	2b02      	cmp	r3, #2
    3ed4:	d807      	bhi.n	3ee6 <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    3ed6:	4b3a      	ldr	r3, [pc, #232]	; (3fc0 <interruptHandler+0x190>)
    3ed8:	2200      	movs	r2, #0
    3eda:	801a      	strh	r2, [r3, #0]
      unselect();
    3edc:	4b3c      	ldr	r3, [pc, #240]	; (3fd0 <interruptHandler+0x1a0>)
    3ede:	4798      	blx	r3
      receiveBegin();
    3ee0:	4b3c      	ldr	r3, [pc, #240]	; (3fd4 <interruptHandler+0x1a4>)
    3ee2:	4798      	blx	r3
    3ee4:	e05b      	b.n	3f9e <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    3ee6:	4b36      	ldr	r3, [pc, #216]	; (3fc0 <interruptHandler+0x190>)
    3ee8:	881b      	ldrh	r3, [r3, #0]
    3eea:	b29b      	uxth	r3, r3
    3eec:	3b03      	subs	r3, #3
    3eee:	b29a      	uxth	r2, r3
    3ef0:	4b39      	ldr	r3, [pc, #228]	; (3fd8 <interruptHandler+0x1a8>)
    3ef2:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    3ef4:	4a2f      	ldr	r2, [pc, #188]	; (3fb4 <interruptHandler+0x184>)
    3ef6:	4b39      	ldr	r3, [pc, #228]	; (3fdc <interruptHandler+0x1ac>)
    3ef8:	1c10      	adds	r0, r2, #0
    3efa:	2100      	movs	r1, #0
    3efc:	1c1a      	adds	r2, r3, #0
    3efe:	4b2f      	ldr	r3, [pc, #188]	; (3fbc <interruptHandler+0x18c>)
    3f00:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    3f02:	1dbb      	adds	r3, r7, #6
    3f04:	2200      	movs	r2, #0
    3f06:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    3f08:	4a2a      	ldr	r2, [pc, #168]	; (3fb4 <interruptHandler+0x184>)
    3f0a:	1dbb      	adds	r3, r7, #6
    3f0c:	1c10      	adds	r0, r2, #0
    3f0e:	2100      	movs	r1, #0
    3f10:	1c1a      	adds	r2, r3, #0
    3f12:	4b2a      	ldr	r3, [pc, #168]	; (3fbc <interruptHandler+0x18c>)
    3f14:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    3f16:	1dbb      	adds	r3, r7, #6
    3f18:	781b      	ldrb	r3, [r3, #0]
    3f1a:	b29b      	uxth	r3, r3
    3f1c:	2280      	movs	r2, #128	; 0x80
    3f1e:	4013      	ands	r3, r2
    3f20:	b29a      	uxth	r2, r3
    3f22:	4b2f      	ldr	r3, [pc, #188]	; (3fe0 <interruptHandler+0x1b0>)
    3f24:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    3f26:	1dbb      	adds	r3, r7, #6
    3f28:	781b      	ldrb	r3, [r3, #0]
    3f2a:	b29b      	uxth	r3, r3
    3f2c:	2240      	movs	r2, #64	; 0x40
    3f2e:	4013      	ands	r3, r2
    3f30:	b29a      	uxth	r2, r3
    3f32:	4b2c      	ldr	r3, [pc, #176]	; (3fe4 <interruptHandler+0x1b4>)
    3f34:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    3f36:	1dfb      	adds	r3, r7, #7
    3f38:	2200      	movs	r2, #0
    3f3a:	701a      	strb	r2, [r3, #0]
    3f3c:	e00f      	b.n	3f5e <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    3f3e:	1dfb      	adds	r3, r7, #7
    3f40:	781b      	ldrb	r3, [r3, #0]
    3f42:	005a      	lsls	r2, r3, #1
    3f44:	4b28      	ldr	r3, [pc, #160]	; (3fe8 <interruptHandler+0x1b8>)
    3f46:	18d3      	adds	r3, r2, r3
    3f48:	4a1a      	ldr	r2, [pc, #104]	; (3fb4 <interruptHandler+0x184>)
    3f4a:	1c10      	adds	r0, r2, #0
    3f4c:	2100      	movs	r1, #0
    3f4e:	1c1a      	adds	r2, r3, #0
    3f50:	4b1a      	ldr	r3, [pc, #104]	; (3fbc <interruptHandler+0x18c>)
    3f52:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    3f54:	1dfb      	adds	r3, r7, #7
    3f56:	781a      	ldrb	r2, [r3, #0]
    3f58:	1dfb      	adds	r3, r7, #7
    3f5a:	3201      	adds	r2, #1
    3f5c:	701a      	strb	r2, [r3, #0]
    3f5e:	1dfb      	adds	r3, r7, #7
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	b29a      	uxth	r2, r3
    3f64:	4b1c      	ldr	r3, [pc, #112]	; (3fd8 <interruptHandler+0x1a8>)
    3f66:	881b      	ldrh	r3, [r3, #0]
    3f68:	b29b      	uxth	r3, r3
    3f6a:	429a      	cmp	r2, r3
    3f6c:	d3e7      	bcc.n	3f3e <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    3f6e:	4b1a      	ldr	r3, [pc, #104]	; (3fd8 <interruptHandler+0x1a8>)
    3f70:	881b      	ldrh	r3, [r3, #0]
    3f72:	b29b      	uxth	r3, r3
    3f74:	2b3c      	cmp	r3, #60	; 0x3c
    3f76:	d807      	bhi.n	3f88 <interruptHandler+0x158>
    3f78:	4b17      	ldr	r3, [pc, #92]	; (3fd8 <interruptHandler+0x1a8>)
    3f7a:	881b      	ldrh	r3, [r3, #0]
    3f7c:	b29b      	uxth	r3, r3
    3f7e:	1c1a      	adds	r2, r3, #0
    3f80:	4b19      	ldr	r3, [pc, #100]	; (3fe8 <interruptHandler+0x1b8>)
    3f82:	0052      	lsls	r2, r2, #1
    3f84:	2100      	movs	r1, #0
    3f86:	52d1      	strh	r1, [r2, r3]
    unselect();
    3f88:	4b11      	ldr	r3, [pc, #68]	; (3fd0 <interruptHandler+0x1a0>)
    3f8a:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    3f8c:	2003      	movs	r0, #3
    3f8e:	4b07      	ldr	r3, [pc, #28]	; (3fac <interruptHandler+0x17c>)
    3f90:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    3f92:	4b16      	ldr	r3, [pc, #88]	; (3fec <interruptHandler+0x1bc>)
    3f94:	4798      	blx	r3
    3f96:	1c03      	adds	r3, r0, #0
    3f98:	1c1a      	adds	r2, r3, #0
    3f9a:	4b15      	ldr	r3, [pc, #84]	; (3ff0 <interruptHandler+0x1c0>)
    3f9c:	801a      	strh	r2, [r3, #0]
}
    3f9e:	46bd      	mov	sp, r7
    3fa0:	b002      	add	sp, #8
    3fa2:	bd80      	pop	{r7, pc}
    3fa4:	200001c6 	.word	0x200001c6
    3fa8:	00004201 	.word	0x00004201
    3fac:	000039ed 	.word	0x000039ed
    3fb0:	000042d1 	.word	0x000042d1
    3fb4:	200001cc 	.word	0x200001cc
    3fb8:	2000005c 	.word	0x2000005c
    3fbc:	0000151d 	.word	0x0000151d
    3fc0:	200001c0 	.word	0x200001c0
    3fc4:	200001c4 	.word	0x200001c4
    3fc8:	20000142 	.word	0x20000142
    3fcc:	2000013c 	.word	0x2000013c
    3fd0:	000042fd 	.word	0x000042fd
    3fd4:	00004015 	.word	0x00004015
    3fd8:	20000140 	.word	0x20000140
    3fdc:	200000de 	.word	0x200000de
    3fe0:	2000013e 	.word	0x2000013e
    3fe4:	200001c2 	.word	0x200001c2
    3fe8:	20000144 	.word	0x20000144
    3fec:	000041bd 	.word	0x000041bd
    3ff0:	20000208 	.word	0x20000208

00003ff4 <isr0>:

// internal function
void isr0()
{ 
    3ff4:	b580      	push	{r7, lr}
    3ff6:	af00      	add	r7, sp, #0
	_inISR = true; 
    3ff8:	4b04      	ldr	r3, [pc, #16]	; (400c <isr0+0x18>)
    3ffa:	2201      	movs	r2, #1
    3ffc:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    3ffe:	4b04      	ldr	r3, [pc, #16]	; (4010 <isr0+0x1c>)
    4000:	4798      	blx	r3
	_inISR = false;
    4002:	4b02      	ldr	r3, [pc, #8]	; (400c <isr0+0x18>)
    4004:	2200      	movs	r2, #0
    4006:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    4008:	46bd      	mov	sp, r7
    400a:	bd80      	pop	{r7, pc}
    400c:	200000f9 	.word	0x200000f9
    4010:	00003e31 	.word	0x00003e31

00004014 <receiveBegin>:

// internal function
void receiveBegin() {
    4014:	b580      	push	{r7, lr}
    4016:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    4018:	4b18      	ldr	r3, [pc, #96]	; (407c <receiveBegin+0x68>)
    401a:	2200      	movs	r2, #0
    401c:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    401e:	4b18      	ldr	r3, [pc, #96]	; (4080 <receiveBegin+0x6c>)
    4020:	2200      	movs	r2, #0
    4022:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    4024:	4b17      	ldr	r3, [pc, #92]	; (4084 <receiveBegin+0x70>)
    4026:	2200      	movs	r2, #0
    4028:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    402a:	4b17      	ldr	r3, [pc, #92]	; (4088 <receiveBegin+0x74>)
    402c:	2200      	movs	r2, #0
    402e:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    4030:	4b16      	ldr	r3, [pc, #88]	; (408c <receiveBegin+0x78>)
    4032:	2200      	movs	r2, #0
    4034:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    4036:	4b16      	ldr	r3, [pc, #88]	; (4090 <receiveBegin+0x7c>)
    4038:	2200      	movs	r2, #0
    403a:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    403c:	4b15      	ldr	r3, [pc, #84]	; (4094 <receiveBegin+0x80>)
    403e:	2200      	movs	r2, #0
    4040:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    4042:	2028      	movs	r0, #40	; 0x28
    4044:	4b14      	ldr	r3, [pc, #80]	; (4098 <receiveBegin+0x84>)
    4046:	4798      	blx	r3
    4048:	1c03      	adds	r3, r0, #0
    404a:	1c1a      	adds	r2, r3, #0
    404c:	2304      	movs	r3, #4
    404e:	4013      	ands	r3, r2
    4050:	d00b      	beq.n	406a <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4052:	203d      	movs	r0, #61	; 0x3d
    4054:	4b10      	ldr	r3, [pc, #64]	; (4098 <receiveBegin+0x84>)
    4056:	4798      	blx	r3
    4058:	1c03      	adds	r3, r0, #0
    405a:	1c1a      	adds	r2, r3, #0
    405c:	2304      	movs	r3, #4
    405e:	4313      	orrs	r3, r2
    4060:	b2db      	uxtb	r3, r3
    4062:	203d      	movs	r0, #61	; 0x3d
    4064:	1c19      	adds	r1, r3, #0
    4066:	4b0d      	ldr	r3, [pc, #52]	; (409c <receiveBegin+0x88>)
    4068:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    406a:	2025      	movs	r0, #37	; 0x25
    406c:	2140      	movs	r1, #64	; 0x40
    406e:	4b0b      	ldr	r3, [pc, #44]	; (409c <receiveBegin+0x88>)
    4070:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    4072:	2003      	movs	r0, #3
    4074:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <receiveBegin+0x8c>)
    4076:	4798      	blx	r3
}
    4078:	46bd      	mov	sp, r7
    407a:	bd80      	pop	{r7, pc}
    407c:	20000140 	.word	0x20000140
    4080:	200000de 	.word	0x200000de
    4084:	200001c4 	.word	0x200001c4
    4088:	200001c0 	.word	0x200001c0
    408c:	200001c2 	.word	0x200001c2
    4090:	2000013e 	.word	0x2000013e
    4094:	20000208 	.word	0x20000208
    4098:	00004201 	.word	0x00004201
    409c:	0000426d 	.word	0x0000426d
    40a0:	000039ed 	.word	0x000039ed

000040a4 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    40a4:	b580      	push	{r7, lr}
    40a6:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    40a8:	4b0f      	ldr	r3, [pc, #60]	; (40e8 <RFM_receiveDone+0x44>)
    40aa:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    40ac:	4b0f      	ldr	r3, [pc, #60]	; (40ec <RFM_receiveDone+0x48>)
    40ae:	881b      	ldrh	r3, [r3, #0]
    40b0:	b29b      	uxth	r3, r3
    40b2:	2b03      	cmp	r3, #3
    40b4:	d109      	bne.n	40ca <RFM_receiveDone+0x26>
    40b6:	4b0e      	ldr	r3, [pc, #56]	; (40f0 <RFM_receiveDone+0x4c>)
    40b8:	881b      	ldrh	r3, [r3, #0]
    40ba:	b29b      	uxth	r3, r3
    40bc:	2b00      	cmp	r3, #0
    40be:	d004      	beq.n	40ca <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    40c0:	2001      	movs	r0, #1
    40c2:	4b0c      	ldr	r3, [pc, #48]	; (40f4 <RFM_receiveDone+0x50>)
    40c4:	4798      	blx	r3
    return true;
    40c6:	2301      	movs	r3, #1
    40c8:	e00b      	b.n	40e2 <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    40ca:	4b08      	ldr	r3, [pc, #32]	; (40ec <RFM_receiveDone+0x48>)
    40cc:	881b      	ldrh	r3, [r3, #0]
    40ce:	b29b      	uxth	r3, r3
    40d0:	2b03      	cmp	r3, #3
    40d2:	d103      	bne.n	40dc <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    40d4:	4b08      	ldr	r3, [pc, #32]	; (40f8 <RFM_receiveDone+0x54>)
    40d6:	4798      	blx	r3
    return false;
    40d8:	2300      	movs	r3, #0
    40da:	e002      	b.n	40e2 <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    40dc:	4b07      	ldr	r3, [pc, #28]	; (40fc <RFM_receiveDone+0x58>)
    40de:	4798      	blx	r3
  return false;
    40e0:	2300      	movs	r3, #0
}
    40e2:	1c18      	adds	r0, r3, #0
    40e4:	46bd      	mov	sp, r7
    40e6:	bd80      	pop	{r7, pc}
    40e8:	00003015 	.word	0x00003015
    40ec:	200001c6 	.word	0x200001c6
    40f0:	200001c0 	.word	0x200001c0
    40f4:	000039ed 	.word	0x000039ed
    40f8:	00002ffd 	.word	0x00002ffd
    40fc:	00004015 	.word	0x00004015

00004100 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    4100:	b580      	push	{r7, lr}
    4102:	b084      	sub	sp, #16
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    4108:	2001      	movs	r0, #1
    410a:	4b24      	ldr	r3, [pc, #144]	; (419c <RFM_encrypt+0x9c>)
    410c:	4798      	blx	r3
  if (key != 0)
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	2b00      	cmp	r3, #0
    4112:	d029      	beq.n	4168 <RFM_encrypt+0x68>
  {
    select();
    4114:	4b22      	ldr	r3, [pc, #136]	; (41a0 <RFM_encrypt+0xa0>)
    4116:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    4118:	4a22      	ldr	r2, [pc, #136]	; (41a4 <RFM_encrypt+0xa4>)
    411a:	4b23      	ldr	r3, [pc, #140]	; (41a8 <RFM_encrypt+0xa8>)
    411c:	1c10      	adds	r0, r2, #0
    411e:	21be      	movs	r1, #190	; 0xbe
    4120:	1c1a      	adds	r2, r3, #0
    4122:	4b22      	ldr	r3, [pc, #136]	; (41ac <RFM_encrypt+0xac>)
    4124:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    4126:	230f      	movs	r3, #15
    4128:	18fb      	adds	r3, r7, r3
    412a:	2200      	movs	r2, #0
    412c:	701a      	strb	r2, [r3, #0]
    412e:	e014      	b.n	415a <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	687a      	ldr	r2, [r7, #4]
    4138:	18d3      	adds	r3, r2, r3
    413a:	781b      	ldrb	r3, [r3, #0]
    413c:	b29a      	uxth	r2, r3
    413e:	4919      	ldr	r1, [pc, #100]	; (41a4 <RFM_encrypt+0xa4>)
    4140:	4b19      	ldr	r3, [pc, #100]	; (41a8 <RFM_encrypt+0xa8>)
    4142:	1c08      	adds	r0, r1, #0
    4144:	1c11      	adds	r1, r2, #0
    4146:	1c1a      	adds	r2, r3, #0
    4148:	4b18      	ldr	r3, [pc, #96]	; (41ac <RFM_encrypt+0xac>)
    414a:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    select();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    414c:	230f      	movs	r3, #15
    414e:	18fb      	adds	r3, r7, r3
    4150:	781a      	ldrb	r2, [r3, #0]
    4152:	230f      	movs	r3, #15
    4154:	18fb      	adds	r3, r7, r3
    4156:	3201      	adds	r2, #1
    4158:	701a      	strb	r2, [r3, #0]
    415a:	230f      	movs	r3, #15
    415c:	18fb      	adds	r3, r7, r3
    415e:	781b      	ldrb	r3, [r3, #0]
    4160:	2b0f      	cmp	r3, #15
    4162:	d9e5      	bls.n	4130 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    4164:	4b12      	ldr	r3, [pc, #72]	; (41b0 <RFM_encrypt+0xb0>)
    4166:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    4168:	203d      	movs	r0, #61	; 0x3d
    416a:	4b12      	ldr	r3, [pc, #72]	; (41b4 <RFM_encrypt+0xb4>)
    416c:	4798      	blx	r3
    416e:	1c03      	adds	r3, r0, #0
    4170:	b2db      	uxtb	r3, r3
    4172:	1c1a      	adds	r2, r3, #0
    4174:	2301      	movs	r3, #1
    4176:	439a      	bics	r2, r3
    4178:	1c13      	adds	r3, r2, #0
    417a:	b2da      	uxtb	r2, r3
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	1e59      	subs	r1, r3, #1
    4180:	418b      	sbcs	r3, r1
    4182:	b2db      	uxtb	r3, r3
    4184:	b2db      	uxtb	r3, r3
    4186:	4313      	orrs	r3, r2
    4188:	b2db      	uxtb	r3, r3
    418a:	b2db      	uxtb	r3, r3
    418c:	203d      	movs	r0, #61	; 0x3d
    418e:	1c19      	adds	r1, r3, #0
    4190:	4b09      	ldr	r3, [pc, #36]	; (41b8 <RFM_encrypt+0xb8>)
    4192:	4798      	blx	r3
}
    4194:	46bd      	mov	sp, r7
    4196:	b004      	add	sp, #16
    4198:	bd80      	pop	{r7, pc}
    419a:	46c0      	nop			; (mov r8, r8)
    419c:	000039ed 	.word	0x000039ed
    41a0:	000042d1 	.word	0x000042d1
    41a4:	200001cc 	.word	0x200001cc
    41a8:	2000005c 	.word	0x2000005c
    41ac:	0000151d 	.word	0x0000151d
    41b0:	000042fd 	.word	0x000042fd
    41b4:	00004201 	.word	0x00004201
    41b8:	0000426d 	.word	0x0000426d

000041bc <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    41bc:	b580      	push	{r7, lr}
    41be:	b082      	sub	sp, #8
    41c0:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    41c2:	1dbb      	adds	r3, r7, #6
    41c4:	2200      	movs	r2, #0
    41c6:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    41c8:	2024      	movs	r0, #36	; 0x24
    41ca:	4b0c      	ldr	r3, [pc, #48]	; (41fc <readRSSI+0x40>)
    41cc:	4798      	blx	r3
    41ce:	1c03      	adds	r3, r0, #0
    41d0:	b29b      	uxth	r3, r3
    41d2:	425b      	negs	r3, r3
    41d4:	b29b      	uxth	r3, r3
    41d6:	b29a      	uxth	r2, r3
    41d8:	1dbb      	adds	r3, r7, #6
    41da:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    41dc:	1dbb      	adds	r3, r7, #6
    41de:	881b      	ldrh	r3, [r3, #0]
    41e0:	b29b      	uxth	r3, r3
    41e2:	b21b      	sxth	r3, r3
    41e4:	105b      	asrs	r3, r3, #1
    41e6:	b29a      	uxth	r2, r3
    41e8:	1dbb      	adds	r3, r7, #6
    41ea:	801a      	strh	r2, [r3, #0]
  return rssi;
    41ec:	1dbb      	adds	r3, r7, #6
    41ee:	881b      	ldrh	r3, [r3, #0]
    41f0:	b29b      	uxth	r3, r3
    41f2:	b21b      	sxth	r3, r3
}
    41f4:	1c18      	adds	r0, r3, #0
    41f6:	46bd      	mov	sp, r7
    41f8:	b002      	add	sp, #8
    41fa:	bd80      	pop	{r7, pc}
    41fc:	00004201 	.word	0x00004201

00004200 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    4200:	b580      	push	{r7, lr}
    4202:	b084      	sub	sp, #16
    4204:	af00      	add	r7, sp, #0
    4206:	1c02      	adds	r2, r0, #0
    4208:	1dbb      	adds	r3, r7, #6
    420a:	801a      	strh	r2, [r3, #0]
  select();
    420c:	4b12      	ldr	r3, [pc, #72]	; (4258 <readReg+0x58>)
    420e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    4210:	1dbb      	adds	r3, r7, #6
    4212:	881b      	ldrh	r3, [r3, #0]
    4214:	b29b      	uxth	r3, r3
    4216:	227f      	movs	r2, #127	; 0x7f
    4218:	4013      	ands	r3, r2
    421a:	b29a      	uxth	r2, r3
    421c:	490f      	ldr	r1, [pc, #60]	; (425c <readReg+0x5c>)
    421e:	4b10      	ldr	r3, [pc, #64]	; (4260 <readReg+0x60>)
    4220:	1c08      	adds	r0, r1, #0
    4222:	1c11      	adds	r1, r2, #0
    4224:	1c1a      	adds	r2, r3, #0
    4226:	4b0f      	ldr	r3, [pc, #60]	; (4264 <readReg+0x64>)
    4228:	4798      	blx	r3
  volatile uint16_t regval = 0;
    422a:	230e      	movs	r3, #14
    422c:	18fb      	adds	r3, r7, r3
    422e:	2200      	movs	r2, #0
    4230:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    4232:	4a0a      	ldr	r2, [pc, #40]	; (425c <readReg+0x5c>)
    4234:	230e      	movs	r3, #14
    4236:	18fb      	adds	r3, r7, r3
    4238:	1c10      	adds	r0, r2, #0
    423a:	2100      	movs	r1, #0
    423c:	1c1a      	adds	r2, r3, #0
    423e:	4b09      	ldr	r3, [pc, #36]	; (4264 <readReg+0x64>)
    4240:	4798      	blx	r3
  unselect();
    4242:	4b09      	ldr	r3, [pc, #36]	; (4268 <readReg+0x68>)
    4244:	4798      	blx	r3
  return (uint8_t)regval;
    4246:	230e      	movs	r3, #14
    4248:	18fb      	adds	r3, r7, r3
    424a:	881b      	ldrh	r3, [r3, #0]
    424c:	b29b      	uxth	r3, r3
    424e:	b2db      	uxtb	r3, r3
}
    4250:	1c18      	adds	r0, r3, #0
    4252:	46bd      	mov	sp, r7
    4254:	b004      	add	sp, #16
    4256:	bd80      	pop	{r7, pc}
    4258:	000042d1 	.word	0x000042d1
    425c:	200001cc 	.word	0x200001cc
    4260:	2000005c 	.word	0x2000005c
    4264:	0000151d 	.word	0x0000151d
    4268:	000042fd 	.word	0x000042fd

0000426c <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    426c:	b580      	push	{r7, lr}
    426e:	b082      	sub	sp, #8
    4270:	af00      	add	r7, sp, #0
    4272:	1c02      	adds	r2, r0, #0
    4274:	1dfb      	adds	r3, r7, #7
    4276:	701a      	strb	r2, [r3, #0]
    4278:	1dbb      	adds	r3, r7, #6
    427a:	1c0a      	adds	r2, r1, #0
    427c:	701a      	strb	r2, [r3, #0]
  select();
    427e:	4b0f      	ldr	r3, [pc, #60]	; (42bc <writeReg+0x50>)
    4280:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    4282:	1dfb      	adds	r3, r7, #7
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	2280      	movs	r2, #128	; 0x80
    4288:	4252      	negs	r2, r2
    428a:	4313      	orrs	r3, r2
    428c:	b2db      	uxtb	r3, r3
    428e:	b29a      	uxth	r2, r3
    4290:	490b      	ldr	r1, [pc, #44]	; (42c0 <writeReg+0x54>)
    4292:	4b0c      	ldr	r3, [pc, #48]	; (42c4 <writeReg+0x58>)
    4294:	1c08      	adds	r0, r1, #0
    4296:	1c11      	adds	r1, r2, #0
    4298:	1c1a      	adds	r2, r3, #0
    429a:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <writeReg+0x5c>)
    429c:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    429e:	1dbb      	adds	r3, r7, #6
    42a0:	781b      	ldrb	r3, [r3, #0]
    42a2:	b29a      	uxth	r2, r3
    42a4:	4906      	ldr	r1, [pc, #24]	; (42c0 <writeReg+0x54>)
    42a6:	4b07      	ldr	r3, [pc, #28]	; (42c4 <writeReg+0x58>)
    42a8:	1c08      	adds	r0, r1, #0
    42aa:	1c11      	adds	r1, r2, #0
    42ac:	1c1a      	adds	r2, r3, #0
    42ae:	4b06      	ldr	r3, [pc, #24]	; (42c8 <writeReg+0x5c>)
    42b0:	4798      	blx	r3
  unselect();
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <writeReg+0x60>)
    42b4:	4798      	blx	r3
}
    42b6:	46bd      	mov	sp, r7
    42b8:	b002      	add	sp, #8
    42ba:	bd80      	pop	{r7, pc}
    42bc:	000042d1 	.word	0x000042d1
    42c0:	200001cc 	.word	0x200001cc
    42c4:	2000005c 	.word	0x2000005c
    42c8:	0000151d 	.word	0x0000151d
    42cc:	000042fd 	.word	0x000042fd

000042d0 <select>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void select() {
    42d0:	b580      	push	{r7, lr}
    42d2:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    42d4:	4b05      	ldr	r3, [pc, #20]	; (42ec <select+0x1c>)
    42d6:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    42d8:	4a05      	ldr	r2, [pc, #20]	; (42f0 <select+0x20>)
    42da:	4b06      	ldr	r3, [pc, #24]	; (42f4 <select+0x24>)
    42dc:	1c10      	adds	r0, r2, #0
    42de:	1c19      	adds	r1, r3, #0
    42e0:	2201      	movs	r2, #1
    42e2:	4b05      	ldr	r3, [pc, #20]	; (42f8 <select+0x28>)
    42e4:	4798      	blx	r3
}
    42e6:	46bd      	mov	sp, r7
    42e8:	bd80      	pop	{r7, pc}
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	00003015 	.word	0x00003015
    42f0:	200001cc 	.word	0x200001cc
    42f4:	2000020c 	.word	0x2000020c
    42f8:	00001665 	.word	0x00001665

000042fc <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    42fc:	b580      	push	{r7, lr}
    42fe:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    4300:	4a05      	ldr	r2, [pc, #20]	; (4318 <unselect+0x1c>)
    4302:	4b06      	ldr	r3, [pc, #24]	; (431c <unselect+0x20>)
    4304:	1c10      	adds	r0, r2, #0
    4306:	1c19      	adds	r1, r3, #0
    4308:	2200      	movs	r2, #0
    430a:	4b05      	ldr	r3, [pc, #20]	; (4320 <unselect+0x24>)
    430c:	4798      	blx	r3
  maybeInterrupts();
    430e:	4b05      	ldr	r3, [pc, #20]	; (4324 <unselect+0x28>)
    4310:	4798      	blx	r3
}
    4312:	46bd      	mov	sp, r7
    4314:	bd80      	pop	{r7, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	200001cc 	.word	0x200001cc
    431c:	2000020c 	.word	0x2000020c
    4320:	00001665 	.word	0x00001665
    4324:	0000436d 	.word	0x0000436d

00004328 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    4328:	b580      	push	{r7, lr}
    432a:	b082      	sub	sp, #8
    432c:	af00      	add	r7, sp, #0
    432e:	1c02      	adds	r2, r0, #0
    4330:	1dfb      	adds	r3, r7, #7
    4332:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    4334:	1dfb      	adds	r3, r7, #7
    4336:	781b      	ldrb	r3, [r3, #0]
    4338:	2b00      	cmp	r3, #0
    433a:	d001      	beq.n	4340 <setHighPowerRegs+0x18>
    433c:	235d      	movs	r3, #93	; 0x5d
    433e:	e000      	b.n	4342 <setHighPowerRegs+0x1a>
    4340:	2355      	movs	r3, #85	; 0x55
    4342:	205a      	movs	r0, #90	; 0x5a
    4344:	1c19      	adds	r1, r3, #0
    4346:	4b08      	ldr	r3, [pc, #32]	; (4368 <setHighPowerRegs+0x40>)
    4348:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    434a:	1dfb      	adds	r3, r7, #7
    434c:	781b      	ldrb	r3, [r3, #0]
    434e:	2b00      	cmp	r3, #0
    4350:	d001      	beq.n	4356 <setHighPowerRegs+0x2e>
    4352:	237c      	movs	r3, #124	; 0x7c
    4354:	e000      	b.n	4358 <setHighPowerRegs+0x30>
    4356:	2370      	movs	r3, #112	; 0x70
    4358:	205c      	movs	r0, #92	; 0x5c
    435a:	1c19      	adds	r1, r3, #0
    435c:	4b02      	ldr	r3, [pc, #8]	; (4368 <setHighPowerRegs+0x40>)
    435e:	4798      	blx	r3
}
    4360:	46bd      	mov	sp, r7
    4362:	b002      	add	sp, #8
    4364:	bd80      	pop	{r7, pc}
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	0000426d 	.word	0x0000426d

0000436c <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    436c:	b580      	push	{r7, lr}
    436e:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    4370:	4b05      	ldr	r3, [pc, #20]	; (4388 <maybeInterrupts+0x1c>)
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	b2db      	uxtb	r3, r3
    4376:	2201      	movs	r2, #1
    4378:	4053      	eors	r3, r2
    437a:	b2db      	uxtb	r3, r3
    437c:	2b00      	cmp	r3, #0
    437e:	d001      	beq.n	4384 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    4380:	4b02      	ldr	r3, [pc, #8]	; (438c <maybeInterrupts+0x20>)
    4382:	4798      	blx	r3
}
    4384:	46bd      	mov	sp, r7
    4386:	bd80      	pop	{r7, pc}
    4388:	200000f9 	.word	0x200000f9
    438c:	00002ffd 	.word	0x00002ffd

00004390 <main>:
///////////////////////////////////////////////////////////////////////////



int main (void)
{
    4390:	b590      	push	{r4, r7, lr}
    4392:	b08b      	sub	sp, #44	; 0x2c
    4394:	af02      	add	r7, sp, #8
    /* Initialize system */
	system_init();
    4396:	4b36      	ldr	r3, [pc, #216]	; (4470 <main+0xe0>)
    4398:	4798      	blx	r3
	//while (true) {
		
	//}

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    439a:	205b      	movs	r0, #91	; 0x5b
    439c:	2102      	movs	r1, #2
    439e:	2200      	movs	r2, #0
    43a0:	4b34      	ldr	r3, [pc, #208]	; (4474 <main+0xe4>)
    43a2:	4798      	blx	r3
	RFM_setHighPower(true); // Always use this for RFM69HCW
    43a4:	2001      	movs	r0, #1
    43a6:	4b34      	ldr	r3, [pc, #208]	; (4478 <main+0xe8>)
    43a8:	4798      	blx	r3

	// Turn on encryption if desired:
	if (ENCRYPT)
	RFM_encrypt(ENCRYPTKEY);
    43aa:	4b34      	ldr	r3, [pc, #208]	; (447c <main+0xec>)
    43ac:	1c18      	adds	r0, r3, #0
    43ae:	4b34      	ldr	r3, [pc, #208]	; (4480 <main+0xf0>)
    43b0:	4798      	blx	r3


	int sendlength = 16;
    43b2:	2310      	movs	r3, #16
    43b4:	61fb      	str	r3, [r7, #28]
	int index = 0;
    43b6:	2300      	movs	r3, #0
    43b8:	61bb      	str	r3, [r7, #24]
	while(1)
	{
		char sendbuffer[16] = "Hello World!   ";
    43ba:	1d3b      	adds	r3, r7, #4
    43bc:	4a31      	ldr	r2, [pc, #196]	; (4484 <main+0xf4>)
    43be:	ca13      	ldmia	r2!, {r0, r1, r4}
    43c0:	c313      	stmia	r3!, {r0, r1, r4}
    43c2:	6812      	ldr	r2, [r2, #0]
    43c4:	601a      	str	r2, [r3, #0]
		// Set up a "buffer" for characters that we'll send:
		index++;
    43c6:	69bb      	ldr	r3, [r7, #24]
    43c8:	3301      	adds	r3, #1
    43ca:	61bb      	str	r3, [r7, #24]
		if(index < 10)
    43cc:	69bb      	ldr	r3, [r7, #24]
    43ce:	2b09      	cmp	r3, #9
    43d0:	dc06      	bgt.n	43e0 <main+0x50>
			sendbuffer[15] = index + '0';
    43d2:	69bb      	ldr	r3, [r7, #24]
    43d4:	b2db      	uxtb	r3, r3
    43d6:	3330      	adds	r3, #48	; 0x30
    43d8:	b2da      	uxtb	r2, r3
    43da:	1d3b      	adds	r3, r7, #4
    43dc:	73da      	strb	r2, [r3, #15]
    43de:	e01b      	b.n	4418 <main+0x88>
		else if(index > 10 && index < 100)
    43e0:	69bb      	ldr	r3, [r7, #24]
    43e2:	2b0a      	cmp	r3, #10
    43e4:	dd18      	ble.n	4418 <main+0x88>
    43e6:	69bb      	ldr	r3, [r7, #24]
    43e8:	2b63      	cmp	r3, #99	; 0x63
    43ea:	dc15      	bgt.n	4418 <main+0x88>
		{
			sendbuffer[14] = index/10 + '0';
    43ec:	69ba      	ldr	r2, [r7, #24]
    43ee:	4b26      	ldr	r3, [pc, #152]	; (4488 <main+0xf8>)
    43f0:	1c10      	adds	r0, r2, #0
    43f2:	210a      	movs	r1, #10
    43f4:	4798      	blx	r3
    43f6:	1c03      	adds	r3, r0, #0
    43f8:	b2db      	uxtb	r3, r3
    43fa:	3330      	adds	r3, #48	; 0x30
    43fc:	b2da      	uxtb	r2, r3
    43fe:	1d3b      	adds	r3, r7, #4
    4400:	739a      	strb	r2, [r3, #14]
			sendbuffer[15] = index%10 + '0';
    4402:	69ba      	ldr	r2, [r7, #24]
    4404:	4b21      	ldr	r3, [pc, #132]	; (448c <main+0xfc>)
    4406:	1c10      	adds	r0, r2, #0
    4408:	210a      	movs	r1, #10
    440a:	4798      	blx	r3
    440c:	1c0b      	adds	r3, r1, #0
    440e:	b2db      	uxtb	r3, r3
    4410:	3330      	adds	r3, #48	; 0x30
    4412:	b2da      	uxtb	r2, r3
    4414:	1d3b      	adds	r3, r7, #4
    4416:	73da      	strb	r2, [r3, #15]
			//dbg_print_str("]\n");
			  
			// If you want acknowledgements, use RFM_sendWithRetry(): 
			if (USEACK)
			{
				int ACK = 0;
    4418:	2300      	movs	r3, #0
    441a:	617b      	str	r3, [r7, #20]
				if (RFM_sendWithRetry(TONODEID, sendbuffer, sendlength, 2, 100))
    441c:	69fb      	ldr	r3, [r7, #28]
    441e:	b2da      	uxtb	r2, r3
    4420:	1d39      	adds	r1, r7, #4
    4422:	2364      	movs	r3, #100	; 0x64
    4424:	9300      	str	r3, [sp, #0]
    4426:	2001      	movs	r0, #1
    4428:	2302      	movs	r3, #2
    442a:	4c19      	ldr	r4, [pc, #100]	; (4490 <main+0x100>)
    442c:	47a0      	blx	r4
    442e:	1e03      	subs	r3, r0, #0
    4430:	d002      	beq.n	4438 <main+0xa8>
					ACK = 1;
    4432:	2301      	movs	r3, #1
    4434:	617b      	str	r3, [r7, #20]
    4436:	e001      	b.n	443c <main+0xac>
				else
					ACK = 0;
    4438:	2300      	movs	r3, #0
    443a:	617b      	str	r3, [r7, #20]
			else // don't use ACK
			{
				RFM_send(TONODEID, sendbuffer, sendlength, false);
			}
			  
			sendlength = 0; // reset the packet
    443c:	2300      	movs	r3, #0
    443e:	61fb      	str	r3, [r7, #28]
	// RECEIVING

	// In this section, we'll check with the RFM69HCW to see
	// if it has received any packets:

	if (RFM_receiveDone()) // Got one!
    4440:	4b14      	ldr	r3, [pc, #80]	; (4494 <main+0x104>)
    4442:	4798      	blx	r3
    4444:	1e03      	subs	r3, r0, #0
    4446:	d012      	beq.n	446e <main+0xde>
		// The actual message is contained in the RFM_DATA array,
		// and is RFM_DATALEN bytes in size:
		  
		//for (byte i = 0; i < RFM_DATALEN; i++)
		//dbg_print_str((char)RFM_DATA[i]);
		RFM_DATALEN = RFM_DATALEN;
    4448:	4b13      	ldr	r3, [pc, #76]	; (4498 <main+0x108>)
    444a:	881b      	ldrh	r3, [r3, #0]
    444c:	b29a      	uxth	r2, r3
    444e:	4b12      	ldr	r3, [pc, #72]	; (4498 <main+0x108>)
    4450:	801a      	strh	r2, [r3, #0]
		// RFM_RSSI is the "Receive Signal Strength Indicator",
		// smaller numbers mean higher power.
		  
		//dbg_print_str("], RSSI ");
		//dbg_print_str("%d\n", RFM_RSSI);
		RFM_RSSI = RFM_RSSI;
    4452:	4b12      	ldr	r3, [pc, #72]	; (449c <main+0x10c>)
    4454:	881b      	ldrh	r3, [r3, #0]
    4456:	b29a      	uxth	r2, r3
    4458:	4b10      	ldr	r3, [pc, #64]	; (449c <main+0x10c>)
    445a:	801a      	strh	r2, [r3, #0]

		// Send an ACK if requested.
		// (You don't need this code if you're not using ACKs.)
		  
		if (RFM_ACKRequested())
    445c:	4b10      	ldr	r3, [pc, #64]	; (44a0 <main+0x110>)
    445e:	4798      	blx	r3
    4460:	1e03      	subs	r3, r0, #0
    4462:	d004      	beq.n	446e <main+0xde>
		{
			RFM_sendACK("", 0);
    4464:	4b0f      	ldr	r3, [pc, #60]	; (44a4 <main+0x114>)
    4466:	1c18      	adds	r0, r3, #0
    4468:	2100      	movs	r1, #0
    446a:	4b0f      	ldr	r3, [pc, #60]	; (44a8 <main+0x118>)
    446c:	4798      	blx	r3
		//	dbg_print_str("ACK sent\n");
		}
	}
  }
    446e:	e7a4      	b.n	43ba <main+0x2a>
    4470:	00002d95 	.word	0x00002d95
    4474:	00003685 	.word	0x00003685
    4478:	000035cd 	.word	0x000035cd
    447c:	000048cc 	.word	0x000048cc
    4480:	00004101 	.word	0x00004101
    4484:	000048e4 	.word	0x000048e4
    4488:	000045cd 	.word	0x000045cd
    448c:	00004799 	.word	0x00004799
    4490:	00003c2d 	.word	0x00003c2d
    4494:	000040a5 	.word	0x000040a5
    4498:	20000140 	.word	0x20000140
    449c:	20000208 	.word	0x20000208
    44a0:	00003d29 	.word	0x00003d29
    44a4:	000048e0 	.word	0x000048e0
    44a8:	00003d5d 	.word	0x00003d5d

000044ac <__aeabi_uidiv>:
    44ac:	2200      	movs	r2, #0
    44ae:	0843      	lsrs	r3, r0, #1
    44b0:	428b      	cmp	r3, r1
    44b2:	d374      	bcc.n	459e <__aeabi_uidiv+0xf2>
    44b4:	0903      	lsrs	r3, r0, #4
    44b6:	428b      	cmp	r3, r1
    44b8:	d35f      	bcc.n	457a <__aeabi_uidiv+0xce>
    44ba:	0a03      	lsrs	r3, r0, #8
    44bc:	428b      	cmp	r3, r1
    44be:	d344      	bcc.n	454a <__aeabi_uidiv+0x9e>
    44c0:	0b03      	lsrs	r3, r0, #12
    44c2:	428b      	cmp	r3, r1
    44c4:	d328      	bcc.n	4518 <__aeabi_uidiv+0x6c>
    44c6:	0c03      	lsrs	r3, r0, #16
    44c8:	428b      	cmp	r3, r1
    44ca:	d30d      	bcc.n	44e8 <__aeabi_uidiv+0x3c>
    44cc:	22ff      	movs	r2, #255	; 0xff
    44ce:	0209      	lsls	r1, r1, #8
    44d0:	ba12      	rev	r2, r2
    44d2:	0c03      	lsrs	r3, r0, #16
    44d4:	428b      	cmp	r3, r1
    44d6:	d302      	bcc.n	44de <__aeabi_uidiv+0x32>
    44d8:	1212      	asrs	r2, r2, #8
    44da:	0209      	lsls	r1, r1, #8
    44dc:	d065      	beq.n	45aa <__aeabi_uidiv+0xfe>
    44de:	0b03      	lsrs	r3, r0, #12
    44e0:	428b      	cmp	r3, r1
    44e2:	d319      	bcc.n	4518 <__aeabi_uidiv+0x6c>
    44e4:	e000      	b.n	44e8 <__aeabi_uidiv+0x3c>
    44e6:	0a09      	lsrs	r1, r1, #8
    44e8:	0bc3      	lsrs	r3, r0, #15
    44ea:	428b      	cmp	r3, r1
    44ec:	d301      	bcc.n	44f2 <__aeabi_uidiv+0x46>
    44ee:	03cb      	lsls	r3, r1, #15
    44f0:	1ac0      	subs	r0, r0, r3
    44f2:	4152      	adcs	r2, r2
    44f4:	0b83      	lsrs	r3, r0, #14
    44f6:	428b      	cmp	r3, r1
    44f8:	d301      	bcc.n	44fe <__aeabi_uidiv+0x52>
    44fa:	038b      	lsls	r3, r1, #14
    44fc:	1ac0      	subs	r0, r0, r3
    44fe:	4152      	adcs	r2, r2
    4500:	0b43      	lsrs	r3, r0, #13
    4502:	428b      	cmp	r3, r1
    4504:	d301      	bcc.n	450a <__aeabi_uidiv+0x5e>
    4506:	034b      	lsls	r3, r1, #13
    4508:	1ac0      	subs	r0, r0, r3
    450a:	4152      	adcs	r2, r2
    450c:	0b03      	lsrs	r3, r0, #12
    450e:	428b      	cmp	r3, r1
    4510:	d301      	bcc.n	4516 <__aeabi_uidiv+0x6a>
    4512:	030b      	lsls	r3, r1, #12
    4514:	1ac0      	subs	r0, r0, r3
    4516:	4152      	adcs	r2, r2
    4518:	0ac3      	lsrs	r3, r0, #11
    451a:	428b      	cmp	r3, r1
    451c:	d301      	bcc.n	4522 <__aeabi_uidiv+0x76>
    451e:	02cb      	lsls	r3, r1, #11
    4520:	1ac0      	subs	r0, r0, r3
    4522:	4152      	adcs	r2, r2
    4524:	0a83      	lsrs	r3, r0, #10
    4526:	428b      	cmp	r3, r1
    4528:	d301      	bcc.n	452e <__aeabi_uidiv+0x82>
    452a:	028b      	lsls	r3, r1, #10
    452c:	1ac0      	subs	r0, r0, r3
    452e:	4152      	adcs	r2, r2
    4530:	0a43      	lsrs	r3, r0, #9
    4532:	428b      	cmp	r3, r1
    4534:	d301      	bcc.n	453a <__aeabi_uidiv+0x8e>
    4536:	024b      	lsls	r3, r1, #9
    4538:	1ac0      	subs	r0, r0, r3
    453a:	4152      	adcs	r2, r2
    453c:	0a03      	lsrs	r3, r0, #8
    453e:	428b      	cmp	r3, r1
    4540:	d301      	bcc.n	4546 <__aeabi_uidiv+0x9a>
    4542:	020b      	lsls	r3, r1, #8
    4544:	1ac0      	subs	r0, r0, r3
    4546:	4152      	adcs	r2, r2
    4548:	d2cd      	bcs.n	44e6 <__aeabi_uidiv+0x3a>
    454a:	09c3      	lsrs	r3, r0, #7
    454c:	428b      	cmp	r3, r1
    454e:	d301      	bcc.n	4554 <__aeabi_uidiv+0xa8>
    4550:	01cb      	lsls	r3, r1, #7
    4552:	1ac0      	subs	r0, r0, r3
    4554:	4152      	adcs	r2, r2
    4556:	0983      	lsrs	r3, r0, #6
    4558:	428b      	cmp	r3, r1
    455a:	d301      	bcc.n	4560 <__aeabi_uidiv+0xb4>
    455c:	018b      	lsls	r3, r1, #6
    455e:	1ac0      	subs	r0, r0, r3
    4560:	4152      	adcs	r2, r2
    4562:	0943      	lsrs	r3, r0, #5
    4564:	428b      	cmp	r3, r1
    4566:	d301      	bcc.n	456c <__aeabi_uidiv+0xc0>
    4568:	014b      	lsls	r3, r1, #5
    456a:	1ac0      	subs	r0, r0, r3
    456c:	4152      	adcs	r2, r2
    456e:	0903      	lsrs	r3, r0, #4
    4570:	428b      	cmp	r3, r1
    4572:	d301      	bcc.n	4578 <__aeabi_uidiv+0xcc>
    4574:	010b      	lsls	r3, r1, #4
    4576:	1ac0      	subs	r0, r0, r3
    4578:	4152      	adcs	r2, r2
    457a:	08c3      	lsrs	r3, r0, #3
    457c:	428b      	cmp	r3, r1
    457e:	d301      	bcc.n	4584 <__aeabi_uidiv+0xd8>
    4580:	00cb      	lsls	r3, r1, #3
    4582:	1ac0      	subs	r0, r0, r3
    4584:	4152      	adcs	r2, r2
    4586:	0883      	lsrs	r3, r0, #2
    4588:	428b      	cmp	r3, r1
    458a:	d301      	bcc.n	4590 <__aeabi_uidiv+0xe4>
    458c:	008b      	lsls	r3, r1, #2
    458e:	1ac0      	subs	r0, r0, r3
    4590:	4152      	adcs	r2, r2
    4592:	0843      	lsrs	r3, r0, #1
    4594:	428b      	cmp	r3, r1
    4596:	d301      	bcc.n	459c <__aeabi_uidiv+0xf0>
    4598:	004b      	lsls	r3, r1, #1
    459a:	1ac0      	subs	r0, r0, r3
    459c:	4152      	adcs	r2, r2
    459e:	1a41      	subs	r1, r0, r1
    45a0:	d200      	bcs.n	45a4 <__aeabi_uidiv+0xf8>
    45a2:	4601      	mov	r1, r0
    45a4:	4152      	adcs	r2, r2
    45a6:	4610      	mov	r0, r2
    45a8:	4770      	bx	lr
    45aa:	e7ff      	b.n	45ac <__aeabi_uidiv+0x100>
    45ac:	b501      	push	{r0, lr}
    45ae:	2000      	movs	r0, #0
    45b0:	f000 f8fc 	bl	47ac <__aeabi_idiv0>
    45b4:	bd02      	pop	{r1, pc}
    45b6:	46c0      	nop			; (mov r8, r8)

000045b8 <__aeabi_uidivmod>:
    45b8:	2900      	cmp	r1, #0
    45ba:	d0f7      	beq.n	45ac <__aeabi_uidiv+0x100>
    45bc:	b503      	push	{r0, r1, lr}
    45be:	f7ff ff75 	bl	44ac <__aeabi_uidiv>
    45c2:	bc0e      	pop	{r1, r2, r3}
    45c4:	4342      	muls	r2, r0
    45c6:	1a89      	subs	r1, r1, r2
    45c8:	4718      	bx	r3
    45ca:	46c0      	nop			; (mov r8, r8)

000045cc <__aeabi_idiv>:
    45cc:	4603      	mov	r3, r0
    45ce:	430b      	orrs	r3, r1
    45d0:	d47f      	bmi.n	46d2 <__aeabi_idiv+0x106>
    45d2:	2200      	movs	r2, #0
    45d4:	0843      	lsrs	r3, r0, #1
    45d6:	428b      	cmp	r3, r1
    45d8:	d374      	bcc.n	46c4 <__aeabi_idiv+0xf8>
    45da:	0903      	lsrs	r3, r0, #4
    45dc:	428b      	cmp	r3, r1
    45de:	d35f      	bcc.n	46a0 <__aeabi_idiv+0xd4>
    45e0:	0a03      	lsrs	r3, r0, #8
    45e2:	428b      	cmp	r3, r1
    45e4:	d344      	bcc.n	4670 <__aeabi_idiv+0xa4>
    45e6:	0b03      	lsrs	r3, r0, #12
    45e8:	428b      	cmp	r3, r1
    45ea:	d328      	bcc.n	463e <__aeabi_idiv+0x72>
    45ec:	0c03      	lsrs	r3, r0, #16
    45ee:	428b      	cmp	r3, r1
    45f0:	d30d      	bcc.n	460e <__aeabi_idiv+0x42>
    45f2:	22ff      	movs	r2, #255	; 0xff
    45f4:	0209      	lsls	r1, r1, #8
    45f6:	ba12      	rev	r2, r2
    45f8:	0c03      	lsrs	r3, r0, #16
    45fa:	428b      	cmp	r3, r1
    45fc:	d302      	bcc.n	4604 <__aeabi_idiv+0x38>
    45fe:	1212      	asrs	r2, r2, #8
    4600:	0209      	lsls	r1, r1, #8
    4602:	d065      	beq.n	46d0 <__aeabi_idiv+0x104>
    4604:	0b03      	lsrs	r3, r0, #12
    4606:	428b      	cmp	r3, r1
    4608:	d319      	bcc.n	463e <__aeabi_idiv+0x72>
    460a:	e000      	b.n	460e <__aeabi_idiv+0x42>
    460c:	0a09      	lsrs	r1, r1, #8
    460e:	0bc3      	lsrs	r3, r0, #15
    4610:	428b      	cmp	r3, r1
    4612:	d301      	bcc.n	4618 <__aeabi_idiv+0x4c>
    4614:	03cb      	lsls	r3, r1, #15
    4616:	1ac0      	subs	r0, r0, r3
    4618:	4152      	adcs	r2, r2
    461a:	0b83      	lsrs	r3, r0, #14
    461c:	428b      	cmp	r3, r1
    461e:	d301      	bcc.n	4624 <__aeabi_idiv+0x58>
    4620:	038b      	lsls	r3, r1, #14
    4622:	1ac0      	subs	r0, r0, r3
    4624:	4152      	adcs	r2, r2
    4626:	0b43      	lsrs	r3, r0, #13
    4628:	428b      	cmp	r3, r1
    462a:	d301      	bcc.n	4630 <__aeabi_idiv+0x64>
    462c:	034b      	lsls	r3, r1, #13
    462e:	1ac0      	subs	r0, r0, r3
    4630:	4152      	adcs	r2, r2
    4632:	0b03      	lsrs	r3, r0, #12
    4634:	428b      	cmp	r3, r1
    4636:	d301      	bcc.n	463c <__aeabi_idiv+0x70>
    4638:	030b      	lsls	r3, r1, #12
    463a:	1ac0      	subs	r0, r0, r3
    463c:	4152      	adcs	r2, r2
    463e:	0ac3      	lsrs	r3, r0, #11
    4640:	428b      	cmp	r3, r1
    4642:	d301      	bcc.n	4648 <__aeabi_idiv+0x7c>
    4644:	02cb      	lsls	r3, r1, #11
    4646:	1ac0      	subs	r0, r0, r3
    4648:	4152      	adcs	r2, r2
    464a:	0a83      	lsrs	r3, r0, #10
    464c:	428b      	cmp	r3, r1
    464e:	d301      	bcc.n	4654 <__aeabi_idiv+0x88>
    4650:	028b      	lsls	r3, r1, #10
    4652:	1ac0      	subs	r0, r0, r3
    4654:	4152      	adcs	r2, r2
    4656:	0a43      	lsrs	r3, r0, #9
    4658:	428b      	cmp	r3, r1
    465a:	d301      	bcc.n	4660 <__aeabi_idiv+0x94>
    465c:	024b      	lsls	r3, r1, #9
    465e:	1ac0      	subs	r0, r0, r3
    4660:	4152      	adcs	r2, r2
    4662:	0a03      	lsrs	r3, r0, #8
    4664:	428b      	cmp	r3, r1
    4666:	d301      	bcc.n	466c <__aeabi_idiv+0xa0>
    4668:	020b      	lsls	r3, r1, #8
    466a:	1ac0      	subs	r0, r0, r3
    466c:	4152      	adcs	r2, r2
    466e:	d2cd      	bcs.n	460c <__aeabi_idiv+0x40>
    4670:	09c3      	lsrs	r3, r0, #7
    4672:	428b      	cmp	r3, r1
    4674:	d301      	bcc.n	467a <__aeabi_idiv+0xae>
    4676:	01cb      	lsls	r3, r1, #7
    4678:	1ac0      	subs	r0, r0, r3
    467a:	4152      	adcs	r2, r2
    467c:	0983      	lsrs	r3, r0, #6
    467e:	428b      	cmp	r3, r1
    4680:	d301      	bcc.n	4686 <__aeabi_idiv+0xba>
    4682:	018b      	lsls	r3, r1, #6
    4684:	1ac0      	subs	r0, r0, r3
    4686:	4152      	adcs	r2, r2
    4688:	0943      	lsrs	r3, r0, #5
    468a:	428b      	cmp	r3, r1
    468c:	d301      	bcc.n	4692 <__aeabi_idiv+0xc6>
    468e:	014b      	lsls	r3, r1, #5
    4690:	1ac0      	subs	r0, r0, r3
    4692:	4152      	adcs	r2, r2
    4694:	0903      	lsrs	r3, r0, #4
    4696:	428b      	cmp	r3, r1
    4698:	d301      	bcc.n	469e <__aeabi_idiv+0xd2>
    469a:	010b      	lsls	r3, r1, #4
    469c:	1ac0      	subs	r0, r0, r3
    469e:	4152      	adcs	r2, r2
    46a0:	08c3      	lsrs	r3, r0, #3
    46a2:	428b      	cmp	r3, r1
    46a4:	d301      	bcc.n	46aa <__aeabi_idiv+0xde>
    46a6:	00cb      	lsls	r3, r1, #3
    46a8:	1ac0      	subs	r0, r0, r3
    46aa:	4152      	adcs	r2, r2
    46ac:	0883      	lsrs	r3, r0, #2
    46ae:	428b      	cmp	r3, r1
    46b0:	d301      	bcc.n	46b6 <__aeabi_idiv+0xea>
    46b2:	008b      	lsls	r3, r1, #2
    46b4:	1ac0      	subs	r0, r0, r3
    46b6:	4152      	adcs	r2, r2
    46b8:	0843      	lsrs	r3, r0, #1
    46ba:	428b      	cmp	r3, r1
    46bc:	d301      	bcc.n	46c2 <__aeabi_idiv+0xf6>
    46be:	004b      	lsls	r3, r1, #1
    46c0:	1ac0      	subs	r0, r0, r3
    46c2:	4152      	adcs	r2, r2
    46c4:	1a41      	subs	r1, r0, r1
    46c6:	d200      	bcs.n	46ca <__aeabi_idiv+0xfe>
    46c8:	4601      	mov	r1, r0
    46ca:	4152      	adcs	r2, r2
    46cc:	4610      	mov	r0, r2
    46ce:	4770      	bx	lr
    46d0:	e05d      	b.n	478e <__aeabi_idiv+0x1c2>
    46d2:	0fca      	lsrs	r2, r1, #31
    46d4:	d000      	beq.n	46d8 <__aeabi_idiv+0x10c>
    46d6:	4249      	negs	r1, r1
    46d8:	1003      	asrs	r3, r0, #32
    46da:	d300      	bcc.n	46de <__aeabi_idiv+0x112>
    46dc:	4240      	negs	r0, r0
    46de:	4053      	eors	r3, r2
    46e0:	2200      	movs	r2, #0
    46e2:	469c      	mov	ip, r3
    46e4:	0903      	lsrs	r3, r0, #4
    46e6:	428b      	cmp	r3, r1
    46e8:	d32d      	bcc.n	4746 <__aeabi_idiv+0x17a>
    46ea:	0a03      	lsrs	r3, r0, #8
    46ec:	428b      	cmp	r3, r1
    46ee:	d312      	bcc.n	4716 <__aeabi_idiv+0x14a>
    46f0:	22fc      	movs	r2, #252	; 0xfc
    46f2:	0189      	lsls	r1, r1, #6
    46f4:	ba12      	rev	r2, r2
    46f6:	0a03      	lsrs	r3, r0, #8
    46f8:	428b      	cmp	r3, r1
    46fa:	d30c      	bcc.n	4716 <__aeabi_idiv+0x14a>
    46fc:	0189      	lsls	r1, r1, #6
    46fe:	1192      	asrs	r2, r2, #6
    4700:	428b      	cmp	r3, r1
    4702:	d308      	bcc.n	4716 <__aeabi_idiv+0x14a>
    4704:	0189      	lsls	r1, r1, #6
    4706:	1192      	asrs	r2, r2, #6
    4708:	428b      	cmp	r3, r1
    470a:	d304      	bcc.n	4716 <__aeabi_idiv+0x14a>
    470c:	0189      	lsls	r1, r1, #6
    470e:	d03a      	beq.n	4786 <__aeabi_idiv+0x1ba>
    4710:	1192      	asrs	r2, r2, #6
    4712:	e000      	b.n	4716 <__aeabi_idiv+0x14a>
    4714:	0989      	lsrs	r1, r1, #6
    4716:	09c3      	lsrs	r3, r0, #7
    4718:	428b      	cmp	r3, r1
    471a:	d301      	bcc.n	4720 <__aeabi_idiv+0x154>
    471c:	01cb      	lsls	r3, r1, #7
    471e:	1ac0      	subs	r0, r0, r3
    4720:	4152      	adcs	r2, r2
    4722:	0983      	lsrs	r3, r0, #6
    4724:	428b      	cmp	r3, r1
    4726:	d301      	bcc.n	472c <__aeabi_idiv+0x160>
    4728:	018b      	lsls	r3, r1, #6
    472a:	1ac0      	subs	r0, r0, r3
    472c:	4152      	adcs	r2, r2
    472e:	0943      	lsrs	r3, r0, #5
    4730:	428b      	cmp	r3, r1
    4732:	d301      	bcc.n	4738 <__aeabi_idiv+0x16c>
    4734:	014b      	lsls	r3, r1, #5
    4736:	1ac0      	subs	r0, r0, r3
    4738:	4152      	adcs	r2, r2
    473a:	0903      	lsrs	r3, r0, #4
    473c:	428b      	cmp	r3, r1
    473e:	d301      	bcc.n	4744 <__aeabi_idiv+0x178>
    4740:	010b      	lsls	r3, r1, #4
    4742:	1ac0      	subs	r0, r0, r3
    4744:	4152      	adcs	r2, r2
    4746:	08c3      	lsrs	r3, r0, #3
    4748:	428b      	cmp	r3, r1
    474a:	d301      	bcc.n	4750 <__aeabi_idiv+0x184>
    474c:	00cb      	lsls	r3, r1, #3
    474e:	1ac0      	subs	r0, r0, r3
    4750:	4152      	adcs	r2, r2
    4752:	0883      	lsrs	r3, r0, #2
    4754:	428b      	cmp	r3, r1
    4756:	d301      	bcc.n	475c <__aeabi_idiv+0x190>
    4758:	008b      	lsls	r3, r1, #2
    475a:	1ac0      	subs	r0, r0, r3
    475c:	4152      	adcs	r2, r2
    475e:	d2d9      	bcs.n	4714 <__aeabi_idiv+0x148>
    4760:	0843      	lsrs	r3, r0, #1
    4762:	428b      	cmp	r3, r1
    4764:	d301      	bcc.n	476a <__aeabi_idiv+0x19e>
    4766:	004b      	lsls	r3, r1, #1
    4768:	1ac0      	subs	r0, r0, r3
    476a:	4152      	adcs	r2, r2
    476c:	1a41      	subs	r1, r0, r1
    476e:	d200      	bcs.n	4772 <__aeabi_idiv+0x1a6>
    4770:	4601      	mov	r1, r0
    4772:	4663      	mov	r3, ip
    4774:	4152      	adcs	r2, r2
    4776:	105b      	asrs	r3, r3, #1
    4778:	4610      	mov	r0, r2
    477a:	d301      	bcc.n	4780 <__aeabi_idiv+0x1b4>
    477c:	4240      	negs	r0, r0
    477e:	2b00      	cmp	r3, #0
    4780:	d500      	bpl.n	4784 <__aeabi_idiv+0x1b8>
    4782:	4249      	negs	r1, r1
    4784:	4770      	bx	lr
    4786:	4663      	mov	r3, ip
    4788:	105b      	asrs	r3, r3, #1
    478a:	d300      	bcc.n	478e <__aeabi_idiv+0x1c2>
    478c:	4240      	negs	r0, r0
    478e:	b501      	push	{r0, lr}
    4790:	2000      	movs	r0, #0
    4792:	f000 f80b 	bl	47ac <__aeabi_idiv0>
    4796:	bd02      	pop	{r1, pc}

00004798 <__aeabi_idivmod>:
    4798:	2900      	cmp	r1, #0
    479a:	d0f8      	beq.n	478e <__aeabi_idiv+0x1c2>
    479c:	b503      	push	{r0, r1, lr}
    479e:	f7ff ff15 	bl	45cc <__aeabi_idiv>
    47a2:	bc0e      	pop	{r1, r2, r3}
    47a4:	4342      	muls	r2, r0
    47a6:	1a89      	subs	r1, r1, r2
    47a8:	4718      	bx	r3
    47aa:	46c0      	nop			; (mov r8, r8)

000047ac <__aeabi_idiv0>:
    47ac:	4770      	bx	lr
    47ae:	46c0      	nop			; (mov r8, r8)

000047b0 <__libc_init_array>:
    47b0:	4b0e      	ldr	r3, [pc, #56]	; (47ec <__libc_init_array+0x3c>)
    47b2:	b570      	push	{r4, r5, r6, lr}
    47b4:	2500      	movs	r5, #0
    47b6:	1c1e      	adds	r6, r3, #0
    47b8:	4c0d      	ldr	r4, [pc, #52]	; (47f0 <__libc_init_array+0x40>)
    47ba:	1ae4      	subs	r4, r4, r3
    47bc:	10a4      	asrs	r4, r4, #2
    47be:	42a5      	cmp	r5, r4
    47c0:	d004      	beq.n	47cc <__libc_init_array+0x1c>
    47c2:	00ab      	lsls	r3, r5, #2
    47c4:	58f3      	ldr	r3, [r6, r3]
    47c6:	4798      	blx	r3
    47c8:	3501      	adds	r5, #1
    47ca:	e7f8      	b.n	47be <__libc_init_array+0xe>
    47cc:	f000 f892 	bl	48f4 <_init>
    47d0:	4b08      	ldr	r3, [pc, #32]	; (47f4 <__libc_init_array+0x44>)
    47d2:	2500      	movs	r5, #0
    47d4:	1c1e      	adds	r6, r3, #0
    47d6:	4c08      	ldr	r4, [pc, #32]	; (47f8 <__libc_init_array+0x48>)
    47d8:	1ae4      	subs	r4, r4, r3
    47da:	10a4      	asrs	r4, r4, #2
    47dc:	42a5      	cmp	r5, r4
    47de:	d004      	beq.n	47ea <__libc_init_array+0x3a>
    47e0:	00ab      	lsls	r3, r5, #2
    47e2:	58f3      	ldr	r3, [r6, r3]
    47e4:	4798      	blx	r3
    47e6:	3501      	adds	r5, #1
    47e8:	e7f8      	b.n	47dc <__libc_init_array+0x2c>
    47ea:	bd70      	pop	{r4, r5, r6, pc}
    47ec:	00004900 	.word	0x00004900
    47f0:	00004900 	.word	0x00004900
    47f4:	00004900 	.word	0x00004900
    47f8:	00004904 	.word	0x00004904

000047fc <memcpy>:
    47fc:	2300      	movs	r3, #0
    47fe:	b510      	push	{r4, lr}
    4800:	4293      	cmp	r3, r2
    4802:	d003      	beq.n	480c <memcpy+0x10>
    4804:	5ccc      	ldrb	r4, [r1, r3]
    4806:	54c4      	strb	r4, [r0, r3]
    4808:	3301      	adds	r3, #1
    480a:	e7f9      	b.n	4800 <memcpy+0x4>
    480c:	bd10      	pop	{r4, pc}

0000480e <memset>:
    480e:	1c03      	adds	r3, r0, #0
    4810:	1882      	adds	r2, r0, r2
    4812:	4293      	cmp	r3, r2
    4814:	d002      	beq.n	481c <memset+0xe>
    4816:	7019      	strb	r1, [r3, #0]
    4818:	3301      	adds	r3, #1
    481a:	e7fa      	b.n	4812 <memset+0x4>
    481c:	4770      	bx	lr
	...

00004820 <_tcc_intflag>:
    4820:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    4830:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    4840:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    4850:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    4860:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    4870:	22d2 0000 234e 0000 234e 0000 22f4 0000     ."..N#..N#..."..
    4880:	22ee 0000 22fa 0000 22d8 0000 2300 0000     ."..."..."...#..
    4890:	2334 0000 24f4 0000 2544 0000 2544 0000     4#...$..D%..D%..
    48a0:	2540 0000 24e6 0000 2506 0000 24d6 0000     @%...$...%...$..
    48b0:	2518 0000 252a 0000 3ae2 0000 3aba 0000     .%..*%...:...:..
    48c0:	3a92 0000 3a58 0000 3a1e 0000 4f54 5350     .:..X:...:..TOPS
    48d0:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....
    48e0:	0000 0000 6548 6c6c 206f 6f57 6c72 2164     ....Hello World!
    48f0:	2020 0020                                      .

000048f4 <_init>:
    48f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48fa:	bc08      	pop	{r3}
    48fc:	469e      	mov	lr, r3
    48fe:	4770      	bx	lr

00004900 <__init_array_start>:
    4900:	000000dd 	.word	0x000000dd

00004904 <_fini>:
    4904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	bcf8      	pop	{r3, r4, r5, r6, r7}
    490a:	bc08      	pop	{r3}
    490c:	469e      	mov	lr, r3
    490e:	4770      	bx	lr

00004910 <__fini_array_start>:
    4910:	000000b5 	.word	0x000000b5
