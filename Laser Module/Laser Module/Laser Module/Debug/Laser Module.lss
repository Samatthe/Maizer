
Laser Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005330  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00005330  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000284  20000008  00005338  00010008  2**2
                  ALLOC
  3 .stack        00002004  2000028c  000055bc  00010008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e481  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030f6  00000000  00000000  0003e50c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000043f8  00000000  00000000  00041602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bf8  00000000  00000000  000459fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ab8  00000000  00000000  000465f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000086e5  00000000  00000000  000470aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e6f2  00000000  00000000  0004f78f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000906b7  00000000  00000000  0005de81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000295c  00000000  00000000  000ee538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002290 	.word	0x20002290
       4:	000039dd 	.word	0x000039dd
       8:	00003ad5 	.word	0x00003ad5
       c:	00003ad5 	.word	0x00003ad5
	...
      2c:	00003ad5 	.word	0x00003ad5
	...
      38:	00003ad5 	.word	0x00003ad5
      3c:	00003ad5 	.word	0x00003ad5
      40:	00003ad5 	.word	0x00003ad5
      44:	00003ad5 	.word	0x00003ad5
      48:	00003ad5 	.word	0x00003ad5
      4c:	00000ad9 	.word	0x00000ad9
      50:	00000c65 	.word	0x00000c65
      54:	00003ad5 	.word	0x00003ad5
      58:	00003ad5 	.word	0x00003ad5
      5c:	00003ad5 	.word	0x00003ad5
      60:	00003ad5 	.word	0x00003ad5
      64:	00002bb9 	.word	0x00002bb9
      68:	00002bcd 	.word	0x00002bcd
      6c:	00002be1 	.word	0x00002be1
      70:	00002bf5 	.word	0x00002bf5
      74:	00002c09 	.word	0x00002c09
      78:	00002c1d 	.word	0x00002c1d
      7c:	000018e9 	.word	0x000018e9
      80:	000018fd 	.word	0x000018fd
      84:	00001911 	.word	0x00001911
      88:	0000199d 	.word	0x0000199d
      8c:	000019b1 	.word	0x000019b1
      90:	000019c5 	.word	0x000019c5
	...
      9c:	00003ad5 	.word	0x00003ad5
      a0:	00003ad5 	.word	0x00003ad5
      a4:	00003ad5 	.word	0x00003ad5
      a8:	00003ad5 	.word	0x00003ad5
      ac:	00003ad5 	.word	0x00003ad5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00005330 	.word	0x00005330

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00005330 	.word	0x00005330
     108:	2000000c 	.word	0x2000000c
     10c:	00005330 	.word	0x00005330
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
			break;
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
			break;
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			break;
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     174:	2300      	movs	r3, #0
}
     176:	1c18      	adds	r0, r3, #0
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
     190:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
     196:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	2201      	movs	r2, #1
     19c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	70da      	strb	r2, [r3, #3]
}
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)

000001ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	1c02      	adds	r2, r0, #0
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1b8:	4b06      	ldr	r3, [pc, #24]	; (1d4 <system_interrupt_enable+0x28>)
     1ba:	1dfa      	adds	r2, r7, #7
     1bc:	7812      	ldrb	r2, [r2, #0]
     1be:	1c11      	adds	r1, r2, #0
     1c0:	221f      	movs	r2, #31
     1c2:	400a      	ands	r2, r1
     1c4:	2101      	movs	r1, #1
     1c6:	4091      	lsls	r1, r2
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	601a      	str	r2, [r3, #0]
}
     1cc:	46bd      	mov	sp, r7
     1ce:	b002      	add	sp, #8
     1d0:	bd80      	pop	{r7, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	e000e100 	.word	0xe000e100

000001d8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     1d8:	b580      	push	{r7, lr}
     1da:	b084      	sub	sp, #16
     1dc:	af00      	add	r7, sp, #0
     1de:	1c02      	adds	r2, r0, #0
     1e0:	1dfb      	adds	r3, r7, #7
     1e2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     1e4:	230f      	movs	r3, #15
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	0952      	lsrs	r2, r2, #5
     1ee:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     1f0:	230f      	movs	r3, #15
     1f2:	18fb      	adds	r3, r7, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d10c      	bne.n	214 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     1fa:	4b09      	ldr	r3, [pc, #36]	; (220 <_extint_get_eic_from_channel+0x48>)
     1fc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     1fe:	230f      	movs	r3, #15
     200:	18fb      	adds	r3, r7, r3
     202:	781b      	ldrb	r3, [r3, #0]
     204:	009b      	lsls	r3, r3, #2
     206:	2210      	movs	r2, #16
     208:	4694      	mov	ip, r2
     20a:	44bc      	add	ip, r7
     20c:	4463      	add	r3, ip
     20e:	3b08      	subs	r3, #8
     210:	681b      	ldr	r3, [r3, #0]
     212:	e000      	b.n	216 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     214:	2300      	movs	r3, #0
	}
}
     216:	1c18      	adds	r0, r3, #0
     218:	46bd      	mov	sp, r7
     21a:	b004      	add	sp, #16
     21c:	bd80      	pop	{r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	40001800 	.word	0x40001800

00000224 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     224:	b580      	push	{r7, lr}
     226:	b082      	sub	sp, #8
     228:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     22a:	4b10      	ldr	r3, [pc, #64]	; (26c <extint_is_syncing+0x48>)
     22c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     22e:	2300      	movs	r3, #0
     230:	607b      	str	r3, [r7, #4]
     232:	e012      	b.n	25a <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     234:	687b      	ldr	r3, [r7, #4]
     236:	009b      	lsls	r3, r3, #2
     238:	2208      	movs	r2, #8
     23a:	4694      	mov	ip, r2
     23c:	44bc      	add	ip, r7
     23e:	4463      	add	r3, ip
     240:	3b08      	subs	r3, #8
     242:	681b      	ldr	r3, [r3, #0]
     244:	785b      	ldrb	r3, [r3, #1]
     246:	b2db      	uxtb	r3, r3
     248:	b2db      	uxtb	r3, r3
     24a:	b25b      	sxtb	r3, r3
     24c:	2b00      	cmp	r3, #0
     24e:	da01      	bge.n	254 <extint_is_syncing+0x30>
			return true;
     250:	2301      	movs	r3, #1
     252:	e006      	b.n	262 <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     254:	687b      	ldr	r3, [r7, #4]
     256:	3301      	adds	r3, #1
     258:	607b      	str	r3, [r7, #4]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	2b00      	cmp	r3, #0
     25e:	d0e9      	beq.n	234 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
     260:	2300      	movs	r3, #0
}
     262:	1c18      	adds	r0, r3, #0
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800

00000270 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b2c      	ldr	r3, [pc, #176]	; (328 <_system_extint_init+0xb8>)
     278:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     27a:	2000      	movs	r0, #0
     27c:	2140      	movs	r1, #64	; 0x40
     27e:	4b2b      	ldr	r3, [pc, #172]	; (32c <_system_extint_init+0xbc>)
     280:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     282:	1c3b      	adds	r3, r7, #0
     284:	1c18      	adds	r0, r3, #0
     286:	4b2a      	ldr	r3, [pc, #168]	; (330 <_system_extint_init+0xc0>)
     288:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     28a:	1c3b      	adds	r3, r7, #0
     28c:	2200      	movs	r2, #0
     28e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     290:	1c3b      	adds	r3, r7, #0
     292:	2005      	movs	r0, #5
     294:	1c19      	adds	r1, r3, #0
     296:	4b27      	ldr	r3, [pc, #156]	; (334 <_system_extint_init+0xc4>)
     298:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     29a:	2005      	movs	r0, #5
     29c:	4b26      	ldr	r3, [pc, #152]	; (338 <_system_extint_init+0xc8>)
     29e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2a0:	2300      	movs	r3, #0
     2a2:	60fb      	str	r3, [r7, #12]
     2a4:	e018      	b.n	2d8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a6:	68fb      	ldr	r3, [r7, #12]
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	2210      	movs	r2, #16
     2ac:	4694      	mov	ip, r2
     2ae:	44bc      	add	ip, r7
     2b0:	4463      	add	r3, ip
     2b2:	3b0c      	subs	r3, #12
     2b4:	681a      	ldr	r2, [r3, #0]
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	009b      	lsls	r3, r3, #2
     2ba:	2110      	movs	r1, #16
     2bc:	468c      	mov	ip, r1
     2be:	44bc      	add	ip, r7
     2c0:	4463      	add	r3, ip
     2c2:	3b0c      	subs	r3, #12
     2c4:	681b      	ldr	r3, [r3, #0]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	b2db      	uxtb	r3, r3
     2ca:	2101      	movs	r1, #1
     2cc:	430b      	orrs	r3, r1
     2ce:	b2db      	uxtb	r3, r3
     2d0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2d2:	68fb      	ldr	r3, [r7, #12]
     2d4:	3301      	adds	r3, #1
     2d6:	60fb      	str	r3, [r7, #12]
     2d8:	68fb      	ldr	r3, [r7, #12]
     2da:	2b00      	cmp	r3, #0
     2dc:	d0e3      	beq.n	2a6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b16      	ldr	r3, [pc, #88]	; (33c <_system_extint_init+0xcc>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1fb      	bne.n	2e0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2e8:	230b      	movs	r3, #11
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
     2f0:	e00d      	b.n	30e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     2f2:	230b      	movs	r3, #11
     2f4:	18fb      	adds	r3, r7, r3
     2f6:	781a      	ldrb	r2, [r3, #0]
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <_system_extint_init+0xd0>)
     2fa:	0092      	lsls	r2, r2, #2
     2fc:	2100      	movs	r1, #0
     2fe:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     300:	230b      	movs	r3, #11
     302:	18fb      	adds	r3, r7, r3
     304:	781a      	ldrb	r2, [r3, #0]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	3201      	adds	r2, #1
     30c:	701a      	strb	r2, [r3, #0]
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	2b0f      	cmp	r3, #15
     316:	d9ec      	bls.n	2f2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     318:	2004      	movs	r0, #4
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <_system_extint_init+0xd4>)
     31c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     31e:	4b0a      	ldr	r3, [pc, #40]	; (348 <_system_extint_init+0xd8>)
     320:	4798      	blx	r3
}
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}
     328:	40001800 	.word	0x40001800
     32c:	00000129 	.word	0x00000129
     330:	00000115 	.word	0x00000115
     334:	00003669 	.word	0x00003669
     338:	000036ad 	.word	0x000036ad
     33c:	00000225 	.word	0x00000225
     340:	2000006c 	.word	0x2000006c
     344:	000001ad 	.word	0x000001ad
     348:	0000034d 	.word	0x0000034d

0000034c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     352:	4b14      	ldr	r3, [pc, #80]	; (3a4 <_extint_enable+0x58>)
     354:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     356:	2300      	movs	r3, #0
     358:	607b      	str	r3, [r7, #4]
     35a:	e018      	b.n	38e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	009b      	lsls	r3, r3, #2
     360:	2208      	movs	r2, #8
     362:	4694      	mov	ip, r2
     364:	44bc      	add	ip, r7
     366:	4463      	add	r3, ip
     368:	3b08      	subs	r3, #8
     36a:	681a      	ldr	r2, [r3, #0]
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	009b      	lsls	r3, r3, #2
     370:	2108      	movs	r1, #8
     372:	468c      	mov	ip, r1
     374:	44bc      	add	ip, r7
     376:	4463      	add	r3, ip
     378:	3b08      	subs	r3, #8
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	781b      	ldrb	r3, [r3, #0]
     37e:	b2db      	uxtb	r3, r3
     380:	2102      	movs	r1, #2
     382:	430b      	orrs	r3, r1
     384:	b2db      	uxtb	r3, r3
     386:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     388:	687b      	ldr	r3, [r7, #4]
     38a:	3301      	adds	r3, #1
     38c:	607b      	str	r3, [r7, #4]
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2b00      	cmp	r3, #0
     392:	d0e3      	beq.n	35c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     394:	46c0      	nop			; (mov r8, r8)
     396:	4b04      	ldr	r3, [pc, #16]	; (3a8 <_extint_enable+0x5c>)
     398:	4798      	blx	r3
     39a:	1e03      	subs	r3, r0, #0
     39c:	d1fb      	bne.n	396 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     39e:	46bd      	mov	sp, r7
     3a0:	b002      	add	sp, #8
     3a2:	bd80      	pop	{r7, pc}
     3a4:	40001800 	.word	0x40001800
     3a8:	00000225 	.word	0x00000225

000003ac <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2200      	movs	r2, #0
     3be:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2201      	movs	r2, #1
     3c4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2201      	movs	r2, #1
     3ca:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	2200      	movs	r2, #0
     3d0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2202      	movs	r2, #2
     3d6:	72da      	strb	r2, [r3, #11]
}
     3d8:	46bd      	mov	sp, r7
     3da:	b002      	add	sp, #8
     3dc:	bd80      	pop	{r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)

000003e0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	b086      	sub	sp, #24
     3e4:	af00      	add	r7, sp, #0
     3e6:	1c02      	adds	r2, r0, #0
     3e8:	6039      	str	r1, [r7, #0]
     3ea:	1dfb      	adds	r3, r7, #7
     3ec:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3ee:	2308      	movs	r3, #8
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	4b36      	ldr	r3, [pc, #216]	; (4d0 <extint_chan_set_config+0xf0>)
     3f6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	685b      	ldr	r3, [r3, #4]
     3fc:	b2da      	uxtb	r2, r3
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     404:	2308      	movs	r3, #8
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     40c:	683b      	ldr	r3, [r7, #0]
     40e:	7a1a      	ldrb	r2, [r3, #8]
     410:	2308      	movs	r3, #8
     412:	18fb      	adds	r3, r7, r3
     414:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     416:	683b      	ldr	r3, [r7, #0]
     418:	681b      	ldr	r3, [r3, #0]
     41a:	b2da      	uxtb	r2, r3
     41c:	2308      	movs	r3, #8
     41e:	18fb      	adds	r3, r7, r3
     420:	1c10      	adds	r0, r2, #0
     422:	1c19      	adds	r1, r3, #0
     424:	4b2b      	ldr	r3, [pc, #172]	; (4d4 <extint_chan_set_config+0xf4>)
     426:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     428:	1dfb      	adds	r3, r7, #7
     42a:	781b      	ldrb	r3, [r3, #0]
     42c:	1c18      	adds	r0, r3, #0
     42e:	4b2a      	ldr	r3, [pc, #168]	; (4d8 <extint_chan_set_config+0xf8>)
     430:	4798      	blx	r3
     432:	1c03      	adds	r3, r0, #0
     434:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     436:	1dfb      	adds	r3, r7, #7
     438:	781b      	ldrb	r3, [r3, #0]
     43a:	2207      	movs	r2, #7
     43c:	4013      	ands	r3, r2
     43e:	009b      	lsls	r3, r3, #2
     440:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     442:	683b      	ldr	r3, [r7, #0]
     444:	7adb      	ldrb	r3, [r3, #11]
     446:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     448:	683b      	ldr	r3, [r7, #0]
     44a:	7a9b      	ldrb	r3, [r3, #10]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     450:	697b      	ldr	r3, [r7, #20]
     452:	2208      	movs	r2, #8
     454:	4313      	orrs	r3, r2
     456:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     458:	1dfb      	adds	r3, r7, #7
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	08db      	lsrs	r3, r3, #3
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
     462:	1dfb      	adds	r3, r7, #7
     464:	781b      	ldrb	r3, [r3, #0]
     466:	08db      	lsrs	r3, r3, #3
     468:	b2db      	uxtb	r3, r3
     46a:	1c1a      	adds	r2, r3, #0
     46c:	693b      	ldr	r3, [r7, #16]
     46e:	3206      	adds	r2, #6
     470:	0092      	lsls	r2, r2, #2
     472:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     474:	68fa      	ldr	r2, [r7, #12]
     476:	210f      	movs	r1, #15
     478:	4091      	lsls	r1, r2
     47a:	1c0a      	adds	r2, r1, #0
     47c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     480:	68fb      	ldr	r3, [r7, #12]
     482:	6979      	ldr	r1, [r7, #20]
     484:	4099      	lsls	r1, r3
     486:	1c0b      	adds	r3, r1, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     488:	431a      	orrs	r2, r3
     48a:	1c11      	adds	r1, r2, #0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	1d82      	adds	r2, r0, #6
     490:	0092      	lsls	r2, r2, #2
     492:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     494:	683b      	ldr	r3, [r7, #0]
     496:	7a5b      	ldrb	r3, [r3, #9]
     498:	2b00      	cmp	r3, #0
     49a:	d00a      	beq.n	4b2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     49c:	693b      	ldr	r3, [r7, #16]
     49e:	695a      	ldr	r2, [r3, #20]
     4a0:	1dfb      	adds	r3, r7, #7
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	2101      	movs	r1, #1
     4a6:	4099      	lsls	r1, r3
     4a8:	1c0b      	adds	r3, r1, #0
     4aa:	431a      	orrs	r2, r3
     4ac:	693b      	ldr	r3, [r7, #16]
     4ae:	615a      	str	r2, [r3, #20]
     4b0:	e00a      	b.n	4c8 <extint_chan_set_config+0xe8>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4b2:	693b      	ldr	r3, [r7, #16]
     4b4:	695b      	ldr	r3, [r3, #20]
     4b6:	1dfa      	adds	r2, r7, #7
     4b8:	7812      	ldrb	r2, [r2, #0]
     4ba:	2101      	movs	r1, #1
     4bc:	4091      	lsls	r1, r2
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	43d2      	mvns	r2, r2
     4c2:	401a      	ands	r2, r3
     4c4:	693b      	ldr	r3, [r7, #16]
     4c6:	615a      	str	r2, [r3, #20]
	}
}
     4c8:	46bd      	mov	sp, r7
     4ca:	b006      	add	sp, #24
     4cc:	bd80      	pop	{r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000185 	.word	0x00000185
     4d4:	00003955 	.word	0x00003955
     4d8:	000001d9 	.word	0x000001d9

000004dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	2200      	movs	r2, #0
     4e8:	701a      	strb	r2, [r3, #0]
}
     4ea:	46bd      	mov	sp, r7
     4ec:	b002      	add	sp, #8
     4ee:	bd80      	pop	{r7, pc}

000004f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	1c02      	adds	r2, r0, #0
     4f8:	6039      	str	r1, [r7, #0]
     4fa:	1dfb      	adds	r3, r7, #7
     4fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     4fe:	1dfb      	adds	r3, r7, #7
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b01      	cmp	r3, #1
     504:	d00a      	beq.n	51c <system_apb_clock_set_mask+0x2c>
     506:	2b02      	cmp	r3, #2
     508:	d00f      	beq.n	52a <system_apb_clock_set_mask+0x3a>
     50a:	2b00      	cmp	r3, #0
     50c:	d114      	bne.n	538 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <system_apb_clock_set_mask+0x58>)
     510:	4a0d      	ldr	r2, [pc, #52]	; (548 <system_apb_clock_set_mask+0x58>)
     512:	6991      	ldr	r1, [r2, #24]
     514:	683a      	ldr	r2, [r7, #0]
     516:	430a      	orrs	r2, r1
     518:	619a      	str	r2, [r3, #24]
			break;
     51a:	e00f      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     51e:	4a0a      	ldr	r2, [pc, #40]	; (548 <system_apb_clock_set_mask+0x58>)
     520:	69d1      	ldr	r1, [r2, #28]
     522:	683a      	ldr	r2, [r7, #0]
     524:	430a      	orrs	r2, r1
     526:	61da      	str	r2, [r3, #28]
			break;
     528:	e008      	b.n	53c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <system_apb_clock_set_mask+0x58>)
     52c:	4a06      	ldr	r2, [pc, #24]	; (548 <system_apb_clock_set_mask+0x58>)
     52e:	6a11      	ldr	r1, [r2, #32]
     530:	683a      	ldr	r2, [r7, #0]
     532:	430a      	orrs	r2, r1
     534:	621a      	str	r2, [r3, #32]
			break;
     536:	e001      	b.n	53c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     538:	2317      	movs	r3, #23
     53a:	e000      	b.n	53e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     53c:	2300      	movs	r3, #0
}
     53e:	1c18      	adds	r0, r3, #0
     540:	46bd      	mov	sp, r7
     542:	b002      	add	sp, #8
     544:	bd80      	pop	{r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	40000400 	.word	0x40000400

0000054c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	1c02      	adds	r2, r0, #0
     554:	1dfb      	adds	r3, r7, #7
     556:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <system_interrupt_enable+0x28>)
     55a:	1dfa      	adds	r2, r7, #7
     55c:	7812      	ldrb	r2, [r2, #0]
     55e:	1c11      	adds	r1, r2, #0
     560:	221f      	movs	r2, #31
     562:	400a      	ands	r2, r1
     564:	2101      	movs	r1, #1
     566:	4091      	lsls	r1, r2
     568:	1c0a      	adds	r2, r1, #0
     56a:	601a      	str	r2, [r3, #0]
}
     56c:	46bd      	mov	sp, r7
     56e:	b002      	add	sp, #8
     570:	bd80      	pop	{r7, pc}
     572:	46c0      	nop			; (mov r8, r8)
     574:	e000e100 	.word	0xe000e100

00000578 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
     57e:	1c02      	adds	r2, r0, #0
     580:	1dfb      	adds	r3, r7, #7
     582:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     584:	4a07      	ldr	r2, [pc, #28]	; (5a4 <system_interrupt_disable+0x2c>)
     586:	1dfb      	adds	r3, r7, #7
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	1c19      	adds	r1, r3, #0
     58c:	231f      	movs	r3, #31
     58e:	400b      	ands	r3, r1
     590:	2101      	movs	r1, #1
     592:	4099      	lsls	r1, r3
     594:	1c0b      	adds	r3, r1, #0
     596:	1c19      	adds	r1, r3, #0
     598:	2380      	movs	r3, #128	; 0x80
     59a:	50d1      	str	r1, [r2, r3]
}
     59c:	46bd      	mov	sp, r7
     59e:	b002      	add	sp, #8
     5a0:	bd80      	pop	{r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	e000e100 	.word	0xe000e100

000005a8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b084      	sub	sp, #16
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	7a9b      	ldrb	r3, [r3, #10]
     5ba:	b2db      	uxtb	r3, r3
     5bc:	b2db      	uxtb	r3, r3
     5be:	b25b      	sxtb	r3, r3
     5c0:	2b00      	cmp	r3, #0
     5c2:	da01      	bge.n	5c8 <rtc_count_is_syncing+0x20>
                return true;
     5c4:	2301      	movs	r3, #1
     5c6:	e000      	b.n	5ca <rtc_count_is_syncing+0x22>
        }

        return false;
     5c8:	2300      	movs	r3, #0
}
     5ca:	1c18      	adds	r0, r3, #0
     5cc:	46bd      	mov	sp, r7
     5ce:	b004      	add	sp, #16
     5d0:	bd80      	pop	{r7, pc}
     5d2:	46c0      	nop			; (mov r8, r8)

000005d4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
     5e2:	2003      	movs	r0, #3
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <rtc_count_enable+0x38>)
     5e6:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	1c18      	adds	r0, r3, #0
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <rtc_count_enable+0x3c>)
     5f0:	4798      	blx	r3
     5f2:	1e03      	subs	r3, r0, #0
     5f4:	d1f9      	bne.n	5ea <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     5f6:	68fb      	ldr	r3, [r7, #12]
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	b29b      	uxth	r3, r3
     5fc:	2202      	movs	r2, #2
     5fe:	4313      	orrs	r3, r2
     600:	b29a      	uxth	r2, r3
     602:	68fb      	ldr	r3, [r7, #12]
     604:	801a      	strh	r2, [r3, #0]
}
     606:	46bd      	mov	sp, r7
     608:	b004      	add	sp, #16
     60a:	bd80      	pop	{r7, pc}
     60c:	0000054d 	.word	0x0000054d
     610:	000005a9 	.word	0x000005a9

00000614 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     614:	b580      	push	{r7, lr}
     616:	b084      	sub	sp, #16
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	681b      	ldr	r3, [r3, #0]
     620:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
     622:	2003      	movs	r0, #3
     624:	4b09      	ldr	r3, [pc, #36]	; (64c <rtc_count_disable+0x38>)
     626:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	687b      	ldr	r3, [r7, #4]
     62c:	1c18      	adds	r0, r3, #0
     62e:	4b08      	ldr	r3, [pc, #32]	; (650 <rtc_count_disable+0x3c>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     636:	68fb      	ldr	r3, [r7, #12]
     638:	881b      	ldrh	r3, [r3, #0]
     63a:	b29b      	uxth	r3, r3
     63c:	2202      	movs	r2, #2
     63e:	4393      	bics	r3, r2
     640:	b29a      	uxth	r2, r3
     642:	68fb      	ldr	r3, [r7, #12]
     644:	801a      	strh	r2, [r3, #0]
}
     646:	46bd      	mov	sp, r7
     648:	b004      	add	sp, #16
     64a:	bd80      	pop	{r7, pc}
     64c:	00000579 	.word	0x00000579
     650:	000005a9 	.word	0x000005a9

00000654 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	681b      	ldr	r3, [r3, #0]
     660:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
     662:	687b      	ldr	r3, [r7, #4]
     664:	1c18      	adds	r0, r3, #0
     666:	4b0d      	ldr	r3, [pc, #52]	; (69c <rtc_count_reset+0x48>)
     668:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2200      	movs	r2, #0
     66e:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2200      	movs	r2, #0
     674:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     676:	46c0      	nop			; (mov r8, r8)
     678:	687b      	ldr	r3, [r7, #4]
     67a:	1c18      	adds	r0, r3, #0
     67c:	4b08      	ldr	r3, [pc, #32]	; (6a0 <rtc_count_reset+0x4c>)
     67e:	4798      	blx	r3
     680:	1e03      	subs	r3, r0, #0
     682:	d1f9      	bne.n	678 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     684:	68fb      	ldr	r3, [r7, #12]
     686:	881b      	ldrh	r3, [r3, #0]
     688:	b29b      	uxth	r3, r3
     68a:	2201      	movs	r2, #1
     68c:	4313      	orrs	r3, r2
     68e:	b29a      	uxth	r2, r3
     690:	68fb      	ldr	r3, [r7, #12]
     692:	801a      	strh	r2, [r3, #0]
}
     694:	46bd      	mov	sp, r7
     696:	b004      	add	sp, #16
     698:	bd80      	pop	{r7, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	00000615 	.word	0x00000615
     6a0:	000005a9 	.word	0x000005a9

000006a4 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
     6a4:	b580      	push	{r7, lr}
     6a6:	b084      	sub	sp, #16
     6a8:	af00      	add	r7, sp, #0
     6aa:	6078      	str	r0, [r7, #4]
     6ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	681b      	ldr	r3, [r3, #0]
     6b2:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	881a      	ldrh	r2, [r3, #0]
     6b8:	68bb      	ldr	r3, [r7, #8]
     6ba:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     6bc:	683b      	ldr	r3, [r7, #0]
     6be:	789b      	ldrb	r3, [r3, #2]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d03c      	beq.n	73e <_rtc_count_set_config+0x9a>
     6c4:	2b01      	cmp	r3, #1
     6c6:	d000      	beq.n	6ca <_rtc_count_set_config+0x26>
     6c8:	e070      	b.n	7ac <_rtc_count_set_config+0x108>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	b29a      	uxth	r2, r3
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     6d4:	683b      	ldr	r3, [r7, #0]
     6d6:	78db      	ldrb	r3, [r3, #3]
     6d8:	2b00      	cmp	r3, #0
     6da:	d007      	beq.n	6ec <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     6dc:	68bb      	ldr	r3, [r7, #8]
     6de:	881b      	ldrh	r3, [r3, #0]
     6e0:	b29b      	uxth	r3, r3
     6e2:	2280      	movs	r2, #128	; 0x80
     6e4:	4313      	orrs	r3, r2
     6e6:	b29a      	uxth	r2, r3
     6e8:	68bb      	ldr	r3, [r7, #8]
     6ea:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     6ec:	230f      	movs	r3, #15
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	2200      	movs	r2, #0
     6f2:	701a      	strb	r2, [r3, #0]
     6f4:	e01d      	b.n	732 <_rtc_count_set_config+0x8e>
				while (rtc_count_is_syncing(module)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	1c18      	adds	r0, r3, #0
     6fc:	4b35      	ldr	r3, [pc, #212]	; (7d4 <_rtc_count_set_config+0x130>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     704:	230f      	movs	r3, #15
     706:	18fb      	adds	r3, r7, r3
     708:	781a      	ldrb	r2, [r3, #0]
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	3202      	adds	r2, #2
     70e:	0092      	lsls	r2, r2, #2
     710:	58d2      	ldr	r2, [r2, r3]
     712:	6879      	ldr	r1, [r7, #4]
     714:	230f      	movs	r3, #15
     716:	18fb      	adds	r3, r7, r3
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	1c08      	adds	r0, r1, #0
     71c:	1c11      	adds	r1, r2, #0
     71e:	1c1a      	adds	r2, r3, #0
     720:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <_rtc_count_set_config+0x134>)
     722:	4798      	blx	r3
			if (config->clear_on_match) {
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
     724:	230f      	movs	r3, #15
     726:	18fb      	adds	r3, r7, r3
     728:	781a      	ldrb	r2, [r3, #0]
     72a:	230f      	movs	r3, #15
     72c:	18fb      	adds	r3, r7, r3
     72e:	3201      	adds	r2, #1
     730:	701a      	strb	r2, [r3, #0]
     732:	230f      	movs	r3, #15
     734:	18fb      	adds	r3, r7, r3
     736:	781b      	ldrb	r3, [r3, #0]
     738:	2b00      	cmp	r3, #0
     73a:	d0dc      	beq.n	6f6 <_rtc_count_set_config+0x52>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     73c:	e038      	b.n	7b0 <_rtc_count_set_config+0x10c>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     73e:	68bb      	ldr	r3, [r7, #8]
     740:	881b      	ldrh	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	2204      	movs	r2, #4
     746:	4313      	orrs	r3, r2
     748:	b29a      	uxth	r2, r3
     74a:	68bb      	ldr	r3, [r7, #8]
     74c:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     74e:	683b      	ldr	r3, [r7, #0]
     750:	78db      	ldrb	r3, [r3, #3]
     752:	2b00      	cmp	r3, #0
     754:	d001      	beq.n	75a <_rtc_count_set_config+0xb6>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     756:	2317      	movs	r3, #23
     758:	e038      	b.n	7cc <_rtc_count_set_config+0x128>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     75a:	230e      	movs	r3, #14
     75c:	18fb      	adds	r3, r7, r3
     75e:	2200      	movs	r2, #0
     760:	701a      	strb	r2, [r3, #0]
     762:	e01d      	b.n	7a0 <_rtc_count_set_config+0xfc>
				while (rtc_count_is_syncing(module)) {
     764:	46c0      	nop			; (mov r8, r8)
     766:	687b      	ldr	r3, [r7, #4]
     768:	1c18      	adds	r0, r3, #0
     76a:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <_rtc_count_set_config+0x130>)
     76c:	4798      	blx	r3
     76e:	1e03      	subs	r3, r0, #0
     770:	d1f9      	bne.n	766 <_rtc_count_set_config+0xc2>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     772:	230e      	movs	r3, #14
     774:	18fb      	adds	r3, r7, r3
     776:	781a      	ldrb	r2, [r3, #0]
     778:	683b      	ldr	r3, [r7, #0]
     77a:	3202      	adds	r2, #2
     77c:	0092      	lsls	r2, r2, #2
     77e:	58d2      	ldr	r2, [r2, r3]
     780:	6879      	ldr	r1, [r7, #4]
     782:	230e      	movs	r3, #14
     784:	18fb      	adds	r3, r7, r3
     786:	781b      	ldrb	r3, [r3, #0]
     788:	1c08      	adds	r0, r1, #0
     78a:	1c11      	adds	r1, r2, #0
     78c:	1c1a      	adds	r2, r3, #0
     78e:	4b12      	ldr	r3, [pc, #72]	; (7d8 <_rtc_count_set_config+0x134>)
     790:	4798      	blx	r3
			if (config->clear_on_match) {
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
     792:	230e      	movs	r3, #14
     794:	18fb      	adds	r3, r7, r3
     796:	781a      	ldrb	r2, [r3, #0]
     798:	230e      	movs	r3, #14
     79a:	18fb      	adds	r3, r7, r3
     79c:	3201      	adds	r2, #1
     79e:	701a      	strb	r2, [r3, #0]
     7a0:	230e      	movs	r3, #14
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d9dc      	bls.n	764 <_rtc_count_set_config+0xc0>
				}

				rtc_count_set_compare(module, config->compare_values[i],
						(enum rtc_count_compare)i);
			}
			break;
     7aa:	e001      	b.n	7b0 <_rtc_count_set_config+0x10c>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     7ac:	2317      	movs	r3, #23
     7ae:	e00d      	b.n	7cc <_rtc_count_set_config+0x128>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	791b      	ldrb	r3, [r3, #4]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d008      	beq.n	7ca <_rtc_count_set_config+0x126>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	885b      	ldrh	r3, [r3, #2]
     7bc:	b29b      	uxth	r3, r3
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	01d2      	lsls	r2, r2, #7
     7c2:	4313      	orrs	r3, r2
     7c4:	b29a      	uxth	r2, r3
     7c6:	68bb      	ldr	r3, [r7, #8]
     7c8:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     7ca:	2300      	movs	r3, #0
}
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	46bd      	mov	sp, r7
     7d0:	b004      	add	sp, #16
     7d2:	bd80      	pop	{r7, pc}
     7d4:	000005a9 	.word	0x000005a9
     7d8:	00000935 	.word	0x00000935

000007dc <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b086      	sub	sp, #24
     7e0:	af00      	add	r7, sp, #0
     7e2:	60f8      	str	r0, [r7, #12]
     7e4:	60b9      	str	r1, [r7, #8]
     7e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	68ba      	ldr	r2, [r7, #8]
     7ec:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
     7ee:	2000      	movs	r0, #0
     7f0:	2120      	movs	r1, #32
     7f2:	4b17      	ldr	r3, [pc, #92]	; (850 <rtc_count_init+0x74>)
     7f4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7f6:	2314      	movs	r3, #20
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	1c18      	adds	r0, r3, #0
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <rtc_count_init+0x78>)
     7fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     800:	2314      	movs	r3, #20
     802:	18fb      	adds	r3, r7, r3
     804:	2202      	movs	r2, #2
     806:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     808:	2314      	movs	r3, #20
     80a:	18fb      	adds	r3, r7, r3
     80c:	2004      	movs	r0, #4
     80e:	1c19      	adds	r1, r3, #0
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <rtc_count_init+0x7c>)
     812:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     814:	2004      	movs	r0, #4
     816:	4b11      	ldr	r3, [pc, #68]	; (85c <rtc_count_init+0x80>)
     818:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	1c18      	adds	r0, r3, #0
     81e:	4b10      	ldr	r3, [pc, #64]	; (860 <rtc_count_init+0x84>)
     820:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     822:	687b      	ldr	r3, [r7, #4]
     824:	789a      	ldrb	r2, [r3, #2]
     826:	68fb      	ldr	r3, [r7, #12]
     828:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	791a      	ldrb	r2, [r3, #4]
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     832:	4b0c      	ldr	r3, [pc, #48]	; (864 <rtc_count_init+0x88>)
     834:	68fa      	ldr	r2, [r7, #12]
     836:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
     838:	68fa      	ldr	r2, [r7, #12]
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	1c10      	adds	r0, r2, #0
     83e:	1c19      	adds	r1, r3, #0
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <rtc_count_init+0x8c>)
     842:	4798      	blx	r3
     844:	1c03      	adds	r3, r0, #0
}
     846:	1c18      	adds	r0, r3, #0
     848:	46bd      	mov	sp, r7
     84a:	b006      	add	sp, #24
     84c:	bd80      	pop	{r7, pc}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	000004f1 	.word	0x000004f1
     854:	000004dd 	.word	0x000004dd
     858:	00003669 	.word	0x00003669
     85c:	000036ad 	.word	0x000036ad
     860:	00000655 	.word	0x00000655
     864:	200000ac 	.word	0x200000ac
     868:	000006a5 	.word	0x000006a5

0000086c <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     876:	687b      	ldr	r3, [r7, #4]
     878:	681b      	ldr	r3, [r3, #0]
     87a:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	1c18      	adds	r0, r3, #0
     882:	4b10      	ldr	r3, [pc, #64]	; (8c4 <rtc_count_set_count+0x58>)
     884:	4798      	blx	r3
     886:	1e03      	subs	r3, r0, #0
     888:	d1f9      	bne.n	87e <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	2b00      	cmp	r3, #0
     890:	d005      	beq.n	89e <rtc_count_set_count+0x32>
     892:	2b01      	cmp	r3, #1
     894:	d10e      	bne.n	8b4 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
     896:	68fb      	ldr	r3, [r7, #12]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	611a      	str	r2, [r3, #16]

			break;
     89c:	e00c      	b.n	8b8 <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	4a09      	ldr	r2, [pc, #36]	; (8c8 <rtc_count_set_count+0x5c>)
     8a2:	4293      	cmp	r3, r2
     8a4:	d901      	bls.n	8aa <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
     8a6:	2317      	movs	r3, #23
     8a8:	e007      	b.n	8ba <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     8aa:	683b      	ldr	r3, [r7, #0]
     8ac:	b29a      	uxth	r2, r3
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	821a      	strh	r2, [r3, #16]

			break;
     8b2:	e001      	b.n	8b8 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8b4:	2317      	movs	r3, #23
     8b6:	e000      	b.n	8ba <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
     8b8:	2300      	movs	r3, #0
}
     8ba:	1c18      	adds	r0, r3, #0
     8bc:	46bd      	mov	sp, r7
     8be:	b004      	add	sp, #16
     8c0:	bd80      	pop	{r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	000005a9 	.word	0x000005a9
     8c8:	0000ffff 	.word	0x0000ffff

000008cc <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	795b      	ldrb	r3, [r3, #5]
     8de:	2201      	movs	r2, #1
     8e0:	4053      	eors	r3, r2
     8e2:	b2db      	uxtb	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d009      	beq.n	8fc <rtc_count_get_count+0x30>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	4a10      	ldr	r2, [pc, #64]	; (92c <rtc_count_get_count+0x60>)
     8ec:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	1c18      	adds	r0, r3, #0
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <rtc_count_get_count+0x64>)
     8f6:	4798      	blx	r3
     8f8:	1e03      	subs	r3, r0, #0
     8fa:	d1f9      	bne.n	8f0 <rtc_count_get_count+0x24>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	791b      	ldrb	r3, [r3, #4]
     900:	2b00      	cmp	r3, #0
     902:	d005      	beq.n	910 <rtc_count_get_count+0x44>
     904:	2b01      	cmp	r3, #1
     906:	d108      	bne.n	91a <rtc_count_get_count+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
     908:	68bb      	ldr	r3, [r7, #8]
     90a:	691b      	ldr	r3, [r3, #16]
     90c:	60fb      	str	r3, [r7, #12]

			break;
     90e:	e007      	b.n	920 <rtc_count_get_count+0x54>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     910:	68bb      	ldr	r3, [r7, #8]
     912:	8a1b      	ldrh	r3, [r3, #16]
     914:	b29b      	uxth	r3, r3
     916:	60fb      	str	r3, [r7, #12]

			break;
     918:	e002      	b.n	920 <rtc_count_get_count+0x54>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     91a:	2300      	movs	r3, #0
     91c:	60fb      	str	r3, [r7, #12]
			break;
     91e:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
     920:	68fb      	ldr	r3, [r7, #12]
}
     922:	1c18      	adds	r0, r3, #0
     924:	46bd      	mov	sp, r7
     926:	b004      	add	sp, #16
     928:	bd80      	pop	{r7, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	ffff8000 	.word	0xffff8000
     930:	000005a9 	.word	0x000005a9

00000934 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     934:	b580      	push	{r7, lr}
     936:	b086      	sub	sp, #24
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	1dfb      	adds	r3, r7, #7
     940:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     942:	68fb      	ldr	r3, [r7, #12]
     944:	681b      	ldr	r3, [r3, #0]
     946:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
     948:	46c0      	nop			; (mov r8, r8)
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	1c18      	adds	r0, r3, #0
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <rtc_count_set_compare+0x84>)
     950:	4798      	blx	r3
     952:	1e03      	subs	r3, r0, #0
     954:	d1f9      	bne.n	94a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     956:	68fb      	ldr	r3, [r7, #12]
     958:	791b      	ldrb	r3, [r3, #4]
     95a:	2b00      	cmp	r3, #0
     95c:	d00f      	beq.n	97e <rtc_count_set_compare+0x4a>
     95e:	2b01      	cmp	r3, #1
     960:	d122      	bne.n	9a8 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b01      	cmp	r3, #1
     968:	d901      	bls.n	96e <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
     96a:	2317      	movs	r3, #23
     96c:	e01f      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     96e:	1dfb      	adds	r3, r7, #7
     970:	781a      	ldrb	r2, [r3, #0]
     972:	697b      	ldr	r3, [r7, #20]
     974:	3206      	adds	r2, #6
     976:	0092      	lsls	r2, r2, #2
     978:	68b9      	ldr	r1, [r7, #8]
     97a:	50d1      	str	r1, [r2, r3]

			break;
     97c:	e016      	b.n	9ac <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     97e:	1dfb      	adds	r3, r7, #7
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b02      	cmp	r3, #2
     984:	d901      	bls.n	98a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
     986:	2317      	movs	r3, #23
     988:	e011      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	4a0b      	ldr	r2, [pc, #44]	; (9bc <rtc_count_set_compare+0x88>)
     98e:	4293      	cmp	r3, r2
     990:	d901      	bls.n	996 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e00b      	b.n	9ae <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     996:	1dfb      	adds	r3, r7, #7
     998:	781a      	ldrb	r2, [r3, #0]
     99a:	68bb      	ldr	r3, [r7, #8]
     99c:	b299      	uxth	r1, r3
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	320c      	adds	r2, #12
     9a2:	0052      	lsls	r2, r2, #1
     9a4:	52d1      	strh	r1, [r2, r3]

			break;
     9a6:	e001      	b.n	9ac <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     9a8:	231a      	movs	r3, #26
     9aa:	e000      	b.n	9ae <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     9ac:	2300      	movs	r3, #0
}
     9ae:	1c18      	adds	r0, r3, #0
     9b0:	46bd      	mov	sp, r7
     9b2:	b006      	add	sp, #24
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	000005a9 	.word	0x000005a9
     9bc:	0000ffff 	.word	0x0000ffff

000009c0 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	b084      	sub	sp, #16
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
     9c8:	1c0a      	adds	r2, r1, #0
     9ca:	1cbb      	adds	r3, r7, #2
     9cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	681b      	ldr	r3, [r3, #0]
     9d2:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	791b      	ldrb	r3, [r3, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d001      	beq.n	9e0 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
     9dc:	2315      	movs	r3, #21
     9de:	e00b      	b.n	9f8 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
     9e0:	46c0      	nop			; (mov r8, r8)
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	4b06      	ldr	r3, [pc, #24]	; (a00 <rtc_count_set_period+0x40>)
     9e8:	4798      	blx	r3
     9ea:	1e03      	subs	r3, r0, #0
     9ec:	d1f9      	bne.n	9e2 <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	1cba      	adds	r2, r7, #2
     9f2:	8812      	ldrh	r2, [r2, #0]
     9f4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
     9f6:	2300      	movs	r3, #0
}
     9f8:	1c18      	adds	r0, r3, #0
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	000005a9 	.word	0x000005a9

00000a04 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
     a04:	b580      	push	{r7, lr}
     a06:	b086      	sub	sp, #24
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
     a0c:	4b31      	ldr	r3, [pc, #196]	; (ad4 <_rtc_interrupt_handler+0xd0>)
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	0092      	lsls	r2, r2, #2
     a12:	58d3      	ldr	r3, [r2, r3]
     a14:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
     a16:	697b      	ldr	r3, [r7, #20]
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     a1c:	230e      	movs	r3, #14
     a1e:	18fb      	adds	r3, r7, r3
     a20:	697a      	ldr	r2, [r7, #20]
     a22:	8ad2      	ldrh	r2, [r2, #22]
     a24:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a26:	697b      	ldr	r3, [r7, #20]
     a28:	8a9b      	ldrh	r3, [r3, #20]
     a2a:	b29a      	uxth	r2, r3
     a2c:	230e      	movs	r3, #14
     a2e:	18fb      	adds	r3, r7, r3
     a30:	210e      	movs	r1, #14
     a32:	1879      	adds	r1, r7, r1
     a34:	8809      	ldrh	r1, [r1, #0]
     a36:	400a      	ands	r2, r1
     a38:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     a3a:	693b      	ldr	r3, [r7, #16]
     a3c:	7a1b      	ldrb	r3, [r3, #8]
     a3e:	b2da      	uxtb	r2, r3
     a40:	230c      	movs	r3, #12
     a42:	18fb      	adds	r3, r7, r3
     a44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     a46:	693b      	ldr	r3, [r7, #16]
     a48:	79db      	ldrb	r3, [r3, #7]
     a4a:	b2db      	uxtb	r3, r3
     a4c:	b29a      	uxth	r2, r3
     a4e:	230c      	movs	r3, #12
     a50:	18fb      	adds	r3, r7, r3
     a52:	210c      	movs	r1, #12
     a54:	1879      	adds	r1, r7, r1
     a56:	8809      	ldrh	r1, [r1, #0]
     a58:	400a      	ands	r2, r1
     a5a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     a5c:	230c      	movs	r3, #12
     a5e:	18fb      	adds	r3, r7, r3
     a60:	881b      	ldrh	r3, [r3, #0]
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	4013      	ands	r3, r2
     a66:	d00c      	beq.n	a82 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     a68:	230e      	movs	r3, #14
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	881b      	ldrh	r3, [r3, #0]
     a6e:	2204      	movs	r2, #4
     a70:	4013      	ands	r3, r2
     a72:	d002      	beq.n	a7a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     a74:	697b      	ldr	r3, [r7, #20]
     a76:	691b      	ldr	r3, [r3, #16]
     a78:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     a7a:	693b      	ldr	r3, [r7, #16]
     a7c:	2280      	movs	r2, #128	; 0x80
     a7e:	721a      	strb	r2, [r3, #8]
     a80:	e024      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     a82:	230c      	movs	r3, #12
     a84:	18fb      	adds	r3, r7, r3
     a86:	881b      	ldrh	r3, [r3, #0]
     a88:	2201      	movs	r2, #1
     a8a:	4013      	ands	r3, r2
     a8c:	d00c      	beq.n	aa8 <_rtc_interrupt_handler+0xa4>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     a8e:	230e      	movs	r3, #14
     a90:	18fb      	adds	r3, r7, r3
     a92:	881b      	ldrh	r3, [r3, #0]
     a94:	2201      	movs	r2, #1
     a96:	4013      	ands	r3, r2
     a98:	d002      	beq.n	aa0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     a9a:	697b      	ldr	r3, [r7, #20]
     a9c:	689b      	ldr	r3, [r3, #8]
     a9e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     aa0:	693b      	ldr	r3, [r7, #16]
     aa2:	2201      	movs	r2, #1
     aa4:	721a      	strb	r2, [r3, #8]
     aa6:	e011      	b.n	acc <_rtc_interrupt_handler+0xc8>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     aa8:	230c      	movs	r3, #12
     aaa:	18fb      	adds	r3, r7, r3
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	2202      	movs	r2, #2
     ab0:	4013      	ands	r3, r2
     ab2:	d00b      	beq.n	acc <_rtc_interrupt_handler+0xc8>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     ab4:	230e      	movs	r3, #14
     ab6:	18fb      	adds	r3, r7, r3
     ab8:	881b      	ldrh	r3, [r3, #0]
     aba:	2202      	movs	r2, #2
     abc:	4013      	ands	r3, r2
     abe:	d002      	beq.n	ac6 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     ac0:	697b      	ldr	r3, [r7, #20]
     ac2:	68db      	ldr	r3, [r3, #12]
     ac4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     ac6:	693b      	ldr	r3, [r7, #16]
     ac8:	2202      	movs	r2, #2
     aca:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
     acc:	46bd      	mov	sp, r7
     ace:	b006      	add	sp, #24
     ad0:	bd80      	pop	{r7, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	200000ac 	.word	0x200000ac

00000ad8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     ad8:	b580      	push	{r7, lr}
     ada:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
     adc:	2000      	movs	r0, #0
     ade:	4b02      	ldr	r3, [pc, #8]	; (ae8 <RTC_Handler+0x10>)
     ae0:	4798      	blx	r3
}
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000a05 	.word	0x00000a05

00000aec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     aec:	b580      	push	{r7, lr}
     aee:	b084      	sub	sp, #16
     af0:	af00      	add	r7, sp, #0
     af2:	1c02      	adds	r2, r0, #0
     af4:	1dfb      	adds	r3, r7, #7
     af6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     af8:	230f      	movs	r3, #15
     afa:	18fb      	adds	r3, r7, r3
     afc:	1dfa      	adds	r2, r7, #7
     afe:	7812      	ldrb	r2, [r2, #0]
     b00:	0952      	lsrs	r2, r2, #5
     b02:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     b04:	230f      	movs	r3, #15
     b06:	18fb      	adds	r3, r7, r3
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d10c      	bne.n	b28 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <_extint_get_eic_from_channel+0x48>)
     b10:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     b12:	230f      	movs	r3, #15
     b14:	18fb      	adds	r3, r7, r3
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	009b      	lsls	r3, r3, #2
     b1a:	2210      	movs	r2, #16
     b1c:	4694      	mov	ip, r2
     b1e:	44bc      	add	ip, r7
     b20:	4463      	add	r3, ip
     b22:	3b08      	subs	r3, #8
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	e000      	b.n	b2a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     b28:	2300      	movs	r3, #0
	}
}
     b2a:	1c18      	adds	r0, r3, #0
     b2c:	46bd      	mov	sp, r7
     b2e:	b004      	add	sp, #16
     b30:	bd80      	pop	{r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	40001800 	.word	0x40001800

00000b38 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b084      	sub	sp, #16
     b3c:	af00      	add	r7, sp, #0
     b3e:	1c02      	adds	r2, r0, #0
     b40:	1dfb      	adds	r3, r7, #7
     b42:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	1c18      	adds	r0, r3, #0
     b4a:	4b0b      	ldr	r3, [pc, #44]	; (b78 <extint_chan_is_detected+0x40>)
     b4c:	4798      	blx	r3
     b4e:	1c03      	adds	r3, r0, #0
     b50:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b52:	1dfb      	adds	r3, r7, #7
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	221f      	movs	r2, #31
     b58:	4013      	ands	r3, r2
     b5a:	2201      	movs	r2, #1
     b5c:	409a      	lsls	r2, r3
     b5e:	1c13      	adds	r3, r2, #0
     b60:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     b62:	68fb      	ldr	r3, [r7, #12]
     b64:	691b      	ldr	r3, [r3, #16]
     b66:	68ba      	ldr	r2, [r7, #8]
     b68:	4013      	ands	r3, r2
     b6a:	1e5a      	subs	r2, r3, #1
     b6c:	4193      	sbcs	r3, r2
     b6e:	b2db      	uxtb	r3, r3
}
     b70:	1c18      	adds	r0, r3, #0
     b72:	46bd      	mov	sp, r7
     b74:	b004      	add	sp, #16
     b76:	bd80      	pop	{r7, pc}
     b78:	00000aed 	.word	0x00000aed

00000b7c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
     b82:	1c02      	adds	r2, r0, #0
     b84:	1dfb      	adds	r3, r7, #7
     b86:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	1c18      	adds	r0, r3, #0
     b8e:	4b09      	ldr	r3, [pc, #36]	; (bb4 <extint_chan_clear_detected+0x38>)
     b90:	4798      	blx	r3
     b92:	1c03      	adds	r3, r0, #0
     b94:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	221f      	movs	r2, #31
     b9c:	4013      	ands	r3, r2
     b9e:	2201      	movs	r2, #1
     ba0:	409a      	lsls	r2, r3
     ba2:	1c13      	adds	r3, r2, #0
     ba4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	68ba      	ldr	r2, [r7, #8]
     baa:	611a      	str	r2, [r3, #16]
}
     bac:	46bd      	mov	sp, r7
     bae:	b004      	add	sp, #16
     bb0:	bd80      	pop	{r7, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00000aed 	.word	0x00000aed

00000bb8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	1c11      	adds	r1, r2, #0
     bc4:	1cfb      	adds	r3, r7, #3
     bc6:	1c02      	adds	r2, r0, #0
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	1cbb      	adds	r3, r7, #2
     bcc:	1c0a      	adds	r2, r1, #0
     bce:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     bd0:	1cbb      	adds	r3, r7, #2
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d001      	beq.n	bdc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     bd8:	2317      	movs	r3, #23
     bda:	e019      	b.n	c10 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     bdc:	1cfb      	adds	r3, r7, #3
     bde:	781a      	ldrb	r2, [r3, #0]
     be0:	4b0d      	ldr	r3, [pc, #52]	; (c18 <extint_register_callback+0x60>)
     be2:	0092      	lsls	r2, r2, #2
     be4:	58d3      	ldr	r3, [r2, r3]
     be6:	2b00      	cmp	r3, #0
     be8:	d107      	bne.n	bfa <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     bea:	1cfb      	adds	r3, r7, #3
     bec:	781a      	ldrb	r2, [r3, #0]
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <extint_register_callback+0x60>)
     bf0:	0092      	lsls	r2, r2, #2
     bf2:	6879      	ldr	r1, [r7, #4]
     bf4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     bf6:	2300      	movs	r3, #0
     bf8:	e00a      	b.n	c10 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     bfa:	1cfb      	adds	r3, r7, #3
     bfc:	781a      	ldrb	r2, [r3, #0]
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <extint_register_callback+0x60>)
     c00:	0092      	lsls	r2, r2, #2
     c02:	58d2      	ldr	r2, [r2, r3]
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	429a      	cmp	r2, r3
     c08:	d101      	bne.n	c0e <extint_register_callback+0x56>
		return STATUS_OK;
     c0a:	2300      	movs	r3, #0
     c0c:	e000      	b.n	c10 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     c0e:	231d      	movs	r3, #29
}
     c10:	1c18      	adds	r0, r3, #0
     c12:	46bd      	mov	sp, r7
     c14:	b002      	add	sp, #8
     c16:	bd80      	pop	{r7, pc}
     c18:	2000006c 	.word	0x2000006c

00000c1c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     c1c:	b580      	push	{r7, lr}
     c1e:	b084      	sub	sp, #16
     c20:	af00      	add	r7, sp, #0
     c22:	1c02      	adds	r2, r0, #0
     c24:	1dfb      	adds	r3, r7, #7
     c26:	701a      	strb	r2, [r3, #0]
     c28:	1dbb      	adds	r3, r7, #6
     c2a:	1c0a      	adds	r2, r1, #0
     c2c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     c2e:	1dbb      	adds	r3, r7, #6
     c30:	781b      	ldrb	r3, [r3, #0]
     c32:	2b00      	cmp	r3, #0
     c34:	d10e      	bne.n	c54 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     c36:	1dfb      	adds	r3, r7, #7
     c38:	781b      	ldrb	r3, [r3, #0]
     c3a:	1c18      	adds	r0, r3, #0
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <extint_chan_enable_callback+0x44>)
     c3e:	4798      	blx	r3
     c40:	1c03      	adds	r3, r0, #0
     c42:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     c44:	1dfb      	adds	r3, r7, #7
     c46:	781b      	ldrb	r3, [r3, #0]
     c48:	2201      	movs	r2, #1
     c4a:	409a      	lsls	r2, r3
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c50:	2300      	movs	r3, #0
     c52:	e000      	b.n	c56 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c54:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
     c56:	1c18      	adds	r0, r3, #0
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000aed 	.word	0x00000aed

00000c64 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     c64:	b580      	push	{r7, lr}
     c66:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     c68:	4b15      	ldr	r3, [pc, #84]	; (cc0 <EIC_Handler+0x5c>)
     c6a:	2200      	movs	r2, #0
     c6c:	701a      	strb	r2, [r3, #0]
     c6e:	e020      	b.n	cb2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     c70:	4b13      	ldr	r3, [pc, #76]	; (cc0 <EIC_Handler+0x5c>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	1c18      	adds	r0, r3, #0
     c76:	4b13      	ldr	r3, [pc, #76]	; (cc4 <EIC_Handler+0x60>)
     c78:	4798      	blx	r3
     c7a:	1e03      	subs	r3, r0, #0
     c7c:	d013      	beq.n	ca6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     c7e:	4b10      	ldr	r3, [pc, #64]	; (cc0 <EIC_Handler+0x5c>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	1c18      	adds	r0, r3, #0
     c84:	4b10      	ldr	r3, [pc, #64]	; (cc8 <EIC_Handler+0x64>)
     c86:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <EIC_Handler+0x5c>)
     c8a:	781b      	ldrb	r3, [r3, #0]
     c8c:	1c1a      	adds	r2, r3, #0
     c8e:	4b0f      	ldr	r3, [pc, #60]	; (ccc <EIC_Handler+0x68>)
     c90:	0092      	lsls	r2, r2, #2
     c92:	58d3      	ldr	r3, [r2, r3]
     c94:	2b00      	cmp	r3, #0
     c96:	d006      	beq.n	ca6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     c98:	4b09      	ldr	r3, [pc, #36]	; (cc0 <EIC_Handler+0x5c>)
     c9a:	781b      	ldrb	r3, [r3, #0]
     c9c:	1c1a      	adds	r2, r3, #0
     c9e:	4b0b      	ldr	r3, [pc, #44]	; (ccc <EIC_Handler+0x68>)
     ca0:	0092      	lsls	r2, r2, #2
     ca2:	58d3      	ldr	r3, [r2, r3]
     ca4:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     ca6:	4b06      	ldr	r3, [pc, #24]	; (cc0 <EIC_Handler+0x5c>)
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	3301      	adds	r3, #1
     cac:	b2da      	uxtb	r2, r3
     cae:	4b04      	ldr	r3, [pc, #16]	; (cc0 <EIC_Handler+0x5c>)
     cb0:	701a      	strb	r2, [r3, #0]
     cb2:	4b03      	ldr	r3, [pc, #12]	; (cc0 <EIC_Handler+0x5c>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2b0f      	cmp	r3, #15
     cb8:	d9da      	bls.n	c70 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     cba:	46bd      	mov	sp, r7
     cbc:	bd80      	pop	{r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	200000b0 	.word	0x200000b0
     cc4:	00000b39 	.word	0x00000b39
     cc8:	00000b7d 	.word	0x00000b7d
     ccc:	2000006c 	.word	0x2000006c

00000cd0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	2200      	movs	r2, #0
     cdc:	701a      	strb	r2, [r3, #0]
}
     cde:	46bd      	mov	sp, r7
     ce0:	b002      	add	sp, #8
     ce2:	bd80      	pop	{r7, pc}

00000ce4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b082      	sub	sp, #8
     ce8:	af00      	add	r7, sp, #0
     cea:	1c02      	adds	r2, r0, #0
     cec:	6039      	str	r1, [r7, #0]
     cee:	1dfb      	adds	r3, r7, #7
     cf0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b01      	cmp	r3, #1
     cf8:	d00a      	beq.n	d10 <system_apb_clock_set_mask+0x2c>
     cfa:	2b02      	cmp	r3, #2
     cfc:	d00f      	beq.n	d1e <system_apb_clock_set_mask+0x3a>
     cfe:	2b00      	cmp	r3, #0
     d00:	d114      	bne.n	d2c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d02:	4b0e      	ldr	r3, [pc, #56]	; (d3c <system_apb_clock_set_mask+0x58>)
     d04:	4a0d      	ldr	r2, [pc, #52]	; (d3c <system_apb_clock_set_mask+0x58>)
     d06:	6991      	ldr	r1, [r2, #24]
     d08:	683a      	ldr	r2, [r7, #0]
     d0a:	430a      	orrs	r2, r1
     d0c:	619a      	str	r2, [r3, #24]
			break;
     d0e:	e00f      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     d10:	4b0a      	ldr	r3, [pc, #40]	; (d3c <system_apb_clock_set_mask+0x58>)
     d12:	4a0a      	ldr	r2, [pc, #40]	; (d3c <system_apb_clock_set_mask+0x58>)
     d14:	69d1      	ldr	r1, [r2, #28]
     d16:	683a      	ldr	r2, [r7, #0]
     d18:	430a      	orrs	r2, r1
     d1a:	61da      	str	r2, [r3, #28]
			break;
     d1c:	e008      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d1e:	4b07      	ldr	r3, [pc, #28]	; (d3c <system_apb_clock_set_mask+0x58>)
     d20:	4a06      	ldr	r2, [pc, #24]	; (d3c <system_apb_clock_set_mask+0x58>)
     d22:	6a11      	ldr	r1, [r2, #32]
     d24:	683a      	ldr	r2, [r7, #0]
     d26:	430a      	orrs	r2, r1
     d28:	621a      	str	r2, [r3, #32]
			break;
     d2a:	e001      	b.n	d30 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     d2c:	2317      	movs	r3, #23
     d2e:	e000      	b.n	d32 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     d30:	2300      	movs	r3, #0
}
     d32:	1c18      	adds	r0, r3, #0
     d34:	46bd      	mov	sp, r7
     d36:	b002      	add	sp, #8
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	40000400 	.word	0x40000400

00000d40 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     d40:	b580      	push	{r7, lr}
     d42:	b082      	sub	sp, #8
     d44:	af00      	add	r7, sp, #0
     d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	2280      	movs	r2, #128	; 0x80
     d4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	2200      	movs	r2, #0
     d52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	2201      	movs	r2, #1
     d58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	2200      	movs	r2, #0
     d5e:	70da      	strb	r2, [r3, #3]
}
     d60:	46bd      	mov	sp, r7
     d62:	b002      	add	sp, #8
     d64:	bd80      	pop	{r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)

00000d68 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
     d68:	b580      	push	{r7, lr}
     d6a:	b084      	sub	sp, #16
     d6c:	af00      	add	r7, sp, #0
     d6e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     d70:	2300      	movs	r3, #0
     d72:	60fb      	str	r3, [r7, #12]
     d74:	e00c      	b.n	d90 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
     d76:	4b0a      	ldr	r3, [pc, #40]	; (da0 <_tcc_get_inst_index+0x38>)
     d78:	68fa      	ldr	r2, [r7, #12]
     d7a:	0092      	lsls	r2, r2, #2
     d7c:	58d2      	ldr	r2, [r2, r3]
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	429a      	cmp	r2, r3
     d82:	d102      	bne.n	d8a <_tcc_get_inst_index+0x22>
			return i;
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	b2db      	uxtb	r3, r3
     d88:	e006      	b.n	d98 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	3301      	adds	r3, #1
     d8e:	60fb      	str	r3, [r7, #12]
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	2b02      	cmp	r3, #2
     d94:	d9ef      	bls.n	d76 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     d96:	2300      	movs	r3, #0
}
     d98:	1c18      	adds	r0, r3, #0
     d9a:	46bd      	mov	sp, r7
     d9c:	b004      	add	sp, #16
     d9e:	bd80      	pop	{r7, pc}
     da0:	00005220 	.word	0x00005220

00000da4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     da4:	b590      	push	{r4, r7, lr}
     da6:	b085      	sub	sp, #20
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
     dac:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     dae:	230f      	movs	r3, #15
     db0:	18fc      	adds	r4, r7, r3
     db2:	683b      	ldr	r3, [r7, #0]
     db4:	1c18      	adds	r0, r3, #0
     db6:	4bac      	ldr	r3, [pc, #688]	; (1068 <tcc_get_config_defaults+0x2c4>)
     db8:	4798      	blx	r3
     dba:	1c03      	adds	r3, r0, #0
     dbc:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	2200      	movs	r2, #0
     dc2:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     dc4:	230f      	movs	r3, #15
     dc6:	18fb      	adds	r3, r7, r3
     dc8:	781a      	ldrb	r2, [r3, #0]
     dca:	4ba8      	ldr	r3, [pc, #672]	; (106c <tcc_get_config_defaults+0x2c8>)
     dcc:	0092      	lsls	r2, r2, #2
     dce:	58d2      	ldr	r2, [r2, r3]
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	2200      	movs	r2, #0
     dd8:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	2200      	movs	r2, #0
     dde:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2200      	movs	r2, #0
     dea:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2200      	movs	r2, #0
     df0:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2200      	movs	r2, #0
     df6:	61da      	str	r2, [r3, #28]
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2200      	movs	r2, #0
     dfc:	621a      	str	r2, [r3, #32]
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2200      	movs	r2, #0
     e02:	625a      	str	r2, [r3, #36]	; 0x24
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2200      	movs	r2, #0
     e08:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	2200      	movs	r2, #0
     e0e:	751a      	strb	r2, [r3, #20]
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	2200      	movs	r2, #0
     e14:	755a      	strb	r2, [r3, #21]
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	2200      	movs	r2, #0
     e1a:	759a      	strb	r2, [r3, #22]
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	2200      	movs	r2, #0
     e20:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	2200      	movs	r2, #0
     e26:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2200      	movs	r2, #0
     e2c:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	2200      	movs	r2, #0
     e32:	741a      	strb	r2, [r3, #16]
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	2200      	movs	r2, #0
     e38:	745a      	strb	r2, [r3, #17]
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	2200      	movs	r2, #0
     e3e:	749a      	strb	r2, [r3, #18]
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	2200      	movs	r2, #0
     e44:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	222c      	movs	r2, #44	; 0x2c
     e4a:	2100      	movs	r1, #0
     e4c:	5499      	strb	r1, [r3, r2]
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	222d      	movs	r2, #45	; 0x2d
     e52:	2100      	movs	r1, #0
     e54:	5499      	strb	r1, [r3, r2]
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	222e      	movs	r2, #46	; 0x2e
     e5a:	2100      	movs	r1, #0
     e5c:	5499      	strb	r1, [r3, r2]
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	222f      	movs	r2, #47	; 0x2f
     e62:	2100      	movs	r1, #0
     e64:	5499      	strb	r1, [r3, r2]
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	2230      	movs	r2, #48	; 0x30
     e6a:	2100      	movs	r1, #0
     e6c:	5499      	strb	r1, [r3, r2]
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	2231      	movs	r2, #49	; 0x31
     e72:	2100      	movs	r1, #0
     e74:	5499      	strb	r1, [r3, r2]
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	2232      	movs	r2, #50	; 0x32
     e7a:	2100      	movs	r1, #0
     e7c:	5499      	strb	r1, [r3, r2]
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	2233      	movs	r2, #51	; 0x33
     e82:	2100      	movs	r1, #0
     e84:	5499      	strb	r1, [r3, r2]
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	2234      	movs	r2, #52	; 0x34
     e8a:	2100      	movs	r1, #0
     e8c:	5499      	strb	r1, [r3, r2]
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	2235      	movs	r2, #53	; 0x35
     e92:	2100      	movs	r1, #0
     e94:	5499      	strb	r1, [r3, r2]
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	2236      	movs	r2, #54	; 0x36
     e9a:	2100      	movs	r1, #0
     e9c:	5499      	strb	r1, [r3, r2]
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	2237      	movs	r2, #55	; 0x37
     ea2:	2100      	movs	r1, #0
     ea4:	5499      	strb	r1, [r3, r2]
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	2238      	movs	r2, #56	; 0x38
     eaa:	2100      	movs	r1, #0
     eac:	5499      	strb	r1, [r3, r2]
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	2239      	movs	r2, #57	; 0x39
     eb2:	2100      	movs	r1, #0
     eb4:	5499      	strb	r1, [r3, r2]
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	223a      	movs	r2, #58	; 0x3a
     eba:	2100      	movs	r1, #0
     ebc:	5499      	strb	r1, [r3, r2]
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	223b      	movs	r2, #59	; 0x3b
     ec2:	2100      	movs	r1, #0
     ec4:	5499      	strb	r1, [r3, r2]
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	223c      	movs	r2, #60	; 0x3c
     eca:	2100      	movs	r1, #0
     ecc:	5499      	strb	r1, [r3, r2]
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	223d      	movs	r2, #61	; 0x3d
     ed2:	2100      	movs	r1, #0
     ed4:	5499      	strb	r1, [r3, r2]
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	223e      	movs	r2, #62	; 0x3e
     eda:	2100      	movs	r1, #0
     edc:	5499      	strb	r1, [r3, r2]
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	223f      	movs	r2, #63	; 0x3f
     ee2:	2100      	movs	r1, #0
     ee4:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	2240      	movs	r2, #64	; 0x40
     eea:	2100      	movs	r1, #0
     eec:	5499      	strb	r1, [r3, r2]
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	2241      	movs	r2, #65	; 0x41
     ef2:	2100      	movs	r1, #0
     ef4:	5499      	strb	r1, [r3, r2]
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	2242      	movs	r2, #66	; 0x42
     efa:	2100      	movs	r1, #0
     efc:	5499      	strb	r1, [r3, r2]
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	2243      	movs	r2, #67	; 0x43
     f02:	2100      	movs	r1, #0
     f04:	5499      	strb	r1, [r3, r2]
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	2244      	movs	r2, #68	; 0x44
     f0a:	2100      	movs	r1, #0
     f0c:	5499      	strb	r1, [r3, r2]
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	2245      	movs	r2, #69	; 0x45
     f12:	2100      	movs	r1, #0
     f14:	5499      	strb	r1, [r3, r2]
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	2246      	movs	r2, #70	; 0x46
     f1a:	2100      	movs	r1, #0
     f1c:	5499      	strb	r1, [r3, r2]
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	2247      	movs	r2, #71	; 0x47
     f22:	2100      	movs	r1, #0
     f24:	5499      	strb	r1, [r3, r2]
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	2248      	movs	r2, #72	; 0x48
     f2a:	2100      	movs	r1, #0
     f2c:	5499      	strb	r1, [r3, r2]
     f2e:	687b      	ldr	r3, [r7, #4]
     f30:	2249      	movs	r2, #73	; 0x49
     f32:	2100      	movs	r1, #0
     f34:	5499      	strb	r1, [r3, r2]
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	224a      	movs	r2, #74	; 0x4a
     f3a:	2100      	movs	r1, #0
     f3c:	5499      	strb	r1, [r3, r2]
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	224b      	movs	r2, #75	; 0x4b
     f42:	2100      	movs	r1, #0
     f44:	5499      	strb	r1, [r3, r2]
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	224c      	movs	r2, #76	; 0x4c
     f4a:	2100      	movs	r1, #0
     f4c:	5499      	strb	r1, [r3, r2]
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	224d      	movs	r2, #77	; 0x4d
     f52:	2100      	movs	r1, #0
     f54:	5499      	strb	r1, [r3, r2]
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	224e      	movs	r2, #78	; 0x4e
     f5a:	2100      	movs	r1, #0
     f5c:	5499      	strb	r1, [r3, r2]
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	224f      	movs	r2, #79	; 0x4f
     f62:	2100      	movs	r1, #0
     f64:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	2250      	movs	r2, #80	; 0x50
     f6a:	2100      	movs	r1, #0
     f6c:	5499      	strb	r1, [r3, r2]
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	2251      	movs	r2, #81	; 0x51
     f72:	2100      	movs	r1, #0
     f74:	5499      	strb	r1, [r3, r2]
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	2252      	movs	r2, #82	; 0x52
     f7a:	2100      	movs	r1, #0
     f7c:	5499      	strb	r1, [r3, r2]
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	2253      	movs	r2, #83	; 0x53
     f82:	2100      	movs	r1, #0
     f84:	5499      	strb	r1, [r3, r2]
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	2254      	movs	r2, #84	; 0x54
     f8a:	2100      	movs	r1, #0
     f8c:	5499      	strb	r1, [r3, r2]
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	2255      	movs	r2, #85	; 0x55
     f92:	2100      	movs	r1, #0
     f94:	5499      	strb	r1, [r3, r2]
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	2256      	movs	r2, #86	; 0x56
     f9a:	2100      	movs	r1, #0
     f9c:	5499      	strb	r1, [r3, r2]
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	2257      	movs	r2, #87	; 0x57
     fa2:	2100      	movs	r1, #0
     fa4:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	2298      	movs	r2, #152	; 0x98
     faa:	2100      	movs	r1, #0
     fac:	5499      	strb	r1, [r3, r2]
     fae:	687b      	ldr	r3, [r7, #4]
     fb0:	2200      	movs	r2, #0
     fb2:	659a      	str	r2, [r3, #88]	; 0x58
     fb4:	687b      	ldr	r3, [r7, #4]
     fb6:	2200      	movs	r2, #0
     fb8:	679a      	str	r2, [r3, #120]	; 0x78
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	2299      	movs	r2, #153	; 0x99
     fbe:	2100      	movs	r1, #0
     fc0:	5499      	strb	r1, [r3, r2]
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	2200      	movs	r2, #0
     fc6:	65da      	str	r2, [r3, #92]	; 0x5c
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	2200      	movs	r2, #0
     fcc:	67da      	str	r2, [r3, #124]	; 0x7c
     fce:	687b      	ldr	r3, [r7, #4]
     fd0:	229a      	movs	r2, #154	; 0x9a
     fd2:	2100      	movs	r1, #0
     fd4:	5499      	strb	r1, [r3, r2]
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2200      	movs	r2, #0
     fda:	661a      	str	r2, [r3, #96]	; 0x60
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	2280      	movs	r2, #128	; 0x80
     fe0:	2100      	movs	r1, #0
     fe2:	5099      	str	r1, [r3, r2]
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	229b      	movs	r2, #155	; 0x9b
     fe8:	2100      	movs	r1, #0
     fea:	5499      	strb	r1, [r3, r2]
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	2200      	movs	r2, #0
     ff0:	665a      	str	r2, [r3, #100]	; 0x64
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	2284      	movs	r2, #132	; 0x84
     ff6:	2100      	movs	r1, #0
     ff8:	5099      	str	r1, [r3, r2]
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	229c      	movs	r2, #156	; 0x9c
     ffe:	2100      	movs	r1, #0
    1000:	5499      	strb	r1, [r3, r2]
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	2200      	movs	r2, #0
    1006:	669a      	str	r2, [r3, #104]	; 0x68
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	2288      	movs	r2, #136	; 0x88
    100c:	2100      	movs	r1, #0
    100e:	5099      	str	r1, [r3, r2]
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	229d      	movs	r2, #157	; 0x9d
    1014:	2100      	movs	r1, #0
    1016:	5499      	strb	r1, [r3, r2]
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2200      	movs	r2, #0
    101c:	66da      	str	r2, [r3, #108]	; 0x6c
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	228c      	movs	r2, #140	; 0x8c
    1022:	2100      	movs	r1, #0
    1024:	5099      	str	r1, [r3, r2]
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	229e      	movs	r2, #158	; 0x9e
    102a:	2100      	movs	r1, #0
    102c:	5499      	strb	r1, [r3, r2]
    102e:	687b      	ldr	r3, [r7, #4]
    1030:	2200      	movs	r2, #0
    1032:	671a      	str	r2, [r3, #112]	; 0x70
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	2290      	movs	r2, #144	; 0x90
    1038:	2100      	movs	r1, #0
    103a:	5099      	str	r1, [r3, r2]
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	229f      	movs	r2, #159	; 0x9f
    1040:	2100      	movs	r1, #0
    1042:	5499      	strb	r1, [r3, r2]
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	2200      	movs	r2, #0
    1048:	675a      	str	r2, [r3, #116]	; 0x74
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	2294      	movs	r2, #148	; 0x94
    104e:	2100      	movs	r1, #0
    1050:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	22a0      	movs	r2, #160	; 0xa0
    1056:	2101      	movs	r1, #1
    1058:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	22a1      	movs	r2, #161	; 0xa1
    105e:	2100      	movs	r1, #0
    1060:	5499      	strb	r1, [r3, r2]
}
    1062:	46bd      	mov	sp, r7
    1064:	b005      	add	sp, #20
    1066:	bd90      	pop	{r4, r7, pc}
    1068:	00000d69 	.word	0x00000d69
    106c:	0000523c 	.word	0x0000523c

00001070 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1070:	b580      	push	{r7, lr}
    1072:	b086      	sub	sp, #24
    1074:	af00      	add	r7, sp, #0
    1076:	60b9      	str	r1, [r7, #8]
    1078:	607a      	str	r2, [r7, #4]
    107a:	230f      	movs	r3, #15
    107c:	18fb      	adds	r3, r7, r3
    107e:	1c02      	adds	r2, r0, #0
    1080:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    1082:	2300      	movs	r3, #0
    1084:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1086:	2300      	movs	r3, #0
    1088:	613b      	str	r3, [r7, #16]
    108a:	e01d      	b.n	10c8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    108c:	68ba      	ldr	r2, [r7, #8]
    108e:	693b      	ldr	r3, [r7, #16]
    1090:	18d3      	adds	r3, r2, r3
    1092:	3310      	adds	r3, #16
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	2b01      	cmp	r3, #1
    1098:	d113      	bne.n	10c2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    109a:	230f      	movs	r3, #15
    109c:	18fb      	adds	r3, r7, r3
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	4a1b      	ldr	r2, [pc, #108]	; (1110 <_tcc_build_ctrla+0xa0>)
    10a2:	5cd3      	ldrb	r3, [r2, r3]
    10a4:	1e1a      	subs	r2, r3, #0
    10a6:	693b      	ldr	r3, [r7, #16]
    10a8:	429a      	cmp	r2, r3
    10aa:	da01      	bge.n	10b0 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    10ac:	2317      	movs	r3, #23
    10ae:	e02a      	b.n	1106 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    10b0:	2380      	movs	r3, #128	; 0x80
    10b2:	045a      	lsls	r2, r3, #17
    10b4:	693b      	ldr	r3, [r7, #16]
    10b6:	409a      	lsls	r2, r3
    10b8:	1c13      	adds	r3, r2, #0
    10ba:	1c1a      	adds	r2, r3, #0
    10bc:	697b      	ldr	r3, [r7, #20]
    10be:	4313      	orrs	r3, r2
    10c0:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    10c2:	693b      	ldr	r3, [r7, #16]
    10c4:	3301      	adds	r3, #1
    10c6:	613b      	str	r3, [r7, #16]
    10c8:	693b      	ldr	r3, [r7, #16]
    10ca:	2b03      	cmp	r3, #3
    10cc:	ddde      	ble.n	108c <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	22a1      	movs	r2, #161	; 0xa1
    10d2:	5c9b      	ldrb	r3, [r3, r2]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d004      	beq.n	10e2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    10d8:	697b      	ldr	r3, [r7, #20]
    10da:	2280      	movs	r2, #128	; 0x80
    10dc:	0112      	lsls	r2, r2, #4
    10de:	4313      	orrs	r3, r2
    10e0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    10e2:	68bb      	ldr	r3, [r7, #8]
    10e4:	7b1b      	ldrb	r3, [r3, #12]
    10e6:	031b      	lsls	r3, r3, #12
    10e8:	1c1a      	adds	r2, r3, #0
    10ea:	697b      	ldr	r3, [r7, #20]
    10ec:	4313      	orrs	r3, r2
    10ee:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    10f0:	68bb      	ldr	r3, [r7, #8]
    10f2:	7adb      	ldrb	r3, [r3, #11]
    10f4:	021b      	lsls	r3, r3, #8
    10f6:	1c1a      	adds	r2, r3, #0
    10f8:	697b      	ldr	r3, [r7, #20]
    10fa:	4313      	orrs	r3, r2
    10fc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	697a      	ldr	r2, [r7, #20]
    1102:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    1104:	2300      	movs	r3, #0
}
    1106:	1c18      	adds	r0, r3, #0
    1108:	46bd      	mov	sp, r7
    110a:	b006      	add	sp, #24
    110c:	bd80      	pop	{r7, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	00005248 	.word	0x00005248

00001114 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    1114:	b580      	push	{r7, lr}
    1116:	b086      	sub	sp, #24
    1118:	af00      	add	r7, sp, #0
    111a:	60b9      	str	r1, [r7, #8]
    111c:	607a      	str	r2, [r7, #4]
    111e:	230f      	movs	r3, #15
    1120:	18fb      	adds	r3, r7, r3
    1122:	1c02      	adds	r2, r0, #0
    1124:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    1126:	2317      	movs	r3, #23
    1128:	18fb      	adds	r3, r7, r3
    112a:	2200      	movs	r2, #0
    112c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    112e:	68bb      	ldr	r3, [r7, #8]
    1130:	7a1b      	ldrb	r3, [r3, #8]
    1132:	2b00      	cmp	r3, #0
    1134:	d007      	beq.n	1146 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1136:	2317      	movs	r3, #23
    1138:	18fb      	adds	r3, r7, r3
    113a:	2217      	movs	r2, #23
    113c:	18ba      	adds	r2, r7, r2
    113e:	7812      	ldrb	r2, [r2, #0]
    1140:	2104      	movs	r1, #4
    1142:	430a      	orrs	r2, r1
    1144:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1146:	68bb      	ldr	r3, [r7, #8]
    1148:	7a5b      	ldrb	r3, [r3, #9]
    114a:	2b01      	cmp	r3, #1
    114c:	d107      	bne.n	115e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    114e:	2317      	movs	r3, #23
    1150:	18fb      	adds	r3, r7, r3
    1152:	2217      	movs	r2, #23
    1154:	18ba      	adds	r2, r7, r2
    1156:	7812      	ldrb	r2, [r2, #0]
    1158:	2101      	movs	r1, #1
    115a:	430a      	orrs	r2, r1
    115c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	2217      	movs	r2, #23
    1162:	18ba      	adds	r2, r7, r2
    1164:	7812      	ldrb	r2, [r2, #0]
    1166:	701a      	strb	r2, [r3, #0]
}
    1168:	46bd      	mov	sp, r7
    116a:	b006      	add	sp, #24
    116c:	bd80      	pop	{r7, pc}
    116e:	46c0      	nop			; (mov r8, r8)

00001170 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1170:	b580      	push	{r7, lr}
    1172:	b088      	sub	sp, #32
    1174:	af00      	add	r7, sp, #0
    1176:	60b9      	str	r1, [r7, #8]
    1178:	607a      	str	r2, [r7, #4]
    117a:	230f      	movs	r3, #15
    117c:	18fb      	adds	r3, r7, r3
    117e:	1c02      	adds	r2, r0, #0
    1180:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    1182:	230f      	movs	r3, #15
    1184:	18fb      	adds	r3, r7, r3
    1186:	781a      	ldrb	r2, [r3, #0]
    1188:	231b      	movs	r3, #27
    118a:	18fb      	adds	r3, r7, r3
    118c:	493e      	ldr	r1, [pc, #248]	; (1288 <_tcc_build_faults+0x118>)
    118e:	5c8a      	ldrb	r2, [r1, r2]
    1190:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1192:	2300      	movs	r3, #0
    1194:	61fb      	str	r3, [r7, #28]
    1196:	e06e      	b.n	1276 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    1198:	69fa      	ldr	r2, [r7, #28]
    119a:	1c13      	adds	r3, r2, #0
    119c:	009b      	lsls	r3, r3, #2
    119e:	189b      	adds	r3, r3, r2
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	3328      	adds	r3, #40	; 0x28
    11a4:	68ba      	ldr	r2, [r7, #8]
    11a6:	18d3      	adds	r3, r2, r3
    11a8:	3304      	adds	r3, #4
    11aa:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    11ac:	697b      	ldr	r3, [r7, #20]
    11ae:	7a5b      	ldrb	r3, [r3, #9]
    11b0:	221b      	movs	r2, #27
    11b2:	18ba      	adds	r2, r7, r2
    11b4:	7812      	ldrb	r2, [r2, #0]
    11b6:	429a      	cmp	r2, r3
    11b8:	d801      	bhi.n	11be <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    11ba:	2317      	movs	r3, #23
    11bc:	e05f      	b.n	127e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    11be:	697b      	ldr	r3, [r7, #20]
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	2b0f      	cmp	r3, #15
    11c4:	d901      	bls.n	11ca <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    11c6:	2317      	movs	r3, #23
    11c8:	e059      	b.n	127e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    11ca:	697b      	ldr	r3, [r7, #20]
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	061b      	lsls	r3, r3, #24
    11d0:	1c1a      	adds	r2, r3, #0
    11d2:	23f0      	movs	r3, #240	; 0xf0
    11d4:	051b      	lsls	r3, r3, #20
    11d6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    11d8:	697b      	ldr	r3, [r7, #20]
    11da:	785b      	ldrb	r3, [r3, #1]
    11dc:	041b      	lsls	r3, r3, #16
    11de:	1c19      	adds	r1, r3, #0
    11e0:	23ff      	movs	r3, #255	; 0xff
    11e2:	041b      	lsls	r3, r3, #16
    11e4:	400b      	ands	r3, r1
    11e6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    11e8:	697b      	ldr	r3, [r7, #20]
    11ea:	789b      	ldrb	r3, [r3, #2]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d001      	beq.n	11f4 <_tcc_build_faults+0x84>
    11f0:	2380      	movs	r3, #128	; 0x80
    11f2:	e000      	b.n	11f6 <_tcc_build_faults+0x86>
    11f4:	2300      	movs	r3, #0
    11f6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    11f8:	697b      	ldr	r3, [r7, #20]
    11fa:	78db      	ldrb	r3, [r3, #3]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d001      	beq.n	1204 <_tcc_build_faults+0x94>
    1200:	2308      	movs	r3, #8
    1202:	e000      	b.n	1206 <_tcc_build_faults+0x96>
    1204:	2300      	movs	r3, #0
    1206:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1208:	697b      	ldr	r3, [r7, #20]
    120a:	791b      	ldrb	r3, [r3, #4]
    120c:	2b00      	cmp	r3, #0
    120e:	d001      	beq.n	1214 <_tcc_build_faults+0xa4>
    1210:	2310      	movs	r3, #16
    1212:	e000      	b.n	1216 <_tcc_build_faults+0xa6>
    1214:	2300      	movs	r3, #0
    1216:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    1218:	697b      	ldr	r3, [r7, #20]
    121a:	795b      	ldrb	r3, [r3, #5]
    121c:	1c19      	adds	r1, r3, #0
    121e:	2303      	movs	r3, #3
    1220:	400b      	ands	r3, r1
    1222:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1224:	697b      	ldr	r3, [r7, #20]
    1226:	799b      	ldrb	r3, [r3, #6]
    1228:	015b      	lsls	r3, r3, #5
    122a:	1c19      	adds	r1, r3, #0
    122c:	2360      	movs	r3, #96	; 0x60
    122e:	400b      	ands	r3, r1
    1230:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1232:	697b      	ldr	r3, [r7, #20]
    1234:	79db      	ldrb	r3, [r3, #7]
    1236:	021b      	lsls	r3, r3, #8
    1238:	1c19      	adds	r1, r3, #0
    123a:	23c0      	movs	r3, #192	; 0xc0
    123c:	009b      	lsls	r3, r3, #2
    123e:	400b      	ands	r3, r1
    1240:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1242:	697b      	ldr	r3, [r7, #20]
    1244:	7a1b      	ldrb	r3, [r3, #8]
    1246:	031b      	lsls	r3, r3, #12
    1248:	1c19      	adds	r1, r3, #0
    124a:	23e0      	movs	r3, #224	; 0xe0
    124c:	01db      	lsls	r3, r3, #7
    124e:	400b      	ands	r3, r1
    1250:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1252:	697b      	ldr	r3, [r7, #20]
    1254:	7a5b      	ldrb	r3, [r3, #9]
    1256:	029b      	lsls	r3, r3, #10
    1258:	1c19      	adds	r1, r3, #0
    125a:	23c0      	movs	r3, #192	; 0xc0
    125c:	011b      	lsls	r3, r3, #4
    125e:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1260:	4313      	orrs	r3, r2
    1262:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    1264:	69fb      	ldr	r3, [r7, #28]
    1266:	009b      	lsls	r3, r3, #2
    1268:	687a      	ldr	r2, [r7, #4]
    126a:	18d3      	adds	r3, r2, r3
    126c:	693a      	ldr	r2, [r7, #16]
    126e:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1270:	69fb      	ldr	r3, [r7, #28]
    1272:	3301      	adds	r3, #1
    1274:	61fb      	str	r3, [r7, #28]
    1276:	69fb      	ldr	r3, [r7, #28]
    1278:	2b01      	cmp	r3, #1
    127a:	dd8d      	ble.n	1198 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    127c:	2300      	movs	r3, #0
}
    127e:	1c18      	adds	r0, r3, #0
    1280:	46bd      	mov	sp, r7
    1282:	b008      	add	sp, #32
    1284:	bd80      	pop	{r7, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	00005248 	.word	0x00005248

0000128c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    128c:	b580      	push	{r7, lr}
    128e:	b088      	sub	sp, #32
    1290:	af00      	add	r7, sp, #0
    1292:	60b9      	str	r1, [r7, #8]
    1294:	607a      	str	r2, [r7, #4]
    1296:	230f      	movs	r3, #15
    1298:	18fb      	adds	r3, r7, r3
    129a:	1c02      	adds	r2, r0, #0
    129c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    129e:	230f      	movs	r3, #15
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	781a      	ldrb	r2, [r3, #0]
    12a4:	2317      	movs	r3, #23
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	492c      	ldr	r1, [pc, #176]	; (135c <_tcc_build_drvctrl+0xd0>)
    12aa:	5c8a      	ldrb	r2, [r1, r2]
    12ac:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    12ae:	2300      	movs	r3, #0
    12b0:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    12b2:	2300      	movs	r3, #0
    12b4:	61fb      	str	r3, [r7, #28]
    12b6:	e045      	b.n	1344 <_tcc_build_drvctrl+0xb8>
		if (config->wave_ext.invert[i]) {
    12b8:	68ba      	ldr	r2, [r7, #8]
    12ba:	2148      	movs	r1, #72	; 0x48
    12bc:	69fb      	ldr	r3, [r7, #28]
    12be:	18d3      	adds	r3, r2, r3
    12c0:	185b      	adds	r3, r3, r1
    12c2:	7a1b      	ldrb	r3, [r3, #8]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d010      	beq.n	12ea <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    12c8:	2317      	movs	r3, #23
    12ca:	18fb      	adds	r3, r7, r3
    12cc:	781a      	ldrb	r2, [r3, #0]
    12ce:	69fb      	ldr	r3, [r7, #28]
    12d0:	429a      	cmp	r2, r3
    12d2:	d801      	bhi.n	12d8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    12d4:	2317      	movs	r3, #23
    12d6:	e03c      	b.n	1352 <_tcc_build_drvctrl+0xc6>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    12d8:	69fb      	ldr	r3, [r7, #28]
    12da:	2280      	movs	r2, #128	; 0x80
    12dc:	0252      	lsls	r2, r2, #9
    12de:	409a      	lsls	r2, r3
    12e0:	1c13      	adds	r3, r2, #0
    12e2:	1c1a      	adds	r2, r3, #0
    12e4:	69bb      	ldr	r3, [r7, #24]
    12e6:	4313      	orrs	r3, r2
    12e8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    12ea:	68ba      	ldr	r2, [r7, #8]
    12ec:	69fb      	ldr	r3, [r7, #28]
    12ee:	331c      	adds	r3, #28
    12f0:	005b      	lsls	r3, r3, #1
    12f2:	18d3      	adds	r3, r2, r3
    12f4:	7a5b      	ldrb	r3, [r3, #9]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d021      	beq.n	133e <_tcc_build_drvctrl+0xb2>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    12fa:	2317      	movs	r3, #23
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	781a      	ldrb	r2, [r3, #0]
    1300:	69fb      	ldr	r3, [r7, #28]
    1302:	429a      	cmp	r2, r3
    1304:	d801      	bhi.n	130a <_tcc_build_drvctrl+0x7e>
				return STATUS_ERR_INVALID_ARG;
    1306:	2317      	movs	r3, #23
    1308:	e023      	b.n	1352 <_tcc_build_drvctrl+0xc6>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    130a:	68ba      	ldr	r2, [r7, #8]
    130c:	69fb      	ldr	r3, [r7, #28]
    130e:	331c      	adds	r3, #28
    1310:	005b      	lsls	r3, r3, #1
    1312:	18d3      	adds	r3, r2, r3
    1314:	7a5b      	ldrb	r3, [r3, #9]
    1316:	2b02      	cmp	r3, #2
    1318:	d109      	bne.n	132e <_tcc_build_drvctrl+0xa2>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    131a:	69fb      	ldr	r3, [r7, #28]
    131c:	2202      	movs	r2, #2
    131e:	32ff      	adds	r2, #255	; 0xff
    1320:	409a      	lsls	r2, r3
    1322:	1c13      	adds	r3, r2, #0
    1324:	1c1a      	adds	r2, r3, #0
    1326:	69bb      	ldr	r3, [r7, #24]
    1328:	4313      	orrs	r3, r2
    132a:	61bb      	str	r3, [r7, #24]
    132c:	e007      	b.n	133e <_tcc_build_drvctrl+0xb2>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    132e:	69fb      	ldr	r3, [r7, #28]
    1330:	2201      	movs	r2, #1
    1332:	409a      	lsls	r2, r3
    1334:	1c13      	adds	r3, r2, #0
    1336:	1c1a      	adds	r2, r3, #0
    1338:	69bb      	ldr	r3, [r7, #24]
    133a:	4313      	orrs	r3, r2
    133c:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    133e:	69fb      	ldr	r3, [r7, #28]
    1340:	3301      	adds	r3, #1
    1342:	61fb      	str	r3, [r7, #28]
    1344:	69fb      	ldr	r3, [r7, #28]
    1346:	2b07      	cmp	r3, #7
    1348:	d9b6      	bls.n	12b8 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	69ba      	ldr	r2, [r7, #24]
    134e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    1350:	2300      	movs	r3, #0
}
    1352:	1c18      	adds	r0, r3, #0
    1354:	46bd      	mov	sp, r7
    1356:	b008      	add	sp, #32
    1358:	bd80      	pop	{r7, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	0000524c 	.word	0x0000524c

00001360 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    1360:	b580      	push	{r7, lr}
    1362:	b088      	sub	sp, #32
    1364:	af00      	add	r7, sp, #0
    1366:	60b9      	str	r1, [r7, #8]
    1368:	607a      	str	r2, [r7, #4]
    136a:	230f      	movs	r3, #15
    136c:	18fb      	adds	r3, r7, r3
    136e:	1c02      	adds	r2, r0, #0
    1370:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    1372:	230f      	movs	r3, #15
    1374:	18fb      	adds	r3, r7, r3
    1376:	781a      	ldrb	r2, [r3, #0]
    1378:	2317      	movs	r3, #23
    137a:	18fb      	adds	r3, r7, r3
    137c:	491d      	ldr	r1, [pc, #116]	; (13f4 <_tcc_build_waves+0x94>)
    137e:	5c8a      	ldrb	r2, [r1, r2]
    1380:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    1382:	68bb      	ldr	r3, [r7, #8]
    1384:	3310      	adds	r3, #16
    1386:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1388:	693b      	ldr	r3, [r7, #16]
    138a:	7a5b      	ldrb	r3, [r3, #9]
    138c:	011b      	lsls	r3, r3, #4
    138e:	1c1a      	adds	r2, r3, #0
    1390:	2330      	movs	r3, #48	; 0x30
    1392:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1394:	693b      	ldr	r3, [r7, #16]
    1396:	7a1b      	ldrb	r3, [r3, #8]
    1398:	1c19      	adds	r1, r3, #0
    139a:	2307      	movs	r3, #7
    139c:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    139e:	4313      	orrs	r3, r2
    13a0:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    13a2:	2300      	movs	r3, #0
    13a4:	61fb      	str	r3, [r7, #28]
    13a6:	e019      	b.n	13dc <_tcc_build_waves+0x7c>
		if (wav_cfg->wave_polarity[n]) {
    13a8:	693a      	ldr	r2, [r7, #16]
    13aa:	69fb      	ldr	r3, [r7, #28]
    13ac:	18d3      	adds	r3, r2, r3
    13ae:	791b      	ldrb	r3, [r3, #4]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d010      	beq.n	13d6 <_tcc_build_waves+0x76>
			if (n >= cc_num) {
    13b4:	2317      	movs	r3, #23
    13b6:	18fb      	adds	r3, r7, r3
    13b8:	781a      	ldrb	r2, [r3, #0]
    13ba:	69fb      	ldr	r3, [r7, #28]
    13bc:	429a      	cmp	r2, r3
    13be:	dc01      	bgt.n	13c4 <_tcc_build_waves+0x64>
				return STATUS_ERR_INVALID_ARG;
    13c0:	2317      	movs	r3, #23
    13c2:	e012      	b.n	13ea <_tcc_build_waves+0x8a>
			}
			wave |= (TCC_WAVE_POL0 << n);
    13c4:	2380      	movs	r3, #128	; 0x80
    13c6:	025a      	lsls	r2, r3, #9
    13c8:	69fb      	ldr	r3, [r7, #28]
    13ca:	409a      	lsls	r2, r3
    13cc:	1c13      	adds	r3, r2, #0
    13ce:	1c1a      	adds	r2, r3, #0
    13d0:	69bb      	ldr	r3, [r7, #24]
    13d2:	4313      	orrs	r3, r2
    13d4:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    13d6:	69fb      	ldr	r3, [r7, #28]
    13d8:	3301      	adds	r3, #1
    13da:	61fb      	str	r3, [r7, #28]
    13dc:	69fb      	ldr	r3, [r7, #28]
    13de:	2b03      	cmp	r3, #3
    13e0:	dde2      	ble.n	13a8 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	69ba      	ldr	r2, [r7, #24]
    13e6:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    13e8:	2300      	movs	r3, #0
}
    13ea:	1c18      	adds	r0, r3, #0
    13ec:	46bd      	mov	sp, r7
    13ee:	b008      	add	sp, #32
    13f0:	bd80      	pop	{r7, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00005248 	.word	0x00005248

000013f8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    13f8:	b590      	push	{r4, r7, lr}
    13fa:	b091      	sub	sp, #68	; 0x44
    13fc:	af00      	add	r7, sp, #0
    13fe:	60f8      	str	r0, [r7, #12]
    1400:	60b9      	str	r1, [r7, #8]
    1402:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1404:	233b      	movs	r3, #59	; 0x3b
    1406:	18fc      	adds	r4, r7, r3
    1408:	68bb      	ldr	r3, [r7, #8]
    140a:	1c18      	adds	r0, r3, #0
    140c:	4bc8      	ldr	r3, [pc, #800]	; (1730 <tcc_init+0x338>)
    140e:	4798      	blx	r3
    1410:	1c03      	adds	r3, r0, #0
    1412:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1414:	233b      	movs	r3, #59	; 0x3b
    1416:	18fb      	adds	r3, r7, r3
    1418:	781a      	ldrb	r2, [r3, #0]
    141a:	4bc6      	ldr	r3, [pc, #792]	; (1734 <tcc_init+0x33c>)
    141c:	0092      	lsls	r2, r2, #2
    141e:	58d3      	ldr	r3, [r2, r3]
    1420:	2002      	movs	r0, #2
    1422:	1c19      	adds	r1, r3, #0
    1424:	4bc4      	ldr	r3, [pc, #784]	; (1738 <tcc_init+0x340>)
    1426:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1428:	68bb      	ldr	r3, [r7, #8]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	2202      	movs	r2, #2
    142e:	4013      	ands	r3, r2
    1430:	d001      	beq.n	1436 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    1432:	231c      	movs	r3, #28
    1434:	e1c4      	b.n	17c0 <tcc_init+0x3c8>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1436:	68bb      	ldr	r3, [r7, #8]
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	2201      	movs	r2, #1
    143c:	4013      	ands	r3, r2
    143e:	d001      	beq.n	1444 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    1440:	231c      	movs	r3, #28
    1442:	e1bd      	b.n	17c0 <tcc_init+0x3c8>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    1444:	233b      	movs	r3, #59	; 0x3b
    1446:	18fb      	adds	r3, r7, r3
    1448:	781a      	ldrb	r2, [r3, #0]
    144a:	4bbc      	ldr	r3, [pc, #752]	; (173c <tcc_init+0x344>)
    144c:	0092      	lsls	r2, r2, #2
    144e:	58d3      	ldr	r3, [r2, r3]
    1450:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	681a      	ldr	r2, [r3, #0]
    1456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1458:	429a      	cmp	r2, r3
    145a:	d804      	bhi.n	1466 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	685a      	ldr	r2, [r3, #4]
    1460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1462:	429a      	cmp	r2, r3
    1464:	d901      	bls.n	146a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    1466:	2317      	movs	r3, #23
    1468:	e1aa      	b.n	17c0 <tcc_init+0x3c8>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    146a:	2300      	movs	r3, #0
    146c:	63fb      	str	r3, [r7, #60]	; 0x3c
    146e:	e00d      	b.n	148c <tcc_init+0x94>
		if ((config->compare.match[i] > count_max)
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1474:	3306      	adds	r3, #6
    1476:	009b      	lsls	r3, r3, #2
    1478:	18d3      	adds	r3, r2, r3
    147a:	685a      	ldr	r2, [r3, #4]
    147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    147e:	429a      	cmp	r2, r3
    1480:	d901      	bls.n	1486 <tcc_init+0x8e>
			) {
			return STATUS_ERR_INVALID_ARG;
    1482:	2317      	movs	r3, #23
    1484:	e19c      	b.n	17c0 <tcc_init+0x3c8>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1488:	3301      	adds	r3, #1
    148a:	63fb      	str	r3, [r7, #60]	; 0x3c
    148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    148e:	2b03      	cmp	r3, #3
    1490:	ddee      	ble.n	1470 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1492:	2300      	movs	r3, #0
    1494:	63fb      	str	r3, [r7, #60]	; 0x3c
    1496:	e019      	b.n	14cc <tcc_init+0xd4>
		if (!config->pins.enable_wave_out_pin[i]) {
    1498:	687a      	ldr	r2, [r7, #4]
    149a:	2198      	movs	r1, #152	; 0x98
    149c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    149e:	18d3      	adds	r3, r2, r3
    14a0:	185b      	adds	r3, r3, r1
    14a2:	781b      	ldrb	r3, [r3, #0]
    14a4:	2201      	movs	r2, #1
    14a6:	4053      	eors	r3, r2
    14a8:	b2db      	uxtb	r3, r3
    14aa:	2b00      	cmp	r3, #0
    14ac:	d000      	beq.n	14b0 <tcc_init+0xb8>
			continue;
    14ae:	e00a      	b.n	14c6 <tcc_init+0xce>
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    14b0:	233b      	movs	r3, #59	; 0x3b
    14b2:	18fb      	adds	r3, r7, r3
    14b4:	781b      	ldrb	r3, [r3, #0]
    14b6:	4aa2      	ldr	r2, [pc, #648]	; (1740 <tcc_init+0x348>)
    14b8:	5cd3      	ldrb	r3, [r2, r3]
    14ba:	1e1a      	subs	r2, r3, #0
    14bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14be:	429a      	cmp	r2, r3
    14c0:	dc01      	bgt.n	14c6 <tcc_init+0xce>
			return STATUS_ERR_INVALID_ARG;
    14c2:	2317      	movs	r3, #23
    14c4:	e17c      	b.n	17c0 <tcc_init+0x3c8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    14c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14c8:	3301      	adds	r3, #1
    14ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    14cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    14ce:	2b07      	cmp	r3, #7
    14d0:	dde2      	ble.n	1498 <tcc_init+0xa0>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    14d2:	2300      	movs	r3, #0
    14d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    14d6:	2333      	movs	r3, #51	; 0x33
    14d8:	18fc      	adds	r4, r7, r3
    14da:	233b      	movs	r3, #59	; 0x3b
    14dc:	18fb      	adds	r3, r7, r3
    14de:	7819      	ldrb	r1, [r3, #0]
    14e0:	687a      	ldr	r2, [r7, #4]
    14e2:	232c      	movs	r3, #44	; 0x2c
    14e4:	18fb      	adds	r3, r7, r3
    14e6:	1c08      	adds	r0, r1, #0
    14e8:	1c11      	adds	r1, r2, #0
    14ea:	1c1a      	adds	r2, r3, #0
    14ec:	4b95      	ldr	r3, [pc, #596]	; (1744 <tcc_init+0x34c>)
    14ee:	4798      	blx	r3
    14f0:	1c03      	adds	r3, r0, #0
    14f2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    14f4:	2333      	movs	r3, #51	; 0x33
    14f6:	18fb      	adds	r3, r7, r3
    14f8:	781b      	ldrb	r3, [r3, #0]
    14fa:	2b00      	cmp	r3, #0
    14fc:	d003      	beq.n	1506 <tcc_init+0x10e>
		return status;
    14fe:	2333      	movs	r3, #51	; 0x33
    1500:	18fb      	adds	r3, r7, r3
    1502:	781b      	ldrb	r3, [r3, #0]
    1504:	e15c      	b.n	17c0 <tcc_init+0x3c8>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    1506:	233b      	movs	r3, #59	; 0x3b
    1508:	18fb      	adds	r3, r7, r3
    150a:	7819      	ldrb	r1, [r3, #0]
    150c:	687a      	ldr	r2, [r7, #4]
    150e:	232b      	movs	r3, #43	; 0x2b
    1510:	18fb      	adds	r3, r7, r3
    1512:	1c08      	adds	r0, r1, #0
    1514:	1c11      	adds	r1, r2, #0
    1516:	1c1a      	adds	r2, r3, #0
    1518:	4b8b      	ldr	r3, [pc, #556]	; (1748 <tcc_init+0x350>)
    151a:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    151c:	2333      	movs	r3, #51	; 0x33
    151e:	18fc      	adds	r4, r7, r3
    1520:	233b      	movs	r3, #59	; 0x3b
    1522:	18fb      	adds	r3, r7, r3
    1524:	7819      	ldrb	r1, [r3, #0]
    1526:	687a      	ldr	r2, [r7, #4]
    1528:	2320      	movs	r3, #32
    152a:	18fb      	adds	r3, r7, r3
    152c:	1c08      	adds	r0, r1, #0
    152e:	1c11      	adds	r1, r2, #0
    1530:	1c1a      	adds	r2, r3, #0
    1532:	4b86      	ldr	r3, [pc, #536]	; (174c <tcc_init+0x354>)
    1534:	4798      	blx	r3
    1536:	1c03      	adds	r3, r0, #0
    1538:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    153a:	2333      	movs	r3, #51	; 0x33
    153c:	18fb      	adds	r3, r7, r3
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	2b00      	cmp	r3, #0
    1542:	d003      	beq.n	154c <tcc_init+0x154>
		return status;
    1544:	2333      	movs	r3, #51	; 0x33
    1546:	18fb      	adds	r3, r7, r3
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	e139      	b.n	17c0 <tcc_init+0x3c8>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    154c:	2300      	movs	r3, #0
    154e:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    1550:	2333      	movs	r3, #51	; 0x33
    1552:	18fc      	adds	r4, r7, r3
    1554:	233b      	movs	r3, #59	; 0x3b
    1556:	18fb      	adds	r3, r7, r3
    1558:	7819      	ldrb	r1, [r3, #0]
    155a:	687a      	ldr	r2, [r7, #4]
    155c:	231c      	movs	r3, #28
    155e:	18fb      	adds	r3, r7, r3
    1560:	1c08      	adds	r0, r1, #0
    1562:	1c11      	adds	r1, r2, #0
    1564:	1c1a      	adds	r2, r3, #0
    1566:	4b7a      	ldr	r3, [pc, #488]	; (1750 <tcc_init+0x358>)
    1568:	4798      	blx	r3
    156a:	1c03      	adds	r3, r0, #0
    156c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    156e:	2333      	movs	r3, #51	; 0x33
    1570:	18fb      	adds	r3, r7, r3
    1572:	781b      	ldrb	r3, [r3, #0]
    1574:	2b00      	cmp	r3, #0
    1576:	d003      	beq.n	1580 <tcc_init+0x188>
		return status;
    1578:	2333      	movs	r3, #51	; 0x33
    157a:	18fb      	adds	r3, r7, r3
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	e11f      	b.n	17c0 <tcc_init+0x3c8>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    1580:	2333      	movs	r3, #51	; 0x33
    1582:	18fc      	adds	r4, r7, r3
    1584:	233b      	movs	r3, #59	; 0x3b
    1586:	18fb      	adds	r3, r7, r3
    1588:	7819      	ldrb	r1, [r3, #0]
    158a:	687a      	ldr	r2, [r7, #4]
    158c:	2318      	movs	r3, #24
    158e:	18fb      	adds	r3, r7, r3
    1590:	1c08      	adds	r0, r1, #0
    1592:	1c11      	adds	r1, r2, #0
    1594:	1c1a      	adds	r2, r3, #0
    1596:	4b6f      	ldr	r3, [pc, #444]	; (1754 <tcc_init+0x35c>)
    1598:	4798      	blx	r3
    159a:	1c03      	adds	r3, r0, #0
    159c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    159e:	2333      	movs	r3, #51	; 0x33
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	781b      	ldrb	r3, [r3, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d003      	beq.n	15b0 <tcc_init+0x1b8>
		return status;
    15a8:	2333      	movs	r3, #51	; 0x33
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	781b      	ldrb	r3, [r3, #0]
    15ae:	e107      	b.n	17c0 <tcc_init+0x3c8>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    15b0:	2300      	movs	r3, #0
    15b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    15b4:	e008      	b.n	15c8 <tcc_init+0x1d0>
		module_inst->callback[i] = NULL;
    15b6:	68fa      	ldr	r2, [r7, #12]
    15b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15ba:	009b      	lsls	r3, r3, #2
    15bc:	18d3      	adds	r3, r2, r3
    15be:	2200      	movs	r2, #0
    15c0:	605a      	str	r2, [r3, #4]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    15c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15c4:	3301      	adds	r3, #1
    15c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    15c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15ca:	2b0b      	cmp	r3, #11
    15cc:	ddf3      	ble.n	15b6 <tcc_init+0x1be>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	2200      	movs	r2, #0
    15d2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	2200      	movs	r2, #0
    15d8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    15da:	233b      	movs	r3, #59	; 0x3b
    15dc:	18fb      	adds	r3, r7, r3
    15de:	781a      	ldrb	r2, [r3, #0]
    15e0:	4b5d      	ldr	r3, [pc, #372]	; (1758 <tcc_init+0x360>)
    15e2:	0092      	lsls	r2, r2, #2
    15e4:	68f9      	ldr	r1, [r7, #12]
    15e6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	68ba      	ldr	r2, [r7, #8]
    15ec:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	22a0      	movs	r2, #160	; 0xa0
    15f2:	5c99      	ldrb	r1, [r3, r2]
    15f4:	68fb      	ldr	r3, [r7, #12]
    15f6:	223c      	movs	r2, #60	; 0x3c
    15f8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    15fa:	2314      	movs	r3, #20
    15fc:	18fb      	adds	r3, r7, r3
    15fe:	1c18      	adds	r0, r3, #0
    1600:	4b56      	ldr	r3, [pc, #344]	; (175c <tcc_init+0x364>)
    1602:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	7a9a      	ldrb	r2, [r3, #10]
    1608:	2314      	movs	r3, #20
    160a:	18fb      	adds	r3, r7, r3
    160c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    160e:	233b      	movs	r3, #59	; 0x3b
    1610:	18fb      	adds	r3, r7, r3
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	4a52      	ldr	r2, [pc, #328]	; (1760 <tcc_init+0x368>)
    1616:	5cd2      	ldrb	r2, [r2, r3]
    1618:	2314      	movs	r3, #20
    161a:	18fb      	adds	r3, r7, r3
    161c:	1c10      	adds	r0, r2, #0
    161e:	1c19      	adds	r1, r3, #0
    1620:	4b50      	ldr	r3, [pc, #320]	; (1764 <tcc_init+0x36c>)
    1622:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1624:	233b      	movs	r3, #59	; 0x3b
    1626:	18fb      	adds	r3, r7, r3
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	4a4d      	ldr	r2, [pc, #308]	; (1760 <tcc_init+0x368>)
    162c:	5cd3      	ldrb	r3, [r2, r3]
    162e:	1c18      	adds	r0, r3, #0
    1630:	4b4d      	ldr	r3, [pc, #308]	; (1768 <tcc_init+0x370>)
    1632:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1634:	2300      	movs	r3, #0
    1636:	63fb      	str	r3, [r7, #60]	; 0x3c
    1638:	e02c      	b.n	1694 <tcc_init+0x29c>
		if (!config->pins.enable_wave_out_pin[i]) {
    163a:	687a      	ldr	r2, [r7, #4]
    163c:	2198      	movs	r1, #152	; 0x98
    163e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1640:	18d3      	adds	r3, r2, r3
    1642:	185b      	adds	r3, r3, r1
    1644:	781b      	ldrb	r3, [r3, #0]
    1646:	2201      	movs	r2, #1
    1648:	4053      	eors	r3, r2
    164a:	b2db      	uxtb	r3, r3
    164c:	2b00      	cmp	r3, #0
    164e:	d000      	beq.n	1652 <tcc_init+0x25a>
			continue;
    1650:	e01d      	b.n	168e <tcc_init+0x296>
		}

		system_pinmux_get_config_defaults(&pin_config);
    1652:	2310      	movs	r3, #16
    1654:	18fb      	adds	r3, r7, r3
    1656:	1c18      	adds	r0, r3, #0
    1658:	4b44      	ldr	r3, [pc, #272]	; (176c <tcc_init+0x374>)
    165a:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    165c:	687b      	ldr	r3, [r7, #4]
    165e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1660:	321e      	adds	r2, #30
    1662:	0092      	lsls	r2, r2, #2
    1664:	58d3      	ldr	r3, [r2, r3]
    1666:	b2da      	uxtb	r2, r3
    1668:	2310      	movs	r3, #16
    166a:	18fb      	adds	r3, r7, r3
    166c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    166e:	2310      	movs	r3, #16
    1670:	18fb      	adds	r3, r7, r3
    1672:	2201      	movs	r2, #1
    1674:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    167a:	3216      	adds	r2, #22
    167c:	0092      	lsls	r2, r2, #2
    167e:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1680:	b2da      	uxtb	r2, r3
    1682:	2310      	movs	r3, #16
    1684:	18fb      	adds	r3, r7, r3
    1686:	1c10      	adds	r0, r2, #0
    1688:	1c19      	adds	r1, r3, #0
    168a:	4b39      	ldr	r3, [pc, #228]	; (1770 <tcc_init+0x378>)
    168c:	4798      	blx	r3
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1690:	3301      	adds	r3, #1
    1692:	63fb      	str	r3, [r7, #60]	; 0x3c
    1694:	233b      	movs	r3, #59	; 0x3b
    1696:	18fb      	adds	r3, r7, r3
    1698:	781b      	ldrb	r3, [r3, #0]
    169a:	4a29      	ldr	r2, [pc, #164]	; (1740 <tcc_init+0x348>)
    169c:	5cd3      	ldrb	r3, [r2, r3]
    169e:	1e1a      	subs	r2, r3, #0
    16a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16a2:	429a      	cmp	r2, r3
    16a4:	dcc9      	bgt.n	163a <tcc_init+0x242>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    16a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    16a8:	68bb      	ldr	r3, [r7, #8]
    16aa:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    16ac:	46c0      	nop			; (mov r8, r8)
    16ae:	68bb      	ldr	r3, [r7, #8]
    16b0:	689b      	ldr	r3, [r3, #8]
    16b2:	2204      	movs	r2, #4
    16b4:	4013      	ands	r3, r2
    16b6:	d1fa      	bne.n	16ae <tcc_init+0x2b6>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    16b8:	68bb      	ldr	r3, [r7, #8]
    16ba:	22ff      	movs	r2, #255	; 0xff
    16bc:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	68bb      	ldr	r3, [r7, #8]
    16c2:	689b      	ldr	r3, [r3, #8]
    16c4:	2204      	movs	r2, #4
    16c6:	4013      	ands	r3, r2
    16c8:	d1fa      	bne.n	16c0 <tcc_init+0x2c8>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    16ca:	232b      	movs	r3, #43	; 0x2b
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	781a      	ldrb	r2, [r3, #0]
    16d0:	68bb      	ldr	r3, [r7, #8]
    16d2:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    16d4:	2320      	movs	r3, #32
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	681a      	ldr	r2, [r3, #0]
    16da:	68bb      	ldr	r3, [r7, #8]
    16dc:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    16de:	2320      	movs	r3, #32
    16e0:	18fb      	adds	r3, r7, r3
    16e2:	685a      	ldr	r2, [r3, #4]
    16e4:	68bb      	ldr	r3, [r7, #8]
    16e6:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    16e8:	69fa      	ldr	r2, [r7, #28]
    16ea:	68bb      	ldr	r3, [r7, #8]
    16ec:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	68bb      	ldr	r3, [r7, #8]
    16f2:	689b      	ldr	r3, [r3, #8]
    16f4:	4a1f      	ldr	r2, [pc, #124]	; (1774 <tcc_init+0x37c>)
    16f6:	4013      	ands	r3, r2
    16f8:	d1fa      	bne.n	16f0 <tcc_init+0x2f8>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    16fa:	69ba      	ldr	r2, [r7, #24]
    16fc:	68bb      	ldr	r3, [r7, #8]
    16fe:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1700:	46c0      	nop			; (mov r8, r8)
    1702:	68bb      	ldr	r3, [r7, #8]
    1704:	689b      	ldr	r3, [r3, #8]
    1706:	2210      	movs	r2, #16
    1708:	4013      	ands	r3, r2
    170a:	d1fa      	bne.n	1702 <tcc_init+0x30a>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	681a      	ldr	r2, [r3, #0]
    1710:	68bb      	ldr	r3, [r7, #8]
    1712:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1714:	46c0      	nop			; (mov r8, r8)
    1716:	68bb      	ldr	r3, [r7, #8]
    1718:	689b      	ldr	r3, [r3, #8]
    171a:	4a17      	ldr	r2, [pc, #92]	; (1778 <tcc_init+0x380>)
    171c:	4013      	ands	r3, r2
    171e:	d1fa      	bne.n	1716 <tcc_init+0x31e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	685a      	ldr	r2, [r3, #4]
    1724:	68bb      	ldr	r3, [r7, #8]
    1726:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1728:	2300      	movs	r3, #0
    172a:	63fb      	str	r3, [r7, #60]	; 0x3c
    172c:	e03e      	b.n	17ac <tcc_init+0x3b4>
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	00000d69 	.word	0x00000d69
    1734:	00005230 	.word	0x00005230
    1738:	00000ce5 	.word	0x00000ce5
    173c:	0000523c 	.word	0x0000523c
    1740:	0000524c 	.word	0x0000524c
    1744:	00001071 	.word	0x00001071
    1748:	00001115 	.word	0x00001115
    174c:	00001171 	.word	0x00001171
    1750:	0000128d 	.word	0x0000128d
    1754:	00001361 	.word	0x00001361
    1758:	200000b4 	.word	0x200000b4
    175c:	00000cd1 	.word	0x00000cd1
    1760:	0000522c 	.word	0x0000522c
    1764:	00003669 	.word	0x00003669
    1768:	000036ad 	.word	0x000036ad
    176c:	00000d41 	.word	0x00000d41
    1770:	00003955 	.word	0x00003955
    1774:	00020040 	.word	0x00020040
    1778:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    177c:	46c0      	nop			; (mov r8, r8)
    177e:	68bb      	ldr	r3, [r7, #8]
    1780:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1782:	4911      	ldr	r1, [pc, #68]	; (17c8 <tcc_init+0x3d0>)
    1784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1786:	4091      	lsls	r1, r2
    1788:	1c0a      	adds	r2, r1, #0
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    178a:	4013      	ands	r3, r2
    178c:	d1f7      	bne.n	177e <tcc_init+0x386>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    178e:	687a      	ldr	r2, [r7, #4]
    1790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1792:	3306      	adds	r3, #6
    1794:	009b      	lsls	r3, r3, #2
    1796:	18d3      	adds	r3, r2, r3
    1798:	685a      	ldr	r2, [r3, #4]
    179a:	68b9      	ldr	r1, [r7, #8]
    179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    179e:	3310      	adds	r3, #16
    17a0:	009b      	lsls	r3, r3, #2
    17a2:	18cb      	adds	r3, r1, r3
    17a4:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    17a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17a8:	3301      	adds	r3, #1
    17aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    17ac:	233b      	movs	r3, #59	; 0x3b
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	4a06      	ldr	r2, [pc, #24]	; (17cc <tcc_init+0x3d4>)
    17b4:	5cd3      	ldrb	r3, [r2, r3]
    17b6:	1e1a      	subs	r2, r3, #0
    17b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17ba:	429a      	cmp	r2, r3
    17bc:	dcde      	bgt.n	177c <tcc_init+0x384>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    17be:	2300      	movs	r3, #0
}
    17c0:	1c18      	adds	r0, r3, #0
    17c2:	46bd      	mov	sp, r7
    17c4:	b011      	add	sp, #68	; 0x44
    17c6:	bd90      	pop	{r4, r7, pc}
    17c8:	00080100 	.word	0x00080100
    17cc:	00005248 	.word	0x00005248

000017d0 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    17d0:	b590      	push	{r4, r7, lr}
    17d2:	b089      	sub	sp, #36	; 0x24
    17d4:	af00      	add	r7, sp, #0
    17d6:	60f8      	str	r0, [r7, #12]
    17d8:	1c08      	adds	r0, r1, #0
    17da:	607a      	str	r2, [r7, #4]
    17dc:	1c19      	adds	r1, r3, #0
    17de:	230b      	movs	r3, #11
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	1c02      	adds	r2, r0, #0
    17e4:	701a      	strb	r2, [r3, #0]
    17e6:	230a      	movs	r3, #10
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	1c0a      	adds	r2, r1, #0
    17ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    17f4:	231b      	movs	r3, #27
    17f6:	18fc      	adds	r4, r7, r3
    17f8:	69fb      	ldr	r3, [r7, #28]
    17fa:	1c18      	adds	r0, r3, #0
    17fc:	4b28      	ldr	r3, [pc, #160]	; (18a0 <_tcc_set_compare_value+0xd0>)
    17fe:	4798      	blx	r3
    1800:	1c03      	adds	r3, r0, #0
    1802:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1804:	231b      	movs	r3, #27
    1806:	18fb      	adds	r3, r7, r3
    1808:	781b      	ldrb	r3, [r3, #0]
    180a:	4a26      	ldr	r2, [pc, #152]	; (18a4 <_tcc_set_compare_value+0xd4>)
    180c:	5cd3      	ldrb	r3, [r2, r3]
    180e:	220b      	movs	r2, #11
    1810:	18ba      	adds	r2, r7, r2
    1812:	7812      	ldrb	r2, [r2, #0]
    1814:	429a      	cmp	r2, r3
    1816:	d301      	bcc.n	181c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    1818:	2317      	movs	r3, #23
    181a:	e03c      	b.n	1896 <_tcc_set_compare_value+0xc6>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    181c:	231b      	movs	r3, #27
    181e:	18fb      	adds	r3, r7, r3
    1820:	781a      	ldrb	r2, [r3, #0]
    1822:	4b21      	ldr	r3, [pc, #132]	; (18a8 <_tcc_set_compare_value+0xd8>)
    1824:	0092      	lsls	r2, r2, #2
    1826:	58d3      	ldr	r3, [r2, r3]
    1828:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    182a:	687a      	ldr	r2, [r7, #4]
    182c:	697b      	ldr	r3, [r7, #20]
    182e:	429a      	cmp	r2, r3
    1830:	d901      	bls.n	1836 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    1832:	2317      	movs	r3, #23
    1834:	e02f      	b.n	1896 <_tcc_set_compare_value+0xc6>
	}

	if (double_buffering_enabled) {
    1836:	230a      	movs	r3, #10
    1838:	18fb      	adds	r3, r7, r3
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	2b00      	cmp	r3, #0
    183e:	d014      	beq.n	186a <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    1840:	46c0      	nop			; (mov r8, r8)
    1842:	69fb      	ldr	r3, [r7, #28]
    1844:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1846:	220b      	movs	r2, #11
    1848:	18ba      	adds	r2, r7, r2
    184a:	7812      	ldrb	r2, [r2, #0]
    184c:	2180      	movs	r1, #128	; 0x80
    184e:	0309      	lsls	r1, r1, #12
    1850:	4091      	lsls	r1, r2
    1852:	1c0a      	adds	r2, r1, #0

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    1854:	4013      	ands	r3, r2
    1856:	d1f4      	bne.n	1842 <_tcc_set_compare_value+0x72>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    1858:	230b      	movs	r3, #11
    185a:	18fb      	adds	r3, r7, r3
    185c:	781a      	ldrb	r2, [r3, #0]
    185e:	69fb      	ldr	r3, [r7, #28]
    1860:	321c      	adds	r2, #28
    1862:	0092      	lsls	r2, r2, #2
    1864:	6879      	ldr	r1, [r7, #4]
    1866:	50d1      	str	r1, [r2, r3]
    1868:	e014      	b.n	1894 <_tcc_set_compare_value+0xc4>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	69fb      	ldr	r3, [r7, #28]
    186e:	689b      	ldr	r3, [r3, #8]
    1870:	220b      	movs	r2, #11
    1872:	18ba      	adds	r2, r7, r2
    1874:	7812      	ldrb	r2, [r2, #0]
    1876:	2180      	movs	r1, #128	; 0x80
    1878:	0049      	lsls	r1, r1, #1
    187a:	4091      	lsls	r1, r2
    187c:	1c0a      	adds	r2, r1, #0
    187e:	4013      	ands	r3, r2
    1880:	d1f4      	bne.n	186c <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    1882:	230b      	movs	r3, #11
    1884:	18fb      	adds	r3, r7, r3
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	69fa      	ldr	r2, [r7, #28]
    188a:	3310      	adds	r3, #16
    188c:	009b      	lsls	r3, r3, #2
    188e:	18d3      	adds	r3, r2, r3
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	605a      	str	r2, [r3, #4]
	}
	return STATUS_OK;
    1894:	2300      	movs	r3, #0
}
    1896:	1c18      	adds	r0, r3, #0
    1898:	46bd      	mov	sp, r7
    189a:	b009      	add	sp, #36	; 0x24
    189c:	bd90      	pop	{r4, r7, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	00000d69 	.word	0x00000d69
    18a4:	00005248 	.word	0x00005248
    18a8:	0000523c 	.word	0x0000523c

000018ac <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    18ac:	b590      	push	{r4, r7, lr}
    18ae:	b085      	sub	sp, #20
    18b0:	af00      	add	r7, sp, #0
    18b2:	60f8      	str	r0, [r7, #12]
    18b4:	607a      	str	r2, [r7, #4]
    18b6:	230b      	movs	r3, #11
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	1c0a      	adds	r2, r1, #0
    18bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    18be:	68fb      	ldr	r3, [r7, #12]
    18c0:	223c      	movs	r2, #60	; 0x3c
    18c2:	5c9c      	ldrb	r4, [r3, r2]
    18c4:	68f9      	ldr	r1, [r7, #12]
    18c6:	230b      	movs	r3, #11
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	781a      	ldrb	r2, [r3, #0]
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	1c08      	adds	r0, r1, #0
    18d0:	1c11      	adds	r1, r2, #0
    18d2:	1c1a      	adds	r2, r3, #0
    18d4:	1c23      	adds	r3, r4, #0
    18d6:	4c03      	ldr	r4, [pc, #12]	; (18e4 <tcc_set_compare_value+0x38>)
    18d8:	47a0      	blx	r4
    18da:	1c03      	adds	r3, r0, #0
			module_inst->double_buffering_enabled);
}
    18dc:	1c18      	adds	r0, r3, #0
    18de:	46bd      	mov	sp, r7
    18e0:	b005      	add	sp, #20
    18e2:	bd90      	pop	{r4, r7, pc}
    18e4:	000017d1 	.word	0x000017d1

000018e8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    18e8:	b580      	push	{r7, lr}
    18ea:	af00      	add	r7, sp, #0
    18ec:	2000      	movs	r0, #0
    18ee:	4b02      	ldr	r3, [pc, #8]	; (18f8 <TCC0_Handler+0x10>)
    18f0:	4798      	blx	r3
    18f2:	46bd      	mov	sp, r7
    18f4:	bd80      	pop	{r7, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	00001925 	.word	0x00001925

000018fc <TCC1_Handler>:
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
    1900:	2001      	movs	r0, #1
    1902:	4b02      	ldr	r3, [pc, #8]	; (190c <TCC1_Handler+0x10>)
    1904:	4798      	blx	r3
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00001925 	.word	0x00001925

00001910 <TCC2_Handler>:
    1910:	b580      	push	{r7, lr}
    1912:	af00      	add	r7, sp, #0
    1914:	2002      	movs	r0, #2
    1916:	4b02      	ldr	r3, [pc, #8]	; (1920 <TCC2_Handler+0x10>)
    1918:	4798      	blx	r3
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	00001925 	.word	0x00001925

00001924 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1924:	b580      	push	{r7, lr}
    1926:	b086      	sub	sp, #24
    1928:	af00      	add	r7, sp, #0
    192a:	1c02      	adds	r2, r0, #0
    192c:	1dfb      	adds	r3, r7, #7
    192e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    1930:	1dfb      	adds	r3, r7, #7
    1932:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1934:	4b17      	ldr	r3, [pc, #92]	; (1994 <_tcc_interrupt_handler+0x70>)
    1936:	0092      	lsls	r2, r2, #2
    1938:	58d3      	ldr	r3, [r2, r3]
    193a:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    193c:	693b      	ldr	r3, [r7, #16]
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    1942:	693b      	ldr	r3, [r7, #16]
    1944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1946:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    1948:	693b      	ldr	r3, [r7, #16]
    194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    194c:	4013      	ands	r3, r2
    194e:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1950:	2300      	movs	r3, #0
    1952:	617b      	str	r3, [r7, #20]
    1954:	e018      	b.n	1988 <_tcc_interrupt_handler+0x64>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1956:	4b10      	ldr	r3, [pc, #64]	; (1998 <_tcc_interrupt_handler+0x74>)
    1958:	697a      	ldr	r2, [r7, #20]
    195a:	0092      	lsls	r2, r2, #2
    195c:	58d3      	ldr	r3, [r2, r3]
    195e:	68fa      	ldr	r2, [r7, #12]
    1960:	4013      	ands	r3, r2
    1962:	d00e      	beq.n	1982 <_tcc_interrupt_handler+0x5e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1964:	693a      	ldr	r2, [r7, #16]
    1966:	697b      	ldr	r3, [r7, #20]
    1968:	009b      	lsls	r3, r3, #2
    196a:	18d3      	adds	r3, r2, r3
    196c:	685b      	ldr	r3, [r3, #4]
    196e:	693a      	ldr	r2, [r7, #16]
    1970:	1c10      	adds	r0, r2, #0
    1972:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1974:	693b      	ldr	r3, [r7, #16]
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	4a07      	ldr	r2, [pc, #28]	; (1998 <_tcc_interrupt_handler+0x74>)
    197a:	6979      	ldr	r1, [r7, #20]
    197c:	0089      	lsls	r1, r1, #2
    197e:	588a      	ldr	r2, [r1, r2]
    1980:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1982:	697b      	ldr	r3, [r7, #20]
    1984:	3301      	adds	r3, #1
    1986:	617b      	str	r3, [r7, #20]
    1988:	697b      	ldr	r3, [r7, #20]
    198a:	2b0b      	cmp	r3, #11
    198c:	dde3      	ble.n	1956 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    198e:	46bd      	mov	sp, r7
    1990:	b006      	add	sp, #24
    1992:	bd80      	pop	{r7, pc}
    1994:	200000b4 	.word	0x200000b4
    1998:	00005250 	.word	0x00005250

0000199c <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    199c:	b580      	push	{r7, lr}
    199e:	af00      	add	r7, sp, #0
    19a0:	2000      	movs	r0, #0
    19a2:	4b02      	ldr	r3, [pc, #8]	; (19ac <TC3_Handler+0x10>)
    19a4:	4798      	blx	r3
    19a6:	46bd      	mov	sp, r7
    19a8:	bd80      	pop	{r7, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	000019d9 	.word	0x000019d9

000019b0 <TC4_Handler>:
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0
    19b4:	2001      	movs	r0, #1
    19b6:	4b02      	ldr	r3, [pc, #8]	; (19c0 <TC4_Handler+0x10>)
    19b8:	4798      	blx	r3
    19ba:	46bd      	mov	sp, r7
    19bc:	bd80      	pop	{r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	000019d9 	.word	0x000019d9

000019c4 <TC5_Handler>:
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0
    19c8:	2002      	movs	r0, #2
    19ca:	4b02      	ldr	r3, [pc, #8]	; (19d4 <TC5_Handler+0x10>)
    19cc:	4798      	blx	r3
    19ce:	46bd      	mov	sp, r7
    19d0:	bd80      	pop	{r7, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	000019d9 	.word	0x000019d9

000019d8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	1c02      	adds	r2, r0, #0
    19e0:	1dfb      	adds	r3, r7, #7
    19e2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    19e4:	1dfb      	adds	r3, r7, #7
    19e6:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    19e8:	4b28      	ldr	r3, [pc, #160]	; (1a8c <_tc_interrupt_handler+0xb4>)
    19ea:	0092      	lsls	r2, r2, #2
    19ec:	58d3      	ldr	r3, [r2, r3]
    19ee:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    19f0:	68fb      	ldr	r3, [r7, #12]
    19f2:	681b      	ldr	r3, [r3, #0]
    19f4:	7b9b      	ldrb	r3, [r3, #14]
    19f6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    19f8:	68fa      	ldr	r2, [r7, #12]
    19fa:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    19fc:	4013      	ands	r3, r2
    19fe:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1a04:	230b      	movs	r3, #11
    1a06:	18fb      	adds	r3, r7, r3
    1a08:	400a      	ands	r2, r1
    1a0a:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a0c:	230b      	movs	r3, #11
    1a0e:	18fb      	adds	r3, r7, r3
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	2201      	movs	r2, #1
    1a14:	4013      	ands	r3, r2
    1a16:	d008      	beq.n	1a2a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	689b      	ldr	r3, [r3, #8]
    1a1c:	68fa      	ldr	r2, [r7, #12]
    1a1e:	1c10      	adds	r0, r2, #0
    1a20:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	2201      	movs	r2, #1
    1a28:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a2a:	230b      	movs	r3, #11
    1a2c:	18fb      	adds	r3, r7, r3
    1a2e:	781b      	ldrb	r3, [r3, #0]
    1a30:	2202      	movs	r2, #2
    1a32:	4013      	ands	r3, r2
    1a34:	d008      	beq.n	1a48 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a36:	68fb      	ldr	r3, [r7, #12]
    1a38:	68db      	ldr	r3, [r3, #12]
    1a3a:	68fa      	ldr	r2, [r7, #12]
    1a3c:	1c10      	adds	r0, r2, #0
    1a3e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	681b      	ldr	r3, [r3, #0]
    1a44:	2202      	movs	r2, #2
    1a46:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a48:	230b      	movs	r3, #11
    1a4a:	18fb      	adds	r3, r7, r3
    1a4c:	781b      	ldrb	r3, [r3, #0]
    1a4e:	2210      	movs	r2, #16
    1a50:	4013      	ands	r3, r2
    1a52:	d008      	beq.n	1a66 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	691b      	ldr	r3, [r3, #16]
    1a58:	68fa      	ldr	r2, [r7, #12]
    1a5a:	1c10      	adds	r0, r2, #0
    1a5c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	2210      	movs	r2, #16
    1a64:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a66:	230b      	movs	r3, #11
    1a68:	18fb      	adds	r3, r7, r3
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	2220      	movs	r2, #32
    1a6e:	4013      	ands	r3, r2
    1a70:	d008      	beq.n	1a84 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	695b      	ldr	r3, [r3, #20]
    1a76:	68fa      	ldr	r2, [r7, #12]
    1a78:	1c10      	adds	r0, r2, #0
    1a7a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	2220      	movs	r2, #32
    1a82:	739a      	strb	r2, [r3, #14]
	}
}
    1a84:	46bd      	mov	sp, r7
    1a86:	b004      	add	sp, #16
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	200000c0 	.word	0x200000c0

00001a90 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b082      	sub	sp, #8
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	2280      	movs	r2, #128	; 0x80
    1a9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	2200      	movs	r2, #0
    1aa2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	2201      	movs	r2, #1
    1aa8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	2200      	movs	r2, #0
    1aae:	70da      	strb	r2, [r3, #3]
}
    1ab0:	46bd      	mov	sp, r7
    1ab2:	b002      	add	sp, #8
    1ab4:	bd80      	pop	{r7, pc}
    1ab6:	46c0      	nop			; (mov r8, r8)

00001ab8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	1c02      	adds	r2, r0, #0
    1ac0:	1dfb      	adds	r3, r7, #7
    1ac2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1ac4:	230f      	movs	r3, #15
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	1dfa      	adds	r2, r7, #7
    1aca:	7812      	ldrb	r2, [r2, #0]
    1acc:	09d2      	lsrs	r2, r2, #7
    1ace:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1ad0:	230e      	movs	r3, #14
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	1dfa      	adds	r2, r7, #7
    1ad6:	7812      	ldrb	r2, [r2, #0]
    1ad8:	0952      	lsrs	r2, r2, #5
    1ada:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1adc:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1ade:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1ae0:	230f      	movs	r3, #15
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d10f      	bne.n	1b0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1aea:	230f      	movs	r3, #15
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	2210      	movs	r2, #16
    1af4:	4694      	mov	ip, r2
    1af6:	44bc      	add	ip, r7
    1af8:	4463      	add	r3, ip
    1afa:	3b08      	subs	r3, #8
    1afc:	681a      	ldr	r2, [r3, #0]
    1afe:	230e      	movs	r3, #14
    1b00:	18fb      	adds	r3, r7, r3
    1b02:	781b      	ldrb	r3, [r3, #0]
    1b04:	01db      	lsls	r3, r3, #7
    1b06:	18d3      	adds	r3, r2, r3
    1b08:	e000      	b.n	1b0c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1b0a:	2300      	movs	r3, #0
	}
}
    1b0c:	1c18      	adds	r0, r3, #0
    1b0e:	46bd      	mov	sp, r7
    1b10:	b004      	add	sp, #16
    1b12:	bd80      	pop	{r7, pc}
    1b14:	41004400 	.word	0x41004400

00001b18 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	1c02      	adds	r2, r0, #0
    1b20:	1dfb      	adds	r3, r7, #7
    1b22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1b24:	1dfb      	adds	r3, r7, #7
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	1c18      	adds	r0, r3, #0
    1b2a:	4b03      	ldr	r3, [pc, #12]	; (1b38 <port_get_group_from_gpio_pin+0x20>)
    1b2c:	4798      	blx	r3
    1b2e:	1c03      	adds	r3, r0, #0
}
    1b30:	1c18      	adds	r0, r3, #0
    1b32:	46bd      	mov	sp, r7
    1b34:	b002      	add	sp, #8
    1b36:	bd80      	pop	{r7, pc}
    1b38:	00001ab9 	.word	0x00001ab9

00001b3c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b084      	sub	sp, #16
    1b40:	af00      	add	r7, sp, #0
    1b42:	1c02      	adds	r2, r0, #0
    1b44:	1dfb      	adds	r3, r7, #7
    1b46:	701a      	strb	r2, [r3, #0]
    1b48:	1dbb      	adds	r3, r7, #6
    1b4a:	1c0a      	adds	r2, r1, #0
    1b4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1b4e:	1dfb      	adds	r3, r7, #7
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	1c18      	adds	r0, r3, #0
    1b54:	4b0c      	ldr	r3, [pc, #48]	; (1b88 <port_pin_set_output_level+0x4c>)
    1b56:	4798      	blx	r3
    1b58:	1c03      	adds	r3, r0, #0
    1b5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b5c:	1dfb      	adds	r3, r7, #7
    1b5e:	781b      	ldrb	r3, [r3, #0]
    1b60:	221f      	movs	r2, #31
    1b62:	4013      	ands	r3, r2
    1b64:	2201      	movs	r2, #1
    1b66:	409a      	lsls	r2, r3
    1b68:	1c13      	adds	r3, r2, #0
    1b6a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1b6c:	1dbb      	adds	r3, r7, #6
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d003      	beq.n	1b7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1b74:	68fb      	ldr	r3, [r7, #12]
    1b76:	68ba      	ldr	r2, [r7, #8]
    1b78:	619a      	str	r2, [r3, #24]
    1b7a:	e002      	b.n	1b82 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b7c:	68fb      	ldr	r3, [r7, #12]
    1b7e:	68ba      	ldr	r2, [r7, #8]
    1b80:	615a      	str	r2, [r3, #20]
	}
}
    1b82:	46bd      	mov	sp, r7
    1b84:	b004      	add	sp, #16
    1b86:	bd80      	pop	{r7, pc}
    1b88:	00001b19 	.word	0x00001b19

00001b8c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	2200      	movs	r2, #0
    1b98:	701a      	strb	r2, [r3, #0]
}
    1b9a:	46bd      	mov	sp, r7
    1b9c:	b002      	add	sp, #8
    1b9e:	bd80      	pop	{r7, pc}

00001ba0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b082      	sub	sp, #8
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	1c02      	adds	r2, r0, #0
    1ba8:	6039      	str	r1, [r7, #0]
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	d00a      	beq.n	1bcc <system_apb_clock_set_mask+0x2c>
    1bb6:	2b02      	cmp	r3, #2
    1bb8:	d00f      	beq.n	1bda <system_apb_clock_set_mask+0x3a>
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d114      	bne.n	1be8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1bbe:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bc0:	4a0d      	ldr	r2, [pc, #52]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bc2:	6991      	ldr	r1, [r2, #24]
    1bc4:	683a      	ldr	r2, [r7, #0]
    1bc6:	430a      	orrs	r2, r1
    1bc8:	619a      	str	r2, [r3, #24]
			break;
    1bca:	e00f      	b.n	1bec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1bcc:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bce:	4a0a      	ldr	r2, [pc, #40]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bd0:	69d1      	ldr	r1, [r2, #28]
    1bd2:	683a      	ldr	r2, [r7, #0]
    1bd4:	430a      	orrs	r2, r1
    1bd6:	61da      	str	r2, [r3, #28]
			break;
    1bd8:	e008      	b.n	1bec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1bda:	4b07      	ldr	r3, [pc, #28]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bdc:	4a06      	ldr	r2, [pc, #24]	; (1bf8 <system_apb_clock_set_mask+0x58>)
    1bde:	6a11      	ldr	r1, [r2, #32]
    1be0:	683a      	ldr	r2, [r7, #0]
    1be2:	430a      	orrs	r2, r1
    1be4:	621a      	str	r2, [r3, #32]
			break;
    1be6:	e001      	b.n	1bec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1be8:	2317      	movs	r3, #23
    1bea:	e000      	b.n	1bee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1bec:	2300      	movs	r3, #0
}
    1bee:	1c18      	adds	r0, r3, #0
    1bf0:	46bd      	mov	sp, r7
    1bf2:	b002      	add	sp, #8
    1bf4:	bd80      	pop	{r7, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	40000400 	.word	0x40000400

00001bfc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c00:	4b05      	ldr	r3, [pc, #20]	; (1c18 <system_is_debugger_present+0x1c>)
    1c02:	789b      	ldrb	r3, [r3, #2]
    1c04:	b2db      	uxtb	r3, r3
    1c06:	1c1a      	adds	r2, r3, #0
    1c08:	2302      	movs	r3, #2
    1c0a:	4013      	ands	r3, r2
    1c0c:	1e5a      	subs	r2, r3, #1
    1c0e:	4193      	sbcs	r3, r2
    1c10:	b2db      	uxtb	r3, r3
}
    1c12:	1c18      	adds	r0, r3, #0
    1c14:	46bd      	mov	sp, r7
    1c16:	bd80      	pop	{r7, pc}
    1c18:	41002000 	.word	0x41002000

00001c1c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1c1c:	b580      	push	{r7, lr}
    1c1e:	b084      	sub	sp, #16
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	7e1b      	ldrb	r3, [r3, #24]
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	1c1a      	adds	r2, r3, #0
    1c32:	2301      	movs	r3, #1
    1c34:	4013      	ands	r3, r2
    1c36:	1e5a      	subs	r2, r3, #1
    1c38:	4193      	sbcs	r3, r2
    1c3a:	b2db      	uxtb	r3, r3
}
    1c3c:	1c18      	adds	r0, r3, #0
    1c3e:	46bd      	mov	sp, r7
    1c40:	b004      	add	sp, #16
    1c42:	bd80      	pop	{r7, pc}

00001c44 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b084      	sub	sp, #16
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	7e1b      	ldrb	r3, [r3, #24]
    1c56:	b2db      	uxtb	r3, r3
    1c58:	1c1a      	adds	r2, r3, #0
    1c5a:	2304      	movs	r3, #4
    1c5c:	4013      	ands	r3, r2
    1c5e:	1e5a      	subs	r2, r3, #1
    1c60:	4193      	sbcs	r3, r2
    1c62:	b2db      	uxtb	r3, r3
}
    1c64:	1c18      	adds	r0, r3, #0
    1c66:	46bd      	mov	sp, r7
    1c68:	b004      	add	sp, #16
    1c6a:	bd80      	pop	{r7, pc}

00001c6c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
    1c74:	1c0a      	adds	r2, r1, #0
    1c76:	1cbb      	adds	r3, r7, #2
    1c78:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	1c18      	adds	r0, r3, #0
    1c84:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <spi_write+0x44>)
    1c86:	4798      	blx	r3
    1c88:	1c03      	adds	r3, r0, #0
    1c8a:	1c1a      	adds	r2, r3, #0
    1c8c:	2301      	movs	r3, #1
    1c8e:	4053      	eors	r3, r2
    1c90:	b2db      	uxtb	r3, r3
    1c92:	2b00      	cmp	r3, #0
    1c94:	d001      	beq.n	1c9a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    1c96:	2305      	movs	r3, #5
    1c98:	e006      	b.n	1ca8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c9a:	1cbb      	adds	r3, r7, #2
    1c9c:	881b      	ldrh	r3, [r3, #0]
    1c9e:	05db      	lsls	r3, r3, #23
    1ca0:	0dda      	lsrs	r2, r3, #23
    1ca2:	68fb      	ldr	r3, [r7, #12]
    1ca4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1ca6:	2300      	movs	r3, #0
}
    1ca8:	1c18      	adds	r0, r3, #0
    1caa:	46bd      	mov	sp, r7
    1cac:	b004      	add	sp, #16
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	00001c1d 	.word	0x00001c1d

00001cb4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b084      	sub	sp, #16
    1cb8:	af00      	add	r7, sp, #0
    1cba:	6078      	str	r0, [r7, #4]
    1cbc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	681b      	ldr	r3, [r3, #0]
    1cc2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	1c18      	adds	r0, r3, #0
    1cc8:	4b1b      	ldr	r3, [pc, #108]	; (1d38 <spi_read+0x84>)
    1cca:	4798      	blx	r3
    1ccc:	1c03      	adds	r3, r0, #0
    1cce:	1c1a      	adds	r2, r3, #0
    1cd0:	2301      	movs	r3, #1
    1cd2:	4053      	eors	r3, r2
    1cd4:	b2db      	uxtb	r3, r3
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d001      	beq.n	1cde <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1cda:	2310      	movs	r3, #16
    1cdc:	e027      	b.n	1d2e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1cde:	230f      	movs	r3, #15
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	2200      	movs	r2, #0
    1ce4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1ce6:	68bb      	ldr	r3, [r7, #8]
    1ce8:	8b5b      	ldrh	r3, [r3, #26]
    1cea:	b29b      	uxth	r3, r3
    1cec:	1c1a      	adds	r2, r3, #0
    1cee:	2304      	movs	r3, #4
    1cf0:	4013      	ands	r3, r2
    1cf2:	d006      	beq.n	1d02 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1cf4:	230f      	movs	r3, #15
    1cf6:	18fb      	adds	r3, r7, r3
    1cf8:	221e      	movs	r2, #30
    1cfa:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1cfc:	68bb      	ldr	r3, [r7, #8]
    1cfe:	2204      	movs	r2, #4
    1d00:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	799b      	ldrb	r3, [r3, #6]
    1d06:	2b01      	cmp	r3, #1
    1d08:	d108      	bne.n	1d1c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d0a:	68bb      	ldr	r3, [r7, #8]
    1d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d0e:	b29b      	uxth	r3, r3
    1d10:	05db      	lsls	r3, r3, #23
    1d12:	0ddb      	lsrs	r3, r3, #23
    1d14:	b29a      	uxth	r2, r3
    1d16:	683b      	ldr	r3, [r7, #0]
    1d18:	801a      	strh	r2, [r3, #0]
    1d1a:	e005      	b.n	1d28 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d1c:	68bb      	ldr	r3, [r7, #8]
    1d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d20:	b2db      	uxtb	r3, r3
    1d22:	b29a      	uxth	r2, r3
    1d24:	683b      	ldr	r3, [r7, #0]
    1d26:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1d28:	230f      	movs	r3, #15
    1d2a:	18fb      	adds	r3, r7, r3
    1d2c:	781b      	ldrb	r3, [r3, #0]
}
    1d2e:	1c18      	adds	r0, r3, #0
    1d30:	46bd      	mov	sp, r7
    1d32:	b004      	add	sp, #16
    1d34:	bd80      	pop	{r7, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	00001c45 	.word	0x00001c45

00001d3c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1d3c:	b590      	push	{r4, r7, lr}
    1d3e:	b093      	sub	sp, #76	; 0x4c
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
    1d44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	681b      	ldr	r3, [r3, #0]
    1d4a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1d52:	231c      	movs	r3, #28
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	1c18      	adds	r0, r3, #0
    1d58:	4b86      	ldr	r3, [pc, #536]	; (1f74 <_spi_set_config+0x238>)
    1d5a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d5c:	231c      	movs	r3, #28
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	2200      	movs	r2, #0
    1d62:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    1d64:	683b      	ldr	r3, [r7, #0]
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d103      	bne.n	1d74 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d6c:	231c      	movs	r3, #28
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	2200      	movs	r2, #0
    1d72:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1d78:	230c      	movs	r3, #12
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1d7e:	683b      	ldr	r3, [r7, #0]
    1d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1d82:	230c      	movs	r3, #12
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1d88:	683b      	ldr	r3, [r7, #0]
    1d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1d8c:	230c      	movs	r3, #12
    1d8e:	18fb      	adds	r3, r7, r3
    1d90:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    1d96:	230c      	movs	r3, #12
    1d98:	18fb      	adds	r3, r7, r3
    1d9a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1d9c:	2347      	movs	r3, #71	; 0x47
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	2200      	movs	r2, #0
    1da2:	701a      	strb	r2, [r3, #0]
    1da4:	e02c      	b.n	1e00 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1da6:	2347      	movs	r3, #71	; 0x47
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	781a      	ldrb	r2, [r3, #0]
    1dac:	230c      	movs	r3, #12
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	0092      	lsls	r2, r2, #2
    1db2:	58d3      	ldr	r3, [r2, r3]
    1db4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1db8:	2b00      	cmp	r3, #0
    1dba:	d109      	bne.n	1dd0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1dbe:	2347      	movs	r3, #71	; 0x47
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	1c10      	adds	r0, r2, #0
    1dc6:	1c19      	adds	r1, r3, #0
    1dc8:	4b6b      	ldr	r3, [pc, #428]	; (1f78 <_spi_set_config+0x23c>)
    1dca:	4798      	blx	r3
    1dcc:	1c03      	adds	r3, r0, #0
    1dce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dd2:	3301      	adds	r3, #1
    1dd4:	d00d      	beq.n	1df2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dd8:	b2da      	uxtb	r2, r3
    1dda:	231c      	movs	r3, #28
    1ddc:	18fb      	adds	r3, r7, r3
    1dde:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1de2:	0c1b      	lsrs	r3, r3, #16
    1de4:	b2da      	uxtb	r2, r3
    1de6:	231c      	movs	r3, #28
    1de8:	18fb      	adds	r3, r7, r3
    1dea:	1c10      	adds	r0, r2, #0
    1dec:	1c19      	adds	r1, r3, #0
    1dee:	4b63      	ldr	r3, [pc, #396]	; (1f7c <_spi_set_config+0x240>)
    1df0:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1df2:	2347      	movs	r3, #71	; 0x47
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	781a      	ldrb	r2, [r3, #0]
    1df8:	2347      	movs	r3, #71	; 0x47
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	3201      	adds	r2, #1
    1dfe:	701a      	strb	r2, [r3, #0]
    1e00:	2347      	movs	r3, #71	; 0x47
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	781b      	ldrb	r3, [r3, #0]
    1e06:	2b03      	cmp	r3, #3
    1e08:	d9cd      	bls.n	1da6 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1e0a:	683b      	ldr	r3, [r7, #0]
    1e0c:	781a      	ldrb	r2, [r3, #0]
    1e0e:	687b      	ldr	r3, [r7, #4]
    1e10:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    1e12:	683b      	ldr	r3, [r7, #0]
    1e14:	7c1a      	ldrb	r2, [r3, #16]
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1e1a:	683b      	ldr	r3, [r7, #0]
    1e1c:	7c9a      	ldrb	r2, [r3, #18]
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1e22:	683b      	ldr	r3, [r7, #0]
    1e24:	7d1a      	ldrb	r2, [r3, #20]
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1e2a:	230a      	movs	r3, #10
    1e2c:	18fb      	adds	r3, r7, r3
    1e2e:	2200      	movs	r2, #0
    1e30:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1e32:	2300      	movs	r3, #0
    1e34:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1e36:	2300      	movs	r3, #0
    1e38:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1e3a:	683b      	ldr	r3, [r7, #0]
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	2b01      	cmp	r3, #1
    1e40:	d12b      	bne.n	1e9a <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	1c18      	adds	r0, r3, #0
    1e48:	4b4d      	ldr	r3, [pc, #308]	; (1f80 <_spi_set_config+0x244>)
    1e4a:	4798      	blx	r3
    1e4c:	1c03      	adds	r3, r0, #0
    1e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e52:	3314      	adds	r3, #20
    1e54:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e58:	b2db      	uxtb	r3, r3
    1e5a:	1c18      	adds	r0, r3, #0
    1e5c:	4b49      	ldr	r3, [pc, #292]	; (1f84 <_spi_set_config+0x248>)
    1e5e:	4798      	blx	r3
    1e60:	1c03      	adds	r3, r0, #0
    1e62:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1e64:	683b      	ldr	r3, [r7, #0]
    1e66:	6999      	ldr	r1, [r3, #24]
    1e68:	2323      	movs	r3, #35	; 0x23
    1e6a:	18fc      	adds	r4, r7, r3
    1e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1e6e:	230a      	movs	r3, #10
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	1c08      	adds	r0, r1, #0
    1e74:	1c11      	adds	r1, r2, #0
    1e76:	1c1a      	adds	r2, r3, #0
    1e78:	4b43      	ldr	r3, [pc, #268]	; (1f88 <_spi_set_config+0x24c>)
    1e7a:	4798      	blx	r3
    1e7c:	1c03      	adds	r3, r0, #0
    1e7e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1e80:	2323      	movs	r3, #35	; 0x23
    1e82:	18fb      	adds	r3, r7, r3
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d001      	beq.n	1e8e <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1e8a:	2317      	movs	r3, #23
    1e8c:	e06d      	b.n	1f6a <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1e8e:	230a      	movs	r3, #10
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	881b      	ldrh	r3, [r3, #0]
    1e94:	b2da      	uxtb	r2, r3
    1e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1e98:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1e9a:	683b      	ldr	r3, [r7, #0]
    1e9c:	781b      	ldrb	r3, [r3, #0]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d11a      	bne.n	1ed8 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1ea2:	683b      	ldr	r3, [r7, #0]
    1ea4:	699b      	ldr	r3, [r3, #24]
    1ea6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1ea8:	683b      	ldr	r3, [r7, #0]
    1eaa:	8b9b      	ldrh	r3, [r3, #28]
    1eac:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1eb2:	683a      	ldr	r2, [r7, #0]
    1eb4:	7f92      	ldrb	r2, [r2, #30]
    1eb6:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1eb8:	683a      	ldr	r2, [r7, #0]
    1eba:	7fd2      	ldrb	r2, [r2, #31]
    1ebc:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1ebe:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1ec0:	431a      	orrs	r2, r3
    1ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ec4:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    1ec6:	683b      	ldr	r3, [r7, #0]
    1ec8:	2220      	movs	r2, #32
    1eca:	5c9b      	ldrb	r3, [r3, r2]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d003      	beq.n	1ed8 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ed2:	2240      	movs	r2, #64	; 0x40
    1ed4:	4313      	orrs	r3, r2
    1ed6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1ed8:	683b      	ldr	r3, [r7, #0]
    1eda:	685b      	ldr	r3, [r3, #4]
    1edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1ede:	4313      	orrs	r3, r2
    1ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1ee2:	683b      	ldr	r3, [r7, #0]
    1ee4:	689b      	ldr	r3, [r3, #8]
    1ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1ee8:	4313      	orrs	r3, r2
    1eea:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1eec:	683b      	ldr	r3, [r7, #0]
    1eee:	68db      	ldr	r3, [r3, #12]
    1ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1ef2:	4313      	orrs	r3, r2
    1ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	7c1b      	ldrb	r3, [r3, #16]
    1efa:	1c1a      	adds	r2, r3, #0
    1efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1efe:	4313      	orrs	r3, r2
    1f00:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1f02:	683b      	ldr	r3, [r7, #0]
    1f04:	7c5b      	ldrb	r3, [r3, #17]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d103      	bne.n	1f12 <_spi_set_config+0x1d6>
    1f0a:	4b20      	ldr	r3, [pc, #128]	; (1f8c <_spi_set_config+0x250>)
    1f0c:	4798      	blx	r3
    1f0e:	1e03      	subs	r3, r0, #0
    1f10:	d003      	beq.n	1f1a <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f14:	2280      	movs	r2, #128	; 0x80
    1f16:	4313      	orrs	r3, r2
    1f18:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1f1a:	683b      	ldr	r3, [r7, #0]
    1f1c:	7c9b      	ldrb	r3, [r3, #18]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d004      	beq.n	1f2c <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f24:	2280      	movs	r2, #128	; 0x80
    1f26:	0292      	lsls	r2, r2, #10
    1f28:	4313      	orrs	r3, r2
    1f2a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1f2c:	683b      	ldr	r3, [r7, #0]
    1f2e:	7cdb      	ldrb	r3, [r3, #19]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d004      	beq.n	1f3e <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f36:	2280      	movs	r2, #128	; 0x80
    1f38:	0092      	lsls	r2, r2, #2
    1f3a:	4313      	orrs	r3, r2
    1f3c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1f3e:	683b      	ldr	r3, [r7, #0]
    1f40:	7d1b      	ldrb	r3, [r3, #20]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d004      	beq.n	1f50 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f48:	2280      	movs	r2, #128	; 0x80
    1f4a:	0192      	lsls	r2, r2, #6
    1f4c:	4313      	orrs	r3, r2
    1f4e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f52:	681a      	ldr	r2, [r3, #0]
    1f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f56:	431a      	orrs	r2, r3
    1f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f5a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f5e:	685a      	ldr	r2, [r3, #4]
    1f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f62:	431a      	orrs	r2, r3
    1f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f66:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1f68:	2300      	movs	r3, #0
}
    1f6a:	1c18      	adds	r0, r3, #0
    1f6c:	46bd      	mov	sp, r7
    1f6e:	b013      	add	sp, #76	; 0x4c
    1f70:	bd90      	pop	{r4, r7, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00001a91 	.word	0x00001a91
    1f78:	000028dd 	.word	0x000028dd
    1f7c:	00003955 	.word	0x00003955
    1f80:	00002a99 	.word	0x00002a99
    1f84:	0000378d 	.word	0x0000378d
    1f88:	000027d5 	.word	0x000027d5
    1f8c:	00001bfd 	.word	0x00001bfd

00001f90 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1f90:	b590      	push	{r4, r7, lr}
    1f92:	b08b      	sub	sp, #44	; 0x2c
    1f94:	af00      	add	r7, sp, #0
    1f96:	60f8      	str	r0, [r7, #12]
    1f98:	60b9      	str	r1, [r7, #8]
    1f9a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	68ba      	ldr	r2, [r7, #8]
    1fa0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1fa2:	68fb      	ldr	r3, [r7, #12]
    1fa4:	681b      	ldr	r3, [r3, #0]
    1fa6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1fa8:	6a3b      	ldr	r3, [r7, #32]
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	2202      	movs	r2, #2
    1fae:	4013      	ands	r3, r2
    1fb0:	d001      	beq.n	1fb6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1fb2:	231c      	movs	r3, #28
    1fb4:	e0a5      	b.n	2102 <STACK_SIZE+0x102>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1fb6:	6a3b      	ldr	r3, [r7, #32]
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	2201      	movs	r2, #1
    1fbc:	4013      	ands	r3, r2
    1fbe:	d001      	beq.n	1fc4 <spi_init+0x34>
		return STATUS_BUSY;
    1fc0:	2305      	movs	r3, #5
    1fc2:	e09e      	b.n	2102 <STACK_SIZE+0x102>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1fc4:	68fb      	ldr	r3, [r7, #12]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	1c18      	adds	r0, r3, #0
    1fca:	4b50      	ldr	r3, [pc, #320]	; (210c <STACK_SIZE+0x10c>)
    1fcc:	4798      	blx	r3
    1fce:	1c03      	adds	r3, r0, #0
    1fd0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1fd2:	69fb      	ldr	r3, [r7, #28]
    1fd4:	3302      	adds	r3, #2
    1fd6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fd8:	69fb      	ldr	r3, [r7, #28]
    1fda:	3314      	adds	r3, #20
    1fdc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1fde:	69bb      	ldr	r3, [r7, #24]
    1fe0:	2201      	movs	r2, #1
    1fe2:	409a      	lsls	r2, r3
    1fe4:	1c13      	adds	r3, r2, #0
    1fe6:	2002      	movs	r0, #2
    1fe8:	1c19      	adds	r1, r3, #0
    1fea:	4b49      	ldr	r3, [pc, #292]	; (2110 <STACK_SIZE+0x110>)
    1fec:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1fee:	2310      	movs	r3, #16
    1ff0:	18fb      	adds	r3, r7, r3
    1ff2:	1c18      	adds	r0, r3, #0
    1ff4:	4b47      	ldr	r3, [pc, #284]	; (2114 <STACK_SIZE+0x114>)
    1ff6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	2224      	movs	r2, #36	; 0x24
    1ffc:	5c9a      	ldrb	r2, [r3, r2]
    1ffe:	2310      	movs	r3, #16
    2000:	18fb      	adds	r3, r7, r3
    2002:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2004:	697b      	ldr	r3, [r7, #20]
    2006:	b2da      	uxtb	r2, r3
    2008:	2310      	movs	r3, #16
    200a:	18fb      	adds	r3, r7, r3
    200c:	1c10      	adds	r0, r2, #0
    200e:	1c19      	adds	r1, r3, #0
    2010:	4b41      	ldr	r3, [pc, #260]	; (2118 <STACK_SIZE+0x118>)
    2012:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	b2db      	uxtb	r3, r3
    2018:	1c18      	adds	r0, r3, #0
    201a:	4b40      	ldr	r3, [pc, #256]	; (211c <STACK_SIZE+0x11c>)
    201c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	2224      	movs	r2, #36	; 0x24
    2022:	5c9b      	ldrb	r3, [r3, r2]
    2024:	1c18      	adds	r0, r3, #0
    2026:	2100      	movs	r1, #0
    2028:	4b3d      	ldr	r3, [pc, #244]	; (2120 <STACK_SIZE+0x120>)
    202a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	2b01      	cmp	r3, #1
    2032:	d105      	bne.n	2040 <STACK_SIZE+0x40>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2034:	6a3b      	ldr	r3, [r7, #32]
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	220c      	movs	r2, #12
    203a:	431a      	orrs	r2, r3
    203c:	6a3b      	ldr	r3, [r7, #32]
    203e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d105      	bne.n	2054 <STACK_SIZE+0x54>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    2048:	6a3b      	ldr	r3, [r7, #32]
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	2208      	movs	r2, #8
    204e:	431a      	orrs	r2, r3
    2050:	6a3b      	ldr	r3, [r7, #32]
    2052:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2054:	2327      	movs	r3, #39	; 0x27
    2056:	18fb      	adds	r3, r7, r3
    2058:	2200      	movs	r2, #0
    205a:	701a      	strb	r2, [r3, #0]
    205c:	e00f      	b.n	207e <STACK_SIZE+0x7e>
		module->callback[i]        = NULL;
    205e:	2327      	movs	r3, #39	; 0x27
    2060:	18fb      	adds	r3, r7, r3
    2062:	781b      	ldrb	r3, [r3, #0]
    2064:	68fa      	ldr	r2, [r7, #12]
    2066:	3302      	adds	r3, #2
    2068:	009b      	lsls	r3, r3, #2
    206a:	18d3      	adds	r3, r2, r3
    206c:	2200      	movs	r2, #0
    206e:	605a      	str	r2, [r3, #4]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2070:	2327      	movs	r3, #39	; 0x27
    2072:	18fb      	adds	r3, r7, r3
    2074:	781a      	ldrb	r2, [r3, #0]
    2076:	2327      	movs	r3, #39	; 0x27
    2078:	18fb      	adds	r3, r7, r3
    207a:	3201      	adds	r2, #1
    207c:	701a      	strb	r2, [r3, #0]
    207e:	2327      	movs	r3, #39	; 0x27
    2080:	18fb      	adds	r3, r7, r3
    2082:	781b      	ldrb	r3, [r3, #0]
    2084:	2b06      	cmp	r3, #6
    2086:	d9ea      	bls.n	205e <STACK_SIZE+0x5e>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    2088:	68fb      	ldr	r3, [r7, #12]
    208a:	2200      	movs	r2, #0
    208c:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    208e:	68fb      	ldr	r3, [r7, #12]
    2090:	2200      	movs	r2, #0
    2092:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2094:	68fb      	ldr	r3, [r7, #12]
    2096:	2200      	movs	r2, #0
    2098:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    209a:	68fb      	ldr	r3, [r7, #12]
    209c:	2200      	movs	r2, #0
    209e:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    20a0:	68fb      	ldr	r3, [r7, #12]
    20a2:	2236      	movs	r2, #54	; 0x36
    20a4:	2100      	movs	r1, #0
    20a6:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    20a8:	68fb      	ldr	r3, [r7, #12]
    20aa:	2237      	movs	r2, #55	; 0x37
    20ac:	2100      	movs	r1, #0
    20ae:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    20b0:	68fb      	ldr	r3, [r7, #12]
    20b2:	2238      	movs	r2, #56	; 0x38
    20b4:	2100      	movs	r1, #0
    20b6:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    20b8:	68fb      	ldr	r3, [r7, #12]
    20ba:	2203      	movs	r2, #3
    20bc:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    20be:	68fb      	ldr	r3, [r7, #12]
    20c0:	2200      	movs	r2, #0
    20c2:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    20c4:	68fb      	ldr	r3, [r7, #12]
    20c6:	681b      	ldr	r3, [r3, #0]
    20c8:	2213      	movs	r2, #19
    20ca:	18bc      	adds	r4, r7, r2
    20cc:	1c18      	adds	r0, r3, #0
    20ce:	4b0f      	ldr	r3, [pc, #60]	; (210c <STACK_SIZE+0x10c>)
    20d0:	4798      	blx	r3
    20d2:	1c03      	adds	r3, r0, #0
    20d4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    20d6:	2313      	movs	r3, #19
    20d8:	18fb      	adds	r3, r7, r3
    20da:	781a      	ldrb	r2, [r3, #0]
    20dc:	4b11      	ldr	r3, [pc, #68]	; (2124 <STACK_SIZE+0x124>)
    20de:	1c10      	adds	r0, r2, #0
    20e0:	1c19      	adds	r1, r3, #0
    20e2:	4b11      	ldr	r3, [pc, #68]	; (2128 <STACK_SIZE+0x128>)
    20e4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    20e6:	2313      	movs	r3, #19
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	781a      	ldrb	r2, [r3, #0]
    20ec:	4b0f      	ldr	r3, [pc, #60]	; (212c <STACK_SIZE+0x12c>)
    20ee:	0092      	lsls	r2, r2, #2
    20f0:	68f9      	ldr	r1, [r7, #12]
    20f2:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    20f4:	68fa      	ldr	r2, [r7, #12]
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	1c10      	adds	r0, r2, #0
    20fa:	1c19      	adds	r1, r3, #0
    20fc:	4b0c      	ldr	r3, [pc, #48]	; (2130 <STACK_SIZE+0x130>)
    20fe:	4798      	blx	r3
    2100:	1c03      	adds	r3, r0, #0
}
    2102:	1c18      	adds	r0, r3, #0
    2104:	46bd      	mov	sp, r7
    2106:	b00b      	add	sp, #44	; 0x2c
    2108:	bd90      	pop	{r4, r7, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	00002a99 	.word	0x00002a99
    2110:	00001ba1 	.word	0x00001ba1
    2114:	00001b8d 	.word	0x00001b8d
    2118:	00003669 	.word	0x00003669
    211c:	000036ad 	.word	0x000036ad
    2120:	00002851 	.word	0x00002851
    2124:	000024b9 	.word	0x000024b9
    2128:	00002af9 	.word	0x00002af9
    212c:	200000d0 	.word	0x200000d0
    2130:	00001d3d 	.word	0x00001d3d

00002134 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    2134:	b590      	push	{r4, r7, lr}
    2136:	b087      	sub	sp, #28
    2138:	af00      	add	r7, sp, #0
    213a:	60f8      	str	r0, [r7, #12]
    213c:	607a      	str	r2, [r7, #4]
    213e:	230a      	movs	r3, #10
    2140:	18fb      	adds	r3, r7, r3
    2142:	1c0a      	adds	r2, r1, #0
    2144:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    2146:	68fb      	ldr	r3, [r7, #12]
    2148:	79db      	ldrb	r3, [r3, #7]
    214a:	2201      	movs	r2, #1
    214c:	4053      	eors	r3, r2
    214e:	b2db      	uxtb	r3, r3
    2150:	2b00      	cmp	r3, #0
    2152:	d001      	beq.n	2158 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    2154:	231c      	movs	r3, #28
    2156:	e082      	b.n	225e <spi_transceive_wait+0x12a>
	}

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	2238      	movs	r2, #56	; 0x38
    215c:	5c9b      	ldrb	r3, [r3, r2]
    215e:	b2db      	uxtb	r3, r3
    2160:	2b05      	cmp	r3, #5
    2162:	d101      	bne.n	2168 <spi_transceive_wait+0x34>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2164:	2305      	movs	r3, #5
    2166:	e07a      	b.n	225e <spi_transceive_wait+0x12a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    2168:	2315      	movs	r3, #21
    216a:	18fb      	adds	r3, r7, r3
    216c:	2200      	movs	r2, #0
    216e:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	795b      	ldrb	r3, [r3, #5]
    2174:	2b00      	cmp	r3, #0
    2176:	d120      	bne.n	21ba <spi_transceive_wait+0x86>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2178:	2316      	movs	r3, #22
    217a:	18fb      	adds	r3, r7, r3
    217c:	2200      	movs	r2, #0
    217e:	801a      	strh	r2, [r3, #0]
    2180:	e015      	b.n	21ae <spi_transceive_wait+0x7a>
			if (spi_is_ready_to_write(module)) {
    2182:	68fb      	ldr	r3, [r7, #12]
    2184:	1c18      	adds	r0, r3, #0
    2186:	4b38      	ldr	r3, [pc, #224]	; (2268 <spi_transceive_wait+0x134>)
    2188:	4798      	blx	r3
    218a:	1e03      	subs	r3, r0, #0
    218c:	d000      	beq.n	2190 <spi_transceive_wait+0x5c>
				break;
    218e:	e014      	b.n	21ba <spi_transceive_wait+0x86>
			} else if (j == SPI_TIMEOUT) {
    2190:	2316      	movs	r3, #22
    2192:	18fb      	adds	r3, r7, r3
    2194:	881b      	ldrh	r3, [r3, #0]
    2196:	4a35      	ldr	r2, [pc, #212]	; (226c <spi_transceive_wait+0x138>)
    2198:	4293      	cmp	r3, r2
    219a:	d101      	bne.n	21a0 <spi_transceive_wait+0x6c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    219c:	2312      	movs	r3, #18
    219e:	e05e      	b.n	225e <spi_transceive_wait+0x12a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    21a0:	2316      	movs	r3, #22
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	881a      	ldrh	r2, [r3, #0]
    21a6:	2316      	movs	r3, #22
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	3201      	adds	r2, #1
    21ac:	801a      	strh	r2, [r3, #0]
    21ae:	2316      	movs	r3, #22
    21b0:	18fb      	adds	r3, r7, r3
    21b2:	881b      	ldrh	r3, [r3, #0]
    21b4:	4a2d      	ldr	r2, [pc, #180]	; (226c <spi_transceive_wait+0x138>)
    21b6:	4293      	cmp	r3, r2
    21b8:	d9e3      	bls.n	2182 <spi_transceive_wait+0x4e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	68fb      	ldr	r3, [r7, #12]
    21be:	1c18      	adds	r0, r3, #0
    21c0:	4b29      	ldr	r3, [pc, #164]	; (2268 <spi_transceive_wait+0x134>)
    21c2:	4798      	blx	r3
    21c4:	1c03      	adds	r3, r0, #0
    21c6:	1c1a      	adds	r2, r3, #0
    21c8:	2301      	movs	r3, #1
    21ca:	4053      	eors	r3, r2
    21cc:	b2db      	uxtb	r3, r3
    21ce:	2b00      	cmp	r3, #0
    21d0:	d1f4      	bne.n	21bc <spi_transceive_wait+0x88>
	}

	/* Write data */
	spi_write(module, tx_data);
    21d2:	68fa      	ldr	r2, [r7, #12]
    21d4:	230a      	movs	r3, #10
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	881b      	ldrh	r3, [r3, #0]
    21da:	1c10      	adds	r0, r2, #0
    21dc:	1c19      	adds	r1, r3, #0
    21de:	4b24      	ldr	r3, [pc, #144]	; (2270 <spi_transceive_wait+0x13c>)
    21e0:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	795b      	ldrb	r3, [r3, #5]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d120      	bne.n	222c <spi_transceive_wait+0xf8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    21ea:	2316      	movs	r3, #22
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	2200      	movs	r2, #0
    21f0:	801a      	strh	r2, [r3, #0]
    21f2:	e015      	b.n	2220 <spi_transceive_wait+0xec>
			if (spi_is_ready_to_read(module)) {
    21f4:	68fb      	ldr	r3, [r7, #12]
    21f6:	1c18      	adds	r0, r3, #0
    21f8:	4b1e      	ldr	r3, [pc, #120]	; (2274 <spi_transceive_wait+0x140>)
    21fa:	4798      	blx	r3
    21fc:	1e03      	subs	r3, r0, #0
    21fe:	d000      	beq.n	2202 <spi_transceive_wait+0xce>
				break;
    2200:	e014      	b.n	222c <spi_transceive_wait+0xf8>
			} else if (j == SPI_TIMEOUT) {
    2202:	2316      	movs	r3, #22
    2204:	18fb      	adds	r3, r7, r3
    2206:	881b      	ldrh	r3, [r3, #0]
    2208:	4a18      	ldr	r2, [pc, #96]	; (226c <spi_transceive_wait+0x138>)
    220a:	4293      	cmp	r3, r2
    220c:	d101      	bne.n	2212 <spi_transceive_wait+0xde>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    220e:	2312      	movs	r3, #18
    2210:	e025      	b.n	225e <spi_transceive_wait+0x12a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2212:	2316      	movs	r3, #22
    2214:	18fb      	adds	r3, r7, r3
    2216:	881a      	ldrh	r2, [r3, #0]
    2218:	2316      	movs	r3, #22
    221a:	18fb      	adds	r3, r7, r3
    221c:	3201      	adds	r2, #1
    221e:	801a      	strh	r2, [r3, #0]
    2220:	2316      	movs	r3, #22
    2222:	18fb      	adds	r3, r7, r3
    2224:	881b      	ldrh	r3, [r3, #0]
    2226:	4a11      	ldr	r2, [pc, #68]	; (226c <spi_transceive_wait+0x138>)
    2228:	4293      	cmp	r3, r2
    222a:	d9e3      	bls.n	21f4 <spi_transceive_wait+0xc0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    222c:	46c0      	nop			; (mov r8, r8)
    222e:	68fb      	ldr	r3, [r7, #12]
    2230:	1c18      	adds	r0, r3, #0
    2232:	4b10      	ldr	r3, [pc, #64]	; (2274 <spi_transceive_wait+0x140>)
    2234:	4798      	blx	r3
    2236:	1c03      	adds	r3, r0, #0
    2238:	1c1a      	adds	r2, r3, #0
    223a:	2301      	movs	r3, #1
    223c:	4053      	eors	r3, r2
    223e:	b2db      	uxtb	r3, r3
    2240:	2b00      	cmp	r3, #0
    2242:	d1f4      	bne.n	222e <spi_transceive_wait+0xfa>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    2244:	2315      	movs	r3, #21
    2246:	18fc      	adds	r4, r7, r3
    2248:	68fa      	ldr	r2, [r7, #12]
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	1c10      	adds	r0, r2, #0
    224e:	1c19      	adds	r1, r3, #0
    2250:	4b09      	ldr	r3, [pc, #36]	; (2278 <spi_transceive_wait+0x144>)
    2252:	4798      	blx	r3
    2254:	1c03      	adds	r3, r0, #0
    2256:	7023      	strb	r3, [r4, #0]

	return retval;
    2258:	2315      	movs	r3, #21
    225a:	18fb      	adds	r3, r7, r3
    225c:	781b      	ldrb	r3, [r3, #0]
}
    225e:	1c18      	adds	r0, r3, #0
    2260:	46bd      	mov	sp, r7
    2262:	b007      	add	sp, #28
    2264:	bd90      	pop	{r4, r7, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	00001c1d 	.word	0x00001c1d
    226c:	00002710 	.word	0x00002710
    2270:	00001c6d 	.word	0x00001c6d
    2274:	00001c45 	.word	0x00001c45
    2278:	00001cb5 	.word	0x00001cb5

0000227c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    227c:	b580      	push	{r7, lr}
    227e:	b086      	sub	sp, #24
    2280:	af00      	add	r7, sp, #0
    2282:	60f8      	str	r0, [r7, #12]
    2284:	60b9      	str	r1, [r7, #8]
    2286:	1dfb      	adds	r3, r7, #7
    2288:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    228a:	68fb      	ldr	r3, [r7, #12]
    228c:	795b      	ldrb	r3, [r3, #5]
    228e:	2b01      	cmp	r3, #1
    2290:	d001      	beq.n	2296 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    2292:	2315      	movs	r3, #21
    2294:	e05c      	b.n	2350 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2296:	68fb      	ldr	r3, [r7, #12]
    2298:	7a1b      	ldrb	r3, [r3, #8]
    229a:	2201      	movs	r2, #1
    229c:	4053      	eors	r3, r2
    229e:	b2db      	uxtb	r3, r3
    22a0:	2b00      	cmp	r3, #0
    22a2:	d054      	beq.n	234e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    22a4:	1dfb      	adds	r3, r7, #7
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d04a      	beq.n	2342 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    22ac:	68bb      	ldr	r3, [r7, #8]
    22ae:	785b      	ldrb	r3, [r3, #1]
    22b0:	2b00      	cmp	r3, #0
    22b2:	d03f      	beq.n	2334 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	1c18      	adds	r0, r3, #0
    22b8:	4b27      	ldr	r3, [pc, #156]	; (2358 <spi_select_slave+0xdc>)
    22ba:	4798      	blx	r3
    22bc:	1c03      	adds	r3, r0, #0
    22be:	1c1a      	adds	r2, r3, #0
    22c0:	2301      	movs	r3, #1
    22c2:	4053      	eors	r3, r2
    22c4:	b2db      	uxtb	r3, r3
    22c6:	2b00      	cmp	r3, #0
    22c8:	d007      	beq.n	22da <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    22ca:	68bb      	ldr	r3, [r7, #8]
    22cc:	781b      	ldrb	r3, [r3, #0]
    22ce:	1c18      	adds	r0, r3, #0
    22d0:	2101      	movs	r1, #1
    22d2:	4b22      	ldr	r3, [pc, #136]	; (235c <spi_select_slave+0xe0>)
    22d4:	4798      	blx	r3
					return STATUS_BUSY;
    22d6:	2305      	movs	r3, #5
    22d8:	e03a      	b.n	2350 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    22da:	68bb      	ldr	r3, [r7, #8]
    22dc:	781b      	ldrb	r3, [r3, #0]
    22de:	1c18      	adds	r0, r3, #0
    22e0:	2100      	movs	r1, #0
    22e2:	4b1e      	ldr	r3, [pc, #120]	; (235c <spi_select_slave+0xe0>)
    22e4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    22e6:	68bb      	ldr	r3, [r7, #8]
    22e8:	789b      	ldrb	r3, [r3, #2]
    22ea:	b29b      	uxth	r3, r3
    22ec:	68fa      	ldr	r2, [r7, #12]
    22ee:	1c10      	adds	r0, r2, #0
    22f0:	1c19      	adds	r1, r3, #0
    22f2:	4b1b      	ldr	r3, [pc, #108]	; (2360 <spi_select_slave+0xe4>)
    22f4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	79db      	ldrb	r3, [r3, #7]
    22fa:	2201      	movs	r2, #1
    22fc:	4053      	eors	r3, r2
    22fe:	b2db      	uxtb	r3, r3
    2300:	2b00      	cmp	r3, #0
    2302:	d024      	beq.n	234e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    2304:	46c0      	nop			; (mov r8, r8)
    2306:	68fb      	ldr	r3, [r7, #12]
    2308:	1c18      	adds	r0, r3, #0
    230a:	4b16      	ldr	r3, [pc, #88]	; (2364 <spi_select_slave+0xe8>)
    230c:	4798      	blx	r3
    230e:	1c03      	adds	r3, r0, #0
    2310:	1c1a      	adds	r2, r3, #0
    2312:	2301      	movs	r3, #1
    2314:	4053      	eors	r3, r2
    2316:	b2db      	uxtb	r3, r3
    2318:	2b00      	cmp	r3, #0
    231a:	d1f4      	bne.n	2306 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    231c:	2316      	movs	r3, #22
    231e:	18fb      	adds	r3, r7, r3
    2320:	2200      	movs	r2, #0
    2322:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    2324:	68fa      	ldr	r2, [r7, #12]
    2326:	2316      	movs	r3, #22
    2328:	18fb      	adds	r3, r7, r3
    232a:	1c10      	adds	r0, r2, #0
    232c:	1c19      	adds	r1, r3, #0
    232e:	4b0e      	ldr	r3, [pc, #56]	; (2368 <spi_select_slave+0xec>)
    2330:	4798      	blx	r3
    2332:	e00c      	b.n	234e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2334:	68bb      	ldr	r3, [r7, #8]
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	1c18      	adds	r0, r3, #0
    233a:	2100      	movs	r1, #0
    233c:	4b07      	ldr	r3, [pc, #28]	; (235c <spi_select_slave+0xe0>)
    233e:	4798      	blx	r3
    2340:	e005      	b.n	234e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    2342:	68bb      	ldr	r3, [r7, #8]
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	1c18      	adds	r0, r3, #0
    2348:	2101      	movs	r1, #1
    234a:	4b04      	ldr	r3, [pc, #16]	; (235c <spi_select_slave+0xe0>)
    234c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    234e:	2300      	movs	r3, #0
}
    2350:	1c18      	adds	r0, r3, #0
    2352:	46bd      	mov	sp, r7
    2354:	b006      	add	sp, #24
    2356:	bd80      	pop	{r7, pc}
    2358:	00001c1d 	.word	0x00001c1d
    235c:	00001b3d 	.word	0x00001b3d
    2360:	00001c6d 	.word	0x00001c6d
    2364:	00001c45 	.word	0x00001c45
    2368:	00001cb5 	.word	0x00001cb5

0000236c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	b2da      	uxtb	r2, r3
    2382:	230e      	movs	r3, #14
    2384:	18fb      	adds	r3, r7, r3
    2386:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    238c:	1c5a      	adds	r2, r3, #1
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	799b      	ldrb	r3, [r3, #6]
    2396:	2b01      	cmp	r3, #1
    2398:	d112      	bne.n	23c0 <_spi_write+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	b2db      	uxtb	r3, r3
    23a2:	021b      	lsls	r3, r3, #8
    23a4:	b29a      	uxth	r2, r3
    23a6:	230e      	movs	r3, #14
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	881b      	ldrh	r3, [r3, #0]
    23ac:	4313      	orrs	r3, r2
    23ae:	b29a      	uxth	r2, r3
    23b0:	230e      	movs	r3, #14
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    23ba:	1c5a      	adds	r2, r3, #1
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    23c0:	230e      	movs	r3, #14
    23c2:	18fb      	adds	r3, r7, r3
    23c4:	881b      	ldrh	r3, [r3, #0]
    23c6:	05db      	lsls	r3, r3, #23
    23c8:	0dda      	lsrs	r2, r3, #23
    23ca:	68bb      	ldr	r3, [r7, #8]
    23cc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    23d2:	b29b      	uxth	r3, r3
    23d4:	3b01      	subs	r3, #1
    23d6:	b29a      	uxth	r2, r3
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	869a      	strh	r2, [r3, #52]	; 0x34
}
    23dc:	46bd      	mov	sp, r7
    23de:	b004      	add	sp, #16
    23e0:	bd80      	pop	{r7, pc}
    23e2:	46c0      	nop			; (mov r8, r8)

000023e4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b084      	sub	sp, #16
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    23f2:	4b07      	ldr	r3, [pc, #28]	; (2410 <_spi_write_dummy+0x2c>)
    23f4:	881b      	ldrh	r3, [r3, #0]
    23f6:	1c1a      	adds	r2, r3, #0
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2400:	b29b      	uxth	r3, r3
    2402:	3b01      	subs	r3, #1
    2404:	b29a      	uxth	r2, r3
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	865a      	strh	r2, [r3, #50]	; 0x32
}
    240a:	46bd      	mov	sp, r7
    240c:	b004      	add	sp, #16
    240e:	bd80      	pop	{r7, pc}
    2410:	200000cc 	.word	0x200000cc

00002414 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    2414:	b580      	push	{r7, lr}
    2416:	b084      	sub	sp, #16
    2418:	af00      	add	r7, sp, #0
    241a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    2422:	230a      	movs	r3, #10
    2424:	18fb      	adds	r3, r7, r3
    2426:	2200      	movs	r2, #0
    2428:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    242a:	68fb      	ldr	r3, [r7, #12]
    242c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    242e:	230a      	movs	r3, #10
    2430:	18fb      	adds	r3, r7, r3
    2432:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2438:	b29b      	uxth	r3, r3
    243a:	3b01      	subs	r3, #1
    243c:	b29a      	uxth	r2, r3
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2442:	46bd      	mov	sp, r7
    2444:	b004      	add	sp, #16
    2446:	bd80      	pop	{r7, pc}

00002448 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    2448:	b580      	push	{r7, lr}
    244a:	b084      	sub	sp, #16
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2456:	68fb      	ldr	r3, [r7, #12]
    2458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    245a:	b29a      	uxth	r2, r3
    245c:	230a      	movs	r3, #10
    245e:	18fb      	adds	r3, r7, r3
    2460:	05d2      	lsls	r2, r2, #23
    2462:	0dd2      	lsrs	r2, r2, #23
    2464:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    246a:	220a      	movs	r2, #10
    246c:	18ba      	adds	r2, r7, r2
    246e:	8812      	ldrh	r2, [r2, #0]
    2470:	b2d2      	uxtb	r2, r2
    2472:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2478:	1c5a      	adds	r2, r3, #1
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	799b      	ldrb	r3, [r3, #6]
    2482:	2b01      	cmp	r3, #1
    2484:	d10d      	bne.n	24a2 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    248a:	220a      	movs	r2, #10
    248c:	18ba      	adds	r2, r7, r2
    248e:	8812      	ldrh	r2, [r2, #0]
    2490:	0a12      	lsrs	r2, r2, #8
    2492:	b292      	uxth	r2, r2
    2494:	b2d2      	uxtb	r2, r2
    2496:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    249c:	1c5a      	adds	r2, r3, #1
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    24a6:	b29b      	uxth	r3, r3
    24a8:	3b01      	subs	r3, #1
    24aa:	b29a      	uxth	r2, r3
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	861a      	strh	r2, [r3, #48]	; 0x30
}
    24b0:	46bd      	mov	sp, r7
    24b2:	b004      	add	sp, #16
    24b4:	bd80      	pop	{r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)

000024b8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b086      	sub	sp, #24
    24bc:	af00      	add	r7, sp, #0
    24be:	1c02      	adds	r2, r0, #0
    24c0:	1dfb      	adds	r3, r7, #7
    24c2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    24c4:	1dfb      	adds	r3, r7, #7
    24c6:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    24c8:	4bb8      	ldr	r3, [pc, #736]	; (27ac <_spi_interrupt_handler+0x2f4>)
    24ca:	0092      	lsls	r2, r2, #2
    24cc:	58d3      	ldr	r3, [r2, r3]
    24ce:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    24d0:	697b      	ldr	r3, [r7, #20]
    24d2:	681b      	ldr	r3, [r3, #0]
    24d4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    24d6:	697b      	ldr	r3, [r7, #20]
    24d8:	2237      	movs	r2, #55	; 0x37
    24da:	5c9a      	ldrb	r2, [r3, r2]
    24dc:	697b      	ldr	r3, [r7, #20]
    24de:	2136      	movs	r1, #54	; 0x36
    24e0:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    24e2:	230f      	movs	r3, #15
    24e4:	18fb      	adds	r3, r7, r3
    24e6:	400a      	ands	r2, r1
    24e8:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    24ea:	693b      	ldr	r3, [r7, #16]
    24ec:	7e1b      	ldrb	r3, [r3, #24]
    24ee:	b2da      	uxtb	r2, r3
    24f0:	230c      	movs	r3, #12
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    24f6:	693b      	ldr	r3, [r7, #16]
    24f8:	7d9b      	ldrb	r3, [r3, #22]
    24fa:	b2db      	uxtb	r3, r3
    24fc:	b29a      	uxth	r2, r3
    24fe:	230c      	movs	r3, #12
    2500:	18fb      	adds	r3, r7, r3
    2502:	210c      	movs	r1, #12
    2504:	1879      	adds	r1, r7, r1
    2506:	8809      	ldrh	r1, [r1, #0]
    2508:	400a      	ands	r2, r1
    250a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    250c:	230c      	movs	r3, #12
    250e:	18fb      	adds	r3, r7, r3
    2510:	881b      	ldrh	r3, [r3, #0]
    2512:	2201      	movs	r2, #1
    2514:	4013      	ands	r3, r2
    2516:	d041      	beq.n	259c <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2518:	697b      	ldr	r3, [r7, #20]
    251a:	795b      	ldrb	r3, [r3, #5]
    251c:	2b01      	cmp	r3, #1
    251e:	d110      	bne.n	2542 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    2520:	697b      	ldr	r3, [r7, #20]
    2522:	7a5b      	ldrb	r3, [r3, #9]
    2524:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2526:	2b00      	cmp	r3, #0
    2528:	d10b      	bne.n	2542 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	1c18      	adds	r0, r3, #0
    252e:	4ba0      	ldr	r3, [pc, #640]	; (27b0 <_spi_interrupt_handler+0x2f8>)
    2530:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    2532:	697b      	ldr	r3, [r7, #20]
    2534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2536:	b29b      	uxth	r3, r3
    2538:	2b00      	cmp	r3, #0
    253a:	d102      	bne.n	2542 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    253c:	693b      	ldr	r3, [r7, #16]
    253e:	2201      	movs	r2, #1
    2540:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2542:	697b      	ldr	r3, [r7, #20]
    2544:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    2546:	2b01      	cmp	r3, #1
    2548:	d104      	bne.n	2554 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    254a:	697b      	ldr	r3, [r7, #20]
    254c:	7a5b      	ldrb	r3, [r3, #9]
    254e:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2550:	2b00      	cmp	r3, #0
    2552:	d108      	bne.n	2566 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2554:	697b      	ldr	r3, [r7, #20]
    2556:	795b      	ldrb	r3, [r3, #5]
    2558:	2b00      	cmp	r3, #0
    255a:	d11f      	bne.n	259c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    255c:	697b      	ldr	r3, [r7, #20]
    255e:	7a5b      	ldrb	r3, [r3, #9]
    2560:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2562:	2b00      	cmp	r3, #0
    2564:	d01a      	beq.n	259c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    2566:	697b      	ldr	r3, [r7, #20]
    2568:	1c18      	adds	r0, r3, #0
    256a:	4b92      	ldr	r3, [pc, #584]	; (27b4 <_spi_interrupt_handler+0x2fc>)
    256c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    256e:	697b      	ldr	r3, [r7, #20]
    2570:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2572:	b29b      	uxth	r3, r3
    2574:	2b00      	cmp	r3, #0
    2576:	d111      	bne.n	259c <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2578:	693b      	ldr	r3, [r7, #16]
    257a:	2201      	movs	r2, #1
    257c:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    257e:	697b      	ldr	r3, [r7, #20]
    2580:	7a5b      	ldrb	r3, [r3, #9]
    2582:	b2db      	uxtb	r3, r3
    2584:	2b01      	cmp	r3, #1
    2586:	d109      	bne.n	259c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    2588:	697b      	ldr	r3, [r7, #20]
    258a:	79db      	ldrb	r3, [r3, #7]
    258c:	2201      	movs	r2, #1
    258e:	4053      	eors	r3, r2
    2590:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    2592:	2b00      	cmp	r3, #0
    2594:	d002      	beq.n	259c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2596:	693b      	ldr	r3, [r7, #16]
    2598:	2202      	movs	r2, #2
    259a:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    259c:	230c      	movs	r3, #12
    259e:	18fb      	adds	r3, r7, r3
    25a0:	881b      	ldrh	r3, [r3, #0]
    25a2:	2204      	movs	r2, #4
    25a4:	4013      	ands	r3, r2
    25a6:	d100      	bne.n	25aa <_spi_interrupt_handler+0xf2>
    25a8:	e07e      	b.n	26a8 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25aa:	693b      	ldr	r3, [r7, #16]
    25ac:	8b5b      	ldrh	r3, [r3, #26]
    25ae:	b29b      	uxth	r3, r3
    25b0:	1c1a      	adds	r2, r3, #0
    25b2:	2304      	movs	r3, #4
    25b4:	4013      	ands	r3, r2
    25b6:	d022      	beq.n	25fe <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    25b8:	697b      	ldr	r3, [r7, #20]
    25ba:	7a5b      	ldrb	r3, [r3, #9]
    25bc:	b2db      	uxtb	r3, r3
    25be:	2b01      	cmp	r3, #1
    25c0:	d014      	beq.n	25ec <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    25c2:	697b      	ldr	r3, [r7, #20]
    25c4:	2238      	movs	r2, #56	; 0x38
    25c6:	211e      	movs	r1, #30
    25c8:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    25ca:	697b      	ldr	r3, [r7, #20]
    25cc:	2203      	movs	r2, #3
    25ce:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    25d0:	693b      	ldr	r3, [r7, #16]
    25d2:	2205      	movs	r2, #5
    25d4:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    25d6:	230f      	movs	r3, #15
    25d8:	18fb      	adds	r3, r7, r3
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	2208      	movs	r2, #8
    25de:	4013      	ands	r3, r2
    25e0:	d004      	beq.n	25ec <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    25e2:	697b      	ldr	r3, [r7, #20]
    25e4:	699b      	ldr	r3, [r3, #24]
    25e6:	697a      	ldr	r2, [r7, #20]
    25e8:	1c10      	adds	r0, r2, #0
    25ea:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    25ec:	693b      	ldr	r3, [r7, #16]
    25ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25f0:	230a      	movs	r3, #10
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25f6:	693b      	ldr	r3, [r7, #16]
    25f8:	2204      	movs	r2, #4
    25fa:	835a      	strh	r2, [r3, #26]
    25fc:	e054      	b.n	26a8 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    25fe:	697b      	ldr	r3, [r7, #20]
    2600:	7a5b      	ldrb	r3, [r3, #9]
    2602:	b2db      	uxtb	r3, r3
    2604:	2b01      	cmp	r3, #1
    2606:	d11e      	bne.n	2646 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    2608:	697b      	ldr	r3, [r7, #20]
    260a:	1c18      	adds	r0, r3, #0
    260c:	4b6a      	ldr	r3, [pc, #424]	; (27b8 <_spi_interrupt_handler+0x300>)
    260e:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    2610:	697b      	ldr	r3, [r7, #20]
    2612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2614:	b29b      	uxth	r3, r3
    2616:	2b00      	cmp	r3, #0
    2618:	d146      	bne.n	26a8 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    261a:	693b      	ldr	r3, [r7, #16]
    261c:	2204      	movs	r2, #4
    261e:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    2620:	697b      	ldr	r3, [r7, #20]
    2622:	2238      	movs	r2, #56	; 0x38
    2624:	2100      	movs	r1, #0
    2626:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    2628:	697b      	ldr	r3, [r7, #20]
    262a:	2203      	movs	r2, #3
    262c:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    262e:	230f      	movs	r3, #15
    2630:	18fb      	adds	r3, r7, r3
    2632:	781b      	ldrb	r3, [r3, #0]
    2634:	2201      	movs	r2, #1
    2636:	4013      	ands	r3, r2
    2638:	d036      	beq.n	26a8 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    263a:	697b      	ldr	r3, [r7, #20]
    263c:	68db      	ldr	r3, [r3, #12]
    263e:	697a      	ldr	r2, [r7, #20]
    2640:	1c10      	adds	r0, r2, #0
    2642:	4798      	blx	r3
    2644:	e030      	b.n	26a8 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    2646:	697b      	ldr	r3, [r7, #20]
    2648:	1c18      	adds	r0, r3, #0
    264a:	4b5c      	ldr	r3, [pc, #368]	; (27bc <_spi_interrupt_handler+0x304>)
    264c:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    264e:	697b      	ldr	r3, [r7, #20]
    2650:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2652:	b29b      	uxth	r3, r3
    2654:	2b00      	cmp	r3, #0
    2656:	d127      	bne.n	26a8 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    2658:	697b      	ldr	r3, [r7, #20]
    265a:	2238      	movs	r2, #56	; 0x38
    265c:	2100      	movs	r1, #0
    265e:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2660:	693b      	ldr	r3, [r7, #16]
    2662:	2204      	movs	r2, #4
    2664:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2666:	697b      	ldr	r3, [r7, #20]
    2668:	7a5b      	ldrb	r3, [r3, #9]
    266a:	b2db      	uxtb	r3, r3
    266c:	2b02      	cmp	r3, #2
    266e:	d10b      	bne.n	2688 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2670:	230f      	movs	r3, #15
    2672:	18fb      	adds	r3, r7, r3
    2674:	781b      	ldrb	r3, [r3, #0]
    2676:	2204      	movs	r2, #4
    2678:	4013      	ands	r3, r2
    267a:	d015      	beq.n	26a8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    267c:	697b      	ldr	r3, [r7, #20]
    267e:	695b      	ldr	r3, [r3, #20]
    2680:	697a      	ldr	r2, [r7, #20]
    2682:	1c10      	adds	r0, r2, #0
    2684:	4798      	blx	r3
    2686:	e00f      	b.n	26a8 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    2688:	697b      	ldr	r3, [r7, #20]
    268a:	7a5b      	ldrb	r3, [r3, #9]
    268c:	b2db      	uxtb	r3, r3
    268e:	2b00      	cmp	r3, #0
    2690:	d10a      	bne.n	26a8 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2692:	230f      	movs	r3, #15
    2694:	18fb      	adds	r3, r7, r3
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	2202      	movs	r2, #2
    269a:	4013      	ands	r3, r2
    269c:	d004      	beq.n	26a8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    269e:	697b      	ldr	r3, [r7, #20]
    26a0:	691b      	ldr	r3, [r3, #16]
    26a2:	697a      	ldr	r2, [r7, #20]
    26a4:	1c10      	adds	r0, r2, #0
    26a6:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    26a8:	230c      	movs	r3, #12
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	881b      	ldrh	r3, [r3, #0]
    26ae:	2202      	movs	r2, #2
    26b0:	4013      	ands	r3, r2
    26b2:	d046      	beq.n	2742 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    26b4:	697b      	ldr	r3, [r7, #20]
    26b6:	795b      	ldrb	r3, [r3, #5]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d11d      	bne.n	26f8 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    26bc:	693b      	ldr	r3, [r7, #16]
    26be:	2207      	movs	r2, #7
    26c0:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    26c2:	693b      	ldr	r3, [r7, #16]
    26c4:	2202      	movs	r2, #2
    26c6:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    26c8:	697b      	ldr	r3, [r7, #20]
    26ca:	2203      	movs	r2, #3
    26cc:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    26ce:	697b      	ldr	r3, [r7, #20]
    26d0:	2200      	movs	r2, #0
    26d2:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    26d4:	697b      	ldr	r3, [r7, #20]
    26d6:	2200      	movs	r2, #0
    26d8:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    26da:	697b      	ldr	r3, [r7, #20]
    26dc:	2238      	movs	r2, #56	; 0x38
    26de:	2100      	movs	r1, #0
    26e0:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    26e2:	230f      	movs	r3, #15
    26e4:	18fb      	adds	r3, r7, r3
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	2210      	movs	r2, #16
    26ea:	4013      	ands	r3, r2
    26ec:	d004      	beq.n	26f8 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    26ee:	697b      	ldr	r3, [r7, #20]
    26f0:	69db      	ldr	r3, [r3, #28]
    26f2:	697a      	ldr	r2, [r7, #20]
    26f4:	1c10      	adds	r0, r2, #0
    26f6:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    26f8:	697b      	ldr	r3, [r7, #20]
    26fa:	795b      	ldrb	r3, [r3, #5]
    26fc:	2b01      	cmp	r3, #1
    26fe:	d120      	bne.n	2742 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2700:	697b      	ldr	r3, [r7, #20]
    2702:	7a5b      	ldrb	r3, [r3, #9]
    2704:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2706:	2b01      	cmp	r3, #1
    2708:	d11b      	bne.n	2742 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    270a:	697b      	ldr	r3, [r7, #20]
    270c:	79db      	ldrb	r3, [r3, #7]
    270e:	2201      	movs	r2, #1
    2710:	4053      	eors	r3, r2
    2712:	b2db      	uxtb	r3, r3
    2714:	2b00      	cmp	r3, #0
    2716:	d014      	beq.n	2742 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2718:	693b      	ldr	r3, [r7, #16]
    271a:	2202      	movs	r2, #2
    271c:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    271e:	697b      	ldr	r3, [r7, #20]
    2720:	2203      	movs	r2, #3
    2722:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    2724:	697b      	ldr	r3, [r7, #20]
    2726:	2238      	movs	r2, #56	; 0x38
    2728:	2100      	movs	r1, #0
    272a:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    272c:	230f      	movs	r3, #15
    272e:	18fb      	adds	r3, r7, r3
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	2201      	movs	r2, #1
    2734:	4013      	ands	r3, r2
    2736:	d004      	beq.n	2742 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2738:	697b      	ldr	r3, [r7, #20]
    273a:	68db      	ldr	r3, [r3, #12]
    273c:	697a      	ldr	r2, [r7, #20]
    273e:	1c10      	adds	r0, r2, #0
    2740:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    2742:	230c      	movs	r3, #12
    2744:	18fb      	adds	r3, r7, r3
    2746:	881b      	ldrh	r3, [r3, #0]
    2748:	2208      	movs	r2, #8
    274a:	4013      	ands	r3, r2
    274c:	d014      	beq.n	2778 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    274e:	697b      	ldr	r3, [r7, #20]
    2750:	795b      	ldrb	r3, [r3, #5]
    2752:	2b00      	cmp	r3, #0
    2754:	d110      	bne.n	2778 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2756:	693b      	ldr	r3, [r7, #16]
    2758:	2208      	movs	r2, #8
    275a:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    275c:	693b      	ldr	r3, [r7, #16]
    275e:	2208      	movs	r2, #8
    2760:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    2762:	230f      	movs	r3, #15
    2764:	18fb      	adds	r3, r7, r3
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	2220      	movs	r2, #32
    276a:	4013      	ands	r3, r2
    276c:	d004      	beq.n	2778 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    276e:	697b      	ldr	r3, [r7, #20]
    2770:	6a1b      	ldr	r3, [r3, #32]
    2772:	697a      	ldr	r2, [r7, #20]
    2774:	1c10      	adds	r0, r2, #0
    2776:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2778:	230c      	movs	r3, #12
    277a:	18fb      	adds	r3, r7, r3
    277c:	881b      	ldrh	r3, [r3, #0]
    277e:	2280      	movs	r2, #128	; 0x80
    2780:	4013      	ands	r3, r2
    2782:	d010      	beq.n	27a6 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2784:	693b      	ldr	r3, [r7, #16]
    2786:	2280      	movs	r2, #128	; 0x80
    2788:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    278a:	693b      	ldr	r3, [r7, #16]
    278c:	2280      	movs	r2, #128	; 0x80
    278e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2790:	230f      	movs	r3, #15
    2792:	18fb      	adds	r3, r7, r3
    2794:	781b      	ldrb	r3, [r3, #0]
    2796:	2240      	movs	r2, #64	; 0x40
    2798:	4013      	ands	r3, r2
    279a:	d004      	beq.n	27a6 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    279c:	697b      	ldr	r3, [r7, #20]
    279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27a0:	697a      	ldr	r2, [r7, #20]
    27a2:	1c10      	adds	r0, r2, #0
    27a4:	4798      	blx	r3
		}
	}
#  endif
}
    27a6:	46bd      	mov	sp, r7
    27a8:	b006      	add	sp, #24
    27aa:	bd80      	pop	{r7, pc}
    27ac:	200000d0 	.word	0x200000d0
    27b0:	000023e5 	.word	0x000023e5
    27b4:	0000236d 	.word	0x0000236d
    27b8:	00002415 	.word	0x00002415
    27bc:	00002449 	.word	0x00002449

000027c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	b082      	sub	sp, #8
    27c4:	af00      	add	r7, sp, #0
    27c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	2200      	movs	r2, #0
    27cc:	701a      	strb	r2, [r3, #0]
}
    27ce:	46bd      	mov	sp, r7
    27d0:	b002      	add	sp, #8
    27d2:	bd80      	pop	{r7, pc}

000027d4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b086      	sub	sp, #24
    27d8:	af00      	add	r7, sp, #0
    27da:	60f8      	str	r0, [r7, #12]
    27dc:	60b9      	str	r1, [r7, #8]
    27de:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    27e0:	2316      	movs	r3, #22
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	2200      	movs	r2, #0
    27e6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    27e8:	68bb      	ldr	r3, [r7, #8]
    27ea:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    27ec:	68bb      	ldr	r3, [r7, #8]
    27ee:	085a      	lsrs	r2, r3, #1
    27f0:	68fb      	ldr	r3, [r7, #12]
    27f2:	429a      	cmp	r2, r3
    27f4:	d201      	bcs.n	27fa <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27f6:	2340      	movs	r3, #64	; 0x40
    27f8:	e026      	b.n	2848 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    27fa:	68bb      	ldr	r3, [r7, #8]
    27fc:	085b      	lsrs	r3, r3, #1
    27fe:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    2800:	e00a      	b.n	2818 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2802:	693a      	ldr	r2, [r7, #16]
    2804:	68fb      	ldr	r3, [r7, #12]
    2806:	1ad3      	subs	r3, r2, r3
    2808:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    280a:	2316      	movs	r3, #22
    280c:	18fb      	adds	r3, r7, r3
    280e:	881a      	ldrh	r2, [r3, #0]
    2810:	2316      	movs	r3, #22
    2812:	18fb      	adds	r3, r7, r3
    2814:	3201      	adds	r2, #1
    2816:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    2818:	693a      	ldr	r2, [r7, #16]
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	429a      	cmp	r2, r3
    281e:	d2f0      	bcs.n	2802 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    2820:	2316      	movs	r3, #22
    2822:	18fb      	adds	r3, r7, r3
    2824:	2216      	movs	r2, #22
    2826:	18ba      	adds	r2, r7, r2
    2828:	8812      	ldrh	r2, [r2, #0]
    282a:	3a01      	subs	r2, #1
    282c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    282e:	2316      	movs	r3, #22
    2830:	18fb      	adds	r3, r7, r3
    2832:	881b      	ldrh	r3, [r3, #0]
    2834:	2bff      	cmp	r3, #255	; 0xff
    2836:	d901      	bls.n	283c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2838:	2340      	movs	r3, #64	; 0x40
    283a:	e005      	b.n	2848 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	2216      	movs	r2, #22
    2840:	18ba      	adds	r2, r7, r2
    2842:	8812      	ldrh	r2, [r2, #0]
    2844:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2846:	2300      	movs	r3, #0
	}
}
    2848:	1c18      	adds	r0, r3, #0
    284a:	46bd      	mov	sp, r7
    284c:	b006      	add	sp, #24
    284e:	bd80      	pop	{r7, pc}

00002850 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2850:	b580      	push	{r7, lr}
    2852:	b084      	sub	sp, #16
    2854:	af00      	add	r7, sp, #0
    2856:	1c02      	adds	r2, r0, #0
    2858:	1dfb      	adds	r3, r7, #7
    285a:	701a      	strb	r2, [r3, #0]
    285c:	1dbb      	adds	r3, r7, #6
    285e:	1c0a      	adds	r2, r1, #0
    2860:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2862:	4b1a      	ldr	r3, [pc, #104]	; (28cc <sercom_set_gclk_generator+0x7c>)
    2864:	781b      	ldrb	r3, [r3, #0]
    2866:	2201      	movs	r2, #1
    2868:	4053      	eors	r3, r2
    286a:	b2db      	uxtb	r3, r3
    286c:	2b00      	cmp	r3, #0
    286e:	d103      	bne.n	2878 <sercom_set_gclk_generator+0x28>
    2870:	1dbb      	adds	r3, r7, #6
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d01b      	beq.n	28b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2878:	230c      	movs	r3, #12
    287a:	18fb      	adds	r3, r7, r3
    287c:	1c18      	adds	r0, r3, #0
    287e:	4b14      	ldr	r3, [pc, #80]	; (28d0 <sercom_set_gclk_generator+0x80>)
    2880:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2882:	230c      	movs	r3, #12
    2884:	18fb      	adds	r3, r7, r3
    2886:	1dfa      	adds	r2, r7, #7
    2888:	7812      	ldrb	r2, [r2, #0]
    288a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    288c:	230c      	movs	r3, #12
    288e:	18fb      	adds	r3, r7, r3
    2890:	2013      	movs	r0, #19
    2892:	1c19      	adds	r1, r3, #0
    2894:	4b0f      	ldr	r3, [pc, #60]	; (28d4 <sercom_set_gclk_generator+0x84>)
    2896:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2898:	2013      	movs	r0, #19
    289a:	4b0f      	ldr	r3, [pc, #60]	; (28d8 <sercom_set_gclk_generator+0x88>)
    289c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    289e:	4b0b      	ldr	r3, [pc, #44]	; (28cc <sercom_set_gclk_generator+0x7c>)
    28a0:	1dfa      	adds	r2, r7, #7
    28a2:	7812      	ldrb	r2, [r2, #0]
    28a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    28a6:	4b09      	ldr	r3, [pc, #36]	; (28cc <sercom_set_gclk_generator+0x7c>)
    28a8:	2201      	movs	r2, #1
    28aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    28ac:	2300      	movs	r3, #0
    28ae:	e008      	b.n	28c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    28b0:	4b06      	ldr	r3, [pc, #24]	; (28cc <sercom_set_gclk_generator+0x7c>)
    28b2:	785b      	ldrb	r3, [r3, #1]
    28b4:	1dfa      	adds	r2, r7, #7
    28b6:	7812      	ldrb	r2, [r2, #0]
    28b8:	429a      	cmp	r2, r3
    28ba:	d101      	bne.n	28c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    28bc:	2300      	movs	r3, #0
    28be:	e000      	b.n	28c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    28c0:	231d      	movs	r3, #29
}
    28c2:	1c18      	adds	r0, r3, #0
    28c4:	46bd      	mov	sp, r7
    28c6:	b004      	add	sp, #16
    28c8:	bd80      	pop	{r7, pc}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	20000024 	.word	0x20000024
    28d0:	000027c1 	.word	0x000027c1
    28d4:	00003669 	.word	0x00003669
    28d8:	000036ad 	.word	0x000036ad

000028dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b082      	sub	sp, #8
    28e0:	af00      	add	r7, sp, #0
    28e2:	6078      	str	r0, [r7, #4]
    28e4:	1c0a      	adds	r2, r1, #0
    28e6:	1cfb      	adds	r3, r7, #3
    28e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	4a4d      	ldr	r2, [pc, #308]	; (2a24 <_sercom_get_default_pad+0x148>)
    28ee:	4293      	cmp	r3, r2
    28f0:	d03f      	beq.n	2972 <_sercom_get_default_pad+0x96>
    28f2:	4a4c      	ldr	r2, [pc, #304]	; (2a24 <_sercom_get_default_pad+0x148>)
    28f4:	4293      	cmp	r3, r2
    28f6:	d806      	bhi.n	2906 <_sercom_get_default_pad+0x2a>
    28f8:	4a4b      	ldr	r2, [pc, #300]	; (2a28 <_sercom_get_default_pad+0x14c>)
    28fa:	4293      	cmp	r3, r2
    28fc:	d00f      	beq.n	291e <_sercom_get_default_pad+0x42>
    28fe:	4a4b      	ldr	r2, [pc, #300]	; (2a2c <_sercom_get_default_pad+0x150>)
    2900:	4293      	cmp	r3, r2
    2902:	d021      	beq.n	2948 <_sercom_get_default_pad+0x6c>
    2904:	e089      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2906:	4a4a      	ldr	r2, [pc, #296]	; (2a30 <_sercom_get_default_pad+0x154>)
    2908:	4293      	cmp	r3, r2
    290a:	d100      	bne.n	290e <_sercom_get_default_pad+0x32>
    290c:	e05b      	b.n	29c6 <_sercom_get_default_pad+0xea>
    290e:	4a49      	ldr	r2, [pc, #292]	; (2a34 <_sercom_get_default_pad+0x158>)
    2910:	4293      	cmp	r3, r2
    2912:	d100      	bne.n	2916 <_sercom_get_default_pad+0x3a>
    2914:	e06c      	b.n	29f0 <_sercom_get_default_pad+0x114>
    2916:	4a48      	ldr	r2, [pc, #288]	; (2a38 <_sercom_get_default_pad+0x15c>)
    2918:	4293      	cmp	r3, r2
    291a:	d03f      	beq.n	299c <_sercom_get_default_pad+0xc0>
    291c:	e07d      	b.n	2a1a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    291e:	1cfb      	adds	r3, r7, #3
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	2b01      	cmp	r3, #1
    2924:	d00a      	beq.n	293c <_sercom_get_default_pad+0x60>
    2926:	dc02      	bgt.n	292e <_sercom_get_default_pad+0x52>
    2928:	2b00      	cmp	r3, #0
    292a:	d005      	beq.n	2938 <_sercom_get_default_pad+0x5c>
    292c:	e075      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    292e:	2b02      	cmp	r3, #2
    2930:	d006      	beq.n	2940 <_sercom_get_default_pad+0x64>
    2932:	2b03      	cmp	r3, #3
    2934:	d006      	beq.n	2944 <_sercom_get_default_pad+0x68>
    2936:	e070      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2938:	4b40      	ldr	r3, [pc, #256]	; (2a3c <_sercom_get_default_pad+0x160>)
    293a:	e06f      	b.n	2a1c <_sercom_get_default_pad+0x140>
    293c:	4b40      	ldr	r3, [pc, #256]	; (2a40 <_sercom_get_default_pad+0x164>)
    293e:	e06d      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2940:	4b40      	ldr	r3, [pc, #256]	; (2a44 <_sercom_get_default_pad+0x168>)
    2942:	e06b      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2944:	4b40      	ldr	r3, [pc, #256]	; (2a48 <_sercom_get_default_pad+0x16c>)
    2946:	e069      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2948:	1cfb      	adds	r3, r7, #3
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	2b01      	cmp	r3, #1
    294e:	d00a      	beq.n	2966 <_sercom_get_default_pad+0x8a>
    2950:	dc02      	bgt.n	2958 <_sercom_get_default_pad+0x7c>
    2952:	2b00      	cmp	r3, #0
    2954:	d005      	beq.n	2962 <_sercom_get_default_pad+0x86>
    2956:	e060      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2958:	2b02      	cmp	r3, #2
    295a:	d006      	beq.n	296a <_sercom_get_default_pad+0x8e>
    295c:	2b03      	cmp	r3, #3
    295e:	d006      	beq.n	296e <_sercom_get_default_pad+0x92>
    2960:	e05b      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2962:	2303      	movs	r3, #3
    2964:	e05a      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2966:	4b39      	ldr	r3, [pc, #228]	; (2a4c <_sercom_get_default_pad+0x170>)
    2968:	e058      	b.n	2a1c <_sercom_get_default_pad+0x140>
    296a:	4b39      	ldr	r3, [pc, #228]	; (2a50 <_sercom_get_default_pad+0x174>)
    296c:	e056      	b.n	2a1c <_sercom_get_default_pad+0x140>
    296e:	4b39      	ldr	r3, [pc, #228]	; (2a54 <_sercom_get_default_pad+0x178>)
    2970:	e054      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2972:	1cfb      	adds	r3, r7, #3
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	2b01      	cmp	r3, #1
    2978:	d00a      	beq.n	2990 <_sercom_get_default_pad+0xb4>
    297a:	dc02      	bgt.n	2982 <_sercom_get_default_pad+0xa6>
    297c:	2b00      	cmp	r3, #0
    297e:	d005      	beq.n	298c <_sercom_get_default_pad+0xb0>
    2980:	e04b      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2982:	2b02      	cmp	r3, #2
    2984:	d006      	beq.n	2994 <_sercom_get_default_pad+0xb8>
    2986:	2b03      	cmp	r3, #3
    2988:	d006      	beq.n	2998 <_sercom_get_default_pad+0xbc>
    298a:	e046      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    298c:	4b32      	ldr	r3, [pc, #200]	; (2a58 <_sercom_get_default_pad+0x17c>)
    298e:	e045      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2990:	4b32      	ldr	r3, [pc, #200]	; (2a5c <_sercom_get_default_pad+0x180>)
    2992:	e043      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2994:	4b32      	ldr	r3, [pc, #200]	; (2a60 <_sercom_get_default_pad+0x184>)
    2996:	e041      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2998:	4b32      	ldr	r3, [pc, #200]	; (2a64 <_sercom_get_default_pad+0x188>)
    299a:	e03f      	b.n	2a1c <_sercom_get_default_pad+0x140>
    299c:	1cfb      	adds	r3, r7, #3
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	2b01      	cmp	r3, #1
    29a2:	d00a      	beq.n	29ba <_sercom_get_default_pad+0xde>
    29a4:	dc02      	bgt.n	29ac <_sercom_get_default_pad+0xd0>
    29a6:	2b00      	cmp	r3, #0
    29a8:	d005      	beq.n	29b6 <_sercom_get_default_pad+0xda>
    29aa:	e036      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    29ac:	2b02      	cmp	r3, #2
    29ae:	d006      	beq.n	29be <_sercom_get_default_pad+0xe2>
    29b0:	2b03      	cmp	r3, #3
    29b2:	d006      	beq.n	29c2 <_sercom_get_default_pad+0xe6>
    29b4:	e031      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    29b6:	4b2c      	ldr	r3, [pc, #176]	; (2a68 <_sercom_get_default_pad+0x18c>)
    29b8:	e030      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29ba:	4b2c      	ldr	r3, [pc, #176]	; (2a6c <_sercom_get_default_pad+0x190>)
    29bc:	e02e      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29be:	4b2c      	ldr	r3, [pc, #176]	; (2a70 <_sercom_get_default_pad+0x194>)
    29c0:	e02c      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29c2:	4b2c      	ldr	r3, [pc, #176]	; (2a74 <_sercom_get_default_pad+0x198>)
    29c4:	e02a      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29c6:	1cfb      	adds	r3, r7, #3
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	2b01      	cmp	r3, #1
    29cc:	d00a      	beq.n	29e4 <_sercom_get_default_pad+0x108>
    29ce:	dc02      	bgt.n	29d6 <_sercom_get_default_pad+0xfa>
    29d0:	2b00      	cmp	r3, #0
    29d2:	d005      	beq.n	29e0 <_sercom_get_default_pad+0x104>
    29d4:	e021      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    29d6:	2b02      	cmp	r3, #2
    29d8:	d006      	beq.n	29e8 <_sercom_get_default_pad+0x10c>
    29da:	2b03      	cmp	r3, #3
    29dc:	d006      	beq.n	29ec <_sercom_get_default_pad+0x110>
    29de:	e01c      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    29e0:	4b25      	ldr	r3, [pc, #148]	; (2a78 <_sercom_get_default_pad+0x19c>)
    29e2:	e01b      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29e4:	4b25      	ldr	r3, [pc, #148]	; (2a7c <_sercom_get_default_pad+0x1a0>)
    29e6:	e019      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29e8:	4b25      	ldr	r3, [pc, #148]	; (2a80 <_sercom_get_default_pad+0x1a4>)
    29ea:	e017      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29ec:	4b25      	ldr	r3, [pc, #148]	; (2a84 <_sercom_get_default_pad+0x1a8>)
    29ee:	e015      	b.n	2a1c <_sercom_get_default_pad+0x140>
    29f0:	1cfb      	adds	r3, r7, #3
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	2b01      	cmp	r3, #1
    29f6:	d00a      	beq.n	2a0e <_sercom_get_default_pad+0x132>
    29f8:	dc02      	bgt.n	2a00 <_sercom_get_default_pad+0x124>
    29fa:	2b00      	cmp	r3, #0
    29fc:	d005      	beq.n	2a0a <_sercom_get_default_pad+0x12e>
    29fe:	e00c      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2a00:	2b02      	cmp	r3, #2
    2a02:	d006      	beq.n	2a12 <_sercom_get_default_pad+0x136>
    2a04:	2b03      	cmp	r3, #3
    2a06:	d006      	beq.n	2a16 <_sercom_get_default_pad+0x13a>
    2a08:	e007      	b.n	2a1a <_sercom_get_default_pad+0x13e>
    2a0a:	4b1f      	ldr	r3, [pc, #124]	; (2a88 <_sercom_get_default_pad+0x1ac>)
    2a0c:	e006      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2a0e:	4b1f      	ldr	r3, [pc, #124]	; (2a8c <_sercom_get_default_pad+0x1b0>)
    2a10:	e004      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2a12:	4b1f      	ldr	r3, [pc, #124]	; (2a90 <_sercom_get_default_pad+0x1b4>)
    2a14:	e002      	b.n	2a1c <_sercom_get_default_pad+0x140>
    2a16:	4b1f      	ldr	r3, [pc, #124]	; (2a94 <_sercom_get_default_pad+0x1b8>)
    2a18:	e000      	b.n	2a1c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2a1a:	2300      	movs	r3, #0
}
    2a1c:	1c18      	adds	r0, r3, #0
    2a1e:	46bd      	mov	sp, r7
    2a20:	b002      	add	sp, #8
    2a22:	bd80      	pop	{r7, pc}
    2a24:	42001000 	.word	0x42001000
    2a28:	42000800 	.word	0x42000800
    2a2c:	42000c00 	.word	0x42000c00
    2a30:	42001800 	.word	0x42001800
    2a34:	42001c00 	.word	0x42001c00
    2a38:	42001400 	.word	0x42001400
    2a3c:	00040003 	.word	0x00040003
    2a40:	00050003 	.word	0x00050003
    2a44:	00060003 	.word	0x00060003
    2a48:	00070003 	.word	0x00070003
    2a4c:	00010003 	.word	0x00010003
    2a50:	001e0003 	.word	0x001e0003
    2a54:	001f0003 	.word	0x001f0003
    2a58:	00080003 	.word	0x00080003
    2a5c:	00090003 	.word	0x00090003
    2a60:	000a0003 	.word	0x000a0003
    2a64:	000b0003 	.word	0x000b0003
    2a68:	00100003 	.word	0x00100003
    2a6c:	00110003 	.word	0x00110003
    2a70:	00120003 	.word	0x00120003
    2a74:	00130003 	.word	0x00130003
    2a78:	000c0003 	.word	0x000c0003
    2a7c:	000d0003 	.word	0x000d0003
    2a80:	000e0003 	.word	0x000e0003
    2a84:	000f0003 	.word	0x000f0003
    2a88:	00160003 	.word	0x00160003
    2a8c:	00170003 	.word	0x00170003
    2a90:	00180003 	.word	0x00180003
    2a94:	00190003 	.word	0x00190003

00002a98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2a98:	b590      	push	{r4, r7, lr}
    2a9a:	b08b      	sub	sp, #44	; 0x2c
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2aa0:	230c      	movs	r3, #12
    2aa2:	18fb      	adds	r3, r7, r3
    2aa4:	4a0e      	ldr	r2, [pc, #56]	; (2ae0 <_sercom_get_sercom_inst_index+0x48>)
    2aa6:	ca13      	ldmia	r2!, {r0, r1, r4}
    2aa8:	c313      	stmia	r3!, {r0, r1, r4}
    2aaa:	ca13      	ldmia	r2!, {r0, r1, r4}
    2aac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2aae:	2300      	movs	r3, #0
    2ab0:	627b      	str	r3, [r7, #36]	; 0x24
    2ab2:	e00d      	b.n	2ad0 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	220c      	movs	r2, #12
    2ab8:	18ba      	adds	r2, r7, r2
    2aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2abc:	0089      	lsls	r1, r1, #2
    2abe:	588a      	ldr	r2, [r1, r2]
    2ac0:	4293      	cmp	r3, r2
    2ac2:	d102      	bne.n	2aca <_sercom_get_sercom_inst_index+0x32>
			return i;
    2ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ac6:	b2db      	uxtb	r3, r3
    2ac8:	e006      	b.n	2ad8 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2acc:	3301      	adds	r3, #1
    2ace:	627b      	str	r3, [r7, #36]	; 0x24
    2ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ad2:	2b05      	cmp	r3, #5
    2ad4:	d9ee      	bls.n	2ab4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2ad6:	2300      	movs	r3, #0
}
    2ad8:	1c18      	adds	r0, r3, #0
    2ada:	46bd      	mov	sp, r7
    2adc:	b00b      	add	sp, #44	; 0x2c
    2ade:	bd90      	pop	{r4, r7, pc}
    2ae0:	00005280 	.word	0x00005280

00002ae4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b082      	sub	sp, #8
    2ae8:	af00      	add	r7, sp, #0
    2aea:	1c02      	adds	r2, r0, #0
    2aec:	1dfb      	adds	r3, r7, #7
    2aee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2af0:	46bd      	mov	sp, r7
    2af2:	b002      	add	sp, #8
    2af4:	bd80      	pop	{r7, pc}
    2af6:	46c0      	nop			; (mov r8, r8)

00002af8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2af8:	b580      	push	{r7, lr}
    2afa:	b084      	sub	sp, #16
    2afc:	af00      	add	r7, sp, #0
    2afe:	1c02      	adds	r2, r0, #0
    2b00:	6039      	str	r1, [r7, #0]
    2b02:	1dfb      	adds	r3, r7, #7
    2b04:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2b06:	4b13      	ldr	r3, [pc, #76]	; (2b54 <_sercom_set_handler+0x5c>)
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	2201      	movs	r2, #1
    2b0c:	4053      	eors	r3, r2
    2b0e:	b2db      	uxtb	r3, r3
    2b10:	2b00      	cmp	r3, #0
    2b12:	d015      	beq.n	2b40 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b14:	2300      	movs	r3, #0
    2b16:	60fb      	str	r3, [r7, #12]
    2b18:	e00c      	b.n	2b34 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b1a:	4b0f      	ldr	r3, [pc, #60]	; (2b58 <_sercom_set_handler+0x60>)
    2b1c:	68fa      	ldr	r2, [r7, #12]
    2b1e:	0092      	lsls	r2, r2, #2
    2b20:	490e      	ldr	r1, [pc, #56]	; (2b5c <_sercom_set_handler+0x64>)
    2b22:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2b24:	4b0e      	ldr	r3, [pc, #56]	; (2b60 <_sercom_set_handler+0x68>)
    2b26:	68fa      	ldr	r2, [r7, #12]
    2b28:	0092      	lsls	r2, r2, #2
    2b2a:	2100      	movs	r1, #0
    2b2c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b2e:	68fb      	ldr	r3, [r7, #12]
    2b30:	3301      	adds	r3, #1
    2b32:	60fb      	str	r3, [r7, #12]
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	2b05      	cmp	r3, #5
    2b38:	d9ef      	bls.n	2b1a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2b3a:	4b06      	ldr	r3, [pc, #24]	; (2b54 <_sercom_set_handler+0x5c>)
    2b3c:	2201      	movs	r2, #1
    2b3e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2b40:	1dfb      	adds	r3, r7, #7
    2b42:	781a      	ldrb	r2, [r3, #0]
    2b44:	4b04      	ldr	r3, [pc, #16]	; (2b58 <_sercom_set_handler+0x60>)
    2b46:	0092      	lsls	r2, r2, #2
    2b48:	6839      	ldr	r1, [r7, #0]
    2b4a:	50d1      	str	r1, [r2, r3]
}
    2b4c:	46bd      	mov	sp, r7
    2b4e:	b004      	add	sp, #16
    2b50:	bd80      	pop	{r7, pc}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	20000026 	.word	0x20000026
    2b58:	20000028 	.word	0x20000028
    2b5c:	00002ae5 	.word	0x00002ae5
    2b60:	200000d0 	.word	0x200000d0

00002b64 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2b64:	b590      	push	{r4, r7, lr}
    2b66:	b085      	sub	sp, #20
    2b68:	af00      	add	r7, sp, #0
    2b6a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2b6c:	2308      	movs	r3, #8
    2b6e:	18fa      	adds	r2, r7, r3
    2b70:	4b0e      	ldr	r3, [pc, #56]	; (2bac <_sercom_get_interrupt_vector+0x48>)
    2b72:	1c11      	adds	r1, r2, #0
    2b74:	1c1a      	adds	r2, r3, #0
    2b76:	2306      	movs	r3, #6
    2b78:	1c08      	adds	r0, r1, #0
    2b7a:	1c11      	adds	r1, r2, #0
    2b7c:	1c1a      	adds	r2, r3, #0
    2b7e:	4b0c      	ldr	r3, [pc, #48]	; (2bb0 <_sercom_get_interrupt_vector+0x4c>)
    2b80:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2b82:	230f      	movs	r3, #15
    2b84:	18fc      	adds	r4, r7, r3
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	1c18      	adds	r0, r3, #0
    2b8a:	4b0a      	ldr	r3, [pc, #40]	; (2bb4 <_sercom_get_interrupt_vector+0x50>)
    2b8c:	4798      	blx	r3
    2b8e:	1c03      	adds	r3, r0, #0
    2b90:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2b92:	230f      	movs	r3, #15
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	781b      	ldrb	r3, [r3, #0]
    2b98:	2208      	movs	r2, #8
    2b9a:	18ba      	adds	r2, r7, r2
    2b9c:	5cd3      	ldrb	r3, [r2, r3]
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	b25b      	sxtb	r3, r3
}
    2ba2:	1c18      	adds	r0, r3, #0
    2ba4:	46bd      	mov	sp, r7
    2ba6:	b005      	add	sp, #20
    2ba8:	bd90      	pop	{r4, r7, pc}
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	00005298 	.word	0x00005298
    2bb0:	000051fd 	.word	0x000051fd
    2bb4:	00002a99 	.word	0x00002a99

00002bb8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2bb8:	b580      	push	{r7, lr}
    2bba:	af00      	add	r7, sp, #0
    2bbc:	4b02      	ldr	r3, [pc, #8]	; (2bc8 <SERCOM0_Handler+0x10>)
    2bbe:	681b      	ldr	r3, [r3, #0]
    2bc0:	2000      	movs	r0, #0
    2bc2:	4798      	blx	r3
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd80      	pop	{r7, pc}
    2bc8:	20000028 	.word	0x20000028

00002bcc <SERCOM1_Handler>:
    2bcc:	b580      	push	{r7, lr}
    2bce:	af00      	add	r7, sp, #0
    2bd0:	4b02      	ldr	r3, [pc, #8]	; (2bdc <SERCOM1_Handler+0x10>)
    2bd2:	685b      	ldr	r3, [r3, #4]
    2bd4:	2001      	movs	r0, #1
    2bd6:	4798      	blx	r3
    2bd8:	46bd      	mov	sp, r7
    2bda:	bd80      	pop	{r7, pc}
    2bdc:	20000028 	.word	0x20000028

00002be0 <SERCOM2_Handler>:
    2be0:	b580      	push	{r7, lr}
    2be2:	af00      	add	r7, sp, #0
    2be4:	4b02      	ldr	r3, [pc, #8]	; (2bf0 <SERCOM2_Handler+0x10>)
    2be6:	689b      	ldr	r3, [r3, #8]
    2be8:	2002      	movs	r0, #2
    2bea:	4798      	blx	r3
    2bec:	46bd      	mov	sp, r7
    2bee:	bd80      	pop	{r7, pc}
    2bf0:	20000028 	.word	0x20000028

00002bf4 <SERCOM3_Handler>:
    2bf4:	b580      	push	{r7, lr}
    2bf6:	af00      	add	r7, sp, #0
    2bf8:	4b02      	ldr	r3, [pc, #8]	; (2c04 <SERCOM3_Handler+0x10>)
    2bfa:	68db      	ldr	r3, [r3, #12]
    2bfc:	2003      	movs	r0, #3
    2bfe:	4798      	blx	r3
    2c00:	46bd      	mov	sp, r7
    2c02:	bd80      	pop	{r7, pc}
    2c04:	20000028 	.word	0x20000028

00002c08 <SERCOM4_Handler>:
    2c08:	b580      	push	{r7, lr}
    2c0a:	af00      	add	r7, sp, #0
    2c0c:	4b02      	ldr	r3, [pc, #8]	; (2c18 <SERCOM4_Handler+0x10>)
    2c0e:	691b      	ldr	r3, [r3, #16]
    2c10:	2004      	movs	r0, #4
    2c12:	4798      	blx	r3
    2c14:	46bd      	mov	sp, r7
    2c16:	bd80      	pop	{r7, pc}
    2c18:	20000028 	.word	0x20000028

00002c1c <SERCOM5_Handler>:
    2c1c:	b580      	push	{r7, lr}
    2c1e:	af00      	add	r7, sp, #0
    2c20:	4b02      	ldr	r3, [pc, #8]	; (2c2c <SERCOM5_Handler+0x10>)
    2c22:	695b      	ldr	r3, [r3, #20]
    2c24:	2005      	movs	r0, #5
    2c26:	4798      	blx	r3
    2c28:	46bd      	mov	sp, r7
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	20000028 	.word	0x20000028

00002c30 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2280      	movs	r2, #128	; 0x80
    2c3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	2200      	movs	r2, #0
    2c42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	2201      	movs	r2, #1
    2c48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	2200      	movs	r2, #0
    2c4e:	70da      	strb	r2, [r3, #3]
}
    2c50:	46bd      	mov	sp, r7
    2c52:	b002      	add	sp, #8
    2c54:	bd80      	pop	{r7, pc}
    2c56:	46c0      	nop			; (mov r8, r8)

00002c58 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b084      	sub	sp, #16
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	1c02      	adds	r2, r0, #0
    2c60:	6039      	str	r1, [r7, #0]
    2c62:	1dfb      	adds	r3, r7, #7
    2c64:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2c66:	230c      	movs	r3, #12
    2c68:	18fb      	adds	r3, r7, r3
    2c6a:	1c18      	adds	r0, r3, #0
    2c6c:	4b0f      	ldr	r3, [pc, #60]	; (2cac <port_pin_set_config+0x54>)
    2c6e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2c70:	230c      	movs	r3, #12
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	2280      	movs	r2, #128	; 0x80
    2c76:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2c78:	683b      	ldr	r3, [r7, #0]
    2c7a:	781a      	ldrb	r2, [r3, #0]
    2c7c:	230c      	movs	r3, #12
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2c82:	683b      	ldr	r3, [r7, #0]
    2c84:	785a      	ldrb	r2, [r3, #1]
    2c86:	230c      	movs	r3, #12
    2c88:	18fb      	adds	r3, r7, r3
    2c8a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2c8c:	683b      	ldr	r3, [r7, #0]
    2c8e:	789a      	ldrb	r2, [r3, #2]
    2c90:	230c      	movs	r3, #12
    2c92:	18fb      	adds	r3, r7, r3
    2c94:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2c96:	1dfb      	adds	r3, r7, #7
    2c98:	781a      	ldrb	r2, [r3, #0]
    2c9a:	230c      	movs	r3, #12
    2c9c:	18fb      	adds	r3, r7, r3
    2c9e:	1c10      	adds	r0, r2, #0
    2ca0:	1c19      	adds	r1, r3, #0
    2ca2:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <port_pin_set_config+0x58>)
    2ca4:	4798      	blx	r3
}
    2ca6:	46bd      	mov	sp, r7
    2ca8:	b004      	add	sp, #16
    2caa:	bd80      	pop	{r7, pc}
    2cac:	00002c31 	.word	0x00002c31
    2cb0:	00003955 	.word	0x00003955

00002cb4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2cb8:	46bd      	mov	sp, r7
    2cba:	bd80      	pop	{r7, pc}

00002cbc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	b082      	sub	sp, #8
    2cc0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2cc2:	4b0f      	ldr	r3, [pc, #60]	; (2d00 <cpu_irq_enter_critical+0x44>)
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d112      	bne.n	2cf0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cca:	f3ef 8310 	mrs	r3, PRIMASK
    2cce:	607b      	str	r3, [r7, #4]
  return(result);
    2cd0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d109      	bne.n	2cea <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cd6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2cd8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2cdc:	4b09      	ldr	r3, [pc, #36]	; (2d04 <cpu_irq_enter_critical+0x48>)
    2cde:	2200      	movs	r2, #0
    2ce0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2ce2:	4b09      	ldr	r3, [pc, #36]	; (2d08 <cpu_irq_enter_critical+0x4c>)
    2ce4:	2201      	movs	r2, #1
    2ce6:	701a      	strb	r2, [r3, #0]
    2ce8:	e002      	b.n	2cf0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2cea:	4b07      	ldr	r3, [pc, #28]	; (2d08 <cpu_irq_enter_critical+0x4c>)
    2cec:	2200      	movs	r2, #0
    2cee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2cf0:	4b03      	ldr	r3, [pc, #12]	; (2d00 <cpu_irq_enter_critical+0x44>)
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	1c5a      	adds	r2, r3, #1
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <cpu_irq_enter_critical+0x44>)
    2cf8:	601a      	str	r2, [r3, #0]
}
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b002      	add	sp, #8
    2cfe:	bd80      	pop	{r7, pc}
    2d00:	20000040 	.word	0x20000040
    2d04:	20000000 	.word	0x20000000
    2d08:	20000044 	.word	0x20000044

00002d0c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2d10:	4b0a      	ldr	r3, [pc, #40]	; (2d3c <cpu_irq_leave_critical+0x30>)
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	1e5a      	subs	r2, r3, #1
    2d16:	4b09      	ldr	r3, [pc, #36]	; (2d3c <cpu_irq_leave_critical+0x30>)
    2d18:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2d1a:	4b08      	ldr	r3, [pc, #32]	; (2d3c <cpu_irq_leave_critical+0x30>)
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d10a      	bne.n	2d38 <cpu_irq_leave_critical+0x2c>
    2d22:	4b07      	ldr	r3, [pc, #28]	; (2d40 <cpu_irq_leave_critical+0x34>)
    2d24:	781b      	ldrb	r3, [r3, #0]
    2d26:	b2db      	uxtb	r3, r3
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d005      	beq.n	2d38 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2d2c:	4b05      	ldr	r3, [pc, #20]	; (2d44 <cpu_irq_leave_critical+0x38>)
    2d2e:	2201      	movs	r2, #1
    2d30:	701a      	strb	r2, [r3, #0]
    2d32:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d36:	b662      	cpsie	i
	}
}
    2d38:	46bd      	mov	sp, r7
    2d3a:	bd80      	pop	{r7, pc}
    2d3c:	20000040 	.word	0x20000040
    2d40:	20000044 	.word	0x20000044
    2d44:	20000000 	.word	0x20000000

00002d48 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	2201      	movs	r2, #1
    2d54:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	2200      	movs	r2, #0
    2d5a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	2206      	movs	r2, #6
    2d60:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    2d62:	687b      	ldr	r3, [r7, #4]
    2d64:	2200      	movs	r2, #0
    2d66:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	2200      	movs	r2, #0
    2d6c:	725a      	strb	r2, [r3, #9]
}
    2d6e:	46bd      	mov	sp, r7
    2d70:	b002      	add	sp, #8
    2d72:	bd80      	pop	{r7, pc}

00002d74 <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	2201      	movs	r2, #1
    2d80:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	2201      	movs	r2, #1
    2d86:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	2200      	movs	r2, #0
    2d8c:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	2201      	movs	r2, #1
    2d92:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	2207      	movs	r2, #7
    2d98:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	2200      	movs	r2, #0
    2d9e:	715a      	strb	r2, [r3, #5]
}
    2da0:	46bd      	mov	sp, r7
    2da2:	b002      	add	sp, #8
    2da4:	bd80      	pop	{r7, pc}
    2da6:	46c0      	nop			; (mov r8, r8)

00002da8 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    2da8:	b580      	push	{r7, lr}
    2daa:	b082      	sub	sp, #8
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	2203      	movs	r2, #3
    2db4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	2200      	movs	r2, #0
    2dba:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	2201      	movs	r2, #1
    2dc0:	709a      	strb	r2, [r3, #2]
}
    2dc2:	46bd      	mov	sp, r7
    2dc4:	b002      	add	sp, #8
    2dc6:	bd80      	pop	{r7, pc}

00002dc8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	b082      	sub	sp, #8
    2dcc:	af00      	add	r7, sp, #0
    2dce:	1c02      	adds	r2, r0, #0
    2dd0:	1dfb      	adds	r3, r7, #7
    2dd2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2dd4:	4a03      	ldr	r2, [pc, #12]	; (2de4 <system_cpu_clock_set_divider+0x1c>)
    2dd6:	1dfb      	adds	r3, r7, #7
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	7213      	strb	r3, [r2, #8]
}
    2ddc:	46bd      	mov	sp, r7
    2dde:	b002      	add	sp, #8
    2de0:	bd80      	pop	{r7, pc}
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	40000400 	.word	0x40000400

00002de8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b082      	sub	sp, #8
    2dec:	af00      	add	r7, sp, #0
    2dee:	1c02      	adds	r2, r0, #0
    2df0:	1dfb      	adds	r3, r7, #7
    2df2:	701a      	strb	r2, [r3, #0]
    2df4:	1dbb      	adds	r3, r7, #6
    2df6:	1c0a      	adds	r2, r1, #0
    2df8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2dfa:	1dfb      	adds	r3, r7, #7
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	2b01      	cmp	r3, #1
    2e00:	d008      	beq.n	2e14 <system_apb_clock_set_divider+0x2c>
    2e02:	2b02      	cmp	r3, #2
    2e04:	d00b      	beq.n	2e1e <system_apb_clock_set_divider+0x36>
    2e06:	2b00      	cmp	r3, #0
    2e08:	d10e      	bne.n	2e28 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2e0a:	4a0b      	ldr	r2, [pc, #44]	; (2e38 <system_apb_clock_set_divider+0x50>)
    2e0c:	1dbb      	adds	r3, r7, #6
    2e0e:	781b      	ldrb	r3, [r3, #0]
    2e10:	7253      	strb	r3, [r2, #9]
			break;
    2e12:	e00b      	b.n	2e2c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2e14:	4a08      	ldr	r2, [pc, #32]	; (2e38 <system_apb_clock_set_divider+0x50>)
    2e16:	1dbb      	adds	r3, r7, #6
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	7293      	strb	r3, [r2, #10]
			break;
    2e1c:	e006      	b.n	2e2c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2e1e:	4a06      	ldr	r2, [pc, #24]	; (2e38 <system_apb_clock_set_divider+0x50>)
    2e20:	1dbb      	adds	r3, r7, #6
    2e22:	781b      	ldrb	r3, [r3, #0]
    2e24:	72d3      	strb	r3, [r2, #11]
			break;
    2e26:	e001      	b.n	2e2c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2e28:	2317      	movs	r3, #23
    2e2a:	e000      	b.n	2e2e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2e2c:	2300      	movs	r3, #0
}
    2e2e:	1c18      	adds	r0, r3, #0
    2e30:	46bd      	mov	sp, r7
    2e32:	b002      	add	sp, #8
    2e34:	bd80      	pop	{r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	40000400 	.word	0x40000400

00002e3c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b082      	sub	sp, #8
    2e40:	af00      	add	r7, sp, #0
    2e42:	1c02      	adds	r2, r0, #0
    2e44:	1dfb      	adds	r3, r7, #7
    2e46:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e48:	4b08      	ldr	r3, [pc, #32]	; (2e6c <system_flash_set_waitstates+0x30>)
    2e4a:	1dfa      	adds	r2, r7, #7
    2e4c:	7812      	ldrb	r2, [r2, #0]
    2e4e:	210f      	movs	r1, #15
    2e50:	400a      	ands	r2, r1
    2e52:	b2d2      	uxtb	r2, r2
    2e54:	210f      	movs	r1, #15
    2e56:	400a      	ands	r2, r1
    2e58:	0052      	lsls	r2, r2, #1
    2e5a:	6859      	ldr	r1, [r3, #4]
    2e5c:	201e      	movs	r0, #30
    2e5e:	4381      	bics	r1, r0
    2e60:	430a      	orrs	r2, r1
    2e62:	605a      	str	r2, [r3, #4]
}
    2e64:	46bd      	mov	sp, r7
    2e66:	b002      	add	sp, #8
    2e68:	bd80      	pop	{r7, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	41004000 	.word	0x41004000

00002e70 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e74:	46c0      	nop			; (mov r8, r8)
    2e76:	4b03      	ldr	r3, [pc, #12]	; (2e84 <_system_dfll_wait_for_sync+0x14>)
    2e78:	68db      	ldr	r3, [r3, #12]
    2e7a:	2210      	movs	r2, #16
    2e7c:	4013      	ands	r3, r2
    2e7e:	d0fa      	beq.n	2e76 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2e80:	46bd      	mov	sp, r7
    2e82:	bd80      	pop	{r7, pc}
    2e84:	40000800 	.word	0x40000800

00002e88 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2e8c:	4b0c      	ldr	r3, [pc, #48]	; (2ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e8e:	2202      	movs	r2, #2
    2e90:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2e92:	4b0c      	ldr	r3, [pc, #48]	; (2ec4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2e94:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e96:	4a0a      	ldr	r2, [pc, #40]	; (2ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2e98:	4b0b      	ldr	r3, [pc, #44]	; (2ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2e9a:	689b      	ldr	r3, [r3, #8]
    2e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e9e:	4a08      	ldr	r2, [pc, #32]	; (2ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ea0:	4b09      	ldr	r3, [pc, #36]	; (2ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2ea2:	685b      	ldr	r3, [r3, #4]
    2ea4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2ea6:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ea8:	2200      	movs	r2, #0
    2eaa:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2eac:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2eae:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2eb0:	4a03      	ldr	r2, [pc, #12]	; (2ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2eb2:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	b29b      	uxth	r3, r3
    2eb8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    2eba:	46bd      	mov	sp, r7
    2ebc:	bd80      	pop	{r7, pc}
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	40000800 	.word	0x40000800
    2ec4:	00002e71 	.word	0x00002e71
    2ec8:	20000048 	.word	0x20000048

00002ecc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b082      	sub	sp, #8
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	1c02      	adds	r2, r0, #0
    2ed4:	1dfb      	adds	r3, r7, #7
    2ed6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2ed8:	1dfb      	adds	r3, r7, #7
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	2b08      	cmp	r3, #8
    2ede:	d842      	bhi.n	2f66 <system_clock_source_get_hz+0x9a>
    2ee0:	009a      	lsls	r2, r3, #2
    2ee2:	4b23      	ldr	r3, [pc, #140]	; (2f70 <system_clock_source_get_hz+0xa4>)
    2ee4:	18d3      	adds	r3, r2, r3
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2eea:	4b22      	ldr	r3, [pc, #136]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2eec:	691b      	ldr	r3, [r3, #16]
    2eee:	e03b      	b.n	2f68 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ef0:	4b21      	ldr	r3, [pc, #132]	; (2f78 <system_clock_source_get_hz+0xac>)
    2ef2:	6a1b      	ldr	r3, [r3, #32]
    2ef4:	0a1b      	lsrs	r3, r3, #8
    2ef6:	1c1a      	adds	r2, r3, #0
    2ef8:	2303      	movs	r3, #3
    2efa:	4013      	ands	r3, r2
    2efc:	b2db      	uxtb	r3, r3
    2efe:	1c1a      	adds	r2, r3, #0
    2f00:	4b1e      	ldr	r3, [pc, #120]	; (2f7c <system_clock_source_get_hz+0xb0>)
    2f02:	40d3      	lsrs	r3, r2
    2f04:	e030      	b.n	2f68 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2f06:	2380      	movs	r3, #128	; 0x80
    2f08:	021b      	lsls	r3, r3, #8
    2f0a:	e02d      	b.n	2f68 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2f0c:	2380      	movs	r3, #128	; 0x80
    2f0e:	021b      	lsls	r3, r3, #8
    2f10:	e02a      	b.n	2f68 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2f12:	4b18      	ldr	r3, [pc, #96]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2f14:	695b      	ldr	r3, [r3, #20]
    2f16:	e027      	b.n	2f68 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f18:	4b16      	ldr	r3, [pc, #88]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	2202      	movs	r2, #2
    2f1e:	4013      	ands	r3, r2
    2f20:	d101      	bne.n	2f26 <system_clock_source_get_hz+0x5a>
			return 0;
    2f22:	2300      	movs	r3, #0
    2f24:	e020      	b.n	2f68 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2f26:	4b16      	ldr	r3, [pc, #88]	; (2f80 <system_clock_source_get_hz+0xb4>)
    2f28:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2f2a:	4b12      	ldr	r3, [pc, #72]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2f2c:	681b      	ldr	r3, [r3, #0]
    2f2e:	2204      	movs	r2, #4
    2f30:	4013      	ands	r3, r2
    2f32:	d009      	beq.n	2f48 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f34:	2000      	movs	r0, #0
    2f36:	4b13      	ldr	r3, [pc, #76]	; (2f84 <system_clock_source_get_hz+0xb8>)
    2f38:	4798      	blx	r3
    2f3a:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    2f3c:	4b0d      	ldr	r3, [pc, #52]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2f3e:	689b      	ldr	r3, [r3, #8]
    2f40:	041b      	lsls	r3, r3, #16
    2f42:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f44:	4353      	muls	r3, r2
    2f46:	e00f      	b.n	2f68 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2f48:	4b0f      	ldr	r3, [pc, #60]	; (2f88 <system_clock_source_get_hz+0xbc>)
    2f4a:	e00d      	b.n	2f68 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f4c:	4a0a      	ldr	r2, [pc, #40]	; (2f78 <system_clock_source_get_hz+0xac>)
    2f4e:	2350      	movs	r3, #80	; 0x50
    2f50:	5cd3      	ldrb	r3, [r2, r3]
    2f52:	b2db      	uxtb	r3, r3
    2f54:	1c1a      	adds	r2, r3, #0
    2f56:	2304      	movs	r3, #4
    2f58:	4013      	ands	r3, r2
    2f5a:	d101      	bne.n	2f60 <system_clock_source_get_hz+0x94>
			return 0;
    2f5c:	2300      	movs	r3, #0
    2f5e:	e003      	b.n	2f68 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    2f60:	4b04      	ldr	r3, [pc, #16]	; (2f74 <system_clock_source_get_hz+0xa8>)
    2f62:	68db      	ldr	r3, [r3, #12]
    2f64:	e000      	b.n	2f68 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    2f66:	2300      	movs	r3, #0
	}
}
    2f68:	1c18      	adds	r0, r3, #0
    2f6a:	46bd      	mov	sp, r7
    2f6c:	b002      	add	sp, #8
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	000052a0 	.word	0x000052a0
    2f74:	20000048 	.word	0x20000048
    2f78:	40000800 	.word	0x40000800
    2f7c:	007a1200 	.word	0x007a1200
    2f80:	00002e71 	.word	0x00002e71
    2f84:	0000378d 	.word	0x0000378d
    2f88:	02dc6c00 	.word	0x02dc6c00

00002f8c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	b084      	sub	sp, #16
    2f90:	af00      	add	r7, sp, #0
    2f92:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f94:	4b1a      	ldr	r3, [pc, #104]	; (3000 <system_clock_source_osc8m_set_config+0x74>)
    2f96:	6a1b      	ldr	r3, [r3, #32]
    2f98:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	781b      	ldrb	r3, [r3, #0]
    2f9e:	1c1a      	adds	r2, r3, #0
    2fa0:	2303      	movs	r3, #3
    2fa2:	4013      	ands	r3, r2
    2fa4:	b2da      	uxtb	r2, r3
    2fa6:	230d      	movs	r3, #13
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	2103      	movs	r1, #3
    2fac:	400a      	ands	r2, r1
    2fae:	1c10      	adds	r0, r2, #0
    2fb0:	781a      	ldrb	r2, [r3, #0]
    2fb2:	2103      	movs	r1, #3
    2fb4:	438a      	bics	r2, r1
    2fb6:	1c11      	adds	r1, r2, #0
    2fb8:	1c02      	adds	r2, r0, #0
    2fba:	430a      	orrs	r2, r1
    2fbc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	789a      	ldrb	r2, [r3, #2]
    2fc2:	230c      	movs	r3, #12
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	01d0      	lsls	r0, r2, #7
    2fc8:	781a      	ldrb	r2, [r3, #0]
    2fca:	217f      	movs	r1, #127	; 0x7f
    2fcc:	400a      	ands	r2, r1
    2fce:	1c11      	adds	r1, r2, #0
    2fd0:	1c02      	adds	r2, r0, #0
    2fd2:	430a      	orrs	r2, r1
    2fd4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	785a      	ldrb	r2, [r3, #1]
    2fda:	230c      	movs	r3, #12
    2fdc:	18fb      	adds	r3, r7, r3
    2fde:	2101      	movs	r1, #1
    2fe0:	400a      	ands	r2, r1
    2fe2:	0190      	lsls	r0, r2, #6
    2fe4:	781a      	ldrb	r2, [r3, #0]
    2fe6:	2140      	movs	r1, #64	; 0x40
    2fe8:	438a      	bics	r2, r1
    2fea:	1c11      	adds	r1, r2, #0
    2fec:	1c02      	adds	r2, r0, #0
    2fee:	430a      	orrs	r2, r1
    2ff0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2ff2:	4b03      	ldr	r3, [pc, #12]	; (3000 <system_clock_source_osc8m_set_config+0x74>)
    2ff4:	68fa      	ldr	r2, [r7, #12]
    2ff6:	621a      	str	r2, [r3, #32]
}
    2ff8:	46bd      	mov	sp, r7
    2ffa:	b004      	add	sp, #16
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	40000800 	.word	0x40000800

00003004 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    300c:	4b2f      	ldr	r3, [pc, #188]	; (30cc <system_clock_source_osc32k_set_config+0xc8>)
    300e:	699b      	ldr	r3, [r3, #24]
    3010:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	785a      	ldrb	r2, [r3, #1]
    3016:	230c      	movs	r3, #12
    3018:	18fb      	adds	r3, r7, r3
    301a:	2101      	movs	r1, #1
    301c:	400a      	ands	r2, r1
    301e:	00d0      	lsls	r0, r2, #3
    3020:	781a      	ldrb	r2, [r3, #0]
    3022:	2108      	movs	r1, #8
    3024:	438a      	bics	r2, r1
    3026:	1c11      	adds	r1, r2, #0
    3028:	1c02      	adds	r2, r0, #0
    302a:	430a      	orrs	r2, r1
    302c:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	789a      	ldrb	r2, [r3, #2]
    3032:	230c      	movs	r3, #12
    3034:	18fb      	adds	r3, r7, r3
    3036:	2101      	movs	r1, #1
    3038:	400a      	ands	r2, r1
    303a:	0090      	lsls	r0, r2, #2
    303c:	781a      	ldrb	r2, [r3, #0]
    303e:	2104      	movs	r1, #4
    3040:	438a      	bics	r2, r1
    3042:	1c11      	adds	r1, r2, #0
    3044:	1c02      	adds	r2, r0, #0
    3046:	430a      	orrs	r2, r1
    3048:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	781b      	ldrb	r3, [r3, #0]
    304e:	1c1a      	adds	r2, r3, #0
    3050:	2307      	movs	r3, #7
    3052:	4013      	ands	r3, r2
    3054:	b2da      	uxtb	r2, r3
    3056:	230d      	movs	r3, #13
    3058:	18fb      	adds	r3, r7, r3
    305a:	2107      	movs	r1, #7
    305c:	400a      	ands	r2, r1
    305e:	1c10      	adds	r0, r2, #0
    3060:	781a      	ldrb	r2, [r3, #0]
    3062:	2107      	movs	r1, #7
    3064:	438a      	bics	r2, r1
    3066:	1c11      	adds	r1, r2, #0
    3068:	1c02      	adds	r2, r0, #0
    306a:	430a      	orrs	r2, r1
    306c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	791a      	ldrb	r2, [r3, #4]
    3072:	230c      	movs	r3, #12
    3074:	18fb      	adds	r3, r7, r3
    3076:	01d0      	lsls	r0, r2, #7
    3078:	781a      	ldrb	r2, [r3, #0]
    307a:	217f      	movs	r1, #127	; 0x7f
    307c:	400a      	ands	r2, r1
    307e:	1c11      	adds	r1, r2, #0
    3080:	1c02      	adds	r2, r0, #0
    3082:	430a      	orrs	r2, r1
    3084:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	78da      	ldrb	r2, [r3, #3]
    308a:	230c      	movs	r3, #12
    308c:	18fb      	adds	r3, r7, r3
    308e:	2101      	movs	r1, #1
    3090:	400a      	ands	r2, r1
    3092:	0190      	lsls	r0, r2, #6
    3094:	781a      	ldrb	r2, [r3, #0]
    3096:	2140      	movs	r1, #64	; 0x40
    3098:	438a      	bics	r2, r1
    309a:	1c11      	adds	r1, r2, #0
    309c:	1c02      	adds	r2, r0, #0
    309e:	430a      	orrs	r2, r1
    30a0:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	795a      	ldrb	r2, [r3, #5]
    30a6:	230d      	movs	r3, #13
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	2101      	movs	r1, #1
    30ac:	400a      	ands	r2, r1
    30ae:	0110      	lsls	r0, r2, #4
    30b0:	781a      	ldrb	r2, [r3, #0]
    30b2:	2110      	movs	r1, #16
    30b4:	438a      	bics	r2, r1
    30b6:	1c11      	adds	r1, r2, #0
    30b8:	1c02      	adds	r2, r0, #0
    30ba:	430a      	orrs	r2, r1
    30bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    30be:	4b03      	ldr	r3, [pc, #12]	; (30cc <system_clock_source_osc32k_set_config+0xc8>)
    30c0:	68fa      	ldr	r2, [r7, #12]
    30c2:	619a      	str	r2, [r3, #24]
}
    30c4:	46bd      	mov	sp, r7
    30c6:	b004      	add	sp, #16
    30c8:	bd80      	pop	{r7, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	40000800 	.word	0x40000800

000030d0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	1c02      	adds	r2, r0, #0
    30d8:	1dfb      	adds	r3, r7, #7
    30da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    30dc:	1dfb      	adds	r3, r7, #7
    30de:	781b      	ldrb	r3, [r3, #0]
    30e0:	2b08      	cmp	r3, #8
    30e2:	d83b      	bhi.n	315c <system_clock_source_enable+0x8c>
    30e4:	009a      	lsls	r2, r3, #2
    30e6:	4b21      	ldr	r3, [pc, #132]	; (316c <system_clock_source_enable+0x9c>)
    30e8:	18d3      	adds	r3, r2, r3
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    30ee:	4b20      	ldr	r3, [pc, #128]	; (3170 <system_clock_source_enable+0xa0>)
    30f0:	4a1f      	ldr	r2, [pc, #124]	; (3170 <system_clock_source_enable+0xa0>)
    30f2:	6a12      	ldr	r2, [r2, #32]
    30f4:	2102      	movs	r1, #2
    30f6:	430a      	orrs	r2, r1
    30f8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    30fa:	2300      	movs	r3, #0
    30fc:	e031      	b.n	3162 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    30fe:	4b1c      	ldr	r3, [pc, #112]	; (3170 <system_clock_source_enable+0xa0>)
    3100:	4a1b      	ldr	r2, [pc, #108]	; (3170 <system_clock_source_enable+0xa0>)
    3102:	6992      	ldr	r2, [r2, #24]
    3104:	2102      	movs	r1, #2
    3106:	430a      	orrs	r2, r1
    3108:	619a      	str	r2, [r3, #24]
		break;
    310a:	e029      	b.n	3160 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    310c:	4a18      	ldr	r2, [pc, #96]	; (3170 <system_clock_source_enable+0xa0>)
    310e:	4b18      	ldr	r3, [pc, #96]	; (3170 <system_clock_source_enable+0xa0>)
    3110:	8a1b      	ldrh	r3, [r3, #16]
    3112:	b29b      	uxth	r3, r3
    3114:	2102      	movs	r1, #2
    3116:	430b      	orrs	r3, r1
    3118:	b29b      	uxth	r3, r3
    311a:	8213      	strh	r3, [r2, #16]
		break;
    311c:	e020      	b.n	3160 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    311e:	4a14      	ldr	r2, [pc, #80]	; (3170 <system_clock_source_enable+0xa0>)
    3120:	4b13      	ldr	r3, [pc, #76]	; (3170 <system_clock_source_enable+0xa0>)
    3122:	8a9b      	ldrh	r3, [r3, #20]
    3124:	b29b      	uxth	r3, r3
    3126:	2102      	movs	r1, #2
    3128:	430b      	orrs	r3, r1
    312a:	b29b      	uxth	r3, r3
    312c:	8293      	strh	r3, [r2, #20]
		break;
    312e:	e017      	b.n	3160 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3130:	4b10      	ldr	r3, [pc, #64]	; (3174 <system_clock_source_enable+0xa4>)
    3132:	681b      	ldr	r3, [r3, #0]
    3134:	2202      	movs	r2, #2
    3136:	431a      	orrs	r2, r3
    3138:	4b0e      	ldr	r3, [pc, #56]	; (3174 <system_clock_source_enable+0xa4>)
    313a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    313c:	4b0e      	ldr	r3, [pc, #56]	; (3178 <system_clock_source_enable+0xa8>)
    313e:	4798      	blx	r3
		break;
    3140:	e00e      	b.n	3160 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3142:	4a0b      	ldr	r2, [pc, #44]	; (3170 <system_clock_source_enable+0xa0>)
    3144:	490a      	ldr	r1, [pc, #40]	; (3170 <system_clock_source_enable+0xa0>)
    3146:	2344      	movs	r3, #68	; 0x44
    3148:	5ccb      	ldrb	r3, [r1, r3]
    314a:	b2db      	uxtb	r3, r3
    314c:	2102      	movs	r1, #2
    314e:	430b      	orrs	r3, r1
    3150:	b2d9      	uxtb	r1, r3
    3152:	2344      	movs	r3, #68	; 0x44
    3154:	54d1      	strb	r1, [r2, r3]
		break;
    3156:	e003      	b.n	3160 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3158:	2300      	movs	r3, #0
    315a:	e002      	b.n	3162 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    315c:	2317      	movs	r3, #23
    315e:	e000      	b.n	3162 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3160:	2300      	movs	r3, #0
}
    3162:	1c18      	adds	r0, r3, #0
    3164:	46bd      	mov	sp, r7
    3166:	b002      	add	sp, #8
    3168:	bd80      	pop	{r7, pc}
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	000052c4 	.word	0x000052c4
    3170:	40000800 	.word	0x40000800
    3174:	20000048 	.word	0x20000048
    3178:	00002e89 	.word	0x00002e89

0000317c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3182:	1c3b      	adds	r3, r7, #0
    3184:	2201      	movs	r2, #1
    3186:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3188:	2300      	movs	r3, #0
    318a:	607b      	str	r3, [r7, #4]
    318c:	e009      	b.n	31a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	b2da      	uxtb	r2, r3
    3192:	1c3b      	adds	r3, r7, #0
    3194:	1c10      	adds	r0, r2, #0
    3196:	1c19      	adds	r1, r3, #0
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <_switch_peripheral_gclk+0x34>)
    319a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	3301      	adds	r3, #1
    31a0:	607b      	str	r3, [r7, #4]
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	2b24      	cmp	r3, #36	; 0x24
    31a6:	d9f2      	bls.n	318e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    31a8:	46bd      	mov	sp, r7
    31aa:	b002      	add	sp, #8
    31ac:	bd80      	pop	{r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00003669 	.word	0x00003669

000031b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b0a2      	sub	sp, #136	; 0x88
    31b8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    31ba:	4b4f      	ldr	r3, [pc, #316]	; (32f8 <system_clock_init+0x144>)
    31bc:	22c2      	movs	r2, #194	; 0xc2
    31be:	00d2      	lsls	r2, r2, #3
    31c0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    31c2:	2000      	movs	r0, #0
    31c4:	4b4d      	ldr	r3, [pc, #308]	; (32fc <system_clock_init+0x148>)
    31c6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    31c8:	4b4d      	ldr	r3, [pc, #308]	; (3300 <system_clock_init+0x14c>)
    31ca:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    31cc:	4b4a      	ldr	r3, [pc, #296]	; (32f8 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    31ce:	4a4d      	ldr	r2, [pc, #308]	; (3304 <system_clock_init+0x150>)
    31d0:	6812      	ldr	r2, [r2, #0]
    31d2:	0992      	lsrs	r2, r2, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    31d4:	b2d2      	uxtb	r2, r2
    31d6:	1c11      	adds	r1, r2, #0
    31d8:	227f      	movs	r2, #127	; 0x7f
    31da:	400a      	ands	r2, r1
    31dc:	b2d2      	uxtb	r2, r2
    31de:	217f      	movs	r1, #127	; 0x7f
    31e0:	400a      	ands	r2, r1
    31e2:	0412      	lsls	r2, r2, #16
    31e4:	6999      	ldr	r1, [r3, #24]
    31e6:	4848      	ldr	r0, [pc, #288]	; (3308 <system_clock_init+0x154>)
    31e8:	4001      	ands	r1, r0
    31ea:	430a      	orrs	r2, r1
    31ec:	619a      	str	r2, [r3, #24]
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    31ee:	2380      	movs	r3, #128	; 0x80
    31f0:	18fb      	adds	r3, r7, r3
    31f2:	1c18      	adds	r0, r3, #0
    31f4:	4b45      	ldr	r3, [pc, #276]	; (330c <system_clock_init+0x158>)
    31f6:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    31f8:	2380      	movs	r3, #128	; 0x80
    31fa:	18fb      	adds	r3, r7, r3
    31fc:	2207      	movs	r2, #7
    31fe:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    3200:	2380      	movs	r3, #128	; 0x80
    3202:	18fb      	adds	r3, r7, r3
    3204:	2201      	movs	r2, #1
    3206:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    3208:	2380      	movs	r3, #128	; 0x80
    320a:	18fb      	adds	r3, r7, r3
    320c:	2201      	movs	r2, #1
    320e:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    3210:	2380      	movs	r3, #128	; 0x80
    3212:	18fb      	adds	r3, r7, r3
    3214:	2201      	movs	r2, #1
    3216:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    3218:	2380      	movs	r3, #128	; 0x80
    321a:	18fb      	adds	r3, r7, r3
    321c:	2200      	movs	r2, #0
    321e:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    3220:	2380      	movs	r3, #128	; 0x80
    3222:	18fb      	adds	r3, r7, r3
    3224:	1c18      	adds	r0, r3, #0
    3226:	4b3a      	ldr	r3, [pc, #232]	; (3310 <system_clock_init+0x15c>)
    3228:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    322a:	2004      	movs	r0, #4
    322c:	4b39      	ldr	r3, [pc, #228]	; (3314 <system_clock_init+0x160>)
    322e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3230:	237c      	movs	r3, #124	; 0x7c
    3232:	18fb      	adds	r3, r7, r3
    3234:	1c18      	adds	r0, r3, #0
    3236:	4b38      	ldr	r3, [pc, #224]	; (3318 <system_clock_init+0x164>)
    3238:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    323a:	237c      	movs	r3, #124	; 0x7c
    323c:	18fb      	adds	r3, r7, r3
    323e:	2200      	movs	r2, #0
    3240:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    3242:	237c      	movs	r3, #124	; 0x7c
    3244:	18fb      	adds	r3, r7, r3
    3246:	2201      	movs	r2, #1
    3248:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    324a:	237c      	movs	r3, #124	; 0x7c
    324c:	18fb      	adds	r3, r7, r3
    324e:	2200      	movs	r2, #0
    3250:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3252:	237c      	movs	r3, #124	; 0x7c
    3254:	18fb      	adds	r3, r7, r3
    3256:	1c18      	adds	r0, r3, #0
    3258:	4b30      	ldr	r3, [pc, #192]	; (331c <system_clock_init+0x168>)
    325a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    325c:	2006      	movs	r0, #6
    325e:	4b2d      	ldr	r3, [pc, #180]	; (3314 <system_clock_init+0x160>)
    3260:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3262:	4b2f      	ldr	r3, [pc, #188]	; (3320 <system_clock_init+0x16c>)
    3264:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3266:	2358      	movs	r3, #88	; 0x58
    3268:	18fb      	adds	r3, r7, r3
    326a:	1c18      	adds	r0, r3, #0
    326c:	4b2d      	ldr	r3, [pc, #180]	; (3324 <system_clock_init+0x170>)
    326e:	4798      	blx	r3
    3270:	2358      	movs	r3, #88	; 0x58
    3272:	18fb      	adds	r3, r7, r3
    3274:	2204      	movs	r2, #4
    3276:	701a      	strb	r2, [r3, #0]
    3278:	2358      	movs	r3, #88	; 0x58
    327a:	18fb      	adds	r3, r7, r3
    327c:	2220      	movs	r2, #32
    327e:	605a      	str	r2, [r3, #4]
    3280:	2358      	movs	r3, #88	; 0x58
    3282:	18fb      	adds	r3, r7, r3
    3284:	2200      	movs	r2, #0
    3286:	721a      	strb	r2, [r3, #8]
    3288:	2358      	movs	r3, #88	; 0x58
    328a:	18fb      	adds	r3, r7, r3
    328c:	2200      	movs	r2, #0
    328e:	725a      	strb	r2, [r3, #9]
    3290:	2358      	movs	r3, #88	; 0x58
    3292:	18fb      	adds	r3, r7, r3
    3294:	2002      	movs	r0, #2
    3296:	1c19      	adds	r1, r3, #0
    3298:	4b23      	ldr	r3, [pc, #140]	; (3328 <system_clock_init+0x174>)
    329a:	4798      	blx	r3
    329c:	2002      	movs	r0, #2
    329e:	4b23      	ldr	r3, [pc, #140]	; (332c <system_clock_init+0x178>)
    32a0:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    32a2:	2000      	movs	r0, #0
    32a4:	4b22      	ldr	r3, [pc, #136]	; (3330 <system_clock_init+0x17c>)
    32a6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    32a8:	2000      	movs	r0, #0
    32aa:	2100      	movs	r1, #0
    32ac:	4b21      	ldr	r3, [pc, #132]	; (3334 <system_clock_init+0x180>)
    32ae:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    32b0:	2001      	movs	r0, #1
    32b2:	2100      	movs	r1, #0
    32b4:	4b1f      	ldr	r3, [pc, #124]	; (3334 <system_clock_init+0x180>)
    32b6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    32b8:	2002      	movs	r0, #2
    32ba:	2100      	movs	r1, #0
    32bc:	4b1d      	ldr	r3, [pc, #116]	; (3334 <system_clock_init+0x180>)
    32be:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    32c0:	1d3b      	adds	r3, r7, #4
    32c2:	1c18      	adds	r0, r3, #0
    32c4:	4b17      	ldr	r3, [pc, #92]	; (3324 <system_clock_init+0x170>)
    32c6:	4798      	blx	r3
    32c8:	1d3b      	adds	r3, r7, #4
    32ca:	2206      	movs	r2, #6
    32cc:	701a      	strb	r2, [r3, #0]
    32ce:	1d3b      	adds	r3, r7, #4
    32d0:	2201      	movs	r2, #1
    32d2:	605a      	str	r2, [r3, #4]
    32d4:	1d3b      	adds	r3, r7, #4
    32d6:	2200      	movs	r2, #0
    32d8:	721a      	strb	r2, [r3, #8]
    32da:	1d3b      	adds	r3, r7, #4
    32dc:	2200      	movs	r2, #0
    32de:	725a      	strb	r2, [r3, #9]
    32e0:	1d3b      	adds	r3, r7, #4
    32e2:	2000      	movs	r0, #0
    32e4:	1c19      	adds	r1, r3, #0
    32e6:	4b10      	ldr	r3, [pc, #64]	; (3328 <system_clock_init+0x174>)
    32e8:	4798      	blx	r3
    32ea:	2000      	movs	r0, #0
    32ec:	4b0f      	ldr	r3, [pc, #60]	; (332c <system_clock_init+0x178>)
    32ee:	4798      	blx	r3
#endif
}
    32f0:	46bd      	mov	sp, r7
    32f2:	b022      	add	sp, #136	; 0x88
    32f4:	bd80      	pop	{r7, pc}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	40000800 	.word	0x40000800
    32fc:	00002e3d 	.word	0x00002e3d
    3300:	0000317d 	.word	0x0000317d
    3304:	00806024 	.word	0x00806024
    3308:	ff80ffff 	.word	0xff80ffff
    330c:	00002d75 	.word	0x00002d75
    3310:	00003005 	.word	0x00003005
    3314:	000030d1 	.word	0x000030d1
    3318:	00002da9 	.word	0x00002da9
    331c:	00002f8d 	.word	0x00002f8d
    3320:	000033d9 	.word	0x000033d9
    3324:	00002d49 	.word	0x00002d49
    3328:	00003409 	.word	0x00003409
    332c:	00003529 	.word	0x00003529
    3330:	00002dc9 	.word	0x00002dc9
    3334:	00002de9 	.word	0x00002de9

00003338 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
    333e:	1c02      	adds	r2, r0, #0
    3340:	6039      	str	r1, [r7, #0]
    3342:	1dfb      	adds	r3, r7, #7
    3344:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3346:	1dfb      	adds	r3, r7, #7
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b01      	cmp	r3, #1
    334c:	d00a      	beq.n	3364 <system_apb_clock_set_mask+0x2c>
    334e:	2b02      	cmp	r3, #2
    3350:	d00f      	beq.n	3372 <system_apb_clock_set_mask+0x3a>
    3352:	2b00      	cmp	r3, #0
    3354:	d114      	bne.n	3380 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3356:	4b0e      	ldr	r3, [pc, #56]	; (3390 <system_apb_clock_set_mask+0x58>)
    3358:	4a0d      	ldr	r2, [pc, #52]	; (3390 <system_apb_clock_set_mask+0x58>)
    335a:	6991      	ldr	r1, [r2, #24]
    335c:	683a      	ldr	r2, [r7, #0]
    335e:	430a      	orrs	r2, r1
    3360:	619a      	str	r2, [r3, #24]
			break;
    3362:	e00f      	b.n	3384 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3364:	4b0a      	ldr	r3, [pc, #40]	; (3390 <system_apb_clock_set_mask+0x58>)
    3366:	4a0a      	ldr	r2, [pc, #40]	; (3390 <system_apb_clock_set_mask+0x58>)
    3368:	69d1      	ldr	r1, [r2, #28]
    336a:	683a      	ldr	r2, [r7, #0]
    336c:	430a      	orrs	r2, r1
    336e:	61da      	str	r2, [r3, #28]
			break;
    3370:	e008      	b.n	3384 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3372:	4b07      	ldr	r3, [pc, #28]	; (3390 <system_apb_clock_set_mask+0x58>)
    3374:	4a06      	ldr	r2, [pc, #24]	; (3390 <system_apb_clock_set_mask+0x58>)
    3376:	6a11      	ldr	r1, [r2, #32]
    3378:	683a      	ldr	r2, [r7, #0]
    337a:	430a      	orrs	r2, r1
    337c:	621a      	str	r2, [r3, #32]
			break;
    337e:	e001      	b.n	3384 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3380:	2317      	movs	r3, #23
    3382:	e000      	b.n	3386 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3384:	2300      	movs	r3, #0
}
    3386:	1c18      	adds	r0, r3, #0
    3388:	46bd      	mov	sp, r7
    338a:	b002      	add	sp, #8
    338c:	bd80      	pop	{r7, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	40000400 	.word	0x40000400

00003394 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    3394:	b580      	push	{r7, lr}
    3396:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3398:	4b01      	ldr	r3, [pc, #4]	; (33a0 <system_interrupt_enter_critical_section+0xc>)
    339a:	4798      	blx	r3
}
    339c:	46bd      	mov	sp, r7
    339e:	bd80      	pop	{r7, pc}
    33a0:	00002cbd 	.word	0x00002cbd

000033a4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    33a8:	4b01      	ldr	r3, [pc, #4]	; (33b0 <system_interrupt_leave_critical_section+0xc>)
    33aa:	4798      	blx	r3
}
    33ac:	46bd      	mov	sp, r7
    33ae:	bd80      	pop	{r7, pc}
    33b0:	00002d0d 	.word	0x00002d0d

000033b4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    33b4:	b580      	push	{r7, lr}
    33b6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33b8:	4b06      	ldr	r3, [pc, #24]	; (33d4 <system_gclk_is_syncing+0x20>)
    33ba:	785b      	ldrb	r3, [r3, #1]
    33bc:	b2db      	uxtb	r3, r3
    33be:	b2db      	uxtb	r3, r3
    33c0:	b25b      	sxtb	r3, r3
    33c2:	2b00      	cmp	r3, #0
    33c4:	da01      	bge.n	33ca <system_gclk_is_syncing+0x16>
		return true;
    33c6:	2301      	movs	r3, #1
    33c8:	e000      	b.n	33cc <system_gclk_is_syncing+0x18>
	}

	return false;
    33ca:	2300      	movs	r3, #0
}
    33cc:	1c18      	adds	r0, r3, #0
    33ce:	46bd      	mov	sp, r7
    33d0:	bd80      	pop	{r7, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	40000c00 	.word	0x40000c00

000033d8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    33d8:	b580      	push	{r7, lr}
    33da:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    33dc:	2000      	movs	r0, #0
    33de:	2108      	movs	r1, #8
    33e0:	4b07      	ldr	r3, [pc, #28]	; (3400 <system_gclk_init+0x28>)
    33e2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    33e4:	4b07      	ldr	r3, [pc, #28]	; (3404 <system_gclk_init+0x2c>)
    33e6:	2201      	movs	r2, #1
    33e8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	4b05      	ldr	r3, [pc, #20]	; (3404 <system_gclk_init+0x2c>)
    33ee:	781b      	ldrb	r3, [r3, #0]
    33f0:	b2db      	uxtb	r3, r3
    33f2:	1c1a      	adds	r2, r3, #0
    33f4:	2301      	movs	r3, #1
    33f6:	4013      	ands	r3, r2
    33f8:	d1f8      	bne.n	33ec <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    33fa:	46bd      	mov	sp, r7
    33fc:	bd80      	pop	{r7, pc}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	00003339 	.word	0x00003339
    3404:	40000c00 	.word	0x40000c00

00003408 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3408:	b580      	push	{r7, lr}
    340a:	b086      	sub	sp, #24
    340c:	af00      	add	r7, sp, #0
    340e:	1c02      	adds	r2, r0, #0
    3410:	6039      	str	r1, [r7, #0]
    3412:	1dfb      	adds	r3, r7, #7
    3414:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3416:	1dfb      	adds	r3, r7, #7
    3418:	781b      	ldrb	r3, [r3, #0]
    341a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    341c:	1dfb      	adds	r3, r7, #7
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3422:	683b      	ldr	r3, [r7, #0]
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	021b      	lsls	r3, r3, #8
    3428:	1c1a      	adds	r2, r3, #0
    342a:	697b      	ldr	r3, [r7, #20]
    342c:	4313      	orrs	r3, r2
    342e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3430:	683b      	ldr	r3, [r7, #0]
    3432:	785b      	ldrb	r3, [r3, #1]
    3434:	2b00      	cmp	r3, #0
    3436:	d004      	beq.n	3442 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3438:	697b      	ldr	r3, [r7, #20]
    343a:	2280      	movs	r2, #128	; 0x80
    343c:	02d2      	lsls	r2, r2, #11
    343e:	4313      	orrs	r3, r2
    3440:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3442:	683b      	ldr	r3, [r7, #0]
    3444:	7a5b      	ldrb	r3, [r3, #9]
    3446:	2b00      	cmp	r3, #0
    3448:	d004      	beq.n	3454 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    344a:	697b      	ldr	r3, [r7, #20]
    344c:	2280      	movs	r2, #128	; 0x80
    344e:	0312      	lsls	r2, r2, #12
    3450:	4313      	orrs	r3, r2
    3452:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3454:	683b      	ldr	r3, [r7, #0]
    3456:	685b      	ldr	r3, [r3, #4]
    3458:	2b01      	cmp	r3, #1
    345a:	d92c      	bls.n	34b6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    345c:	683b      	ldr	r3, [r7, #0]
    345e:	685a      	ldr	r2, [r3, #4]
    3460:	683b      	ldr	r3, [r7, #0]
    3462:	685b      	ldr	r3, [r3, #4]
    3464:	3b01      	subs	r3, #1
    3466:	4013      	ands	r3, r2
    3468:	d11a      	bne.n	34a0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    346a:	2300      	movs	r3, #0
    346c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    346e:	2302      	movs	r3, #2
    3470:	60bb      	str	r3, [r7, #8]
    3472:	e005      	b.n	3480 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	3301      	adds	r3, #1
    3478:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    347a:	68bb      	ldr	r3, [r7, #8]
    347c:	005b      	lsls	r3, r3, #1
    347e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3480:	683b      	ldr	r3, [r7, #0]
    3482:	685a      	ldr	r2, [r3, #4]
    3484:	68bb      	ldr	r3, [r7, #8]
    3486:	429a      	cmp	r2, r3
    3488:	d8f4      	bhi.n	3474 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	021b      	lsls	r3, r3, #8
    348e:	693a      	ldr	r2, [r7, #16]
    3490:	4313      	orrs	r3, r2
    3492:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3494:	697b      	ldr	r3, [r7, #20]
    3496:	2280      	movs	r2, #128	; 0x80
    3498:	0352      	lsls	r2, r2, #13
    349a:	4313      	orrs	r3, r2
    349c:	617b      	str	r3, [r7, #20]
    349e:	e00a      	b.n	34b6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    34a0:	683b      	ldr	r3, [r7, #0]
    34a2:	685b      	ldr	r3, [r3, #4]
    34a4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    34a6:	693a      	ldr	r2, [r7, #16]
    34a8:	4313      	orrs	r3, r2
    34aa:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    34ac:	697b      	ldr	r3, [r7, #20]
    34ae:	2280      	movs	r2, #128	; 0x80
    34b0:	0292      	lsls	r2, r2, #10
    34b2:	4313      	orrs	r3, r2
    34b4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    34b6:	683b      	ldr	r3, [r7, #0]
    34b8:	7a1b      	ldrb	r3, [r3, #8]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d004      	beq.n	34c8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    34be:	697b      	ldr	r3, [r7, #20]
    34c0:	2280      	movs	r2, #128	; 0x80
    34c2:	0392      	lsls	r2, r2, #14
    34c4:	4313      	orrs	r3, r2
    34c6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	4b12      	ldr	r3, [pc, #72]	; (3514 <system_gclk_gen_set_config+0x10c>)
    34cc:	4798      	blx	r3
    34ce:	1e03      	subs	r3, r0, #0
    34d0:	d1fb      	bne.n	34ca <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    34d2:	4b11      	ldr	r3, [pc, #68]	; (3518 <system_gclk_gen_set_config+0x110>)
    34d4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    34d6:	4a11      	ldr	r2, [pc, #68]	; (351c <system_gclk_gen_set_config+0x114>)
    34d8:	1dfb      	adds	r3, r7, #7
    34da:	781b      	ldrb	r3, [r3, #0]
    34dc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	4b0c      	ldr	r3, [pc, #48]	; (3514 <system_gclk_gen_set_config+0x10c>)
    34e2:	4798      	blx	r3
    34e4:	1e03      	subs	r3, r0, #0
    34e6:	d1fb      	bne.n	34e0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    34e8:	4b0d      	ldr	r3, [pc, #52]	; (3520 <system_gclk_gen_set_config+0x118>)
    34ea:	693a      	ldr	r2, [r7, #16]
    34ec:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	4b08      	ldr	r3, [pc, #32]	; (3514 <system_gclk_gen_set_config+0x10c>)
    34f2:	4798      	blx	r3
    34f4:	1e03      	subs	r3, r0, #0
    34f6:	d1fb      	bne.n	34f0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    34f8:	4b09      	ldr	r3, [pc, #36]	; (3520 <system_gclk_gen_set_config+0x118>)
    34fa:	4a09      	ldr	r2, [pc, #36]	; (3520 <system_gclk_gen_set_config+0x118>)
    34fc:	6851      	ldr	r1, [r2, #4]
    34fe:	2280      	movs	r2, #128	; 0x80
    3500:	0252      	lsls	r2, r2, #9
    3502:	4011      	ands	r1, r2
    3504:	697a      	ldr	r2, [r7, #20]
    3506:	430a      	orrs	r2, r1
    3508:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    350a:	4b06      	ldr	r3, [pc, #24]	; (3524 <system_gclk_gen_set_config+0x11c>)
    350c:	4798      	blx	r3
}
    350e:	46bd      	mov	sp, r7
    3510:	b006      	add	sp, #24
    3512:	bd80      	pop	{r7, pc}
    3514:	000033b5 	.word	0x000033b5
    3518:	00003395 	.word	0x00003395
    351c:	40000c08 	.word	0x40000c08
    3520:	40000c00 	.word	0x40000c00
    3524:	000033a5 	.word	0x000033a5

00003528 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3528:	b580      	push	{r7, lr}
    352a:	b082      	sub	sp, #8
    352c:	af00      	add	r7, sp, #0
    352e:	1c02      	adds	r2, r0, #0
    3530:	1dfb      	adds	r3, r7, #7
    3532:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3534:	46c0      	nop			; (mov r8, r8)
    3536:	4b0d      	ldr	r3, [pc, #52]	; (356c <system_gclk_gen_enable+0x44>)
    3538:	4798      	blx	r3
    353a:	1e03      	subs	r3, r0, #0
    353c:	d1fb      	bne.n	3536 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    353e:	4b0c      	ldr	r3, [pc, #48]	; (3570 <system_gclk_gen_enable+0x48>)
    3540:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3542:	4a0c      	ldr	r2, [pc, #48]	; (3574 <system_gclk_gen_enable+0x4c>)
    3544:	1dfb      	adds	r3, r7, #7
    3546:	781b      	ldrb	r3, [r3, #0]
    3548:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	4b07      	ldr	r3, [pc, #28]	; (356c <system_gclk_gen_enable+0x44>)
    354e:	4798      	blx	r3
    3550:	1e03      	subs	r3, r0, #0
    3552:	d1fb      	bne.n	354c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3554:	4b08      	ldr	r3, [pc, #32]	; (3578 <system_gclk_gen_enable+0x50>)
    3556:	4a08      	ldr	r2, [pc, #32]	; (3578 <system_gclk_gen_enable+0x50>)
    3558:	6852      	ldr	r2, [r2, #4]
    355a:	2180      	movs	r1, #128	; 0x80
    355c:	0249      	lsls	r1, r1, #9
    355e:	430a      	orrs	r2, r1
    3560:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3562:	4b06      	ldr	r3, [pc, #24]	; (357c <system_gclk_gen_enable+0x54>)
    3564:	4798      	blx	r3
}
    3566:	46bd      	mov	sp, r7
    3568:	b002      	add	sp, #8
    356a:	bd80      	pop	{r7, pc}
    356c:	000033b5 	.word	0x000033b5
    3570:	00003395 	.word	0x00003395
    3574:	40000c04 	.word	0x40000c04
    3578:	40000c00 	.word	0x40000c00
    357c:	000033a5 	.word	0x000033a5

00003580 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3580:	b580      	push	{r7, lr}
    3582:	b086      	sub	sp, #24
    3584:	af00      	add	r7, sp, #0
    3586:	1c02      	adds	r2, r0, #0
    3588:	1dfb      	adds	r3, r7, #7
    358a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    358c:	46c0      	nop			; (mov r8, r8)
    358e:	4b2e      	ldr	r3, [pc, #184]	; (3648 <system_gclk_gen_get_hz+0xc8>)
    3590:	4798      	blx	r3
    3592:	1e03      	subs	r3, r0, #0
    3594:	d1fb      	bne.n	358e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3596:	4b2d      	ldr	r3, [pc, #180]	; (364c <system_gclk_gen_get_hz+0xcc>)
    3598:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    359a:	4a2d      	ldr	r2, [pc, #180]	; (3650 <system_gclk_gen_get_hz+0xd0>)
    359c:	1dfb      	adds	r3, r7, #7
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	4b28      	ldr	r3, [pc, #160]	; (3648 <system_gclk_gen_get_hz+0xc8>)
    35a6:	4798      	blx	r3
    35a8:	1e03      	subs	r3, r0, #0
    35aa:	d1fb      	bne.n	35a4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    35ac:	4b29      	ldr	r3, [pc, #164]	; (3654 <system_gclk_gen_get_hz+0xd4>)
    35ae:	685b      	ldr	r3, [r3, #4]
    35b0:	0a1b      	lsrs	r3, r3, #8
    35b2:	1c1a      	adds	r2, r3, #0
    35b4:	231f      	movs	r3, #31
    35b6:	4013      	ands	r3, r2
    35b8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    35ba:	1c18      	adds	r0, r3, #0
    35bc:	4b26      	ldr	r3, [pc, #152]	; (3658 <system_gclk_gen_get_hz+0xd8>)
    35be:	4798      	blx	r3
    35c0:	1c03      	adds	r3, r0, #0
    35c2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    35c4:	4a22      	ldr	r2, [pc, #136]	; (3650 <system_gclk_gen_get_hz+0xd0>)
    35c6:	1dfb      	adds	r3, r7, #7
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    35cc:	4b21      	ldr	r3, [pc, #132]	; (3654 <system_gclk_gen_get_hz+0xd4>)
    35ce:	685b      	ldr	r3, [r3, #4]
    35d0:	0d1b      	lsrs	r3, r3, #20
    35d2:	1c1a      	adds	r2, r3, #0
    35d4:	2301      	movs	r3, #1
    35d6:	4013      	ands	r3, r2
    35d8:	b2da      	uxtb	r2, r3
    35da:	2313      	movs	r3, #19
    35dc:	18fb      	adds	r3, r7, r3
    35de:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    35e0:	4a1e      	ldr	r2, [pc, #120]	; (365c <system_gclk_gen_get_hz+0xdc>)
    35e2:	1dfb      	adds	r3, r7, #7
    35e4:	781b      	ldrb	r3, [r3, #0]
    35e6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    35e8:	46c0      	nop			; (mov r8, r8)
    35ea:	4b17      	ldr	r3, [pc, #92]	; (3648 <system_gclk_gen_get_hz+0xc8>)
    35ec:	4798      	blx	r3
    35ee:	1e03      	subs	r3, r0, #0
    35f0:	d1fb      	bne.n	35ea <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    35f2:	4b18      	ldr	r3, [pc, #96]	; (3654 <system_gclk_gen_get_hz+0xd4>)
    35f4:	689b      	ldr	r3, [r3, #8]
    35f6:	0a1b      	lsrs	r3, r3, #8
    35f8:	1c1a      	adds	r2, r3, #0
    35fa:	2300      	movs	r3, #0
    35fc:	439a      	bics	r2, r3
    35fe:	1c13      	adds	r3, r2, #0
    3600:	b29b      	uxth	r3, r3
    3602:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3604:	4b16      	ldr	r3, [pc, #88]	; (3660 <system_gclk_gen_get_hz+0xe0>)
    3606:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3608:	2313      	movs	r3, #19
    360a:	18fb      	adds	r3, r7, r3
    360c:	781b      	ldrb	r3, [r3, #0]
    360e:	2b00      	cmp	r3, #0
    3610:	d109      	bne.n	3626 <system_gclk_gen_get_hz+0xa6>
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	2b01      	cmp	r3, #1
    3616:	d906      	bls.n	3626 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    3618:	4b12      	ldr	r3, [pc, #72]	; (3664 <system_gclk_gen_get_hz+0xe4>)
    361a:	6978      	ldr	r0, [r7, #20]
    361c:	68f9      	ldr	r1, [r7, #12]
    361e:	4798      	blx	r3
    3620:	1c03      	adds	r3, r0, #0
    3622:	617b      	str	r3, [r7, #20]
    3624:	e00a      	b.n	363c <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    3626:	2313      	movs	r3, #19
    3628:	18fb      	adds	r3, r7, r3
    362a:	781b      	ldrb	r3, [r3, #0]
    362c:	2b00      	cmp	r3, #0
    362e:	d005      	beq.n	363c <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    3630:	68fb      	ldr	r3, [r7, #12]
    3632:	3301      	adds	r3, #1
    3634:	1c1a      	adds	r2, r3, #0
    3636:	697b      	ldr	r3, [r7, #20]
    3638:	40d3      	lsrs	r3, r2
    363a:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    363c:	697b      	ldr	r3, [r7, #20]
}
    363e:	1c18      	adds	r0, r3, #0
    3640:	46bd      	mov	sp, r7
    3642:	b006      	add	sp, #24
    3644:	bd80      	pop	{r7, pc}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	000033b5 	.word	0x000033b5
    364c:	00003395 	.word	0x00003395
    3650:	40000c04 	.word	0x40000c04
    3654:	40000c00 	.word	0x40000c00
    3658:	00002ecd 	.word	0x00002ecd
    365c:	40000c08 	.word	0x40000c08
    3660:	000033a5 	.word	0x000033a5
    3664:	0000508d 	.word	0x0000508d

00003668 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3668:	b580      	push	{r7, lr}
    366a:	b084      	sub	sp, #16
    366c:	af00      	add	r7, sp, #0
    366e:	1c02      	adds	r2, r0, #0
    3670:	6039      	str	r1, [r7, #0]
    3672:	1dfb      	adds	r3, r7, #7
    3674:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3676:	1dfb      	adds	r3, r7, #7
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    367c:	683b      	ldr	r3, [r7, #0]
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	021b      	lsls	r3, r3, #8
    3682:	1c1a      	adds	r2, r3, #0
    3684:	68fb      	ldr	r3, [r7, #12]
    3686:	4313      	orrs	r3, r2
    3688:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    368a:	1dfb      	adds	r3, r7, #7
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	1c18      	adds	r0, r3, #0
    3690:	4b04      	ldr	r3, [pc, #16]	; (36a4 <system_gclk_chan_set_config+0x3c>)
    3692:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3694:	4b04      	ldr	r3, [pc, #16]	; (36a8 <system_gclk_chan_set_config+0x40>)
    3696:	68fa      	ldr	r2, [r7, #12]
    3698:	b292      	uxth	r2, r2
    369a:	805a      	strh	r2, [r3, #2]
}
    369c:	46bd      	mov	sp, r7
    369e:	b004      	add	sp, #16
    36a0:	bd80      	pop	{r7, pc}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	000036f1 	.word	0x000036f1
    36a8:	40000c00 	.word	0x40000c00

000036ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b082      	sub	sp, #8
    36b0:	af00      	add	r7, sp, #0
    36b2:	1c02      	adds	r2, r0, #0
    36b4:	1dfb      	adds	r3, r7, #7
    36b6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    36b8:	4b09      	ldr	r3, [pc, #36]	; (36e0 <system_gclk_chan_enable+0x34>)
    36ba:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    36bc:	4a09      	ldr	r2, [pc, #36]	; (36e4 <system_gclk_chan_enable+0x38>)
    36be:	1dfb      	adds	r3, r7, #7
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    36c4:	4908      	ldr	r1, [pc, #32]	; (36e8 <system_gclk_chan_enable+0x3c>)
    36c6:	4b08      	ldr	r3, [pc, #32]	; (36e8 <system_gclk_chan_enable+0x3c>)
    36c8:	885b      	ldrh	r3, [r3, #2]
    36ca:	b29b      	uxth	r3, r3
    36cc:	2280      	movs	r2, #128	; 0x80
    36ce:	01d2      	lsls	r2, r2, #7
    36d0:	4313      	orrs	r3, r2
    36d2:	b29b      	uxth	r3, r3
    36d4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    36d6:	4b05      	ldr	r3, [pc, #20]	; (36ec <system_gclk_chan_enable+0x40>)
    36d8:	4798      	blx	r3
}
    36da:	46bd      	mov	sp, r7
    36dc:	b002      	add	sp, #8
    36de:	bd80      	pop	{r7, pc}
    36e0:	00003395 	.word	0x00003395
    36e4:	40000c02 	.word	0x40000c02
    36e8:	40000c00 	.word	0x40000c00
    36ec:	000033a5 	.word	0x000033a5

000036f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    36f0:	b580      	push	{r7, lr}
    36f2:	b084      	sub	sp, #16
    36f4:	af00      	add	r7, sp, #0
    36f6:	1c02      	adds	r2, r0, #0
    36f8:	1dfb      	adds	r3, r7, #7
    36fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    36fc:	4b1d      	ldr	r3, [pc, #116]	; (3774 <system_gclk_chan_disable+0x84>)
    36fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3700:	4a1d      	ldr	r2, [pc, #116]	; (3778 <system_gclk_chan_disable+0x88>)
    3702:	1dfb      	adds	r3, r7, #7
    3704:	781b      	ldrb	r3, [r3, #0]
    3706:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3708:	4b1c      	ldr	r3, [pc, #112]	; (377c <system_gclk_chan_disable+0x8c>)
    370a:	885b      	ldrh	r3, [r3, #2]
    370c:	b29b      	uxth	r3, r3
    370e:	0a1b      	lsrs	r3, r3, #8
    3710:	1c1a      	adds	r2, r3, #0
    3712:	230f      	movs	r3, #15
    3714:	4013      	ands	r3, r2
    3716:	b2db      	uxtb	r3, r3
    3718:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    371a:	4b18      	ldr	r3, [pc, #96]	; (377c <system_gclk_chan_disable+0x8c>)
    371c:	885a      	ldrh	r2, [r3, #2]
    371e:	4918      	ldr	r1, [pc, #96]	; (3780 <system_gclk_chan_disable+0x90>)
    3720:	400a      	ands	r2, r1
    3722:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3724:	4a15      	ldr	r2, [pc, #84]	; (377c <system_gclk_chan_disable+0x8c>)
    3726:	4b15      	ldr	r3, [pc, #84]	; (377c <system_gclk_chan_disable+0x8c>)
    3728:	885b      	ldrh	r3, [r3, #2]
    372a:	b29b      	uxth	r3, r3
    372c:	4915      	ldr	r1, [pc, #84]	; (3784 <system_gclk_chan_disable+0x94>)
    372e:	400b      	ands	r3, r1
    3730:	b29b      	uxth	r3, r3
    3732:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3734:	46c0      	nop			; (mov r8, r8)
    3736:	4b11      	ldr	r3, [pc, #68]	; (377c <system_gclk_chan_disable+0x8c>)
    3738:	885b      	ldrh	r3, [r3, #2]
    373a:	b29b      	uxth	r3, r3
    373c:	1c1a      	adds	r2, r3, #0
    373e:	2380      	movs	r3, #128	; 0x80
    3740:	01db      	lsls	r3, r3, #7
    3742:	4013      	ands	r3, r2
    3744:	d1f7      	bne.n	3736 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3746:	4b0d      	ldr	r3, [pc, #52]	; (377c <system_gclk_chan_disable+0x8c>)
    3748:	68fa      	ldr	r2, [r7, #12]
    374a:	b2d2      	uxtb	r2, r2
    374c:	1c11      	adds	r1, r2, #0
    374e:	220f      	movs	r2, #15
    3750:	400a      	ands	r2, r1
    3752:	b2d2      	uxtb	r2, r2
    3754:	1c11      	adds	r1, r2, #0
    3756:	220f      	movs	r2, #15
    3758:	400a      	ands	r2, r1
    375a:	0210      	lsls	r0, r2, #8
    375c:	885a      	ldrh	r2, [r3, #2]
    375e:	4908      	ldr	r1, [pc, #32]	; (3780 <system_gclk_chan_disable+0x90>)
    3760:	400a      	ands	r2, r1
    3762:	1c11      	adds	r1, r2, #0
    3764:	1c02      	adds	r2, r0, #0
    3766:	430a      	orrs	r2, r1
    3768:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    376a:	4b07      	ldr	r3, [pc, #28]	; (3788 <system_gclk_chan_disable+0x98>)
    376c:	4798      	blx	r3
}
    376e:	46bd      	mov	sp, r7
    3770:	b004      	add	sp, #16
    3772:	bd80      	pop	{r7, pc}
    3774:	00003395 	.word	0x00003395
    3778:	40000c02 	.word	0x40000c02
    377c:	40000c00 	.word	0x40000c00
    3780:	fffff0ff 	.word	0xfffff0ff
    3784:	ffffbfff 	.word	0xffffbfff
    3788:	000033a5 	.word	0x000033a5

0000378c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    378c:	b580      	push	{r7, lr}
    378e:	b084      	sub	sp, #16
    3790:	af00      	add	r7, sp, #0
    3792:	1c02      	adds	r2, r0, #0
    3794:	1dfb      	adds	r3, r7, #7
    3796:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3798:	4b0e      	ldr	r3, [pc, #56]	; (37d4 <system_gclk_chan_get_hz+0x48>)
    379a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    379c:	4a0e      	ldr	r2, [pc, #56]	; (37d8 <system_gclk_chan_get_hz+0x4c>)
    379e:	1dfb      	adds	r3, r7, #7
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <system_gclk_chan_get_hz+0x50>)
    37a6:	885b      	ldrh	r3, [r3, #2]
    37a8:	b29b      	uxth	r3, r3
    37aa:	0a1b      	lsrs	r3, r3, #8
    37ac:	1c1a      	adds	r2, r3, #0
    37ae:	230f      	movs	r3, #15
    37b0:	4013      	ands	r3, r2
    37b2:	b2da      	uxtb	r2, r3
    37b4:	230f      	movs	r3, #15
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    37ba:	4b09      	ldr	r3, [pc, #36]	; (37e0 <system_gclk_chan_get_hz+0x54>)
    37bc:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    37be:	230f      	movs	r3, #15
    37c0:	18fb      	adds	r3, r7, r3
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	1c18      	adds	r0, r3, #0
    37c6:	4b07      	ldr	r3, [pc, #28]	; (37e4 <system_gclk_chan_get_hz+0x58>)
    37c8:	4798      	blx	r3
    37ca:	1c03      	adds	r3, r0, #0
}
    37cc:	1c18      	adds	r0, r3, #0
    37ce:	46bd      	mov	sp, r7
    37d0:	b004      	add	sp, #16
    37d2:	bd80      	pop	{r7, pc}
    37d4:	00003395 	.word	0x00003395
    37d8:	40000c02 	.word	0x40000c02
    37dc:	40000c00 	.word	0x40000c00
    37e0:	000033a5 	.word	0x000033a5
    37e4:	00003581 	.word	0x00003581

000037e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    37e8:	b580      	push	{r7, lr}
    37ea:	b084      	sub	sp, #16
    37ec:	af00      	add	r7, sp, #0
    37ee:	1c02      	adds	r2, r0, #0
    37f0:	1dfb      	adds	r3, r7, #7
    37f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    37f4:	230f      	movs	r3, #15
    37f6:	18fb      	adds	r3, r7, r3
    37f8:	1dfa      	adds	r2, r7, #7
    37fa:	7812      	ldrb	r2, [r2, #0]
    37fc:	09d2      	lsrs	r2, r2, #7
    37fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3800:	230e      	movs	r3, #14
    3802:	18fb      	adds	r3, r7, r3
    3804:	1dfa      	adds	r2, r7, #7
    3806:	7812      	ldrb	r2, [r2, #0]
    3808:	0952      	lsrs	r2, r2, #5
    380a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    380c:	4b0d      	ldr	r3, [pc, #52]	; (3844 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    380e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3810:	230f      	movs	r3, #15
    3812:	18fb      	adds	r3, r7, r3
    3814:	781b      	ldrb	r3, [r3, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d10f      	bne.n	383a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    381a:	230f      	movs	r3, #15
    381c:	18fb      	adds	r3, r7, r3
    381e:	781b      	ldrb	r3, [r3, #0]
    3820:	009b      	lsls	r3, r3, #2
    3822:	2210      	movs	r2, #16
    3824:	4694      	mov	ip, r2
    3826:	44bc      	add	ip, r7
    3828:	4463      	add	r3, ip
    382a:	3b08      	subs	r3, #8
    382c:	681a      	ldr	r2, [r3, #0]
    382e:	230e      	movs	r3, #14
    3830:	18fb      	adds	r3, r7, r3
    3832:	781b      	ldrb	r3, [r3, #0]
    3834:	01db      	lsls	r3, r3, #7
    3836:	18d3      	adds	r3, r2, r3
    3838:	e000      	b.n	383c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    383a:	2300      	movs	r3, #0
	}
}
    383c:	1c18      	adds	r0, r3, #0
    383e:	46bd      	mov	sp, r7
    3840:	b004      	add	sp, #16
    3842:	bd80      	pop	{r7, pc}
    3844:	41004400 	.word	0x41004400

00003848 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3848:	b580      	push	{r7, lr}
    384a:	b088      	sub	sp, #32
    384c:	af00      	add	r7, sp, #0
    384e:	60f8      	str	r0, [r7, #12]
    3850:	60b9      	str	r1, [r7, #8]
    3852:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3854:	2300      	movs	r3, #0
    3856:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3858:	687b      	ldr	r3, [r7, #4]
    385a:	78db      	ldrb	r3, [r3, #3]
    385c:	2201      	movs	r2, #1
    385e:	4053      	eors	r3, r2
    3860:	b2db      	uxtb	r3, r3
    3862:	2b00      	cmp	r3, #0
    3864:	d035      	beq.n	38d2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3866:	687b      	ldr	r3, [r7, #4]
    3868:	781b      	ldrb	r3, [r3, #0]
    386a:	2b80      	cmp	r3, #128	; 0x80
    386c:	d00b      	beq.n	3886 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    386e:	69fb      	ldr	r3, [r7, #28]
    3870:	2280      	movs	r2, #128	; 0x80
    3872:	0252      	lsls	r2, r2, #9
    3874:	4313      	orrs	r3, r2
    3876:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	781b      	ldrb	r3, [r3, #0]
    387c:	061b      	lsls	r3, r3, #24
    387e:	1c1a      	adds	r2, r3, #0
    3880:	69fb      	ldr	r3, [r7, #28]
    3882:	4313      	orrs	r3, r2
    3884:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	785b      	ldrb	r3, [r3, #1]
    388a:	2b00      	cmp	r3, #0
    388c:	d003      	beq.n	3896 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3892:	2b02      	cmp	r3, #2
    3894:	d110      	bne.n	38b8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3896:	69fb      	ldr	r3, [r7, #28]
    3898:	2280      	movs	r2, #128	; 0x80
    389a:	0292      	lsls	r2, r2, #10
    389c:	4313      	orrs	r3, r2
    389e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	789b      	ldrb	r3, [r3, #2]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d004      	beq.n	38b2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    38a8:	69fb      	ldr	r3, [r7, #28]
    38aa:	2280      	movs	r2, #128	; 0x80
    38ac:	02d2      	lsls	r2, r2, #11
    38ae:	4313      	orrs	r3, r2
    38b0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    38b2:	68fb      	ldr	r3, [r7, #12]
    38b4:	68ba      	ldr	r2, [r7, #8]
    38b6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	785b      	ldrb	r3, [r3, #1]
    38bc:	2b01      	cmp	r3, #1
    38be:	d003      	beq.n	38c8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    38c4:	2b02      	cmp	r3, #2
    38c6:	d107      	bne.n	38d8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    38c8:	69fb      	ldr	r3, [r7, #28]
    38ca:	4a21      	ldr	r2, [pc, #132]	; (3950 <_system_pinmux_config+0x108>)
    38cc:	4013      	ands	r3, r2
    38ce:	61fb      	str	r3, [r7, #28]
    38d0:	e002      	b.n	38d8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	68ba      	ldr	r2, [r7, #8]
    38d6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	041b      	lsls	r3, r3, #16
    38dc:	0c1b      	lsrs	r3, r3, #16
    38de:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    38e0:	68bb      	ldr	r3, [r7, #8]
    38e2:	0c1b      	lsrs	r3, r3, #16
    38e4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38e6:	69ba      	ldr	r2, [r7, #24]
    38e8:	69fb      	ldr	r3, [r7, #28]
    38ea:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    38ec:	22a0      	movs	r2, #160	; 0xa0
    38ee:	05d2      	lsls	r2, r2, #23
    38f0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    38f6:	697a      	ldr	r2, [r7, #20]
    38f8:	69fb      	ldr	r3, [r7, #28]
    38fa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    38fc:	22d0      	movs	r2, #208	; 0xd0
    38fe:	0612      	lsls	r2, r2, #24
    3900:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3902:	68fb      	ldr	r3, [r7, #12]
    3904:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	78db      	ldrb	r3, [r3, #3]
    390a:	2201      	movs	r2, #1
    390c:	4053      	eors	r3, r2
    390e:	b2db      	uxtb	r3, r3
    3910:	2b00      	cmp	r3, #0
    3912:	d01a      	beq.n	394a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3914:	69fa      	ldr	r2, [r7, #28]
    3916:	2380      	movs	r3, #128	; 0x80
    3918:	02db      	lsls	r3, r3, #11
    391a:	4013      	ands	r3, r2
    391c:	d00a      	beq.n	3934 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	789b      	ldrb	r3, [r3, #2]
    3922:	2b01      	cmp	r3, #1
    3924:	d103      	bne.n	392e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	68ba      	ldr	r2, [r7, #8]
    392a:	619a      	str	r2, [r3, #24]
    392c:	e002      	b.n	3934 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	68ba      	ldr	r2, [r7, #8]
    3932:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	785b      	ldrb	r3, [r3, #1]
    3938:	2b01      	cmp	r3, #1
    393a:	d003      	beq.n	3944 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3940:	2b02      	cmp	r3, #2
    3942:	d102      	bne.n	394a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	68ba      	ldr	r2, [r7, #8]
    3948:	609a      	str	r2, [r3, #8]
		}
	}
}
    394a:	46bd      	mov	sp, r7
    394c:	b008      	add	sp, #32
    394e:	bd80      	pop	{r7, pc}
    3950:	fffbffff 	.word	0xfffbffff

00003954 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3954:	b580      	push	{r7, lr}
    3956:	b084      	sub	sp, #16
    3958:	af00      	add	r7, sp, #0
    395a:	1c02      	adds	r2, r0, #0
    395c:	6039      	str	r1, [r7, #0]
    395e:	1dfb      	adds	r3, r7, #7
    3960:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3962:	1dfb      	adds	r3, r7, #7
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	1c18      	adds	r0, r3, #0
    3968:	4b0b      	ldr	r3, [pc, #44]	; (3998 <system_pinmux_pin_set_config+0x44>)
    396a:	4798      	blx	r3
    396c:	1c03      	adds	r3, r0, #0
    396e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3970:	1dfb      	adds	r3, r7, #7
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	221f      	movs	r2, #31
    3976:	4013      	ands	r3, r2
    3978:	2201      	movs	r2, #1
    397a:	409a      	lsls	r2, r3
    397c:	1c13      	adds	r3, r2, #0
    397e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3980:	68f9      	ldr	r1, [r7, #12]
    3982:	68ba      	ldr	r2, [r7, #8]
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	1c08      	adds	r0, r1, #0
    3988:	1c11      	adds	r1, r2, #0
    398a:	1c1a      	adds	r2, r3, #0
    398c:	4b03      	ldr	r3, [pc, #12]	; (399c <system_pinmux_pin_set_config+0x48>)
    398e:	4798      	blx	r3
}
    3990:	46bd      	mov	sp, r7
    3992:	b004      	add	sp, #16
    3994:	bd80      	pop	{r7, pc}
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	000037e9 	.word	0x000037e9
    399c:	00003849 	.word	0x00003849

000039a0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    39a0:	b580      	push	{r7, lr}
    39a2:	af00      	add	r7, sp, #0
	return;
    39a4:	46c0      	nop			; (mov r8, r8)
}
    39a6:	46bd      	mov	sp, r7
    39a8:	bd80      	pop	{r7, pc}
    39aa:	46c0      	nop			; (mov r8, r8)

000039ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    39b0:	4b05      	ldr	r3, [pc, #20]	; (39c8 <system_init+0x1c>)
    39b2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    39b4:	4b05      	ldr	r3, [pc, #20]	; (39cc <system_init+0x20>)
    39b6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    39b8:	4b05      	ldr	r3, [pc, #20]	; (39d0 <system_init+0x24>)
    39ba:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    39bc:	4b05      	ldr	r3, [pc, #20]	; (39d4 <system_init+0x28>)
    39be:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    39c0:	4b05      	ldr	r3, [pc, #20]	; (39d8 <system_init+0x2c>)
    39c2:	4798      	blx	r3
}
    39c4:	46bd      	mov	sp, r7
    39c6:	bd80      	pop	{r7, pc}
    39c8:	000031b5 	.word	0x000031b5
    39cc:	00002cb5 	.word	0x00002cb5
    39d0:	000039a1 	.word	0x000039a1
    39d4:	00000271 	.word	0x00000271
    39d8:	000039a1 	.word	0x000039a1

000039dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    39dc:	b580      	push	{r7, lr}
    39de:	b082      	sub	sp, #8
    39e0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    39e2:	4b2f      	ldr	r3, [pc, #188]	; (3aa0 <Reset_Handler+0xc4>)
    39e4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    39e6:	4b2f      	ldr	r3, [pc, #188]	; (3aa4 <Reset_Handler+0xc8>)
    39e8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    39ea:	687a      	ldr	r2, [r7, #4]
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	429a      	cmp	r2, r3
    39f0:	d00c      	beq.n	3a0c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    39f2:	e007      	b.n	3a04 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    39f4:	683b      	ldr	r3, [r7, #0]
    39f6:	1d1a      	adds	r2, r3, #4
    39f8:	603a      	str	r2, [r7, #0]
    39fa:	687a      	ldr	r2, [r7, #4]
    39fc:	1d11      	adds	r1, r2, #4
    39fe:	6079      	str	r1, [r7, #4]
    3a00:	6812      	ldr	r2, [r2, #0]
    3a02:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3a04:	683a      	ldr	r2, [r7, #0]
    3a06:	4b28      	ldr	r3, [pc, #160]	; (3aa8 <Reset_Handler+0xcc>)
    3a08:	429a      	cmp	r2, r3
    3a0a:	d3f3      	bcc.n	39f4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3a0c:	4b27      	ldr	r3, [pc, #156]	; (3aac <Reset_Handler+0xd0>)
    3a0e:	603b      	str	r3, [r7, #0]
    3a10:	e004      	b.n	3a1c <Reset_Handler+0x40>
                *pDest++ = 0;
    3a12:	683b      	ldr	r3, [r7, #0]
    3a14:	1d1a      	adds	r2, r3, #4
    3a16:	603a      	str	r2, [r7, #0]
    3a18:	2200      	movs	r2, #0
    3a1a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3a1c:	683a      	ldr	r2, [r7, #0]
    3a1e:	4b24      	ldr	r3, [pc, #144]	; (3ab0 <Reset_Handler+0xd4>)
    3a20:	429a      	cmp	r2, r3
    3a22:	d3f6      	bcc.n	3a12 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3a24:	4b23      	ldr	r3, [pc, #140]	; (3ab4 <Reset_Handler+0xd8>)
    3a26:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3a28:	4b23      	ldr	r3, [pc, #140]	; (3ab8 <Reset_Handler+0xdc>)
    3a2a:	687a      	ldr	r2, [r7, #4]
    3a2c:	21ff      	movs	r1, #255	; 0xff
    3a2e:	438a      	bics	r2, r1
    3a30:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3a32:	4a22      	ldr	r2, [pc, #136]	; (3abc <Reset_Handler+0xe0>)
    3a34:	2390      	movs	r3, #144	; 0x90
    3a36:	005b      	lsls	r3, r3, #1
    3a38:	2102      	movs	r1, #2
    3a3a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3a3c:	4b20      	ldr	r3, [pc, #128]	; (3ac0 <Reset_Handler+0xe4>)
    3a3e:	78da      	ldrb	r2, [r3, #3]
    3a40:	2103      	movs	r1, #3
    3a42:	438a      	bics	r2, r1
    3a44:	1c11      	adds	r1, r2, #0
    3a46:	2202      	movs	r2, #2
    3a48:	430a      	orrs	r2, r1
    3a4a:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3a4c:	4b1c      	ldr	r3, [pc, #112]	; (3ac0 <Reset_Handler+0xe4>)
    3a4e:	78da      	ldrb	r2, [r3, #3]
    3a50:	210c      	movs	r1, #12
    3a52:	438a      	bics	r2, r1
    3a54:	1c11      	adds	r1, r2, #0
    3a56:	2208      	movs	r2, #8
    3a58:	430a      	orrs	r2, r1
    3a5a:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3a5c:	4b19      	ldr	r3, [pc, #100]	; (3ac4 <Reset_Handler+0xe8>)
    3a5e:	7b9a      	ldrb	r2, [r3, #14]
    3a60:	2130      	movs	r1, #48	; 0x30
    3a62:	438a      	bics	r2, r1
    3a64:	1c11      	adds	r1, r2, #0
    3a66:	2220      	movs	r2, #32
    3a68:	430a      	orrs	r2, r1
    3a6a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3a6c:	4b15      	ldr	r3, [pc, #84]	; (3ac4 <Reset_Handler+0xe8>)
    3a6e:	7b9a      	ldrb	r2, [r3, #14]
    3a70:	210c      	movs	r1, #12
    3a72:	438a      	bics	r2, r1
    3a74:	1c11      	adds	r1, r2, #0
    3a76:	2208      	movs	r2, #8
    3a78:	430a      	orrs	r2, r1
    3a7a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3a7c:	4b11      	ldr	r3, [pc, #68]	; (3ac4 <Reset_Handler+0xe8>)
    3a7e:	7b9a      	ldrb	r2, [r3, #14]
    3a80:	2103      	movs	r1, #3
    3a82:	438a      	bics	r2, r1
    3a84:	1c11      	adds	r1, r2, #0
    3a86:	2202      	movs	r2, #2
    3a88:	430a      	orrs	r2, r1
    3a8a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3a8c:	4b0e      	ldr	r3, [pc, #56]	; (3ac8 <Reset_Handler+0xec>)
    3a8e:	685a      	ldr	r2, [r3, #4]
    3a90:	2180      	movs	r1, #128	; 0x80
    3a92:	430a      	orrs	r2, r1
    3a94:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    3a96:	4b0d      	ldr	r3, [pc, #52]	; (3acc <Reset_Handler+0xf0>)
    3a98:	4798      	blx	r3

        /* Branch to main function */
        main();
    3a9a:	4b0d      	ldr	r3, [pc, #52]	; (3ad0 <Reset_Handler+0xf4>)
    3a9c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3a9e:	e7fe      	b.n	3a9e <Reset_Handler+0xc2>
    3aa0:	00005330 	.word	0x00005330
    3aa4:	20000000 	.word	0x20000000
    3aa8:	20000008 	.word	0x20000008
    3aac:	20000008 	.word	0x20000008
    3ab0:	2000028c 	.word	0x2000028c
    3ab4:	00000000 	.word	0x00000000
    3ab8:	e000ed00 	.word	0xe000ed00
    3abc:	41007000 	.word	0x41007000
    3ac0:	41005000 	.word	0x41005000
    3ac4:	41004800 	.word	0x41004800
    3ac8:	41004000 	.word	0x41004000
    3acc:	000051b1 	.word	0x000051b1
    3ad0:	00004ec1 	.word	0x00004ec1

00003ad4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	af00      	add	r7, sp, #0
        while (1) {
        }
    3ad8:	e7fe      	b.n	3ad8 <Dummy_Handler+0x4>
    3ada:	46c0      	nop			; (mov r8, r8)

00003adc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b084      	sub	sp, #16
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	1c02      	adds	r2, r0, #0
    3ae4:	1dfb      	adds	r3, r7, #7
    3ae6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ae8:	230f      	movs	r3, #15
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	1dfa      	adds	r2, r7, #7
    3aee:	7812      	ldrb	r2, [r2, #0]
    3af0:	09d2      	lsrs	r2, r2, #7
    3af2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3af4:	230e      	movs	r3, #14
    3af6:	18fb      	adds	r3, r7, r3
    3af8:	1dfa      	adds	r2, r7, #7
    3afa:	7812      	ldrb	r2, [r2, #0]
    3afc:	0952      	lsrs	r2, r2, #5
    3afe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3b00:	4b0d      	ldr	r3, [pc, #52]	; (3b38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3b02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3b04:	230f      	movs	r3, #15
    3b06:	18fb      	adds	r3, r7, r3
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d10f      	bne.n	3b2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3b0e:	230f      	movs	r3, #15
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	009b      	lsls	r3, r3, #2
    3b16:	2210      	movs	r2, #16
    3b18:	4694      	mov	ip, r2
    3b1a:	44bc      	add	ip, r7
    3b1c:	4463      	add	r3, ip
    3b1e:	3b08      	subs	r3, #8
    3b20:	681a      	ldr	r2, [r3, #0]
    3b22:	230e      	movs	r3, #14
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	781b      	ldrb	r3, [r3, #0]
    3b28:	01db      	lsls	r3, r3, #7
    3b2a:	18d3      	adds	r3, r2, r3
    3b2c:	e000      	b.n	3b30 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3b2e:	2300      	movs	r3, #0
	}
}
    3b30:	1c18      	adds	r0, r3, #0
    3b32:	46bd      	mov	sp, r7
    3b34:	b004      	add	sp, #16
    3b36:	bd80      	pop	{r7, pc}
    3b38:	41004400 	.word	0x41004400

00003b3c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3b3c:	b580      	push	{r7, lr}
    3b3e:	b082      	sub	sp, #8
    3b40:	af00      	add	r7, sp, #0
    3b42:	1c02      	adds	r2, r0, #0
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3b48:	1dfb      	adds	r3, r7, #7
    3b4a:	781b      	ldrb	r3, [r3, #0]
    3b4c:	1c18      	adds	r0, r3, #0
    3b4e:	4b03      	ldr	r3, [pc, #12]	; (3b5c <port_get_group_from_gpio_pin+0x20>)
    3b50:	4798      	blx	r3
    3b52:	1c03      	adds	r3, r0, #0
}
    3b54:	1c18      	adds	r0, r3, #0
    3b56:	46bd      	mov	sp, r7
    3b58:	b002      	add	sp, #8
    3b5a:	bd80      	pop	{r7, pc}
    3b5c:	00003add 	.word	0x00003add

00003b60 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	2200      	movs	r2, #0
    3b6c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	2201      	movs	r2, #1
    3b72:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3b74:	687b      	ldr	r3, [r7, #4]
    3b76:	2200      	movs	r2, #0
    3b78:	709a      	strb	r2, [r3, #2]
}
    3b7a:	46bd      	mov	sp, r7
    3b7c:	b002      	add	sp, #8
    3b7e:	bd80      	pop	{r7, pc}

00003b80 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b084      	sub	sp, #16
    3b84:	af00      	add	r7, sp, #0
    3b86:	1c02      	adds	r2, r0, #0
    3b88:	1dfb      	adds	r3, r7, #7
    3b8a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3b8c:	1dfb      	adds	r3, r7, #7
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	1c18      	adds	r0, r3, #0
    3b92:	4b0b      	ldr	r3, [pc, #44]	; (3bc0 <port_pin_get_input_level+0x40>)
    3b94:	4798      	blx	r3
    3b96:	1c03      	adds	r3, r0, #0
    3b98:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	221f      	movs	r2, #31
    3ba0:	4013      	ands	r3, r2
    3ba2:	2201      	movs	r2, #1
    3ba4:	409a      	lsls	r2, r3
    3ba6:	1c13      	adds	r3, r2, #0
    3ba8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	6a1b      	ldr	r3, [r3, #32]
    3bae:	68ba      	ldr	r2, [r7, #8]
    3bb0:	4013      	ands	r3, r2
    3bb2:	1e5a      	subs	r2, r3, #1
    3bb4:	4193      	sbcs	r3, r2
    3bb6:	b2db      	uxtb	r3, r3
}
    3bb8:	1c18      	adds	r0, r3, #0
    3bba:	46bd      	mov	sp, r7
    3bbc:	b004      	add	sp, #16
    3bbe:	bd80      	pop	{r7, pc}
    3bc0:	00003b3d 	.word	0x00003b3d

00003bc4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	b084      	sub	sp, #16
    3bc8:	af00      	add	r7, sp, #0
    3bca:	1c02      	adds	r2, r0, #0
    3bcc:	1dfb      	adds	r3, r7, #7
    3bce:	701a      	strb	r2, [r3, #0]
    3bd0:	1dbb      	adds	r3, r7, #6
    3bd2:	1c0a      	adds	r2, r1, #0
    3bd4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3bd6:	1dfb      	adds	r3, r7, #7
    3bd8:	781b      	ldrb	r3, [r3, #0]
    3bda:	1c18      	adds	r0, r3, #0
    3bdc:	4b0c      	ldr	r3, [pc, #48]	; (3c10 <port_pin_set_output_level+0x4c>)
    3bde:	4798      	blx	r3
    3be0:	1c03      	adds	r3, r0, #0
    3be2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3be4:	1dfb      	adds	r3, r7, #7
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	221f      	movs	r2, #31
    3bea:	4013      	ands	r3, r2
    3bec:	2201      	movs	r2, #1
    3bee:	409a      	lsls	r2, r3
    3bf0:	1c13      	adds	r3, r2, #0
    3bf2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3bf4:	1dbb      	adds	r3, r7, #6
    3bf6:	781b      	ldrb	r3, [r3, #0]
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d003      	beq.n	3c04 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3bfc:	68fb      	ldr	r3, [r7, #12]
    3bfe:	68ba      	ldr	r2, [r7, #8]
    3c00:	619a      	str	r2, [r3, #24]
    3c02:	e002      	b.n	3c0a <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	68ba      	ldr	r2, [r7, #8]
    3c08:	615a      	str	r2, [r3, #20]
	}
}
    3c0a:	46bd      	mov	sp, r7
    3c0c:	b004      	add	sp, #16
    3c0e:	bd80      	pop	{r7, pc}
    3c10:	00003b3d 	.word	0x00003b3d

00003c14 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3c18:	4b03      	ldr	r3, [pc, #12]	; (3c28 <system_interrupt_enable_global+0x14>)
    3c1a:	2201      	movs	r2, #1
    3c1c:	701a      	strb	r2, [r3, #0]
    3c1e:	f3bf 8f5f 	dmb	sy
    3c22:	b662      	cpsie	i
}
    3c24:	46bd      	mov	sp, r7
    3c26:	bd80      	pop	{r7, pc}
    3c28:	20000000 	.word	0x20000000

00003c2c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3c30:	b672      	cpsid	i
    3c32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c36:	4b02      	ldr	r3, [pc, #8]	; (3c40 <system_interrupt_disable_global+0x14>)
    3c38:	2200      	movs	r2, #0
    3c3a:	701a      	strb	r2, [r3, #0]
}
    3c3c:	46bd      	mov	sp, r7
    3c3e:	bd80      	pop	{r7, pc}
    3c40:	20000000 	.word	0x20000000

00003c44 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b082      	sub	sp, #8
    3c48:	af00      	add	r7, sp, #0
    3c4a:	1c02      	adds	r2, r0, #0
    3c4c:	1dfb      	adds	r3, r7, #7
    3c4e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c50:	4b06      	ldr	r3, [pc, #24]	; (3c6c <system_interrupt_enable+0x28>)
    3c52:	1dfa      	adds	r2, r7, #7
    3c54:	7812      	ldrb	r2, [r2, #0]
    3c56:	1c11      	adds	r1, r2, #0
    3c58:	221f      	movs	r2, #31
    3c5a:	400a      	ands	r2, r1
    3c5c:	2101      	movs	r1, #1
    3c5e:	4091      	lsls	r1, r2
    3c60:	1c0a      	adds	r2, r1, #0
    3c62:	601a      	str	r2, [r3, #0]
}
    3c64:	46bd      	mov	sp, r7
    3c66:	b002      	add	sp, #8
    3c68:	bd80      	pop	{r7, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	e000e100 	.word	0xe000e100

00003c70 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b084      	sub	sp, #16
    3c74:	af00      	add	r7, sp, #0
    3c76:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	22a0      	movs	r2, #160	; 0xa0
    3c7c:	0112      	lsls	r2, r2, #4
    3c7e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	2201      	movs	r2, #1
    3c84:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	2200      	movs	r2, #0
    3c8a:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	2200      	movs	r2, #0
    3c90:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    3c92:	230f      	movs	r3, #15
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	2200      	movs	r2, #0
    3c98:	701a      	strb	r2, [r3, #0]
    3c9a:	e00e      	b.n	3cba <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    3c9c:	230f      	movs	r3, #15
    3c9e:	18fb      	adds	r3, r7, r3
    3ca0:	781a      	ldrb	r2, [r3, #0]
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	3202      	adds	r2, #2
    3ca6:	0092      	lsls	r2, r2, #2
    3ca8:	2100      	movs	r1, #0
    3caa:	50d1      	str	r1, [r2, r3]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    3cac:	230f      	movs	r3, #15
    3cae:	18fb      	adds	r3, r7, r3
    3cb0:	781a      	ldrb	r2, [r3, #0]
    3cb2:	230f      	movs	r3, #15
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	3201      	adds	r2, #1
    3cb8:	701a      	strb	r2, [r3, #0]
    3cba:	230f      	movs	r3, #15
    3cbc:	18fb      	adds	r3, r7, r3
    3cbe:	781b      	ldrb	r3, [r3, #0]
    3cc0:	2b01      	cmp	r3, #1
    3cc2:	d9eb      	bls.n	3c9c <rtc_count_get_config_defaults+0x2c>
		config->compare_values[i] = 0;
	}
}
    3cc4:	46bd      	mov	sp, r7
    3cc6:	b004      	add	sp, #16
    3cc8:	bd80      	pop	{r7, pc}
    3cca:	46c0      	nop			; (mov r8, r8)

00003ccc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    3ccc:	b580      	push	{r7, lr}
    3cce:	b084      	sub	sp, #16
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	69db      	ldr	r3, [r3, #28]
    3cde:	1e5a      	subs	r2, r3, #1
    3ce0:	4193      	sbcs	r3, r2
    3ce2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    3ce4:	1c18      	adds	r0, r3, #0
    3ce6:	46bd      	mov	sp, r7
    3ce8:	b004      	add	sp, #16
    3cea:	bd80      	pop	{r7, pc}

00003cec <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b082      	sub	sp, #8
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	2201      	movs	r2, #1
    3cf8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	2200      	movs	r2, #0
    3cfe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	2200      	movs	r2, #0
    3d04:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	22c0      	movs	r2, #192	; 0xc0
    3d0a:	0392      	lsls	r2, r2, #14
    3d0c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	2200      	movs	r2, #0
    3d12:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	2200      	movs	r2, #0
    3d18:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	2201      	movs	r2, #1
    3d1e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3d20:	687b      	ldr	r3, [r7, #4]
    3d22:	2201      	movs	r2, #1
    3d24:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	2200      	movs	r2, #0
    3d2a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	2224      	movs	r2, #36	; 0x24
    3d30:	2100      	movs	r1, #0
    3d32:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	3318      	adds	r3, #24
    3d38:	1c18      	adds	r0, r3, #0
    3d3a:	2100      	movs	r1, #0
    3d3c:	220c      	movs	r2, #12
    3d3e:	4b0a      	ldr	r3, [pc, #40]	; (3d68 <spi_get_config_defaults+0x7c>)
    3d40:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	4a09      	ldr	r2, [pc, #36]	; (3d6c <spi_get_config_defaults+0x80>)
    3d46:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	2200      	movs	r2, #0
    3d4c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    3d4e:	687b      	ldr	r3, [r7, #4]
    3d50:	2200      	movs	r2, #0
    3d52:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	2200      	movs	r2, #0
    3d58:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	2200      	movs	r2, #0
    3d5e:	635a      	str	r2, [r3, #52]	; 0x34

};
    3d60:	46bd      	mov	sp, r7
    3d62:	b002      	add	sp, #8
    3d64:	bd80      	pop	{r7, pc}
    3d66:	46c0      	nop			; (mov r8, r8)
    3d68:	0000520f 	.word	0x0000520f
    3d6c:	000186a0 	.word	0x000186a0

00003d70 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	220a      	movs	r2, #10
    3d7c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	2200      	movs	r2, #0
    3d82:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	2200      	movs	r2, #0
    3d88:	709a      	strb	r2, [r3, #2]
}
    3d8a:	46bd      	mov	sp, r7
    3d8c:	b002      	add	sp, #8
    3d8e:	bd80      	pop	{r7, pc}

00003d90 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b084      	sub	sp, #16
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
    3d98:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	781a      	ldrb	r2, [r3, #0]
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    3da2:	683b      	ldr	r3, [r7, #0]
    3da4:	785a      	ldrb	r2, [r3, #1]
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    3daa:	683b      	ldr	r3, [r7, #0]
    3dac:	789a      	ldrb	r2, [r3, #2]
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3db2:	230c      	movs	r3, #12
    3db4:	18fb      	adds	r3, r7, r3
    3db6:	1c18      	adds	r0, r3, #0
    3db8:	4b0b      	ldr	r3, [pc, #44]	; (3de8 <spi_attach_slave+0x58>)
    3dba:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3dbc:	230c      	movs	r3, #12
    3dbe:	18fb      	adds	r3, r7, r3
    3dc0:	2201      	movs	r2, #1
    3dc2:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	781a      	ldrb	r2, [r3, #0]
    3dc8:	230c      	movs	r3, #12
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	1c10      	adds	r0, r2, #0
    3dce:	1c19      	adds	r1, r3, #0
    3dd0:	4b06      	ldr	r3, [pc, #24]	; (3dec <spi_attach_slave+0x5c>)
    3dd2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	781b      	ldrb	r3, [r3, #0]
    3dd8:	1c18      	adds	r0, r3, #0
    3dda:	2101      	movs	r1, #1
    3ddc:	4b04      	ldr	r3, [pc, #16]	; (3df0 <spi_attach_slave+0x60>)
    3dde:	4798      	blx	r3
}
    3de0:	46bd      	mov	sp, r7
    3de2:	b004      	add	sp, #16
    3de4:	bd80      	pop	{r7, pc}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	00003b61 	.word	0x00003b61
    3dec:	00002c59 	.word	0x00002c59
    3df0:	00003bc5 	.word	0x00003bc5

00003df4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b084      	sub	sp, #16
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	681b      	ldr	r3, [r3, #0]
    3e00:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	1c18      	adds	r0, r3, #0
    3e08:	4b0a      	ldr	r3, [pc, #40]	; (3e34 <spi_enable+0x40>)
    3e0a:	4798      	blx	r3
    3e0c:	1c03      	adds	r3, r0, #0
    3e0e:	1c18      	adds	r0, r3, #0
    3e10:	4b09      	ldr	r3, [pc, #36]	; (3e38 <spi_enable+0x44>)
    3e12:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3e14:	46c0      	nop			; (mov r8, r8)
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	1c18      	adds	r0, r3, #0
    3e1a:	4b08      	ldr	r3, [pc, #32]	; (3e3c <spi_enable+0x48>)
    3e1c:	4798      	blx	r3
    3e1e:	1e03      	subs	r3, r0, #0
    3e20:	d1f9      	bne.n	3e16 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e22:	68fb      	ldr	r3, [r7, #12]
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	2202      	movs	r2, #2
    3e28:	431a      	orrs	r2, r3
    3e2a:	68fb      	ldr	r3, [r7, #12]
    3e2c:	601a      	str	r2, [r3, #0]
}
    3e2e:	46bd      	mov	sp, r7
    3e30:	b004      	add	sp, #16
    3e32:	bd80      	pop	{r7, pc}
    3e34:	00002b65 	.word	0x00002b65
    3e38:	00003c45 	.word	0x00003c45
    3e3c:	00003ccd 	.word	0x00003ccd

00003e40 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b084      	sub	sp, #16
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	689b      	ldr	r3, [r3, #8]
    3e54:	2202      	movs	r2, #2
    3e56:	4013      	ands	r3, r2
    3e58:	d1fa      	bne.n	3e50 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3e5a:	68fb      	ldr	r3, [r7, #12]
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	2202      	movs	r2, #2
    3e60:	431a      	orrs	r2, r3
    3e62:	68fb      	ldr	r3, [r7, #12]
    3e64:	601a      	str	r2, [r3, #0]
}
    3e66:	46bd      	mov	sp, r7
    3e68:	b004      	add	sp, #16
    3e6a:	bd80      	pop	{r7, pc}

00003e6c <configure_port_pins>:
void configure_extint_callbacks(void);
void configure_port_pins(void);

// Configure the LED selection port as output
void configure_port_pins(void)
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    3e72:	1d3b      	adds	r3, r7, #4
    3e74:	1c18      	adds	r0, r3, #0
    3e76:	4b06      	ldr	r3, [pc, #24]	; (3e90 <configure_port_pins+0x24>)
    3e78:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    3e7a:	1d3b      	adds	r3, r7, #4
    3e7c:	2200      	movs	r2, #0
    3e7e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA03, &config_port_pin);
    3e80:	1d3b      	adds	r3, r7, #4
    3e82:	2003      	movs	r0, #3
    3e84:	1c19      	adds	r1, r3, #0
    3e86:	4b03      	ldr	r3, [pc, #12]	; (3e94 <configure_port_pins+0x28>)
    3e88:	4798      	blx	r3
}
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}
    3e90:	00003b61 	.word	0x00003b61
    3e94:	00002c59 	.word	0x00002c59

00003e98 <configure_extint_channel>:

///////////////////////// EXT INT ////////////////
void configure_extint_channel(void)
{
    3e98:	b580      	push	{r7, lr}
    3e9a:	b084      	sub	sp, #16
    3e9c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    3e9e:	1d3b      	adds	r3, r7, #4
    3ea0:	1c18      	adds	r0, r3, #0
    3ea2:	4b0b      	ldr	r3, [pc, #44]	; (3ed0 <configure_extint_channel+0x38>)
    3ea4:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA03A_EIC_EXTINT3;
    3ea6:	1d3b      	adds	r3, r7, #4
    3ea8:	2203      	movs	r2, #3
    3eaa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = MUX_PA03A_EIC_EXTINT3;
    3eac:	1d3b      	adds	r3, r7, #4
    3eae:	2200      	movs	r2, #0
    3eb0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    3eb2:	1d3b      	adds	r3, r7, #4
    3eb4:	2201      	movs	r2, #1
    3eb6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3eb8:	1d3b      	adds	r3, r7, #4
    3eba:	2201      	movs	r2, #1
    3ebc:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(3, &config_extint_chan);
    3ebe:	1d3b      	adds	r3, r7, #4
    3ec0:	2003      	movs	r0, #3
    3ec2:	1c19      	adds	r1, r3, #0
    3ec4:	4b03      	ldr	r3, [pc, #12]	; (3ed4 <configure_extint_channel+0x3c>)
    3ec6:	4798      	blx	r3
}
    3ec8:	46bd      	mov	sp, r7
    3eca:	b004      	add	sp, #16
    3ecc:	bd80      	pop	{r7, pc}
    3ece:	46c0      	nop			; (mov r8, r8)
    3ed0:	000003ad 	.word	0x000003ad
    3ed4:	000003e1 	.word	0x000003e1

00003ed8 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	af00      	add	r7, sp, #0
	extint_register_callback(isr0, 3, EXTINT_CALLBACK_TYPE_DETECT);
    3edc:	4b05      	ldr	r3, [pc, #20]	; (3ef4 <configure_extint_callbacks+0x1c>)
    3ede:	1c18      	adds	r0, r3, #0
    3ee0:	2103      	movs	r1, #3
    3ee2:	2200      	movs	r2, #0
    3ee4:	4b04      	ldr	r3, [pc, #16]	; (3ef8 <configure_extint_callbacks+0x20>)
    3ee6:	4798      	blx	r3
	extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    3ee8:	2003      	movs	r0, #3
    3eea:	2100      	movs	r1, #0
    3eec:	4b03      	ldr	r3, [pc, #12]	; (3efc <configure_extint_callbacks+0x24>)
    3eee:	4798      	blx	r3
}
    3ef0:	46bd      	mov	sp, r7
    3ef2:	bd80      	pop	{r7, pc}
    3ef4:	00004a35 	.word	0x00004a35
    3ef8:	00000bb9 	.word	0x00000bb9
    3efc:	00000c1d 	.word	0x00000c1d

00003f00 <configure_RFM69_spi>:
struct spi_slave_inst slave;
void configure_RFM69_spi(void);
volatile uint16_t read_buf = 0;

void configure_RFM69_spi(void)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b090      	sub	sp, #64	; 0x40
    3f04:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    3f06:	1d3b      	adds	r3, r7, #4
    3f08:	1c18      	adds	r0, r3, #0
    3f0a:	4b22      	ldr	r3, [pc, #136]	; (3f94 <configure_RFM69_spi+0x94>)
    3f0c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    3f0e:	1d3b      	adds	r3, r7, #4
    3f10:	2212      	movs	r2, #18
    3f12:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    3f14:	4a20      	ldr	r2, [pc, #128]	; (3f98 <configure_RFM69_spi+0x98>)
    3f16:	1d3b      	adds	r3, r7, #4
    3f18:	1c10      	adds	r0, r2, #0
    3f1a:	1c19      	adds	r1, r3, #0
    3f1c:	4b1f      	ldr	r3, [pc, #124]	; (3f9c <configure_RFM69_spi+0x9c>)
    3f1e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    3f20:	2308      	movs	r3, #8
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	1c18      	adds	r0, r3, #0
    3f26:	4b1e      	ldr	r3, [pc, #120]	; (3fa0 <configure_RFM69_spi+0xa0>)
    3f28:	4798      	blx	r3
	/* Configure pad 0 for MOSI */
	/* Configure pad 1 for SCK */
	/* Configure pad 2 for SS (Unused) */
	/* Configure pad 3 for MISO */
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    3f2a:	2308      	movs	r3, #8
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	22c0      	movs	r2, #192	; 0xc0
    3f30:	0392      	lsls	r2, r2, #14
    3f32:	60da      	str	r2, [r3, #12]
	/* Configure pins used for SPI */
	config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    3f34:	2308      	movs	r3, #8
    3f36:	18fb      	adds	r3, r7, r3
    3f38:	4a1a      	ldr	r2, [pc, #104]	; (3fa4 <configure_RFM69_spi+0xa4>)
    3f3a:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    3f3c:	2308      	movs	r3, #8
    3f3e:	18fb      	adds	r3, r7, r3
    3f40:	4a19      	ldr	r2, [pc, #100]	; (3fa8 <configure_RFM69_spi+0xa8>)
    3f42:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    3f44:	2308      	movs	r3, #8
    3f46:	18fb      	adds	r3, r7, r3
    3f48:	2201      	movs	r2, #1
    3f4a:	4252      	negs	r2, r2
    3f4c:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    3f4e:	2308      	movs	r3, #8
    3f50:	18fb      	adds	r3, r7, r3
    3f52:	4a16      	ldr	r2, [pc, #88]	; (3fac <configure_RFM69_spi+0xac>)
    3f54:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
    3f56:	2308      	movs	r3, #8
    3f58:	18fb      	adds	r3, r7, r3
    3f5a:	2200      	movs	r2, #0
    3f5c:	605a      	str	r2, [r3, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_0;
    3f5e:	2308      	movs	r3, #8
    3f60:	18fb      	adds	r3, r7, r3
    3f62:	2200      	movs	r2, #0
    3f64:	609a      	str	r2, [r3, #8]
	spi_init(&spi_master_instance, SERCOM1, &config_spi_master);
    3f66:	4a12      	ldr	r2, [pc, #72]	; (3fb0 <configure_RFM69_spi+0xb0>)
    3f68:	4912      	ldr	r1, [pc, #72]	; (3fb4 <configure_RFM69_spi+0xb4>)
    3f6a:	2308      	movs	r3, #8
    3f6c:	18fb      	adds	r3, r7, r3
    3f6e:	1c10      	adds	r0, r2, #0
    3f70:	1c1a      	adds	r2, r3, #0
    3f72:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <configure_RFM69_spi+0xb8>)
    3f74:	4798      	blx	r3
	//spi_set_baudrate(&spi_master_instance, 9600);
	spi_enable(&spi_master_instance);
    3f76:	4b0e      	ldr	r3, [pc, #56]	; (3fb0 <configure_RFM69_spi+0xb0>)
    3f78:	1c18      	adds	r0, r3, #0
    3f7a:	4b10      	ldr	r3, [pc, #64]	; (3fbc <configure_RFM69_spi+0xbc>)
    3f7c:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &slave, false);
    3f7e:	4a0c      	ldr	r2, [pc, #48]	; (3fb0 <configure_RFM69_spi+0xb0>)
    3f80:	4b05      	ldr	r3, [pc, #20]	; (3f98 <configure_RFM69_spi+0x98>)
    3f82:	1c10      	adds	r0, r2, #0
    3f84:	1c19      	adds	r1, r3, #0
    3f86:	2200      	movs	r2, #0
    3f88:	4b0d      	ldr	r3, [pc, #52]	; (3fc0 <configure_RFM69_spi+0xc0>)
    3f8a:	4798      	blx	r3
}
    3f8c:	46bd      	mov	sp, r7
    3f8e:	b010      	add	sp, #64	; 0x40
    3f90:	bd80      	pop	{r7, pc}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	00003d71 	.word	0x00003d71
    3f98:	20000288 	.word	0x20000288
    3f9c:	00003d91 	.word	0x00003d91
    3fa0:	00003ced 	.word	0x00003ced
    3fa4:	00100002 	.word	0x00100002
    3fa8:	00110002 	.word	0x00110002
    3fac:	00130002 	.word	0x00130002
    3fb0:	20000208 	.word	0x20000208
    3fb4:	42000c00 	.word	0x42000c00
    3fb8:	00001f91 	.word	0x00001f91
    3fbc:	00003df5 	.word	0x00003df5
    3fc0:	0000227d 	.word	0x0000227d

00003fc4 <configure_rtc_count>:
uint32_t millis(void);
void reset_millis(void);

////////////////////// RTC for millis() ///////////////////////////////////////
void configure_rtc_count(void)
{
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b084      	sub	sp, #16
    3fc8:	af00      	add	r7, sp, #0
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
    3fca:	1c3b      	adds	r3, r7, #0
    3fcc:	1c18      	adds	r0, r3, #0
    3fce:	4b0f      	ldr	r3, [pc, #60]	; (400c <configure_rtc_count+0x48>)
    3fd0:	4798      	blx	r3
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    3fd2:	1c3b      	adds	r3, r7, #0
    3fd4:	2200      	movs	r2, #0
    3fd6:	801a      	strh	r2, [r3, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    3fd8:	1c3b      	adds	r3, r7, #0
    3fda:	2200      	movs	r2, #0
    3fdc:	709a      	strb	r2, [r3, #2]
	config_rtc_count.continuously_update = true;
    3fde:	1c3b      	adds	r3, r7, #0
    3fe0:	2201      	movs	r2, #1
    3fe2:	711a      	strb	r2, [r3, #4]
	//config_rtc_count.compare_values[0] = 1000;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    3fe4:	4a0a      	ldr	r2, [pc, #40]	; (4010 <configure_rtc_count+0x4c>)
    3fe6:	490b      	ldr	r1, [pc, #44]	; (4014 <configure_rtc_count+0x50>)
    3fe8:	1c3b      	adds	r3, r7, #0
    3fea:	1c10      	adds	r0, r2, #0
    3fec:	1c1a      	adds	r2, r3, #0
    3fee:	4b0a      	ldr	r3, [pc, #40]	; (4018 <configure_rtc_count+0x54>)
    3ff0:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    3ff2:	4b07      	ldr	r3, [pc, #28]	; (4010 <configure_rtc_count+0x4c>)
    3ff4:	1c18      	adds	r0, r3, #0
    3ff6:	4b09      	ldr	r3, [pc, #36]	; (401c <configure_rtc_count+0x58>)
    3ff8:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 10000);
    3ffa:	4b05      	ldr	r3, [pc, #20]	; (4010 <configure_rtc_count+0x4c>)
    3ffc:	4a08      	ldr	r2, [pc, #32]	; (4020 <configure_rtc_count+0x5c>)
    3ffe:	1c18      	adds	r0, r3, #0
    4000:	1c11      	adds	r1, r2, #0
    4002:	4b08      	ldr	r3, [pc, #32]	; (4024 <configure_rtc_count+0x60>)
    4004:	4798      	blx	r3
}
    4006:	46bd      	mov	sp, r7
    4008:	b004      	add	sp, #16
    400a:	bd80      	pop	{r7, pc}
    400c:	00003c71 	.word	0x00003c71
    4010:	200000ec 	.word	0x200000ec
    4014:	40001400 	.word	0x40001400
    4018:	000007dd 	.word	0x000007dd
    401c:	000005d5 	.word	0x000005d5
    4020:	00002710 	.word	0x00002710
    4024:	000009c1 	.word	0x000009c1

00004028 <reset_millis>:

void reset_millis(void)
{
    4028:	b580      	push	{r7, lr}
    402a:	af00      	add	r7, sp, #0
	rtc_count_set_count(&rtc_instance, 0);
    402c:	4b05      	ldr	r3, [pc, #20]	; (4044 <reset_millis+0x1c>)
    402e:	1c18      	adds	r0, r3, #0
    4030:	2100      	movs	r1, #0
    4032:	4b05      	ldr	r3, [pc, #20]	; (4048 <reset_millis+0x20>)
    4034:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    4036:	4b03      	ldr	r3, [pc, #12]	; (4044 <reset_millis+0x1c>)
    4038:	1c18      	adds	r0, r3, #0
    403a:	4b04      	ldr	r3, [pc, #16]	; (404c <reset_millis+0x24>)
    403c:	4798      	blx	r3
}
    403e:	46bd      	mov	sp, r7
    4040:	bd80      	pop	{r7, pc}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	200000ec 	.word	0x200000ec
    4048:	0000086d 	.word	0x0000086d
    404c:	000005d5 	.word	0x000005d5

00004050 <millis>:

uint32_t millis(void)
{
    4050:	b580      	push	{r7, lr}
    4052:	b082      	sub	sp, #8
    4054:	af00      	add	r7, sp, #0
    //rtc_count_set_count(&rtc_instance, 20);
	volatile uint32_t milli = 0;
    4056:	2300      	movs	r3, #0
    4058:	607b      	str	r3, [r7, #4]
	milli = rtc_count_get_count(&rtc_instance);
    405a:	4b05      	ldr	r3, [pc, #20]	; (4070 <millis+0x20>)
    405c:	1c18      	adds	r0, r3, #0
    405e:	4b05      	ldr	r3, [pc, #20]	; (4074 <millis+0x24>)
    4060:	4798      	blx	r3
    4062:	1c03      	adds	r3, r0, #0
    4064:	607b      	str	r3, [r7, #4]
	return milli;
    4066:	687b      	ldr	r3, [r7, #4]
}
    4068:	1c18      	adds	r0, r3, #0
    406a:	46bd      	mov	sp, r7
    406c:	b002      	add	sp, #8
    406e:	bd80      	pop	{r7, pc}
    4070:	200000ec 	.word	0x200000ec
    4074:	000008cd 	.word	0x000008cd

00004078 <sendFrame>:



// internal function
void sendFrame(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK, bool sendACK)
{
    4078:	b590      	push	{r4, r7, lr}
    407a:	b085      	sub	sp, #20
    407c:	af00      	add	r7, sp, #0
    407e:	1c04      	adds	r4, r0, #0
    4080:	6039      	str	r1, [r7, #0]
    4082:	1c10      	adds	r0, r2, #0
    4084:	1c19      	adds	r1, r3, #0
    4086:	1dfb      	adds	r3, r7, #7
    4088:	1c22      	adds	r2, r4, #0
    408a:	701a      	strb	r2, [r3, #0]
    408c:	1dbb      	adds	r3, r7, #6
    408e:	1c02      	adds	r2, r0, #0
    4090:	701a      	strb	r2, [r3, #0]
    4092:	1d7b      	adds	r3, r7, #5
    4094:	1c0a      	adds	r2, r1, #0
    4096:	701a      	strb	r2, [r3, #0]
	setMode(RF69_MODE_STANDBY); // turn off receiver to prevent reception while filling fifo
    4098:	2001      	movs	r0, #1
    409a:	4b50      	ldr	r3, [pc, #320]	; (41dc <sendFrame+0x164>)
    409c:	4798      	blx	r3
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	2027      	movs	r0, #39	; 0x27
    40a2:	4b4f      	ldr	r3, [pc, #316]	; (41e0 <sendFrame+0x168>)
    40a4:	4798      	blx	r3
    40a6:	1c03      	adds	r3, r0, #0
    40a8:	b2db      	uxtb	r3, r3
    40aa:	b25b      	sxtb	r3, r3
    40ac:	2b00      	cmp	r3, #0
    40ae:	daf7      	bge.n	40a0 <sendFrame+0x28>
	writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    40b0:	2025      	movs	r0, #37	; 0x25
    40b2:	2100      	movs	r1, #0
    40b4:	4b4b      	ldr	r3, [pc, #300]	; (41e4 <sendFrame+0x16c>)
    40b6:	4798      	blx	r3
	if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
    40b8:	1dbb      	adds	r3, r7, #6
    40ba:	781b      	ldrb	r3, [r3, #0]
    40bc:	2b3d      	cmp	r3, #61	; 0x3d
    40be:	d902      	bls.n	40c6 <sendFrame+0x4e>
    40c0:	1dbb      	adds	r3, r7, #6
    40c2:	223d      	movs	r2, #61	; 0x3d
    40c4:	701a      	strb	r2, [r3, #0]

	// control byte
	volatile uint8_t CTLbyte = 0x00;
    40c6:	230e      	movs	r3, #14
    40c8:	18fb      	adds	r3, r7, r3
    40ca:	2200      	movs	r2, #0
    40cc:	701a      	strb	r2, [r3, #0]
	if (sendACK)
    40ce:	2320      	movs	r3, #32
    40d0:	18fb      	adds	r3, r7, r3
    40d2:	781b      	ldrb	r3, [r3, #0]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d004      	beq.n	40e2 <sendFrame+0x6a>
	CTLbyte = RFM69_CTL_SENDACK;
    40d8:	230e      	movs	r3, #14
    40da:	18fb      	adds	r3, r7, r3
    40dc:	2280      	movs	r2, #128	; 0x80
    40de:	701a      	strb	r2, [r3, #0]
    40e0:	e007      	b.n	40f2 <sendFrame+0x7a>
	else if (requestACK)
    40e2:	1d7b      	adds	r3, r7, #5
    40e4:	781b      	ldrb	r3, [r3, #0]
    40e6:	2b00      	cmp	r3, #0
    40e8:	d003      	beq.n	40f2 <sendFrame+0x7a>
	CTLbyte = RFM69_CTL_REQACK;
    40ea:	230e      	movs	r3, #14
    40ec:	18fb      	adds	r3, r7, r3
    40ee:	2240      	movs	r2, #64	; 0x40
    40f0:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	radioselect();
    40f2:	4b3d      	ldr	r3, [pc, #244]	; (41e8 <sendFrame+0x170>)
    40f4:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, REG_FIFO | 0x80, &read_buf); //SPI.transfer(REG_FIFO | 0x80); // CHANGE //
    40f6:	4a3d      	ldr	r2, [pc, #244]	; (41ec <sendFrame+0x174>)
    40f8:	4b3d      	ldr	r3, [pc, #244]	; (41f0 <sendFrame+0x178>)
    40fa:	1c10      	adds	r0, r2, #0
    40fc:	2180      	movs	r1, #128	; 0x80
    40fe:	1c1a      	adds	r2, r3, #0
    4100:	4b3c      	ldr	r3, [pc, #240]	; (41f4 <sendFrame+0x17c>)
    4102:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
    4104:	1dbb      	adds	r3, r7, #6
    4106:	781b      	ldrb	r3, [r3, #0]
    4108:	b29b      	uxth	r3, r3
    410a:	3303      	adds	r3, #3
    410c:	b29a      	uxth	r2, r3
    410e:	4937      	ldr	r1, [pc, #220]	; (41ec <sendFrame+0x174>)
    4110:	4b37      	ldr	r3, [pc, #220]	; (41f0 <sendFrame+0x178>)
    4112:	1c08      	adds	r0, r1, #0
    4114:	1c11      	adds	r1, r2, #0
    4116:	1c1a      	adds	r2, r3, #0
    4118:	4b36      	ldr	r3, [pc, #216]	; (41f4 <sendFrame+0x17c>)
    411a:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
    411c:	1dfb      	adds	r3, r7, #7
    411e:	781b      	ldrb	r3, [r3, #0]
    4120:	b29a      	uxth	r2, r3
    4122:	4932      	ldr	r1, [pc, #200]	; (41ec <sendFrame+0x174>)
    4124:	4b32      	ldr	r3, [pc, #200]	; (41f0 <sendFrame+0x178>)
    4126:	1c08      	adds	r0, r1, #0
    4128:	1c11      	adds	r1, r2, #0
    412a:	1c1a      	adds	r2, r3, #0
    412c:	4b31      	ldr	r3, [pc, #196]	; (41f4 <sendFrame+0x17c>)
    412e:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
    4130:	4b31      	ldr	r3, [pc, #196]	; (41f8 <sendFrame+0x180>)
    4132:	781b      	ldrb	r3, [r3, #0]
    4134:	b2db      	uxtb	r3, r3
    4136:	b29a      	uxth	r2, r3
    4138:	492c      	ldr	r1, [pc, #176]	; (41ec <sendFrame+0x174>)
    413a:	4b2d      	ldr	r3, [pc, #180]	; (41f0 <sendFrame+0x178>)
    413c:	1c08      	adds	r0, r1, #0
    413e:	1c11      	adds	r1, r2, #0
    4140:	1c1a      	adds	r2, r3, #0
    4142:	4b2c      	ldr	r3, [pc, #176]	; (41f4 <sendFrame+0x17c>)
    4144:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //
    4146:	230e      	movs	r3, #14
    4148:	18fb      	adds	r3, r7, r3
    414a:	781b      	ldrb	r3, [r3, #0]
    414c:	b2db      	uxtb	r3, r3
    414e:	b29a      	uxth	r2, r3
    4150:	4926      	ldr	r1, [pc, #152]	; (41ec <sendFrame+0x174>)
    4152:	4b27      	ldr	r3, [pc, #156]	; (41f0 <sendFrame+0x178>)
    4154:	1c08      	adds	r0, r1, #0
    4156:	1c11      	adds	r1, r2, #0
    4158:	1c1a      	adds	r2, r3, #0
    415a:	4b26      	ldr	r3, [pc, #152]	; (41f4 <sendFrame+0x17c>)
    415c:	4798      	blx	r3

	for (uint8_t i = 0; i < bufferSize; i++)
    415e:	230f      	movs	r3, #15
    4160:	18fb      	adds	r3, r7, r3
    4162:	2200      	movs	r2, #0
    4164:	701a      	strb	r2, [r3, #0]
    4166:	e014      	b.n	4192 <sendFrame+0x11a>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
    4168:	230f      	movs	r3, #15
    416a:	18fb      	adds	r3, r7, r3
    416c:	781b      	ldrb	r3, [r3, #0]
    416e:	683a      	ldr	r2, [r7, #0]
    4170:	18d3      	adds	r3, r2, r3
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	b29a      	uxth	r2, r3
    4176:	491d      	ldr	r1, [pc, #116]	; (41ec <sendFrame+0x174>)
    4178:	4b1d      	ldr	r3, [pc, #116]	; (41f0 <sendFrame+0x178>)
    417a:	1c08      	adds	r0, r1, #0
    417c:	1c11      	adds	r1, r2, #0
    417e:	1c1a      	adds	r2, r3, #0
    4180:	4b1c      	ldr	r3, [pc, #112]	; (41f4 <sendFrame+0x17c>)
    4182:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, bufferSize + 3, &read_buf); //SPI.transfer(bufferSize + 3); // CHANGE //
	spi_transceive_wait(&spi_master_instance, toAddress, &read_buf); //SPI.transfer(toAddress); // CHANGE //
	spi_transceive_wait(&spi_master_instance, _address, &read_buf); //SPI.transfer(_address); // CHANGE //
	spi_transceive_wait(&spi_master_instance, CTLbyte, &read_buf); //SPI.transfer(CTLbyte); // CHANGE //

	for (uint8_t i = 0; i < bufferSize; i++)
    4184:	230f      	movs	r3, #15
    4186:	18fb      	adds	r3, r7, r3
    4188:	781a      	ldrb	r2, [r3, #0]
    418a:	230f      	movs	r3, #15
    418c:	18fb      	adds	r3, r7, r3
    418e:	3201      	adds	r2, #1
    4190:	701a      	strb	r2, [r3, #0]
    4192:	230f      	movs	r3, #15
    4194:	18fa      	adds	r2, r7, r3
    4196:	1dbb      	adds	r3, r7, #6
    4198:	7812      	ldrb	r2, [r2, #0]
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	429a      	cmp	r2, r3
    419e:	d3e3      	bcc.n	4168 <sendFrame+0xf0>
	spi_transceive_wait(&spi_master_instance, ((uint8_t*) buffer)[i], &read_buf); //SPI.transfer(((uint8_t*) buffer)[i]); // CHANGE //
	unselect();
    41a0:	4b16      	ldr	r3, [pc, #88]	; (41fc <sendFrame+0x184>)
    41a2:	4798      	blx	r3

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(RF69_MODE_TX);
    41a4:	2004      	movs	r0, #4
    41a6:	4b0d      	ldr	r3, [pc, #52]	; (41dc <sendFrame+0x164>)
    41a8:	4798      	blx	r3
	reset_millis(); //uint32_t txStart = millis(); // CHANGE //
    41aa:	4b15      	ldr	r3, [pc, #84]	; (4200 <sendFrame+0x188>)
    41ac:	4798      	blx	r3
	while (port_pin_get_input_level(PIN_PA03) == 0 && millis() < RF69_TX_LIMIT_MS); // wait for DIO0 to turn HIGH signalling transmission finish // CHANGE //
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	2003      	movs	r0, #3
    41b2:	4b14      	ldr	r3, [pc, #80]	; (4204 <sendFrame+0x18c>)
    41b4:	4798      	blx	r3
    41b6:	1c03      	adds	r3, r0, #0
    41b8:	1c1a      	adds	r2, r3, #0
    41ba:	2301      	movs	r3, #1
    41bc:	4053      	eors	r3, r2
    41be:	b2db      	uxtb	r3, r3
    41c0:	2b00      	cmp	r3, #0
    41c2:	d005      	beq.n	41d0 <sendFrame+0x158>
    41c4:	4b10      	ldr	r3, [pc, #64]	; (4208 <sendFrame+0x190>)
    41c6:	4798      	blx	r3
    41c8:	1e02      	subs	r2, r0, #0
    41ca:	4b10      	ldr	r3, [pc, #64]	; (420c <sendFrame+0x194>)
    41cc:	429a      	cmp	r2, r3
    41ce:	d9ef      	bls.n	41b0 <sendFrame+0x138>
	setMode(RF69_MODE_STANDBY);
    41d0:	2001      	movs	r0, #1
    41d2:	4b02      	ldr	r3, [pc, #8]	; (41dc <sendFrame+0x164>)
    41d4:	4798      	blx	r3
}
    41d6:	46bd      	mov	sp, r7
    41d8:	b005      	add	sp, #20
    41da:	bd90      	pop	{r4, r7, pc}
    41dc:	00004631 	.word	0x00004631
    41e0:	00004c41 	.word	0x00004c41
    41e4:	00004cad 	.word	0x00004cad
    41e8:	00004d11 	.word	0x00004d11
    41ec:	20000208 	.word	0x20000208
    41f0:	20000060 	.word	0x20000060
    41f4:	00002135 	.word	0x00002135
    41f8:	20000148 	.word	0x20000148
    41fc:	00004d3d 	.word	0x00004d3d
    4200:	00004029 	.word	0x00004029
    4204:	00003b81 	.word	0x00003b81
    4208:	00004051 	.word	0x00004051
    420c:	000003e7 	.word	0x000003e7

00004210 <RFM_setHighPower>:

// for RFM69HW only: you must call RFM_setHighPower(true) after RFM_initialize() or else transmission won't work
void RFM_setHighPower(bool onOff) {
    4210:	b580      	push	{r7, lr}
    4212:	b082      	sub	sp, #8
    4214:	af00      	add	r7, sp, #0
    4216:	1c02      	adds	r2, r0, #0
    4218:	1dfb      	adds	r3, r7, #7
    421a:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = onOff;
    421c:	4b1a      	ldr	r3, [pc, #104]	; (4288 <RFM_setHighPower+0x78>)
    421e:	1dfa      	adds	r2, r7, #7
    4220:	7812      	ldrb	r2, [r2, #0]
    4222:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, _isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    4224:	4b18      	ldr	r3, [pc, #96]	; (4288 <RFM_setHighPower+0x78>)
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	b2db      	uxtb	r3, r3
    422a:	2b00      	cmp	r3, #0
    422c:	d001      	beq.n	4232 <RFM_setHighPower+0x22>
    422e:	230f      	movs	r3, #15
    4230:	e000      	b.n	4234 <RFM_setHighPower+0x24>
    4232:	231a      	movs	r3, #26
    4234:	2013      	movs	r0, #19
    4236:	1c19      	adds	r1, r3, #0
    4238:	4b14      	ldr	r3, [pc, #80]	; (428c <RFM_setHighPower+0x7c>)
    423a:	4798      	blx	r3
	if (_isRFM69HW) // turning ON
    423c:	4b12      	ldr	r3, [pc, #72]	; (4288 <RFM_setHighPower+0x78>)
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	b2db      	uxtb	r3, r3
    4242:	2b00      	cmp	r3, #0
    4244:	d012      	beq.n	426c <RFM_setHighPower+0x5c>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    4246:	2011      	movs	r0, #17
    4248:	4b11      	ldr	r3, [pc, #68]	; (4290 <RFM_setHighPower+0x80>)
    424a:	4798      	blx	r3
    424c:	1c03      	adds	r3, r0, #0
    424e:	b2db      	uxtb	r3, r3
    4250:	1c1a      	adds	r2, r3, #0
    4252:	231f      	movs	r3, #31
    4254:	4013      	ands	r3, r2
    4256:	b2db      	uxtb	r3, r3
    4258:	1c1a      	adds	r2, r3, #0
    425a:	2360      	movs	r3, #96	; 0x60
    425c:	4313      	orrs	r3, r2
    425e:	b2db      	uxtb	r3, r3
    4260:	b2db      	uxtb	r3, r3
    4262:	2011      	movs	r0, #17
    4264:	1c19      	adds	r1, r3, #0
    4266:	4b09      	ldr	r3, [pc, #36]	; (428c <RFM_setHighPower+0x7c>)
    4268:	4798      	blx	r3
    426a:	e009      	b.n	4280 <RFM_setHighPower+0x70>
	else
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | _powerLevel); // enable P0 only
    426c:	4b09      	ldr	r3, [pc, #36]	; (4294 <RFM_setHighPower+0x84>)
    426e:	781b      	ldrb	r3, [r3, #0]
    4270:	2280      	movs	r2, #128	; 0x80
    4272:	4252      	negs	r2, r2
    4274:	4313      	orrs	r3, r2
    4276:	b2db      	uxtb	r3, r3
    4278:	2011      	movs	r0, #17
    427a:	1c19      	adds	r1, r3, #0
    427c:	4b03      	ldr	r3, [pc, #12]	; (428c <RFM_setHighPower+0x7c>)
    427e:	4798      	blx	r3
}
    4280:	46bd      	mov	sp, r7
    4282:	b002      	add	sp, #8
    4284:	bd80      	pop	{r7, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	20000204 	.word	0x20000204
    428c:	00004cad 	.word	0x00004cad
    4290:	00004c41 	.word	0x00004c41
    4294:	20000104 	.word	0x20000104

00004298 <RFM69>:

void RFM69()
{
    4298:	b580      	push	{r7, lr}
    429a:	af00      	add	r7, sp, #0
	_mode = RF69_MODE_STANDBY;
    429c:	4b06      	ldr	r3, [pc, #24]	; (42b8 <RFM69+0x20>)
    429e:	2201      	movs	r2, #1
    42a0:	801a      	strh	r2, [r3, #0]
	_promiscuousMode = false;
    42a2:	4b06      	ldr	r3, [pc, #24]	; (42bc <RFM69+0x24>)
    42a4:	2200      	movs	r2, #0
    42a6:	701a      	strb	r2, [r3, #0]
	_powerLevel = 31;
    42a8:	4b05      	ldr	r3, [pc, #20]	; (42c0 <RFM69+0x28>)
    42aa:	221f      	movs	r2, #31
    42ac:	701a      	strb	r2, [r3, #0]
	_isRFM69HW = false;
    42ae:	4b05      	ldr	r3, [pc, #20]	; (42c4 <RFM69+0x2c>)
    42b0:	2200      	movs	r2, #0
    42b2:	701a      	strb	r2, [r3, #0]
}
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}
    42b8:	20000202 	.word	0x20000202
    42bc:	20000150 	.word	0x20000150
    42c0:	20000104 	.word	0x20000104
    42c4:	20000204 	.word	0x20000204

000042c8 <RFM_initialize>:

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    42c8:	b590      	push	{r4, r7, lr}
    42ca:	b091      	sub	sp, #68	; 0x44
    42cc:	af00      	add	r7, sp, #0
    42ce:	1c04      	adds	r4, r0, #0
    42d0:	1c08      	adds	r0, r1, #0
    42d2:	1c11      	adds	r1, r2, #0
    42d4:	1dfb      	adds	r3, r7, #7
    42d6:	1c22      	adds	r2, r4, #0
    42d8:	701a      	strb	r2, [r3, #0]
    42da:	1dbb      	adds	r3, r7, #6
    42dc:	1c02      	adds	r2, r0, #0
    42de:	701a      	strb	r2, [r3, #0]
    42e0:	1d7b      	adds	r3, r7, #5
    42e2:	1c0a      	adds	r2, r1, #0
    42e4:	701a      	strb	r2, [r3, #0]
  RFM69();
    42e6:	4bc2      	ldr	r3, [pc, #776]	; (45f0 <RFM_initialize+0x328>)
    42e8:	4798      	blx	r3

  const uint8_t CONFIG[][2] =
    42ea:	2310      	movs	r3, #16
    42ec:	18fb      	adds	r3, r7, r3
    42ee:	2201      	movs	r2, #1
    42f0:	701a      	strb	r2, [r3, #0]
    42f2:	2310      	movs	r3, #16
    42f4:	18fb      	adds	r3, r7, r3
    42f6:	2204      	movs	r2, #4
    42f8:	705a      	strb	r2, [r3, #1]
    42fa:	2310      	movs	r3, #16
    42fc:	18fb      	adds	r3, r7, r3
    42fe:	2202      	movs	r2, #2
    4300:	709a      	strb	r2, [r3, #2]
    4302:	2310      	movs	r3, #16
    4304:	18fb      	adds	r3, r7, r3
    4306:	2200      	movs	r2, #0
    4308:	70da      	strb	r2, [r3, #3]
    430a:	2310      	movs	r3, #16
    430c:	18fb      	adds	r3, r7, r3
    430e:	2203      	movs	r2, #3
    4310:	711a      	strb	r2, [r3, #4]
    4312:	2310      	movs	r3, #16
    4314:	18fb      	adds	r3, r7, r3
    4316:	2202      	movs	r2, #2
    4318:	715a      	strb	r2, [r3, #5]
    431a:	2310      	movs	r3, #16
    431c:	18fb      	adds	r3, r7, r3
    431e:	2204      	movs	r2, #4
    4320:	719a      	strb	r2, [r3, #6]
    4322:	2310      	movs	r3, #16
    4324:	18fb      	adds	r3, r7, r3
    4326:	2240      	movs	r2, #64	; 0x40
    4328:	71da      	strb	r2, [r3, #7]
    432a:	2310      	movs	r3, #16
    432c:	18fb      	adds	r3, r7, r3
    432e:	2205      	movs	r2, #5
    4330:	721a      	strb	r2, [r3, #8]
    4332:	2310      	movs	r3, #16
    4334:	18fb      	adds	r3, r7, r3
    4336:	2203      	movs	r2, #3
    4338:	725a      	strb	r2, [r3, #9]
    433a:	2310      	movs	r3, #16
    433c:	18fb      	adds	r3, r7, r3
    433e:	2206      	movs	r2, #6
    4340:	729a      	strb	r2, [r3, #10]
    4342:	2310      	movs	r3, #16
    4344:	18fb      	adds	r3, r7, r3
    4346:	2233      	movs	r2, #51	; 0x33
    4348:	72da      	strb	r2, [r3, #11]
    434a:	2310      	movs	r3, #16
    434c:	18fb      	adds	r3, r7, r3
    434e:	2207      	movs	r2, #7
    4350:	731a      	strb	r2, [r3, #12]
    /* 0x03 */ { REG_BITRATEMSB, RF_BITRATEMSB_55555}, // default: 4.8 KBPS
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    4352:	1dfb      	adds	r3, r7, #7
    4354:	781b      	ldrb	r3, [r3, #0]
    4356:	2b1f      	cmp	r3, #31
    4358:	d00d      	beq.n	4376 <RFM_initialize+0xae>
    435a:	1dfb      	adds	r3, r7, #7
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	2b2b      	cmp	r3, #43	; 0x2b
    4360:	d007      	beq.n	4372 <RFM_initialize+0xaa>
    4362:	1dfb      	adds	r3, r7, #7
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	2b56      	cmp	r3, #86	; 0x56
    4368:	d101      	bne.n	436e <RFM_initialize+0xa6>
    436a:	23d9      	movs	r3, #217	; 0xd9
    436c:	e004      	b.n	4378 <RFM_initialize+0xb0>
    436e:	23e4      	movs	r3, #228	; 0xe4
    4370:	e002      	b.n	4378 <RFM_initialize+0xb0>
    4372:	236c      	movs	r3, #108	; 0x6c
    4374:	e000      	b.n	4378 <RFM_initialize+0xb0>
    4376:	234e      	movs	r3, #78	; 0x4e

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    4378:	2210      	movs	r2, #16
    437a:	18ba      	adds	r2, r7, r2
    437c:	7353      	strb	r3, [r2, #13]
    437e:	2310      	movs	r3, #16
    4380:	18fb      	adds	r3, r7, r3
    4382:	2208      	movs	r2, #8
    4384:	739a      	strb	r2, [r3, #14]
    /* 0x04 */ { REG_BITRATELSB, RF_BITRATELSB_55555},
    /* 0x05 */ { REG_FDEVMSB, RF_FDEVMSB_50000}, // default: 5KHz, (FDEV + BitRate / 2 <= 500KHz)
    /* 0x06 */ { REG_FDEVLSB, RF_FDEVLSB_50000},

    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand==RF69_315MHZ ? RF_FRFMID_315 : (freqBand==RF69_433MHZ ? RF_FRFMID_433 : (freqBand==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
    4386:	1dfb      	adds	r3, r7, #7
    4388:	781b      	ldrb	r3, [r3, #0]
    438a:	2b1f      	cmp	r3, #31
    438c:	d00d      	beq.n	43aa <RFM_initialize+0xe2>
    438e:	1dfb      	adds	r3, r7, #7
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	2b2b      	cmp	r3, #43	; 0x2b
    4394:	d007      	beq.n	43a6 <RFM_initialize+0xde>
    4396:	1dfb      	adds	r3, r7, #7
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	2b56      	cmp	r3, #86	; 0x56
    439c:	d101      	bne.n	43a2 <RFM_initialize+0xda>
    439e:	2300      	movs	r3, #0
    43a0:	e004      	b.n	43ac <RFM_initialize+0xe4>
    43a2:	23c0      	movs	r3, #192	; 0xc0
    43a4:	e002      	b.n	43ac <RFM_initialize+0xe4>
    43a6:	2340      	movs	r3, #64	; 0x40
    43a8:	e000      	b.n	43ac <RFM_initialize+0xe4>
    43aa:	23c0      	movs	r3, #192	; 0xc0

bool RFM_initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
  RFM69();

  const uint8_t CONFIG[][2] =
    43ac:	2210      	movs	r2, #16
    43ae:	18ba      	adds	r2, r7, r2
    43b0:	73d3      	strb	r3, [r2, #15]
    43b2:	2310      	movs	r3, #16
    43b4:	18fb      	adds	r3, r7, r3
    43b6:	2209      	movs	r2, #9
    43b8:	741a      	strb	r2, [r3, #16]
    43ba:	2310      	movs	r3, #16
    43bc:	18fb      	adds	r3, r7, r3
    43be:	2200      	movs	r2, #0
    43c0:	745a      	strb	r2, [r3, #17]
    43c2:	2310      	movs	r3, #16
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	2219      	movs	r2, #25
    43c8:	749a      	strb	r2, [r3, #18]
    43ca:	2310      	movs	r3, #16
    43cc:	18fb      	adds	r3, r7, r3
    43ce:	2242      	movs	r2, #66	; 0x42
    43d0:	74da      	strb	r2, [r3, #19]
    43d2:	2310      	movs	r3, #16
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	2225      	movs	r2, #37	; 0x25
    43d8:	751a      	strb	r2, [r3, #20]
    43da:	2310      	movs	r3, #16
    43dc:	18fb      	adds	r3, r7, r3
    43de:	2240      	movs	r2, #64	; 0x40
    43e0:	755a      	strb	r2, [r3, #21]
    43e2:	2310      	movs	r3, #16
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2226      	movs	r2, #38	; 0x26
    43e8:	759a      	strb	r2, [r3, #22]
    43ea:	2310      	movs	r3, #16
    43ec:	18fb      	adds	r3, r7, r3
    43ee:	2207      	movs	r2, #7
    43f0:	75da      	strb	r2, [r3, #23]
    43f2:	2310      	movs	r3, #16
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	2228      	movs	r2, #40	; 0x28
    43f8:	761a      	strb	r2, [r3, #24]
    43fa:	2310      	movs	r3, #16
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	2210      	movs	r2, #16
    4400:	765a      	strb	r2, [r3, #25]
    4402:	2310      	movs	r3, #16
    4404:	18fb      	adds	r3, r7, r3
    4406:	2229      	movs	r2, #41	; 0x29
    4408:	769a      	strb	r2, [r3, #26]
    440a:	2310      	movs	r3, #16
    440c:	18fb      	adds	r3, r7, r3
    440e:	22dc      	movs	r2, #220	; 0xdc
    4410:	76da      	strb	r2, [r3, #27]
    4412:	2310      	movs	r3, #16
    4414:	18fb      	adds	r3, r7, r3
    4416:	222e      	movs	r2, #46	; 0x2e
    4418:	771a      	strb	r2, [r3, #28]
    441a:	2310      	movs	r3, #16
    441c:	18fb      	adds	r3, r7, r3
    441e:	2288      	movs	r2, #136	; 0x88
    4420:	775a      	strb	r2, [r3, #29]
    4422:	2310      	movs	r3, #16
    4424:	18fb      	adds	r3, r7, r3
    4426:	222f      	movs	r2, #47	; 0x2f
    4428:	779a      	strb	r2, [r3, #30]
    442a:	2310      	movs	r3, #16
    442c:	18fb      	adds	r3, r7, r3
    442e:	222d      	movs	r2, #45	; 0x2d
    4430:	77da      	strb	r2, [r3, #31]
    4432:	2310      	movs	r3, #16
    4434:	18fb      	adds	r3, r7, r3
    4436:	2220      	movs	r2, #32
    4438:	2130      	movs	r1, #48	; 0x30
    443a:	5499      	strb	r1, [r3, r2]
    443c:	2310      	movs	r3, #16
    443e:	18fb      	adds	r3, r7, r3
    4440:	1d7a      	adds	r2, r7, #5
    4442:	2121      	movs	r1, #33	; 0x21
    4444:	7812      	ldrb	r2, [r2, #0]
    4446:	545a      	strb	r2, [r3, r1]
    4448:	2310      	movs	r3, #16
    444a:	18fb      	adds	r3, r7, r3
    444c:	2222      	movs	r2, #34	; 0x22
    444e:	2137      	movs	r1, #55	; 0x37
    4450:	5499      	strb	r1, [r3, r2]
    4452:	2310      	movs	r3, #16
    4454:	18fb      	adds	r3, r7, r3
    4456:	2223      	movs	r2, #35	; 0x23
    4458:	2190      	movs	r1, #144	; 0x90
    445a:	5499      	strb	r1, [r3, r2]
    445c:	2310      	movs	r3, #16
    445e:	18fb      	adds	r3, r7, r3
    4460:	2224      	movs	r2, #36	; 0x24
    4462:	2138      	movs	r1, #56	; 0x38
    4464:	5499      	strb	r1, [r3, r2]
    4466:	2310      	movs	r3, #16
    4468:	18fb      	adds	r3, r7, r3
    446a:	2225      	movs	r2, #37	; 0x25
    446c:	2142      	movs	r1, #66	; 0x42
    446e:	5499      	strb	r1, [r3, r2]
    4470:	2310      	movs	r3, #16
    4472:	18fb      	adds	r3, r7, r3
    4474:	2226      	movs	r2, #38	; 0x26
    4476:	213c      	movs	r1, #60	; 0x3c
    4478:	5499      	strb	r1, [r3, r2]
    447a:	2310      	movs	r3, #16
    447c:	18fb      	adds	r3, r7, r3
    447e:	2227      	movs	r2, #39	; 0x27
    4480:	218f      	movs	r1, #143	; 0x8f
    4482:	5499      	strb	r1, [r3, r2]
    4484:	2310      	movs	r3, #16
    4486:	18fb      	adds	r3, r7, r3
    4488:	2228      	movs	r2, #40	; 0x28
    448a:	213d      	movs	r1, #61	; 0x3d
    448c:	5499      	strb	r1, [r3, r2]
    448e:	2310      	movs	r3, #16
    4490:	18fb      	adds	r3, r7, r3
    4492:	2229      	movs	r2, #41	; 0x29
    4494:	2112      	movs	r1, #18
    4496:	5499      	strb	r1, [r3, r2]
    4498:	2310      	movs	r3, #16
    449a:	18fb      	adds	r3, r7, r3
    449c:	222a      	movs	r2, #42	; 0x2a
    449e:	216f      	movs	r1, #111	; 0x6f
    44a0:	5499      	strb	r1, [r3, r2]
    44a2:	2310      	movs	r3, #16
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	222b      	movs	r2, #43	; 0x2b
    44a8:	2130      	movs	r1, #48	; 0x30
    44aa:	5499      	strb	r1, [r3, r2]
    44ac:	2310      	movs	r3, #16
    44ae:	18fb      	adds	r3, r7, r3
    44b0:	222c      	movs	r2, #44	; 0x2c
    44b2:	21ff      	movs	r1, #255	; 0xff
    44b4:	5499      	strb	r1, [r3, r2]
    44b6:	2310      	movs	r3, #16
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	222d      	movs	r2, #45	; 0x2d
    44bc:	2100      	movs	r1, #0
    44be:	5499      	strb	r1, [r3, r2]

  //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
  //pinMode(_slaveSelectPin, OUTPUT); // CHANGE //
  //SPI.begin(); // CHANGE //

  configure_RFM69_spi();
    44c0:	4b4c      	ldr	r3, [pc, #304]	; (45f4 <RFM_initialize+0x32c>)
    44c2:	4798      	blx	r3
  configure_rtc_count(); // Configure the RTC module for millis
    44c4:	4b4c      	ldr	r3, [pc, #304]	; (45f8 <RFM_initialize+0x330>)
    44c6:	4798      	blx	r3
  configure_port_pins();
    44c8:	4b4c      	ldr	r3, [pc, #304]	; (45fc <RFM_initialize+0x334>)
    44ca:	4798      	blx	r3
  configure_extint_channel();
    44cc:	4b4c      	ldr	r3, [pc, #304]	; (4600 <RFM_initialize+0x338>)
    44ce:	4798      	blx	r3


  reset_millis(); //unsigned long start = millis(); // CHANGE // 
    44d0:	4b4c      	ldr	r3, [pc, #304]	; (4604 <RFM_initialize+0x33c>)
    44d2:	4798      	blx	r3
  volatile uint8_t timeout = 50;
    44d4:	230f      	movs	r3, #15
    44d6:	18fb      	adds	r3, r7, r3
    44d8:	2232      	movs	r2, #50	; 0x32
    44da:	701a      	strb	r2, [r3, #0]
  do 
	writeReg(REG_SYNCVALUE1, 0xAA); 
    44dc:	202f      	movs	r0, #47	; 0x2f
    44de:	21aa      	movs	r1, #170	; 0xaa
    44e0:	4b49      	ldr	r3, [pc, #292]	; (4608 <RFM_initialize+0x340>)
    44e2:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
    44e4:	202f      	movs	r0, #47	; 0x2f
    44e6:	4b49      	ldr	r3, [pc, #292]	; (460c <RFM_initialize+0x344>)
    44e8:	4798      	blx	r3
    44ea:	1e03      	subs	r3, r0, #0
    44ec:	2baa      	cmp	r3, #170	; 0xaa
    44ee:	d008      	beq.n	4502 <RFM_initialize+0x23a>
    44f0:	4b47      	ldr	r3, [pc, #284]	; (4610 <RFM_initialize+0x348>)
    44f2:	4798      	blx	r3
    44f4:	1c02      	adds	r2, r0, #0
    44f6:	230f      	movs	r3, #15
    44f8:	18fb      	adds	r3, r7, r3
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	b2db      	uxtb	r3, r3
    44fe:	429a      	cmp	r2, r3
    4500:	d3ec      	bcc.n	44dc <RFM_initialize+0x214>
  
  reset_millis(); //start = millis(); // CHANGE // 
    4502:	4b40      	ldr	r3, [pc, #256]	; (4604 <RFM_initialize+0x33c>)
    4504:	4798      	blx	r3
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 
    4506:	202f      	movs	r0, #47	; 0x2f
    4508:	2155      	movs	r1, #85	; 0x55
    450a:	4b3f      	ldr	r3, [pc, #252]	; (4608 <RFM_initialize+0x340>)
    450c:	4798      	blx	r3
    450e:	202f      	movs	r0, #47	; 0x2f
    4510:	4b3e      	ldr	r3, [pc, #248]	; (460c <RFM_initialize+0x344>)
    4512:	4798      	blx	r3
    4514:	1e03      	subs	r3, r0, #0
    4516:	2b55      	cmp	r3, #85	; 0x55
    4518:	d008      	beq.n	452c <RFM_initialize+0x264>
    451a:	4b3d      	ldr	r3, [pc, #244]	; (4610 <RFM_initialize+0x348>)
    451c:	4798      	blx	r3
    451e:	1c02      	adds	r2, r0, #0
    4520:	230f      	movs	r3, #15
    4522:	18fb      	adds	r3, r7, r3
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	b2db      	uxtb	r3, r3
    4528:	429a      	cmp	r2, r3
    452a:	d3ec      	bcc.n	4506 <RFM_initialize+0x23e>

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    452c:	233f      	movs	r3, #63	; 0x3f
    452e:	18fb      	adds	r3, r7, r3
    4530:	2200      	movs	r2, #0
    4532:	701a      	strb	r2, [r3, #0]
    4534:	e01a      	b.n	456c <RFM_initialize+0x2a4>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    4536:	233f      	movs	r3, #63	; 0x3f
    4538:	18fb      	adds	r3, r7, r3
    453a:	781a      	ldrb	r2, [r3, #0]
    453c:	2310      	movs	r3, #16
    453e:	18fb      	adds	r3, r7, r3
    4540:	0052      	lsls	r2, r2, #1
    4542:	5cd1      	ldrb	r1, [r2, r3]
    4544:	233f      	movs	r3, #63	; 0x3f
    4546:	18fb      	adds	r3, r7, r3
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2210      	movs	r2, #16
    454c:	18ba      	adds	r2, r7, r2
    454e:	005b      	lsls	r3, r3, #1
    4550:	18d3      	adds	r3, r2, r3
    4552:	3301      	adds	r3, #1
    4554:	781b      	ldrb	r3, [r3, #0]
    4556:	1c08      	adds	r0, r1, #0
    4558:	1c19      	adds	r1, r3, #0
    455a:	4b2b      	ldr	r3, [pc, #172]	; (4608 <RFM_initialize+0x340>)
    455c:	4798      	blx	r3
  while (readReg(REG_SYNCVALUE1) != 0xaa && millis() < timeout); // CHANGE // 
  
  reset_millis(); //start = millis(); // CHANGE // 
  do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55 && millis() < timeout); // CHANGE // 

  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    455e:	233f      	movs	r3, #63	; 0x3f
    4560:	18fb      	adds	r3, r7, r3
    4562:	781a      	ldrb	r2, [r3, #0]
    4564:	233f      	movs	r3, #63	; 0x3f
    4566:	18fb      	adds	r3, r7, r3
    4568:	3201      	adds	r2, #1
    456a:	701a      	strb	r2, [r3, #0]
    456c:	233f      	movs	r3, #63	; 0x3f
    456e:	18fb      	adds	r3, r7, r3
    4570:	781a      	ldrb	r2, [r3, #0]
    4572:	2310      	movs	r3, #16
    4574:	18fb      	adds	r3, r7, r3
    4576:	0052      	lsls	r2, r2, #1
    4578:	5cd3      	ldrb	r3, [r2, r3]
    457a:	2bff      	cmp	r3, #255	; 0xff
    457c:	d1db      	bne.n	4536 <RFM_initialize+0x26e>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  RFM_encrypt(0);
    457e:	2000      	movs	r0, #0
    4580:	4b24      	ldr	r3, [pc, #144]	; (4614 <RFM_initialize+0x34c>)
    4582:	4798      	blx	r3

  RFM_setHighPower(_isRFM69HW); // called regardless if it's a RFM69W or RFM69HW
    4584:	4b24      	ldr	r3, [pc, #144]	; (4618 <RFM_initialize+0x350>)
    4586:	781b      	ldrb	r3, [r3, #0]
    4588:	b2db      	uxtb	r3, r3
    458a:	1c18      	adds	r0, r3, #0
    458c:	4b23      	ldr	r3, [pc, #140]	; (461c <RFM_initialize+0x354>)
    458e:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
    4590:	2001      	movs	r0, #1
    4592:	4b23      	ldr	r3, [pc, #140]	; (4620 <RFM_initialize+0x358>)
    4594:	4798      	blx	r3
  reset_millis(); //start = get_timer();
    4596:	4b1b      	ldr	r3, [pc, #108]	; (4604 <RFM_initialize+0x33c>)
    4598:	4798      	blx	r3
  while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) && millis() < timeout); // wait for ModeReady  // CHANGE //
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	2027      	movs	r0, #39	; 0x27
    459e:	4b1b      	ldr	r3, [pc, #108]	; (460c <RFM_initialize+0x344>)
    45a0:	4798      	blx	r3
    45a2:	1c03      	adds	r3, r0, #0
    45a4:	b2db      	uxtb	r3, r3
    45a6:	b25b      	sxtb	r3, r3
    45a8:	2b00      	cmp	r3, #0
    45aa:	db08      	blt.n	45be <RFM_initialize+0x2f6>
    45ac:	4b18      	ldr	r3, [pc, #96]	; (4610 <RFM_initialize+0x348>)
    45ae:	4798      	blx	r3
    45b0:	1c02      	adds	r2, r0, #0
    45b2:	230f      	movs	r3, #15
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	b2db      	uxtb	r3, r3
    45ba:	429a      	cmp	r2, r3
    45bc:	d3ee      	bcc.n	459c <RFM_initialize+0x2d4>
  if (millis() >= timeout) // CHANGE //
    45be:	4b14      	ldr	r3, [pc, #80]	; (4610 <RFM_initialize+0x348>)
    45c0:	4798      	blx	r3
    45c2:	1c02      	adds	r2, r0, #0
    45c4:	230f      	movs	r3, #15
    45c6:	18fb      	adds	r3, r7, r3
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	b2db      	uxtb	r3, r3
    45cc:	429a      	cmp	r2, r3
    45ce:	d301      	bcc.n	45d4 <RFM_initialize+0x30c>
    return false;
    45d0:	2300      	movs	r3, #0
    45d2:	e009      	b.n	45e8 <RFM_initialize+0x320>
  _inISR = false;
    45d4:	4b13      	ldr	r3, [pc, #76]	; (4624 <RFM_initialize+0x35c>)
    45d6:	2200      	movs	r2, #0
    45d8:	701a      	strb	r2, [r3, #0]

  configure_extint_callbacks(); //attachInterrupt(_interruptNum, isr0, RISING); // CHANGE //
    45da:	4b13      	ldr	r3, [pc, #76]	; (4628 <RFM_initialize+0x360>)
    45dc:	4798      	blx	r3

  _address = nodeID;
    45de:	4b13      	ldr	r3, [pc, #76]	; (462c <RFM_initialize+0x364>)
    45e0:	1dba      	adds	r2, r7, #6
    45e2:	7812      	ldrb	r2, [r2, #0]
    45e4:	701a      	strb	r2, [r3, #0]
  return true;
    45e6:	2301      	movs	r3, #1
}
    45e8:	1c18      	adds	r0, r3, #0
    45ea:	46bd      	mov	sp, r7
    45ec:	b011      	add	sp, #68	; 0x44
    45ee:	bd90      	pop	{r4, r7, pc}
    45f0:	00004299 	.word	0x00004299
    45f4:	00003f01 	.word	0x00003f01
    45f8:	00003fc5 	.word	0x00003fc5
    45fc:	00003e6d 	.word	0x00003e6d
    4600:	00003e99 	.word	0x00003e99
    4604:	00004029 	.word	0x00004029
    4608:	00004cad 	.word	0x00004cad
    460c:	00004c41 	.word	0x00004c41
    4610:	00004051 	.word	0x00004051
    4614:	00004b41 	.word	0x00004b41
    4618:	20000204 	.word	0x20000204
    461c:	00004211 	.word	0x00004211
    4620:	00004631 	.word	0x00004631
    4624:	20000105 	.word	0x20000105
    4628:	00003ed9 	.word	0x00003ed9
    462c:	20000148 	.word	0x20000148

00004630 <setMode>:
  }
  setMode(oldMode);
}

void setMode(uint8_t newMode)
{
    4630:	b580      	push	{r7, lr}
    4632:	b082      	sub	sp, #8
    4634:	af00      	add	r7, sp, #0
    4636:	1c02      	adds	r2, r0, #0
    4638:	1dfb      	adds	r3, r7, #7
    463a:	701a      	strb	r2, [r3, #0]
  if (newMode == _mode)
    463c:	1dfb      	adds	r3, r7, #7
    463e:	781b      	ldrb	r3, [r3, #0]
    4640:	b29a      	uxth	r2, r3
    4642:	4b4c      	ldr	r3, [pc, #304]	; (4774 <setMode+0x144>)
    4644:	881b      	ldrh	r3, [r3, #0]
    4646:	b29b      	uxth	r3, r3
    4648:	429a      	cmp	r2, r3
    464a:	d100      	bne.n	464e <setMode+0x1e>
    return;
    464c:	e08e      	b.n	476c <setMode+0x13c>

  switch (newMode) {
    464e:	1dfb      	adds	r3, r7, #7
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	2b04      	cmp	r3, #4
    4654:	d900      	bls.n	4658 <setMode+0x28>
    4656:	e088      	b.n	476a <setMode+0x13a>
    4658:	009a      	lsls	r2, r3, #2
    465a:	4b47      	ldr	r3, [pc, #284]	; (4778 <setMode+0x148>)
    465c:	18d3      	adds	r3, r2, r3
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	469f      	mov	pc, r3
    case RF69_MODE_TX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    4662:	2001      	movs	r0, #1
    4664:	4b45      	ldr	r3, [pc, #276]	; (477c <setMode+0x14c>)
    4666:	4798      	blx	r3
    4668:	1c03      	adds	r3, r0, #0
    466a:	b2db      	uxtb	r3, r3
    466c:	1c1a      	adds	r2, r3, #0
    466e:	231c      	movs	r3, #28
    4670:	439a      	bics	r2, r3
    4672:	1c13      	adds	r3, r2, #0
    4674:	b2db      	uxtb	r3, r3
    4676:	1c1a      	adds	r2, r3, #0
    4678:	230c      	movs	r3, #12
    467a:	4313      	orrs	r3, r2
    467c:	b2db      	uxtb	r3, r3
    467e:	b2db      	uxtb	r3, r3
    4680:	2001      	movs	r0, #1
    4682:	1c19      	adds	r1, r3, #0
    4684:	4b3e      	ldr	r3, [pc, #248]	; (4780 <setMode+0x150>)
    4686:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(true);
    4688:	4b3e      	ldr	r3, [pc, #248]	; (4784 <setMode+0x154>)
    468a:	781b      	ldrb	r3, [r3, #0]
    468c:	b2db      	uxtb	r3, r3
    468e:	2b00      	cmp	r3, #0
    4690:	d003      	beq.n	469a <setMode+0x6a>
    4692:	2001      	movs	r0, #1
    4694:	4b3c      	ldr	r3, [pc, #240]	; (4788 <setMode+0x158>)
    4696:	4798      	blx	r3
      break;
    4698:	e053      	b.n	4742 <setMode+0x112>
    469a:	e052      	b.n	4742 <setMode+0x112>
    case RF69_MODE_RX:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    469c:	2001      	movs	r0, #1
    469e:	4b37      	ldr	r3, [pc, #220]	; (477c <setMode+0x14c>)
    46a0:	4798      	blx	r3
    46a2:	1c03      	adds	r3, r0, #0
    46a4:	b2db      	uxtb	r3, r3
    46a6:	1c1a      	adds	r2, r3, #0
    46a8:	231c      	movs	r3, #28
    46aa:	439a      	bics	r2, r3
    46ac:	1c13      	adds	r3, r2, #0
    46ae:	b2db      	uxtb	r3, r3
    46b0:	1c1a      	adds	r2, r3, #0
    46b2:	2310      	movs	r3, #16
    46b4:	4313      	orrs	r3, r2
    46b6:	b2db      	uxtb	r3, r3
    46b8:	b2db      	uxtb	r3, r3
    46ba:	2001      	movs	r0, #1
    46bc:	1c19      	adds	r1, r3, #0
    46be:	4b30      	ldr	r3, [pc, #192]	; (4780 <setMode+0x150>)
    46c0:	4798      	blx	r3
      if (_isRFM69HW) setHighPowerRegs(false);
    46c2:	4b30      	ldr	r3, [pc, #192]	; (4784 <setMode+0x154>)
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	b2db      	uxtb	r3, r3
    46c8:	2b00      	cmp	r3, #0
    46ca:	d003      	beq.n	46d4 <setMode+0xa4>
    46cc:	2000      	movs	r0, #0
    46ce:	4b2e      	ldr	r3, [pc, #184]	; (4788 <setMode+0x158>)
    46d0:	4798      	blx	r3
      break;
    46d2:	e036      	b.n	4742 <setMode+0x112>
    46d4:	e035      	b.n	4742 <setMode+0x112>
    case RF69_MODE_SYNTH:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    46d6:	2001      	movs	r0, #1
    46d8:	4b28      	ldr	r3, [pc, #160]	; (477c <setMode+0x14c>)
    46da:	4798      	blx	r3
    46dc:	1c03      	adds	r3, r0, #0
    46de:	b2db      	uxtb	r3, r3
    46e0:	1c1a      	adds	r2, r3, #0
    46e2:	231c      	movs	r3, #28
    46e4:	439a      	bics	r2, r3
    46e6:	1c13      	adds	r3, r2, #0
    46e8:	b2db      	uxtb	r3, r3
    46ea:	1c1a      	adds	r2, r3, #0
    46ec:	2308      	movs	r3, #8
    46ee:	4313      	orrs	r3, r2
    46f0:	b2db      	uxtb	r3, r3
    46f2:	b2db      	uxtb	r3, r3
    46f4:	2001      	movs	r0, #1
    46f6:	1c19      	adds	r1, r3, #0
    46f8:	4b21      	ldr	r3, [pc, #132]	; (4780 <setMode+0x150>)
    46fa:	4798      	blx	r3
      break;
    46fc:	e021      	b.n	4742 <setMode+0x112>
    case RF69_MODE_STANDBY:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    46fe:	2001      	movs	r0, #1
    4700:	4b1e      	ldr	r3, [pc, #120]	; (477c <setMode+0x14c>)
    4702:	4798      	blx	r3
    4704:	1c03      	adds	r3, r0, #0
    4706:	b2db      	uxtb	r3, r3
    4708:	1c1a      	adds	r2, r3, #0
    470a:	231c      	movs	r3, #28
    470c:	439a      	bics	r2, r3
    470e:	1c13      	adds	r3, r2, #0
    4710:	b2db      	uxtb	r3, r3
    4712:	1c1a      	adds	r2, r3, #0
    4714:	2304      	movs	r3, #4
    4716:	4313      	orrs	r3, r2
    4718:	b2db      	uxtb	r3, r3
    471a:	b2db      	uxtb	r3, r3
    471c:	2001      	movs	r0, #1
    471e:	1c19      	adds	r1, r3, #0
    4720:	4b17      	ldr	r3, [pc, #92]	; (4780 <setMode+0x150>)
    4722:	4798      	blx	r3
      break;
    4724:	e00d      	b.n	4742 <setMode+0x112>
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    4726:	2001      	movs	r0, #1
    4728:	4b14      	ldr	r3, [pc, #80]	; (477c <setMode+0x14c>)
    472a:	4798      	blx	r3
    472c:	1c03      	adds	r3, r0, #0
    472e:	1c1a      	adds	r2, r3, #0
    4730:	231c      	movs	r3, #28
    4732:	439a      	bics	r2, r3
    4734:	1c13      	adds	r3, r2, #0
    4736:	b2db      	uxtb	r3, r3
    4738:	2001      	movs	r0, #1
    473a:	1c19      	adds	r1, r3, #0
    473c:	4b10      	ldr	r3, [pc, #64]	; (4780 <setMode+0x150>)
    473e:	4798      	blx	r3
      break;
    4740:	46c0      	nop			; (mov r8, r8)
      return;
  }

  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    4742:	46c0      	nop			; (mov r8, r8)
    4744:	4b0b      	ldr	r3, [pc, #44]	; (4774 <setMode+0x144>)
    4746:	881b      	ldrh	r3, [r3, #0]
    4748:	b29b      	uxth	r3, r3
    474a:	2b00      	cmp	r3, #0
    474c:	d107      	bne.n	475e <setMode+0x12e>
    474e:	2027      	movs	r0, #39	; 0x27
    4750:	4b0a      	ldr	r3, [pc, #40]	; (477c <setMode+0x14c>)
    4752:	4798      	blx	r3
    4754:	1c03      	adds	r3, r0, #0
    4756:	b2db      	uxtb	r3, r3
    4758:	b25b      	sxtb	r3, r3
    475a:	2b00      	cmp	r3, #0
    475c:	daf2      	bge.n	4744 <setMode+0x114>

  _mode = newMode;
    475e:	1dfb      	adds	r3, r7, #7
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	b29a      	uxth	r2, r3
    4764:	4b03      	ldr	r3, [pc, #12]	; (4774 <setMode+0x144>)
    4766:	801a      	strh	r2, [r3, #0]
    4768:	e000      	b.n	476c <setMode+0x13c>
      break;
    case RF69_MODE_SLEEP:
      writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
      break;
    default:
      return;
    476a:	46c0      	nop			; (mov r8, r8)
  // we are using packet mode, so this check is not really needed
  // but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
  while (_mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady

  _mode = newMode;
}
    476c:	46bd      	mov	sp, r7
    476e:	b002      	add	sp, #8
    4770:	bd80      	pop	{r7, pc}
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	20000202 	.word	0x20000202
    4778:	000052e8 	.word	0x000052e8
    477c:	00004c41 	.word	0x00004c41
    4780:	00004cad 	.word	0x00004cad
    4784:	20000204 	.word	0x20000204
    4788:	00004d69 	.word	0x00004d69

0000478c <canSend>:
  if (_isRFM69HW) _powerLevel /= 2;
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | _powerLevel);
}

bool canSend()
{
    478c:	b580      	push	{r7, lr}
    478e:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI() < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
    4790:	4b0b      	ldr	r3, [pc, #44]	; (47c0 <canSend+0x34>)
    4792:	881b      	ldrh	r3, [r3, #0]
    4794:	b29b      	uxth	r3, r3
    4796:	2b03      	cmp	r3, #3
    4798:	d10e      	bne.n	47b8 <canSend+0x2c>
    479a:	4b0a      	ldr	r3, [pc, #40]	; (47c4 <canSend+0x38>)
    479c:	881b      	ldrh	r3, [r3, #0]
    479e:	b29b      	uxth	r3, r3
    47a0:	2b00      	cmp	r3, #0
    47a2:	d109      	bne.n	47b8 <canSend+0x2c>
    47a4:	4b08      	ldr	r3, [pc, #32]	; (47c8 <canSend+0x3c>)
    47a6:	4798      	blx	r3
    47a8:	1c03      	adds	r3, r0, #0
    47aa:	335a      	adds	r3, #90	; 0x5a
    47ac:	da04      	bge.n	47b8 <canSend+0x2c>
  {
    setMode(RF69_MODE_STANDBY);
    47ae:	2001      	movs	r0, #1
    47b0:	4b06      	ldr	r3, [pc, #24]	; (47cc <canSend+0x40>)
    47b2:	4798      	blx	r3
    return true;
    47b4:	2301      	movs	r3, #1
    47b6:	e000      	b.n	47ba <canSend+0x2e>
  }
  return false;
    47b8:	2300      	movs	r3, #0
}
    47ba:	1c18      	adds	r0, r3, #0
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	20000202 	.word	0x20000202
    47c4:	200001d0 	.word	0x200001d0
    47c8:	00004bfd 	.word	0x00004bfd
    47cc:	00004631 	.word	0x00004631

000047d0 <RFM_send>:

void RFM_send(uint8_t toAddress, const void* buffer, uint8_t bufferSize, bool requestACK)
{
    47d0:	b590      	push	{r4, r7, lr}
    47d2:	b085      	sub	sp, #20
    47d4:	af02      	add	r7, sp, #8
    47d6:	1c04      	adds	r4, r0, #0
    47d8:	6039      	str	r1, [r7, #0]
    47da:	1c10      	adds	r0, r2, #0
    47dc:	1c19      	adds	r1, r3, #0
    47de:	1dfb      	adds	r3, r7, #7
    47e0:	1c22      	adds	r2, r4, #0
    47e2:	701a      	strb	r2, [r3, #0]
    47e4:	1dbb      	adds	r3, r7, #6
    47e6:	1c02      	adds	r2, r0, #0
    47e8:	701a      	strb	r2, [r3, #0]
    47ea:	1d7b      	adds	r3, r7, #5
    47ec:	1c0a      	adds	r2, r1, #0
    47ee:	701a      	strb	r2, [r3, #0]
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    47f0:	203d      	movs	r0, #61	; 0x3d
    47f2:	4b17      	ldr	r3, [pc, #92]	; (4850 <RFM_send+0x80>)
    47f4:	4798      	blx	r3
    47f6:	1c03      	adds	r3, r0, #0
    47f8:	1c1a      	adds	r2, r3, #0
    47fa:	2304      	movs	r3, #4
    47fc:	4313      	orrs	r3, r2
    47fe:	b2db      	uxtb	r3, r3
    4800:	203d      	movs	r0, #61	; 0x3d
    4802:	1c19      	adds	r1, r3, #0
    4804:	4b13      	ldr	r3, [pc, #76]	; (4854 <RFM_send+0x84>)
    4806:	4798      	blx	r3
  reset_millis(); //uint32_t now = millis(); // CHANGE //
    4808:	4b13      	ldr	r3, [pc, #76]	; (4858 <RFM_send+0x88>)
    480a:	4798      	blx	r3
  while (!canSend() && millis() < RF69_CSMA_LIMIT_MS) RFM_receiveDone(); // CHANGE //
    480c:	e001      	b.n	4812 <RFM_send+0x42>
    480e:	4b13      	ldr	r3, [pc, #76]	; (485c <RFM_send+0x8c>)
    4810:	4798      	blx	r3
    4812:	4b13      	ldr	r3, [pc, #76]	; (4860 <RFM_send+0x90>)
    4814:	4798      	blx	r3
    4816:	1c03      	adds	r3, r0, #0
    4818:	1c1a      	adds	r2, r3, #0
    481a:	2301      	movs	r3, #1
    481c:	4053      	eors	r3, r2
    481e:	b2db      	uxtb	r3, r3
    4820:	2b00      	cmp	r3, #0
    4822:	d005      	beq.n	4830 <RFM_send+0x60>
    4824:	4b0f      	ldr	r3, [pc, #60]	; (4864 <RFM_send+0x94>)
    4826:	4798      	blx	r3
    4828:	1e02      	subs	r2, r0, #0
    482a:	4b0f      	ldr	r3, [pc, #60]	; (4868 <RFM_send+0x98>)
    482c:	429a      	cmp	r2, r3
    482e:	d9ee      	bls.n	480e <RFM_send+0x3e>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    4830:	1dfb      	adds	r3, r7, #7
    4832:	7818      	ldrb	r0, [r3, #0]
    4834:	6839      	ldr	r1, [r7, #0]
    4836:	1dbb      	adds	r3, r7, #6
    4838:	781a      	ldrb	r2, [r3, #0]
    483a:	1d7b      	adds	r3, r7, #5
    483c:	781c      	ldrb	r4, [r3, #0]
    483e:	2300      	movs	r3, #0
    4840:	9300      	str	r3, [sp, #0]
    4842:	1c23      	adds	r3, r4, #0
    4844:	4c09      	ldr	r4, [pc, #36]	; (486c <RFM_send+0x9c>)
    4846:	47a0      	blx	r4
}
    4848:	46bd      	mov	sp, r7
    484a:	b003      	add	sp, #12
    484c:	bd90      	pop	{r4, r7, pc}
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	00004c41 	.word	0x00004c41
    4854:	00004cad 	.word	0x00004cad
    4858:	00004029 	.word	0x00004029
    485c:	00004ae5 	.word	0x00004ae5
    4860:	0000478d 	.word	0x0000478d
    4864:	00004051 	.word	0x00004051
    4868:	000003e7 	.word	0x000003e7
    486c:	00004079 	.word	0x00004079

00004870 <interruptHandler>:
  sendFrame(sender, buffer, bufferSize, false, true);
  RFM_RSSI = _RSSI; // restore payload RSSI
}

// internal function - interrupt gets called when a packet is received
void interruptHandler() {
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)) //
    4876:	4b5b      	ldr	r3, [pc, #364]	; (49e4 <interruptHandler+0x174>)
    4878:	881b      	ldrh	r3, [r3, #0]
    487a:	b29b      	uxth	r3, r3
    487c:	2b03      	cmp	r3, #3
    487e:	d000      	beq.n	4882 <interruptHandler+0x12>
    4880:	e0a7      	b.n	49d2 <interruptHandler+0x162>
    4882:	2028      	movs	r0, #40	; 0x28
    4884:	4b58      	ldr	r3, [pc, #352]	; (49e8 <interruptHandler+0x178>)
    4886:	4798      	blx	r3
    4888:	1c03      	adds	r3, r0, #0
    488a:	1c1a      	adds	r2, r3, #0
    488c:	2304      	movs	r3, #4
    488e:	4013      	ands	r3, r2
    4890:	d100      	bne.n	4894 <interruptHandler+0x24>
    4892:	e09e      	b.n	49d2 <interruptHandler+0x162>
  {
    setMode(RF69_MODE_STANDBY);
    4894:	2001      	movs	r0, #1
    4896:	4b55      	ldr	r3, [pc, #340]	; (49ec <interruptHandler+0x17c>)
    4898:	4798      	blx	r3
    radioselect();
    489a:	4b55      	ldr	r3, [pc, #340]	; (49f0 <interruptHandler+0x180>)
    489c:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_FIFO & 0x7F, &read_buf); //SPI.transfer(REG_FIFO & 0x7F); // CHANGE //
    489e:	4a55      	ldr	r2, [pc, #340]	; (49f4 <interruptHandler+0x184>)
    48a0:	4b55      	ldr	r3, [pc, #340]	; (49f8 <interruptHandler+0x188>)
    48a2:	1c10      	adds	r0, r2, #0
    48a4:	2100      	movs	r1, #0
    48a6:	1c1a      	adds	r2, r3, #0
    48a8:	4b54      	ldr	r3, [pc, #336]	; (49fc <interruptHandler+0x18c>)
    48aa:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, 0, &PAYLOADLEN); //SPI.transfer(0); // CHANGE //
    48ac:	4a51      	ldr	r2, [pc, #324]	; (49f4 <interruptHandler+0x184>)
    48ae:	4b54      	ldr	r3, [pc, #336]	; (4a00 <interruptHandler+0x190>)
    48b0:	1c10      	adds	r0, r2, #0
    48b2:	2100      	movs	r1, #0
    48b4:	1c1a      	adds	r2, r3, #0
    48b6:	4b51      	ldr	r3, [pc, #324]	; (49fc <interruptHandler+0x18c>)
    48b8:	4798      	blx	r3
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
    48ba:	4b51      	ldr	r3, [pc, #324]	; (4a00 <interruptHandler+0x190>)
    48bc:	881b      	ldrh	r3, [r3, #0]
    48be:	b29b      	uxth	r3, r3
    48c0:	2b42      	cmp	r3, #66	; 0x42
    48c2:	d803      	bhi.n	48cc <interruptHandler+0x5c>
    48c4:	4b4e      	ldr	r3, [pc, #312]	; (4a00 <interruptHandler+0x190>)
    48c6:	881b      	ldrh	r3, [r3, #0]
    48c8:	b29a      	uxth	r2, r3
    48ca:	e000      	b.n	48ce <interruptHandler+0x5e>
    48cc:	2242      	movs	r2, #66	; 0x42
    48ce:	4b4c      	ldr	r3, [pc, #304]	; (4a00 <interruptHandler+0x190>)
    48d0:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &TARGETID); //SPI.transfer(0); // CHANGE //
    48d2:	4a48      	ldr	r2, [pc, #288]	; (49f4 <interruptHandler+0x184>)
    48d4:	4b4b      	ldr	r3, [pc, #300]	; (4a04 <interruptHandler+0x194>)
    48d6:	1c10      	adds	r0, r2, #0
    48d8:	2100      	movs	r1, #0
    48da:	1c1a      	adds	r2, r3, #0
    48dc:	4b47      	ldr	r3, [pc, #284]	; (49fc <interruptHandler+0x18c>)
    48de:	4798      	blx	r3
    if(!(_promiscuousMode || TARGETID == _address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
    48e0:	4b49      	ldr	r3, [pc, #292]	; (4a08 <interruptHandler+0x198>)
    48e2:	781b      	ldrb	r3, [r3, #0]
    48e4:	b2db      	uxtb	r3, r3
    48e6:	2201      	movs	r2, #1
    48e8:	4053      	eors	r3, r2
    48ea:	b2db      	uxtb	r3, r3
    48ec:	2b00      	cmp	r3, #0
    48ee:	d00d      	beq.n	490c <interruptHandler+0x9c>
    48f0:	4b46      	ldr	r3, [pc, #280]	; (4a0c <interruptHandler+0x19c>)
    48f2:	781b      	ldrb	r3, [r3, #0]
    48f4:	b2db      	uxtb	r3, r3
    48f6:	b29a      	uxth	r2, r3
    48f8:	4b42      	ldr	r3, [pc, #264]	; (4a04 <interruptHandler+0x194>)
    48fa:	881b      	ldrh	r3, [r3, #0]
    48fc:	b29b      	uxth	r3, r3
    48fe:	429a      	cmp	r2, r3
    4900:	d004      	beq.n	490c <interruptHandler+0x9c>
    4902:	4b40      	ldr	r3, [pc, #256]	; (4a04 <interruptHandler+0x194>)
    4904:	881b      	ldrh	r3, [r3, #0]
    4906:	b29b      	uxth	r3, r3
    4908:	2bff      	cmp	r3, #255	; 0xff
    490a:	d104      	bne.n	4916 <interruptHandler+0xa6>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
    490c:	4b3c      	ldr	r3, [pc, #240]	; (4a00 <interruptHandler+0x190>)
    490e:	881b      	ldrh	r3, [r3, #0]
    4910:	b29b      	uxth	r3, r3
    4912:	2b02      	cmp	r3, #2
    4914:	d807      	bhi.n	4926 <interruptHandler+0xb6>
    {
      PAYLOADLEN = 0;
    4916:	4b3a      	ldr	r3, [pc, #232]	; (4a00 <interruptHandler+0x190>)
    4918:	2200      	movs	r2, #0
    491a:	801a      	strh	r2, [r3, #0]
      unselect();
    491c:	4b3c      	ldr	r3, [pc, #240]	; (4a10 <interruptHandler+0x1a0>)
    491e:	4798      	blx	r3
      receiveBegin();
    4920:	4b3c      	ldr	r3, [pc, #240]	; (4a14 <interruptHandler+0x1a4>)
    4922:	4798      	blx	r3
    4924:	e05b      	b.n	49de <interruptHandler+0x16e>
      return;
    }

    RFM_DATALEN = PAYLOADLEN - 3;
    4926:	4b36      	ldr	r3, [pc, #216]	; (4a00 <interruptHandler+0x190>)
    4928:	881b      	ldrh	r3, [r3, #0]
    492a:	b29b      	uxth	r3, r3
    492c:	3b03      	subs	r3, #3
    492e:	b29a      	uxth	r2, r3
    4930:	4b39      	ldr	r3, [pc, #228]	; (4a18 <interruptHandler+0x1a8>)
    4932:	801a      	strh	r2, [r3, #0]
    spi_transceive_wait(&spi_master_instance, 0, &RFM_SENDERID); //SPI.transfer(0); // CHANGE //
    4934:	4a2f      	ldr	r2, [pc, #188]	; (49f4 <interruptHandler+0x184>)
    4936:	4b39      	ldr	r3, [pc, #228]	; (4a1c <interruptHandler+0x1ac>)
    4938:	1c10      	adds	r0, r2, #0
    493a:	2100      	movs	r1, #0
    493c:	1c1a      	adds	r2, r3, #0
    493e:	4b2f      	ldr	r3, [pc, #188]	; (49fc <interruptHandler+0x18c>)
    4940:	4798      	blx	r3
    uint8_t CTLbyte = 0;
    4942:	1dbb      	adds	r3, r7, #6
    4944:	2200      	movs	r2, #0
    4946:	701a      	strb	r2, [r3, #0]
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //
    4948:	4a2a      	ldr	r2, [pc, #168]	; (49f4 <interruptHandler+0x184>)
    494a:	1dbb      	adds	r3, r7, #6
    494c:	1c10      	adds	r0, r2, #0
    494e:	2100      	movs	r1, #0
    4950:	1c1a      	adds	r2, r3, #0
    4952:	4b2a      	ldr	r3, [pc, #168]	; (49fc <interruptHandler+0x18c>)
    4954:	4798      	blx	r3

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    4956:	1dbb      	adds	r3, r7, #6
    4958:	781b      	ldrb	r3, [r3, #0]
    495a:	b29b      	uxth	r3, r3
    495c:	2280      	movs	r2, #128	; 0x80
    495e:	4013      	ands	r3, r2
    4960:	b29a      	uxth	r2, r3
    4962:	4b2f      	ldr	r3, [pc, #188]	; (4a20 <interruptHandler+0x1b0>)
    4964:	801a      	strh	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
    4966:	1dbb      	adds	r3, r7, #6
    4968:	781b      	ldrb	r3, [r3, #0]
    496a:	b29b      	uxth	r3, r3
    496c:	2240      	movs	r2, #64	; 0x40
    496e:	4013      	ands	r3, r2
    4970:	b29a      	uxth	r2, r3
    4972:	4b2c      	ldr	r3, [pc, #176]	; (4a24 <interruptHandler+0x1b4>)
    4974:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    4976:	1dfb      	adds	r3, r7, #7
    4978:	2200      	movs	r2, #0
    497a:	701a      	strb	r2, [r3, #0]
    497c:	e00f      	b.n	499e <interruptHandler+0x12e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    497e:	1dfb      	adds	r3, r7, #7
    4980:	781b      	ldrb	r3, [r3, #0]
    4982:	005a      	lsls	r2, r3, #1
    4984:	4b28      	ldr	r3, [pc, #160]	; (4a28 <interruptHandler+0x1b8>)
    4986:	18d3      	adds	r3, r2, r3
    4988:	4a1a      	ldr	r2, [pc, #104]	; (49f4 <interruptHandler+0x184>)
    498a:	1c10      	adds	r0, r2, #0
    498c:	2100      	movs	r1, #0
    498e:	1c1a      	adds	r2, r3, #0
    4990:	4b1a      	ldr	r3, [pc, #104]	; (49fc <interruptHandler+0x18c>)
    4992:	4798      	blx	r3
	spi_transceive_wait(&spi_master_instance, 0, &CTLbyte); //SPI.transfer(0); // CHANGE //

    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag

    for (uint8_t i = 0; i < RFM_DATALEN; i++)
    4994:	1dfb      	adds	r3, r7, #7
    4996:	781a      	ldrb	r2, [r3, #0]
    4998:	1dfb      	adds	r3, r7, #7
    499a:	3201      	adds	r2, #1
    499c:	701a      	strb	r2, [r3, #0]
    499e:	1dfb      	adds	r3, r7, #7
    49a0:	781b      	ldrb	r3, [r3, #0]
    49a2:	b29a      	uxth	r2, r3
    49a4:	4b1c      	ldr	r3, [pc, #112]	; (4a18 <interruptHandler+0x1a8>)
    49a6:	881b      	ldrh	r3, [r3, #0]
    49a8:	b29b      	uxth	r3, r3
    49aa:	429a      	cmp	r2, r3
    49ac:	d3e7      	bcc.n	497e <interruptHandler+0x10e>
    {
      spi_transceive_wait(&spi_master_instance, 0, RFM_DATA + i); //SPI.transfer(0); // CHANGE //
    }
    if (RFM_DATALEN < RF69_MAX_DATA_LEN) RFM_DATA[RFM_DATALEN] = 0; // add null at end of string
    49ae:	4b1a      	ldr	r3, [pc, #104]	; (4a18 <interruptHandler+0x1a8>)
    49b0:	881b      	ldrh	r3, [r3, #0]
    49b2:	b29b      	uxth	r3, r3
    49b4:	2b3c      	cmp	r3, #60	; 0x3c
    49b6:	d807      	bhi.n	49c8 <interruptHandler+0x158>
    49b8:	4b17      	ldr	r3, [pc, #92]	; (4a18 <interruptHandler+0x1a8>)
    49ba:	881b      	ldrh	r3, [r3, #0]
    49bc:	b29b      	uxth	r3, r3
    49be:	1c1a      	adds	r2, r3, #0
    49c0:	4b19      	ldr	r3, [pc, #100]	; (4a28 <interruptHandler+0x1b8>)
    49c2:	0052      	lsls	r2, r2, #1
    49c4:	2100      	movs	r1, #0
    49c6:	52d1      	strh	r1, [r2, r3]
    unselect();
    49c8:	4b11      	ldr	r3, [pc, #68]	; (4a10 <interruptHandler+0x1a0>)
    49ca:	4798      	blx	r3
    setMode(RF69_MODE_RX);
    49cc:	2003      	movs	r0, #3
    49ce:	4b07      	ldr	r3, [pc, #28]	; (49ec <interruptHandler+0x17c>)
    49d0:	4798      	blx	r3
  }
  RFM_RSSI = readRSSI();
    49d2:	4b16      	ldr	r3, [pc, #88]	; (4a2c <interruptHandler+0x1bc>)
    49d4:	4798      	blx	r3
    49d6:	1c03      	adds	r3, r0, #0
    49d8:	1c1a      	adds	r2, r3, #0
    49da:	4b15      	ldr	r3, [pc, #84]	; (4a30 <interruptHandler+0x1c0>)
    49dc:	801a      	strh	r2, [r3, #0]
}
    49de:	46bd      	mov	sp, r7
    49e0:	b002      	add	sp, #8
    49e2:	bd80      	pop	{r7, pc}
    49e4:	20000202 	.word	0x20000202
    49e8:	00004c41 	.word	0x00004c41
    49ec:	00004631 	.word	0x00004631
    49f0:	00004d11 	.word	0x00004d11
    49f4:	20000208 	.word	0x20000208
    49f8:	20000060 	.word	0x20000060
    49fc:	00002135 	.word	0x00002135
    4a00:	200001d0 	.word	0x200001d0
    4a04:	20000200 	.word	0x20000200
    4a08:	20000150 	.word	0x20000150
    4a0c:	20000148 	.word	0x20000148
    4a10:	00004d3d 	.word	0x00004d3d
    4a14:	00004a55 	.word	0x00004a55
    4a18:	2000014e 	.word	0x2000014e
    4a1c:	200000ea 	.word	0x200000ea
    4a20:	2000014c 	.word	0x2000014c
    4a24:	200001fe 	.word	0x200001fe
    4a28:	20000154 	.word	0x20000154
    4a2c:	00004bfd 	.word	0x00004bfd
    4a30:	20000244 	.word	0x20000244

00004a34 <isr0>:

// internal function
void isr0()
{ 
    4a34:	b580      	push	{r7, lr}
    4a36:	af00      	add	r7, sp, #0
	_inISR = true; 
    4a38:	4b04      	ldr	r3, [pc, #16]	; (4a4c <isr0+0x18>)
    4a3a:	2201      	movs	r2, #1
    4a3c:	701a      	strb	r2, [r3, #0]
	interruptHandler(); 
    4a3e:	4b04      	ldr	r3, [pc, #16]	; (4a50 <isr0+0x1c>)
    4a40:	4798      	blx	r3
	_inISR = false;
    4a42:	4b02      	ldr	r3, [pc, #8]	; (4a4c <isr0+0x18>)
    4a44:	2200      	movs	r2, #0
    4a46:	701a      	strb	r2, [r3, #0]
} // CHANGE //?
    4a48:	46bd      	mov	sp, r7
    4a4a:	bd80      	pop	{r7, pc}
    4a4c:	20000105 	.word	0x20000105
    4a50:	00004871 	.word	0x00004871

00004a54 <receiveBegin>:

// internal function
void receiveBegin() {
    4a54:	b580      	push	{r7, lr}
    4a56:	af00      	add	r7, sp, #0
  RFM_DATALEN = 0;
    4a58:	4b18      	ldr	r3, [pc, #96]	; (4abc <receiveBegin+0x68>)
    4a5a:	2200      	movs	r2, #0
    4a5c:	801a      	strh	r2, [r3, #0]
  RFM_SENDERID = 0;
    4a5e:	4b18      	ldr	r3, [pc, #96]	; (4ac0 <receiveBegin+0x6c>)
    4a60:	2200      	movs	r2, #0
    4a62:	801a      	strh	r2, [r3, #0]
  TARGETID = 0;
    4a64:	4b17      	ldr	r3, [pc, #92]	; (4ac4 <receiveBegin+0x70>)
    4a66:	2200      	movs	r2, #0
    4a68:	801a      	strh	r2, [r3, #0]
  PAYLOADLEN = 0;
    4a6a:	4b17      	ldr	r3, [pc, #92]	; (4ac8 <receiveBegin+0x74>)
    4a6c:	2200      	movs	r2, #0
    4a6e:	801a      	strh	r2, [r3, #0]
  ACK_REQUESTED = 0;
    4a70:	4b16      	ldr	r3, [pc, #88]	; (4acc <receiveBegin+0x78>)
    4a72:	2200      	movs	r2, #0
    4a74:	801a      	strh	r2, [r3, #0]
  ACK_RECEIVED = 0;
    4a76:	4b16      	ldr	r3, [pc, #88]	; (4ad0 <receiveBegin+0x7c>)
    4a78:	2200      	movs	r2, #0
    4a7a:	801a      	strh	r2, [r3, #0]
  RFM_RSSI = 0;
    4a7c:	4b15      	ldr	r3, [pc, #84]	; (4ad4 <receiveBegin+0x80>)
    4a7e:	2200      	movs	r2, #0
    4a80:	801a      	strh	r2, [r3, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    4a82:	2028      	movs	r0, #40	; 0x28
    4a84:	4b14      	ldr	r3, [pc, #80]	; (4ad8 <receiveBegin+0x84>)
    4a86:	4798      	blx	r3
    4a88:	1c03      	adds	r3, r0, #0
    4a8a:	1c1a      	adds	r2, r3, #0
    4a8c:	2304      	movs	r3, #4
    4a8e:	4013      	ands	r3, r2
    4a90:	d00b      	beq.n	4aaa <receiveBegin+0x56>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    4a92:	203d      	movs	r0, #61	; 0x3d
    4a94:	4b10      	ldr	r3, [pc, #64]	; (4ad8 <receiveBegin+0x84>)
    4a96:	4798      	blx	r3
    4a98:	1c03      	adds	r3, r0, #0
    4a9a:	1c1a      	adds	r2, r3, #0
    4a9c:	2304      	movs	r3, #4
    4a9e:	4313      	orrs	r3, r2
    4aa0:	b2db      	uxtb	r3, r3
    4aa2:	203d      	movs	r0, #61	; 0x3d
    4aa4:	1c19      	adds	r1, r3, #0
    4aa6:	4b0d      	ldr	r3, [pc, #52]	; (4adc <receiveBegin+0x88>)
    4aa8:	4798      	blx	r3
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
    4aaa:	2025      	movs	r0, #37	; 0x25
    4aac:	2140      	movs	r1, #64	; 0x40
    4aae:	4b0b      	ldr	r3, [pc, #44]	; (4adc <receiveBegin+0x88>)
    4ab0:	4798      	blx	r3
  setMode(RF69_MODE_RX);
    4ab2:	2003      	movs	r0, #3
    4ab4:	4b0a      	ldr	r3, [pc, #40]	; (4ae0 <receiveBegin+0x8c>)
    4ab6:	4798      	blx	r3
}
    4ab8:	46bd      	mov	sp, r7
    4aba:	bd80      	pop	{r7, pc}
    4abc:	2000014e 	.word	0x2000014e
    4ac0:	200000ea 	.word	0x200000ea
    4ac4:	20000200 	.word	0x20000200
    4ac8:	200001d0 	.word	0x200001d0
    4acc:	200001fe 	.word	0x200001fe
    4ad0:	2000014c 	.word	0x2000014c
    4ad4:	20000244 	.word	0x20000244
    4ad8:	00004c41 	.word	0x00004c41
    4adc:	00004cad 	.word	0x00004cad
    4ae0:	00004631 	.word	0x00004631

00004ae4 <RFM_receiveDone>:

// checks if a packet was received and/or puts transceiver in receive (ie RX or listen) mode
bool RFM_receiveDone() {
    4ae4:	b580      	push	{r7, lr}
    4ae6:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // re-enabled in unselect() via setMode() or via receiveBegin() // CHANGE //
    4ae8:	4b0f      	ldr	r3, [pc, #60]	; (4b28 <RFM_receiveDone+0x44>)
    4aea:	4798      	blx	r3

  if (_mode == RF69_MODE_RX && PAYLOADLEN > 0)
    4aec:	4b0f      	ldr	r3, [pc, #60]	; (4b2c <RFM_receiveDone+0x48>)
    4aee:	881b      	ldrh	r3, [r3, #0]
    4af0:	b29b      	uxth	r3, r3
    4af2:	2b03      	cmp	r3, #3
    4af4:	d109      	bne.n	4b0a <RFM_receiveDone+0x26>
    4af6:	4b0e      	ldr	r3, [pc, #56]	; (4b30 <RFM_receiveDone+0x4c>)
    4af8:	881b      	ldrh	r3, [r3, #0]
    4afa:	b29b      	uxth	r3, r3
    4afc:	2b00      	cmp	r3, #0
    4afe:	d004      	beq.n	4b0a <RFM_receiveDone+0x26>
  {
    setMode(RF69_MODE_STANDBY); // enables interrupts
    4b00:	2001      	movs	r0, #1
    4b02:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <RFM_receiveDone+0x50>)
    4b04:	4798      	blx	r3
    return true;
    4b06:	2301      	movs	r3, #1
    4b08:	e00b      	b.n	4b22 <RFM_receiveDone+0x3e>
  }
  else if (_mode == RF69_MODE_RX) // already in RX no payload yet
    4b0a:	4b08      	ldr	r3, [pc, #32]	; (4b2c <RFM_receiveDone+0x48>)
    4b0c:	881b      	ldrh	r3, [r3, #0]
    4b0e:	b29b      	uxth	r3, r3
    4b10:	2b03      	cmp	r3, #3
    4b12:	d103      	bne.n	4b1c <RFM_receiveDone+0x38>
  {
    system_interrupt_enable_global(); //interrupts(); // explicitly re-enable interrupts // CHANGE //
    4b14:	4b08      	ldr	r3, [pc, #32]	; (4b38 <RFM_receiveDone+0x54>)
    4b16:	4798      	blx	r3
    return false;
    4b18:	2300      	movs	r3, #0
    4b1a:	e002      	b.n	4b22 <RFM_receiveDone+0x3e>
  }
  receiveBegin();
    4b1c:	4b07      	ldr	r3, [pc, #28]	; (4b3c <RFM_receiveDone+0x58>)
    4b1e:	4798      	blx	r3
  return false;
    4b20:	2300      	movs	r3, #0
}
    4b22:	1c18      	adds	r0, r3, #0
    4b24:	46bd      	mov	sp, r7
    4b26:	bd80      	pop	{r7, pc}
    4b28:	00003c2d 	.word	0x00003c2d
    4b2c:	20000202 	.word	0x20000202
    4b30:	200001d0 	.word	0x200001d0
    4b34:	00004631 	.word	0x00004631
    4b38:	00003c15 	.word	0x00003c15
    4b3c:	00004a55 	.word	0x00004a55

00004b40 <RFM_encrypt>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM_encrypt(const char* key) {
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
  setMode(RF69_MODE_STANDBY);
    4b48:	2001      	movs	r0, #1
    4b4a:	4b24      	ldr	r3, [pc, #144]	; (4bdc <RFM_encrypt+0x9c>)
    4b4c:	4798      	blx	r3
  if (key != 0)
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d029      	beq.n	4ba8 <RFM_encrypt+0x68>
  {
    radioselect();
    4b54:	4b22      	ldr	r3, [pc, #136]	; (4be0 <RFM_encrypt+0xa0>)
    4b56:	4798      	blx	r3
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    4b58:	4a22      	ldr	r2, [pc, #136]	; (4be4 <RFM_encrypt+0xa4>)
    4b5a:	4b23      	ldr	r3, [pc, #140]	; (4be8 <RFM_encrypt+0xa8>)
    4b5c:	1c10      	adds	r0, r2, #0
    4b5e:	21be      	movs	r1, #190	; 0xbe
    4b60:	1c1a      	adds	r2, r3, #0
    4b62:	4b22      	ldr	r3, [pc, #136]	; (4bec <RFM_encrypt+0xac>)
    4b64:	4798      	blx	r3
    for (uint8_t i = 0; i < 16; i++)
    4b66:	230f      	movs	r3, #15
    4b68:	18fb      	adds	r3, r7, r3
    4b6a:	2200      	movs	r2, #0
    4b6c:	701a      	strb	r2, [r3, #0]
    4b6e:	e014      	b.n	4b9a <RFM_encrypt+0x5a>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    4b70:	230f      	movs	r3, #15
    4b72:	18fb      	adds	r3, r7, r3
    4b74:	781b      	ldrb	r3, [r3, #0]
    4b76:	687a      	ldr	r2, [r7, #4]
    4b78:	18d3      	adds	r3, r2, r3
    4b7a:	781b      	ldrb	r3, [r3, #0]
    4b7c:	b29a      	uxth	r2, r3
    4b7e:	4919      	ldr	r1, [pc, #100]	; (4be4 <RFM_encrypt+0xa4>)
    4b80:	4b19      	ldr	r3, [pc, #100]	; (4be8 <RFM_encrypt+0xa8>)
    4b82:	1c08      	adds	r0, r1, #0
    4b84:	1c11      	adds	r1, r2, #0
    4b86:	1c1a      	adds	r2, r3, #0
    4b88:	4b18      	ldr	r3, [pc, #96]	; (4bec <RFM_encrypt+0xac>)
    4b8a:	4798      	blx	r3
  setMode(RF69_MODE_STANDBY);
  if (key != 0)
  {
    radioselect();
    spi_transceive_wait(&spi_master_instance, REG_AESKEY1 | 0x80, &read_buf); //SPI.transfer(REG_AESKEY1 | 0x80); // CHANGE //
    for (uint8_t i = 0; i < 16; i++)
    4b8c:	230f      	movs	r3, #15
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	781a      	ldrb	r2, [r3, #0]
    4b92:	230f      	movs	r3, #15
    4b94:	18fb      	adds	r3, r7, r3
    4b96:	3201      	adds	r2, #1
    4b98:	701a      	strb	r2, [r3, #0]
    4b9a:	230f      	movs	r3, #15
    4b9c:	18fb      	adds	r3, r7, r3
    4b9e:	781b      	ldrb	r3, [r3, #0]
    4ba0:	2b0f      	cmp	r3, #15
    4ba2:	d9e5      	bls.n	4b70 <RFM_encrypt+0x30>
      spi_transceive_wait(&spi_master_instance, key[i], &read_buf); //SPI.transfer(key[i]); // CHANGE //
    unselect();
    4ba4:	4b12      	ldr	r3, [pc, #72]	; (4bf0 <RFM_encrypt+0xb0>)
    4ba6:	4798      	blx	r3
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    4ba8:	203d      	movs	r0, #61	; 0x3d
    4baa:	4b12      	ldr	r3, [pc, #72]	; (4bf4 <RFM_encrypt+0xb4>)
    4bac:	4798      	blx	r3
    4bae:	1c03      	adds	r3, r0, #0
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	1c1a      	adds	r2, r3, #0
    4bb4:	2301      	movs	r3, #1
    4bb6:	439a      	bics	r2, r3
    4bb8:	1c13      	adds	r3, r2, #0
    4bba:	b2da      	uxtb	r2, r3
    4bbc:	687b      	ldr	r3, [r7, #4]
    4bbe:	1e59      	subs	r1, r3, #1
    4bc0:	418b      	sbcs	r3, r1
    4bc2:	b2db      	uxtb	r3, r3
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	4313      	orrs	r3, r2
    4bc8:	b2db      	uxtb	r3, r3
    4bca:	b2db      	uxtb	r3, r3
    4bcc:	203d      	movs	r0, #61	; 0x3d
    4bce:	1c19      	adds	r1, r3, #0
    4bd0:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <RFM_encrypt+0xb8>)
    4bd2:	4798      	blx	r3
}
    4bd4:	46bd      	mov	sp, r7
    4bd6:	b004      	add	sp, #16
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	00004631 	.word	0x00004631
    4be0:	00004d11 	.word	0x00004d11
    4be4:	20000208 	.word	0x20000208
    4be8:	20000060 	.word	0x20000060
    4bec:	00002135 	.word	0x00002135
    4bf0:	00004d3d 	.word	0x00004d3d
    4bf4:	00004c41 	.word	0x00004c41
    4bf8:	00004cad 	.word	0x00004cad

00004bfc <readRSSI>:

// get the received signal strength indicator (RFM_RSSI)
int16_t readRSSI() {
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b082      	sub	sp, #8
    4c00:	af00      	add	r7, sp, #0
  volatile int16_t rssi = 0;
    4c02:	1dbb      	adds	r3, r7, #6
    4c04:	2200      	movs	r2, #0
    4c06:	801a      	strh	r2, [r3, #0]
  rssi = -readReg(REG_RSSIVALUE);
    4c08:	2024      	movs	r0, #36	; 0x24
    4c0a:	4b0c      	ldr	r3, [pc, #48]	; (4c3c <readRSSI+0x40>)
    4c0c:	4798      	blx	r3
    4c0e:	1c03      	adds	r3, r0, #0
    4c10:	b29b      	uxth	r3, r3
    4c12:	425b      	negs	r3, r3
    4c14:	b29b      	uxth	r3, r3
    4c16:	b29a      	uxth	r2, r3
    4c18:	1dbb      	adds	r3, r7, #6
    4c1a:	801a      	strh	r2, [r3, #0]
  rssi >>= 1;
    4c1c:	1dbb      	adds	r3, r7, #6
    4c1e:	881b      	ldrh	r3, [r3, #0]
    4c20:	b29b      	uxth	r3, r3
    4c22:	b21b      	sxth	r3, r3
    4c24:	105b      	asrs	r3, r3, #1
    4c26:	b29a      	uxth	r2, r3
    4c28:	1dbb      	adds	r3, r7, #6
    4c2a:	801a      	strh	r2, [r3, #0]
  return rssi;
    4c2c:	1dbb      	adds	r3, r7, #6
    4c2e:	881b      	ldrh	r3, [r3, #0]
    4c30:	b29b      	uxth	r3, r3
    4c32:	b21b      	sxth	r3, r3
}
    4c34:	1c18      	adds	r0, r3, #0
    4c36:	46bd      	mov	sp, r7
    4c38:	b002      	add	sp, #8
    4c3a:	bd80      	pop	{r7, pc}
    4c3c:	00004c41 	.word	0x00004c41

00004c40 <readReg>:

uint8_t readReg(volatile uint16_t addr)
{
    4c40:	b580      	push	{r7, lr}
    4c42:	b084      	sub	sp, #16
    4c44:	af00      	add	r7, sp, #0
    4c46:	1c02      	adds	r2, r0, #0
    4c48:	1dbb      	adds	r3, r7, #6
    4c4a:	801a      	strh	r2, [r3, #0]
  radioselect();
    4c4c:	4b12      	ldr	r3, [pc, #72]	; (4c98 <readReg+0x58>)
    4c4e:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr & 0x7F, &read_buf); //SPI.transfer(addr & 0x7F); // CHANGE //
    4c50:	1dbb      	adds	r3, r7, #6
    4c52:	881b      	ldrh	r3, [r3, #0]
    4c54:	b29b      	uxth	r3, r3
    4c56:	227f      	movs	r2, #127	; 0x7f
    4c58:	4013      	ands	r3, r2
    4c5a:	b29a      	uxth	r2, r3
    4c5c:	490f      	ldr	r1, [pc, #60]	; (4c9c <readReg+0x5c>)
    4c5e:	4b10      	ldr	r3, [pc, #64]	; (4ca0 <readReg+0x60>)
    4c60:	1c08      	adds	r0, r1, #0
    4c62:	1c11      	adds	r1, r2, #0
    4c64:	1c1a      	adds	r2, r3, #0
    4c66:	4b0f      	ldr	r3, [pc, #60]	; (4ca4 <readReg+0x64>)
    4c68:	4798      	blx	r3
  volatile uint16_t regval = 0;
    4c6a:	230e      	movs	r3, #14
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	2200      	movs	r2, #0
    4c70:	801a      	strh	r2, [r3, #0]
  spi_transceive_wait(&spi_master_instance, 0, &regval); //SPI.transfer(0); // CHANGE //
    4c72:	4a0a      	ldr	r2, [pc, #40]	; (4c9c <readReg+0x5c>)
    4c74:	230e      	movs	r3, #14
    4c76:	18fb      	adds	r3, r7, r3
    4c78:	1c10      	adds	r0, r2, #0
    4c7a:	2100      	movs	r1, #0
    4c7c:	1c1a      	adds	r2, r3, #0
    4c7e:	4b09      	ldr	r3, [pc, #36]	; (4ca4 <readReg+0x64>)
    4c80:	4798      	blx	r3
  unselect();
    4c82:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <readReg+0x68>)
    4c84:	4798      	blx	r3
  return (uint8_t)regval;
    4c86:	230e      	movs	r3, #14
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	881b      	ldrh	r3, [r3, #0]
    4c8c:	b29b      	uxth	r3, r3
    4c8e:	b2db      	uxtb	r3, r3
}
    4c90:	1c18      	adds	r0, r3, #0
    4c92:	46bd      	mov	sp, r7
    4c94:	b004      	add	sp, #16
    4c96:	bd80      	pop	{r7, pc}
    4c98:	00004d11 	.word	0x00004d11
    4c9c:	20000208 	.word	0x20000208
    4ca0:	20000060 	.word	0x20000060
    4ca4:	00002135 	.word	0x00002135
    4ca8:	00004d3d 	.word	0x00004d3d

00004cac <writeReg>:

void writeReg(uint8_t addr, uint8_t value)
{
    4cac:	b580      	push	{r7, lr}
    4cae:	b082      	sub	sp, #8
    4cb0:	af00      	add	r7, sp, #0
    4cb2:	1c02      	adds	r2, r0, #0
    4cb4:	1dfb      	adds	r3, r7, #7
    4cb6:	701a      	strb	r2, [r3, #0]
    4cb8:	1dbb      	adds	r3, r7, #6
    4cba:	1c0a      	adds	r2, r1, #0
    4cbc:	701a      	strb	r2, [r3, #0]
  radioselect();
    4cbe:	4b0f      	ldr	r3, [pc, #60]	; (4cfc <writeReg+0x50>)
    4cc0:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, addr | 0x80, &read_buf); //SPI.transfer(addr | 0x80); // CHANGE //
    4cc2:	1dfb      	adds	r3, r7, #7
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	2280      	movs	r2, #128	; 0x80
    4cc8:	4252      	negs	r2, r2
    4cca:	4313      	orrs	r3, r2
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	b29a      	uxth	r2, r3
    4cd0:	490b      	ldr	r1, [pc, #44]	; (4d00 <writeReg+0x54>)
    4cd2:	4b0c      	ldr	r3, [pc, #48]	; (4d04 <writeReg+0x58>)
    4cd4:	1c08      	adds	r0, r1, #0
    4cd6:	1c11      	adds	r1, r2, #0
    4cd8:	1c1a      	adds	r2, r3, #0
    4cda:	4b0b      	ldr	r3, [pc, #44]	; (4d08 <writeReg+0x5c>)
    4cdc:	4798      	blx	r3
  spi_transceive_wait(&spi_master_instance, value, &read_buf); //SPI.transfer(value); // CHANGE //
    4cde:	1dbb      	adds	r3, r7, #6
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	b29a      	uxth	r2, r3
    4ce4:	4906      	ldr	r1, [pc, #24]	; (4d00 <writeReg+0x54>)
    4ce6:	4b07      	ldr	r3, [pc, #28]	; (4d04 <writeReg+0x58>)
    4ce8:	1c08      	adds	r0, r1, #0
    4cea:	1c11      	adds	r1, r2, #0
    4cec:	1c1a      	adds	r2, r3, #0
    4cee:	4b06      	ldr	r3, [pc, #24]	; (4d08 <writeReg+0x5c>)
    4cf0:	4798      	blx	r3
  unselect();
    4cf2:	4b06      	ldr	r3, [pc, #24]	; (4d0c <writeReg+0x60>)
    4cf4:	4798      	blx	r3
}
    4cf6:	46bd      	mov	sp, r7
    4cf8:	b002      	add	sp, #8
    4cfa:	bd80      	pop	{r7, pc}
    4cfc:	00004d11 	.word	0x00004d11
    4d00:	20000208 	.word	0x20000208
    4d04:	20000060 	.word	0x20000060
    4d08:	00002135 	.word	0x00002135
    4d0c:	00004d3d 	.word	0x00004d3d

00004d10 <radioselect>:

// select the RFM69 transceiver (save SPI settings, set CS low)
void radioselect() {
    4d10:	b580      	push	{r7, lr}
    4d12:	af00      	add	r7, sp, #0
  system_interrupt_disable_global(); //noInterrupts(); // CHANGE //
    4d14:	4b05      	ldr	r3, [pc, #20]	; (4d2c <radioselect+0x1c>)
    4d16:	4798      	blx	r3

  // set RFM69 SPI settings
  //SPI.setDataMode(SPI_MODE0); // CHANGE //
  //SPI.setBitOrder(MSBFIRST); // CHANGE //
  //SPI.setClockDivider(SPI_CLOCK_DIV4); // decided to slow down from DIV2 after SPI stalling in some instances, especially visible on mega1284p when RFM69 and FLASH chip both present // CHANGE //
  spi_select_slave(&spi_master_instance, &slave, true); //digitalWrite(_slaveSelectPin, LOW); // CHANGE //
    4d18:	4a05      	ldr	r2, [pc, #20]	; (4d30 <radioselect+0x20>)
    4d1a:	4b06      	ldr	r3, [pc, #24]	; (4d34 <radioselect+0x24>)
    4d1c:	1c10      	adds	r0, r2, #0
    4d1e:	1c19      	adds	r1, r3, #0
    4d20:	2201      	movs	r2, #1
    4d22:	4b05      	ldr	r3, [pc, #20]	; (4d38 <radioselect+0x28>)
    4d24:	4798      	blx	r3
}
    4d26:	46bd      	mov	sp, r7
    4d28:	bd80      	pop	{r7, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	00003c2d 	.word	0x00003c2d
    4d30:	20000208 	.word	0x20000208
    4d34:	20000288 	.word	0x20000288
    4d38:	0000227d 	.word	0x0000227d

00004d3c <unselect>:

// unselect the RFM69 transceiver (set CS high, restore SPI settings)
void unselect() {
    4d3c:	b580      	push	{r7, lr}
    4d3e:	af00      	add	r7, sp, #0
  spi_select_slave(&spi_master_instance, &slave, false); //digitalWrite(_slaveSelectPin, HIGH); // CHANGE //
    4d40:	4a05      	ldr	r2, [pc, #20]	; (4d58 <unselect+0x1c>)
    4d42:	4b06      	ldr	r3, [pc, #24]	; (4d5c <unselect+0x20>)
    4d44:	1c10      	adds	r0, r2, #0
    4d46:	1c19      	adds	r1, r3, #0
    4d48:	2200      	movs	r2, #0
    4d4a:	4b05      	ldr	r3, [pc, #20]	; (4d60 <unselect+0x24>)
    4d4c:	4798      	blx	r3
  maybeInterrupts();
    4d4e:	4b05      	ldr	r3, [pc, #20]	; (4d64 <unselect+0x28>)
    4d50:	4798      	blx	r3
}
    4d52:	46bd      	mov	sp, r7
    4d54:	bd80      	pop	{r7, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	20000208 	.word	0x20000208
    4d5c:	20000288 	.word	0x20000288
    4d60:	0000227d 	.word	0x0000227d
    4d64:	00004dad 	.word	0x00004dad

00004d68 <setHighPowerRegs>:
  _promiscuousMode = onOff;
  //writeReg(REG_PACKETCONFIG1, (readReg(REG_PACKETCONFIG1) & 0xF9) | (onOff ? RF_PACKET1_ADRSFILTERING_OFF : RF_PACKET1_ADRSFILTERING_NODEBROADCAST));
}

// internal function
void setHighPowerRegs(bool onOff) {
    4d68:	b580      	push	{r7, lr}
    4d6a:	b082      	sub	sp, #8
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	1c02      	adds	r2, r0, #0
    4d70:	1dfb      	adds	r3, r7, #7
    4d72:	701a      	strb	r2, [r3, #0]
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
    4d74:	1dfb      	adds	r3, r7, #7
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	2b00      	cmp	r3, #0
    4d7a:	d001      	beq.n	4d80 <setHighPowerRegs+0x18>
    4d7c:	235d      	movs	r3, #93	; 0x5d
    4d7e:	e000      	b.n	4d82 <setHighPowerRegs+0x1a>
    4d80:	2355      	movs	r3, #85	; 0x55
    4d82:	205a      	movs	r0, #90	; 0x5a
    4d84:	1c19      	adds	r1, r3, #0
    4d86:	4b08      	ldr	r3, [pc, #32]	; (4da8 <setHighPowerRegs+0x40>)
    4d88:	4798      	blx	r3
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
    4d8a:	1dfb      	adds	r3, r7, #7
    4d8c:	781b      	ldrb	r3, [r3, #0]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d001      	beq.n	4d96 <setHighPowerRegs+0x2e>
    4d92:	237c      	movs	r3, #124	; 0x7c
    4d94:	e000      	b.n	4d98 <setHighPowerRegs+0x30>
    4d96:	2370      	movs	r3, #112	; 0x70
    4d98:	205c      	movs	r0, #92	; 0x5c
    4d9a:	1c19      	adds	r1, r3, #0
    4d9c:	4b02      	ldr	r3, [pc, #8]	; (4da8 <setHighPowerRegs+0x40>)
    4d9e:	4798      	blx	r3
}
    4da0:	46bd      	mov	sp, r7
    4da2:	b002      	add	sp, #8
    4da4:	bd80      	pop	{r7, pc}
    4da6:	46c0      	nop			; (mov r8, r8)
    4da8:	00004cad 	.word	0x00004cad

00004dac <maybeInterrupts>:
  writeReg(REG_OSC1, RF_OSC1_RCCAL_START);
  while ((readReg(REG_OSC1) & RF_OSC1_RCCAL_DONE) == 0x00);
}

void maybeInterrupts()
{
    4dac:	b580      	push	{r7, lr}
    4dae:	af00      	add	r7, sp, #0
  // Only reenable interrupts if we're not being called from the ISR
  if (!_inISR) 
    4db0:	4b05      	ldr	r3, [pc, #20]	; (4dc8 <maybeInterrupts+0x1c>)
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	b2db      	uxtb	r3, r3
    4db6:	2201      	movs	r2, #1
    4db8:	4053      	eors	r3, r2
    4dba:	b2db      	uxtb	r3, r3
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d001      	beq.n	4dc4 <maybeInterrupts+0x18>
	  system_interrupt_enable_global(); //interrupts(); // CHANGE //
    4dc0:	4b02      	ldr	r3, [pc, #8]	; (4dcc <maybeInterrupts+0x20>)
    4dc2:	4798      	blx	r3
}
    4dc4:	46bd      	mov	sp, r7
    4dc6:	bd80      	pop	{r7, pc}
    4dc8:	20000105 	.word	0x20000105
    4dcc:	00003c15 	.word	0x00003c15

00004dd0 <configure_LED_PWM>:
void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white);


////////////// Configure all of the LED ports as PWM outputs //////////////////
void configure_LED_PWM(void)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b0aa      	sub	sp, #168	; 0xa8
    4dd4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    4dd6:	1d3b      	adds	r3, r7, #4
    4dd8:	4a31      	ldr	r2, [pc, #196]	; (4ea0 <configure_LED_PWM+0xd0>)
    4dda:	1c18      	adds	r0, r3, #0
    4ddc:	1c11      	adds	r1, r2, #0
    4dde:	4b31      	ldr	r3, [pc, #196]	; (4ea4 <configure_LED_PWM+0xd4>)
    4de0:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    4de2:	1d3b      	adds	r3, r7, #4
    4de4:	4a30      	ldr	r2, [pc, #192]	; (4ea8 <configure_LED_PWM+0xd8>)
    4de6:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    4de8:	1d3b      	adds	r3, r7, #4
    4dea:	2202      	movs	r2, #2
    4dec:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    4dee:	1d3b      	adds	r3, r7, #4
    4df0:	2200      	movs	r2, #0
    4df2:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    4df4:	1d3b      	adds	r3, r7, #4
    4df6:	2200      	movs	r2, #0
    4df8:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    4dfa:	1d3b      	adds	r3, r7, #4
    4dfc:	2298      	movs	r2, #152	; 0x98
    4dfe:	2101      	movs	r1, #1
    4e00:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    4e02:	1d3b      	adds	r3, r7, #4
    4e04:	2299      	movs	r2, #153	; 0x99
    4e06:	2101      	movs	r1, #1
    4e08:	5499      	strb	r1, [r3, r2]
	// Green Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA21F_TCC0_WO7;
    4e0a:	1d3b      	adds	r3, r7, #4
    4e0c:	2215      	movs	r2, #21
    4e0e:	659a      	str	r2, [r3, #88]	; 0x58
	// White Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA14F_TCC0_WO4;
    4e10:	1d3b      	adds	r3, r7, #4
    4e12:	220e      	movs	r2, #14
    4e14:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA21F_TCC0_WO7;
    4e16:	1d3b      	adds	r3, r7, #4
    4e18:	2205      	movs	r2, #5
    4e1a:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA14F_TCC0_WO4;
    4e1c:	1d3b      	adds	r3, r7, #4
    4e1e:	2205      	movs	r2, #5
    4e20:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc0, TCC0, &config_tcc);
    4e22:	4a22      	ldr	r2, [pc, #136]	; (4eac <configure_LED_PWM+0xdc>)
    4e24:	491e      	ldr	r1, [pc, #120]	; (4ea0 <configure_LED_PWM+0xd0>)
    4e26:	1d3b      	adds	r3, r7, #4
    4e28:	1c10      	adds	r0, r2, #0
    4e2a:	1c1a      	adds	r2, r3, #0
    4e2c:	4b20      	ldr	r3, [pc, #128]	; (4eb0 <configure_LED_PWM+0xe0>)
    4e2e:	4798      	blx	r3
	tcc_enable(&tcc0);
    4e30:	4b1e      	ldr	r3, [pc, #120]	; (4eac <configure_LED_PWM+0xdc>)
    4e32:	1c18      	adds	r0, r3, #0
    4e34:	4b1f      	ldr	r3, [pc, #124]	; (4eb4 <configure_LED_PWM+0xe4>)
    4e36:	4798      	blx	r3

	tcc_get_config_defaults(&config_tcc, TCC1);
    4e38:	1d3b      	adds	r3, r7, #4
    4e3a:	4a1f      	ldr	r2, [pc, #124]	; (4eb8 <configure_LED_PWM+0xe8>)
    4e3c:	1c18      	adds	r0, r3, #0
    4e3e:	1c11      	adds	r1, r2, #0
    4e40:	4b18      	ldr	r3, [pc, #96]	; (4ea4 <configure_LED_PWM+0xd4>)
    4e42:	4798      	blx	r3
	config_tcc.counter.period = 0xFFFF;
    4e44:	1d3b      	adds	r3, r7, #4
    4e46:	4a18      	ldr	r2, [pc, #96]	; (4ea8 <configure_LED_PWM+0xd8>)
    4e48:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    4e4a:	1d3b      	adds	r3, r7, #4
    4e4c:	2202      	movs	r2, #2
    4e4e:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[0] = 0;
    4e50:	1d3b      	adds	r3, r7, #4
    4e52:	2200      	movs	r2, #0
    4e54:	61da      	str	r2, [r3, #28]
	config_tcc.compare.match[1] = 0;
    4e56:	1d3b      	adds	r3, r7, #4
    4e58:	2200      	movs	r2, #0
    4e5a:	621a      	str	r2, [r3, #32]
	config_tcc.pins.enable_wave_out_pin[0] = true;
    4e5c:	1d3b      	adds	r3, r7, #4
    4e5e:	2298      	movs	r2, #152	; 0x98
    4e60:	2101      	movs	r1, #1
    4e62:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.enable_wave_out_pin[1] = true;
    4e64:	1d3b      	adds	r3, r7, #4
    4e66:	2299      	movs	r2, #153	; 0x99
    4e68:	2101      	movs	r1, #1
    4e6a:	5499      	strb	r1, [r3, r2]
	// Blue Trackball LED*
	config_tcc.pins.wave_out_pin[0]        = PIN_PA08F_TCC1_WO2;
    4e6c:	1d3b      	adds	r3, r7, #4
    4e6e:	2208      	movs	r2, #8
    4e70:	659a      	str	r2, [r3, #88]	; 0x58
	// Red Trackball LED*
	config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    4e72:	1d3b      	adds	r3, r7, #4
    4e74:	2207      	movs	r2, #7
    4e76:	65da      	str	r2, [r3, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA08F_TCC1_WO2;
    4e78:	1d3b      	adds	r3, r7, #4
    4e7a:	2205      	movs	r2, #5
    4e7c:	679a      	str	r2, [r3, #120]	; 0x78
	config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    4e7e:	1d3b      	adds	r3, r7, #4
    4e80:	2204      	movs	r2, #4
    4e82:	67da      	str	r2, [r3, #124]	; 0x7c
	tcc_init(&tcc1, TCC1, &config_tcc);
    4e84:	4a0d      	ldr	r2, [pc, #52]	; (4ebc <configure_LED_PWM+0xec>)
    4e86:	490c      	ldr	r1, [pc, #48]	; (4eb8 <configure_LED_PWM+0xe8>)
    4e88:	1d3b      	adds	r3, r7, #4
    4e8a:	1c10      	adds	r0, r2, #0
    4e8c:	1c1a      	adds	r2, r3, #0
    4e8e:	4b08      	ldr	r3, [pc, #32]	; (4eb0 <configure_LED_PWM+0xe0>)
    4e90:	4798      	blx	r3
	tcc_enable(&tcc1);
    4e92:	4b0a      	ldr	r3, [pc, #40]	; (4ebc <configure_LED_PWM+0xec>)
    4e94:	1c18      	adds	r0, r3, #0
    4e96:	4b07      	ldr	r3, [pc, #28]	; (4eb4 <configure_LED_PWM+0xe4>)
    4e98:	4798      	blx	r3
}
    4e9a:	46bd      	mov	sp, r7
    4e9c:	b02a      	add	sp, #168	; 0xa8
    4e9e:	bd80      	pop	{r7, pc}
    4ea0:	42002000 	.word	0x42002000
    4ea4:	00000da5 	.word	0x00000da5
    4ea8:	0000ffff 	.word	0x0000ffff
    4eac:	20000108 	.word	0x20000108
    4eb0:	000013f9 	.word	0x000013f9
    4eb4:	00003e41 	.word	0x00003e41
    4eb8:	42002400 	.word	0x42002400
    4ebc:	20000248 	.word	0x20000248

00004ec0 <main>:
	port_pin_set_config(PIN_PB09, &config_port_pin);
}


int main (void)
{
    4ec0:	b590      	push	{r4, r7, lr}
    4ec2:	b087      	sub	sp, #28
    4ec4:	af00      	add	r7, sp, #0
    /* Initialize system */
	system_init();
    4ec6:	4b44      	ldr	r3, [pc, #272]	; (4fd8 <main+0x118>)
    4ec8:	4798      	blx	r3
	configure_LED_PWM();
    4eca:	4b44      	ldr	r3, [pc, #272]	; (4fdc <main+0x11c>)
    4ecc:	4798      	blx	r3
			break;
		}
	}*/

	// Initialize the RFM69HCW:
	RFM_initialize(FREQUENCY, MYNODEID, NETWORKID);
    4ece:	205b      	movs	r0, #91	; 0x5b
    4ed0:	2103      	movs	r1, #3
    4ed2:	2200      	movs	r2, #0
    4ed4:	4b42      	ldr	r3, [pc, #264]	; (4fe0 <main+0x120>)
    4ed6:	4798      	blx	r3
	RFM_setHighPower(true);
    4ed8:	2001      	movs	r0, #1
    4eda:	4b42      	ldr	r3, [pc, #264]	; (4fe4 <main+0x124>)
    4edc:	4798      	blx	r3
	if (ENCRYPT)
		RFM_encrypt(ENCRYPTKEY);
    4ede:	4b42      	ldr	r3, [pc, #264]	; (4fe8 <main+0x128>)
    4ee0:	1c18      	adds	r0, r3, #0
    4ee2:	4b42      	ldr	r3, [pc, #264]	; (4fec <main+0x12c>)
    4ee4:	4798      	blx	r3


	int sendlength = 3; //number can be increased 
    4ee6:	2303      	movs	r3, #3
    4ee8:	617b      	str	r3, [r7, #20]
	int index = 0;
    4eea:	2300      	movs	r3, #0
    4eec:	613b      	str	r3, [r7, #16]
	//sends X axis byte, Y axis byte, button byte
	{
		static int color = 0;
		static int step = 5;
		static int index = 0;
		if(index == 0)
    4eee:	4b40      	ldr	r3, [pc, #256]	; (4ff0 <main+0x130>)
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d10e      	bne.n	4f14 <main+0x54>
		{
			setTrackBallRGBW(0xFFFF - color,color,0x0,0x0);
    4ef6:	4b3f      	ldr	r3, [pc, #252]	; (4ff4 <main+0x134>)
    4ef8:	681b      	ldr	r3, [r3, #0]
    4efa:	b29b      	uxth	r3, r3
    4efc:	43db      	mvns	r3, r3
    4efe:	b29a      	uxth	r2, r3
    4f00:	4b3c      	ldr	r3, [pc, #240]	; (4ff4 <main+0x134>)
    4f02:	681b      	ldr	r3, [r3, #0]
    4f04:	b29b      	uxth	r3, r3
    4f06:	1c10      	adds	r0, r2, #0
    4f08:	1c19      	adds	r1, r3, #0
    4f0a:	2200      	movs	r2, #0
    4f0c:	2300      	movs	r3, #0
    4f0e:	4c3a      	ldr	r4, [pc, #232]	; (4ff8 <main+0x138>)
    4f10:	47a0      	blx	r4
    4f12:	e024      	b.n	4f5e <main+0x9e>
		}
		else if(index == 1)
    4f14:	4b36      	ldr	r3, [pc, #216]	; (4ff0 <main+0x130>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	2b01      	cmp	r3, #1
    4f1a:	d10e      	bne.n	4f3a <main+0x7a>
		{
			setTrackBallRGBW(0x0,0xFFFF - color,color,0x0);
    4f1c:	4b35      	ldr	r3, [pc, #212]	; (4ff4 <main+0x134>)
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	b29b      	uxth	r3, r3
    4f22:	43db      	mvns	r3, r3
    4f24:	b29a      	uxth	r2, r3
    4f26:	4b33      	ldr	r3, [pc, #204]	; (4ff4 <main+0x134>)
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	b29b      	uxth	r3, r3
    4f2c:	2000      	movs	r0, #0
    4f2e:	1c11      	adds	r1, r2, #0
    4f30:	1c1a      	adds	r2, r3, #0
    4f32:	2300      	movs	r3, #0
    4f34:	4c30      	ldr	r4, [pc, #192]	; (4ff8 <main+0x138>)
    4f36:	47a0      	blx	r4
    4f38:	e011      	b.n	4f5e <main+0x9e>
		}
		else if(index == 2)
    4f3a:	4b2d      	ldr	r3, [pc, #180]	; (4ff0 <main+0x130>)
    4f3c:	681b      	ldr	r3, [r3, #0]
    4f3e:	2b02      	cmp	r3, #2
    4f40:	d10d      	bne.n	4f5e <main+0x9e>
		{
			setTrackBallRGBW(color,0x0,0xFFFF - color,0x0);
    4f42:	4b2c      	ldr	r3, [pc, #176]	; (4ff4 <main+0x134>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	b29a      	uxth	r2, r3
    4f48:	4b2a      	ldr	r3, [pc, #168]	; (4ff4 <main+0x134>)
    4f4a:	681b      	ldr	r3, [r3, #0]
    4f4c:	b29b      	uxth	r3, r3
    4f4e:	43db      	mvns	r3, r3
    4f50:	b29b      	uxth	r3, r3
    4f52:	1c10      	adds	r0, r2, #0
    4f54:	2100      	movs	r1, #0
    4f56:	1c1a      	adds	r2, r3, #0
    4f58:	2300      	movs	r3, #0
    4f5a:	4c27      	ldr	r4, [pc, #156]	; (4ff8 <main+0x138>)
    4f5c:	47a0      	blx	r4
		}
		
		color += step;
    4f5e:	4b25      	ldr	r3, [pc, #148]	; (4ff4 <main+0x134>)
    4f60:	681a      	ldr	r2, [r3, #0]
    4f62:	4b26      	ldr	r3, [pc, #152]	; (4ffc <main+0x13c>)
    4f64:	681b      	ldr	r3, [r3, #0]
    4f66:	18d2      	adds	r2, r2, r3
    4f68:	4b22      	ldr	r3, [pc, #136]	; (4ff4 <main+0x134>)
    4f6a:	601a      	str	r2, [r3, #0]
		if(color >= 0xFFFF)
    4f6c:	4b21      	ldr	r3, [pc, #132]	; (4ff4 <main+0x134>)
    4f6e:	681b      	ldr	r3, [r3, #0]
    4f70:	4a23      	ldr	r2, [pc, #140]	; (5000 <main+0x140>)
    4f72:	4293      	cmp	r3, r2
    4f74:	dd0e      	ble.n	4f94 <main+0xd4>
		{
			color = 0;
    4f76:	4b1f      	ldr	r3, [pc, #124]	; (4ff4 <main+0x134>)
    4f78:	2200      	movs	r2, #0
    4f7a:	601a      	str	r2, [r3, #0]
			index++;
    4f7c:	4b1c      	ldr	r3, [pc, #112]	; (4ff0 <main+0x130>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	1c5a      	adds	r2, r3, #1
    4f82:	4b1b      	ldr	r3, [pc, #108]	; (4ff0 <main+0x130>)
    4f84:	601a      	str	r2, [r3, #0]
			if(index > 2)
    4f86:	4b1a      	ldr	r3, [pc, #104]	; (4ff0 <main+0x130>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	2b02      	cmp	r3, #2
    4f8c:	dd02      	ble.n	4f94 <main+0xd4>
				index = 0;
    4f8e:	4b18      	ldr	r3, [pc, #96]	; (4ff0 <main+0x130>)
    4f90:	2200      	movs	r2, #0
    4f92:	601a      	str	r2, [r3, #0]
		}
	//check if the RFM69 receives a  packet
	//only send info when a packet is received from dongle module
	if (RFM_receiveDone()) // Got one!
    4f94:	4b1b      	ldr	r3, [pc, #108]	; (5004 <main+0x144>)
    4f96:	4798      	blx	r3
    4f98:	1e03      	subs	r3, r0, #0
    4f9a:	d01b      	beq.n	4fd4 <main+0x114>
	{
		// The actual message is contained in the RFM_DATA array,
		// and is RFM_DATALEN bytes in size:
		  
		//for (byte i = 0; i < RFM_DATALEN; i++)
		RFM_DATALEN = RFM_DATALEN;
    4f9c:	4b1a      	ldr	r3, [pc, #104]	; (5008 <main+0x148>)
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	b29a      	uxth	r2, r3
    4fa2:	4b19      	ldr	r3, [pc, #100]	; (5008 <main+0x148>)
    4fa4:	801a      	strh	r2, [r3, #0]
		// RFM_RSSI is the "Receive Signal Strength Indicator",
		// smaller numbers mean higher power.

		RFM_RSSI = RFM_RSSI;
    4fa6:	4b19      	ldr	r3, [pc, #100]	; (500c <main+0x14c>)
    4fa8:	881b      	ldrh	r3, [r3, #0]
    4faa:	b29a      	uxth	r2, r3
    4fac:	4b17      	ldr	r3, [pc, #92]	; (500c <main+0x14c>)
    4fae:	801a      	strh	r2, [r3, #0]
		
		//port_pin_get_input_level();
		//Send data packets
		sendbuffer[0] = 0xFF; // x axis byte
    4fb0:	1c3b      	adds	r3, r7, #0
    4fb2:	22ff      	movs	r2, #255	; 0xff
    4fb4:	701a      	strb	r2, [r3, #0]
		sendbuffer[1] = 0xFF; // y axis byte
    4fb6:	1c3b      	adds	r3, r7, #0
    4fb8:	22ff      	movs	r2, #255	; 0xff
    4fba:	705a      	strb	r2, [r3, #1]
		sendbuffer[2] = 0xFF; // button byte -- order is: up down left right left_click right_click middle_click laser_on?
    4fbc:	1c3b      	adds	r3, r7, #0
    4fbe:	22ff      	movs	r2, #255	; 0xff
    4fc0:	709a      	strb	r2, [r3, #2]
		
		
		RFM_send(TONODEID, sendbuffer, sendlength, false);
    4fc2:	697b      	ldr	r3, [r7, #20]
    4fc4:	b2db      	uxtb	r3, r3
    4fc6:	1c3a      	adds	r2, r7, #0
    4fc8:	2002      	movs	r0, #2
    4fca:	1c11      	adds	r1, r2, #0
    4fcc:	1c1a      	adds	r2, r3, #0
    4fce:	2300      	movs	r3, #0
    4fd0:	4c0f      	ldr	r4, [pc, #60]	; (5010 <main+0x150>)
    4fd2:	47a0      	blx	r4
	}
  }
    4fd4:	e78b      	b.n	4eee <main+0x2e>
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	000039ad 	.word	0x000039ad
    4fdc:	00004dd1 	.word	0x00004dd1
    4fe0:	000042c9 	.word	0x000042c9
    4fe4:	00004211 	.word	0x00004211
    4fe8:	000052fc 	.word	0x000052fc
    4fec:	00004b41 	.word	0x00004b41
    4ff0:	20000064 	.word	0x20000064
    4ff4:	20000068 	.word	0x20000068
    4ff8:	00005015 	.word	0x00005015
    4ffc:	20000004 	.word	0x20000004
    5000:	0000fffe 	.word	0x0000fffe
    5004:	00004ae5 	.word	0x00004ae5
    5008:	2000014e 	.word	0x2000014e
    500c:	20000244 	.word	0x20000244
    5010:	000047d1 	.word	0x000047d1

00005014 <setTrackBallRGBW>:
}

void setTrackBallRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{	
    5014:	b5b0      	push	{r4, r5, r7, lr}
    5016:	b082      	sub	sp, #8
    5018:	af00      	add	r7, sp, #0
    501a:	1c05      	adds	r5, r0, #0
    501c:	1c0c      	adds	r4, r1, #0
    501e:	1c10      	adds	r0, r2, #0
    5020:	1c19      	adds	r1, r3, #0
    5022:	1dbb      	adds	r3, r7, #6
    5024:	1c2a      	adds	r2, r5, #0
    5026:	801a      	strh	r2, [r3, #0]
    5028:	1d3b      	adds	r3, r7, #4
    502a:	1c22      	adds	r2, r4, #0
    502c:	801a      	strh	r2, [r3, #0]
    502e:	1cbb      	adds	r3, r7, #2
    5030:	1c02      	adds	r2, r0, #0
    5032:	801a      	strh	r2, [r3, #0]
    5034:	1c3b      	adds	r3, r7, #0
    5036:	1c0a      	adds	r2, r1, #0
    5038:	801a      	strh	r2, [r3, #0]
	/* WHITE */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), white);
    503a:	1c3b      	adds	r3, r7, #0
    503c:	881b      	ldrh	r3, [r3, #0]
    503e:	4a10      	ldr	r2, [pc, #64]	; (5080 <setTrackBallRGBW+0x6c>)
    5040:	1c10      	adds	r0, r2, #0
    5042:	2100      	movs	r1, #0
    5044:	1c1a      	adds	r2, r3, #0
    5046:	4b0f      	ldr	r3, [pc, #60]	; (5084 <setTrackBallRGBW+0x70>)
    5048:	4798      	blx	r3
	/* GREEN */
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), green);
    504a:	1d3b      	adds	r3, r7, #4
    504c:	881b      	ldrh	r3, [r3, #0]
    504e:	4a0c      	ldr	r2, [pc, #48]	; (5080 <setTrackBallRGBW+0x6c>)
    5050:	1c10      	adds	r0, r2, #0
    5052:	2103      	movs	r1, #3
    5054:	1c1a      	adds	r2, r3, #0
    5056:	4b0b      	ldr	r3, [pc, #44]	; (5084 <setTrackBallRGBW+0x70>)
    5058:	4798      	blx	r3
	/* BLUE */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), blue);
    505a:	1cbb      	adds	r3, r7, #2
    505c:	881b      	ldrh	r3, [r3, #0]
    505e:	4a0a      	ldr	r2, [pc, #40]	; (5088 <setTrackBallRGBW+0x74>)
    5060:	1c10      	adds	r0, r2, #0
    5062:	2100      	movs	r1, #0
    5064:	1c1a      	adds	r2, r3, #0
    5066:	4b07      	ldr	r3, [pc, #28]	; (5084 <setTrackBallRGBW+0x70>)
    5068:	4798      	blx	r3
	/* RED */
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), red);
    506a:	1dbb      	adds	r3, r7, #6
    506c:	881b      	ldrh	r3, [r3, #0]
    506e:	4a06      	ldr	r2, [pc, #24]	; (5088 <setTrackBallRGBW+0x74>)
    5070:	1c10      	adds	r0, r2, #0
    5072:	2101      	movs	r1, #1
    5074:	1c1a      	adds	r2, r3, #0
    5076:	4b03      	ldr	r3, [pc, #12]	; (5084 <setTrackBallRGBW+0x70>)
    5078:	4798      	blx	r3
} 
    507a:	46bd      	mov	sp, r7
    507c:	b002      	add	sp, #8
    507e:	bdb0      	pop	{r4, r5, r7, pc}
    5080:	20000108 	.word	0x20000108
    5084:	000018ad 	.word	0x000018ad
    5088:	20000248 	.word	0x20000248

0000508c <__aeabi_uidiv>:
    508c:	2200      	movs	r2, #0
    508e:	0843      	lsrs	r3, r0, #1
    5090:	428b      	cmp	r3, r1
    5092:	d374      	bcc.n	517e <__aeabi_uidiv+0xf2>
    5094:	0903      	lsrs	r3, r0, #4
    5096:	428b      	cmp	r3, r1
    5098:	d35f      	bcc.n	515a <__aeabi_uidiv+0xce>
    509a:	0a03      	lsrs	r3, r0, #8
    509c:	428b      	cmp	r3, r1
    509e:	d344      	bcc.n	512a <__aeabi_uidiv+0x9e>
    50a0:	0b03      	lsrs	r3, r0, #12
    50a2:	428b      	cmp	r3, r1
    50a4:	d328      	bcc.n	50f8 <__aeabi_uidiv+0x6c>
    50a6:	0c03      	lsrs	r3, r0, #16
    50a8:	428b      	cmp	r3, r1
    50aa:	d30d      	bcc.n	50c8 <__aeabi_uidiv+0x3c>
    50ac:	22ff      	movs	r2, #255	; 0xff
    50ae:	0209      	lsls	r1, r1, #8
    50b0:	ba12      	rev	r2, r2
    50b2:	0c03      	lsrs	r3, r0, #16
    50b4:	428b      	cmp	r3, r1
    50b6:	d302      	bcc.n	50be <__aeabi_uidiv+0x32>
    50b8:	1212      	asrs	r2, r2, #8
    50ba:	0209      	lsls	r1, r1, #8
    50bc:	d065      	beq.n	518a <__aeabi_uidiv+0xfe>
    50be:	0b03      	lsrs	r3, r0, #12
    50c0:	428b      	cmp	r3, r1
    50c2:	d319      	bcc.n	50f8 <__aeabi_uidiv+0x6c>
    50c4:	e000      	b.n	50c8 <__aeabi_uidiv+0x3c>
    50c6:	0a09      	lsrs	r1, r1, #8
    50c8:	0bc3      	lsrs	r3, r0, #15
    50ca:	428b      	cmp	r3, r1
    50cc:	d301      	bcc.n	50d2 <__aeabi_uidiv+0x46>
    50ce:	03cb      	lsls	r3, r1, #15
    50d0:	1ac0      	subs	r0, r0, r3
    50d2:	4152      	adcs	r2, r2
    50d4:	0b83      	lsrs	r3, r0, #14
    50d6:	428b      	cmp	r3, r1
    50d8:	d301      	bcc.n	50de <__aeabi_uidiv+0x52>
    50da:	038b      	lsls	r3, r1, #14
    50dc:	1ac0      	subs	r0, r0, r3
    50de:	4152      	adcs	r2, r2
    50e0:	0b43      	lsrs	r3, r0, #13
    50e2:	428b      	cmp	r3, r1
    50e4:	d301      	bcc.n	50ea <__aeabi_uidiv+0x5e>
    50e6:	034b      	lsls	r3, r1, #13
    50e8:	1ac0      	subs	r0, r0, r3
    50ea:	4152      	adcs	r2, r2
    50ec:	0b03      	lsrs	r3, r0, #12
    50ee:	428b      	cmp	r3, r1
    50f0:	d301      	bcc.n	50f6 <__aeabi_uidiv+0x6a>
    50f2:	030b      	lsls	r3, r1, #12
    50f4:	1ac0      	subs	r0, r0, r3
    50f6:	4152      	adcs	r2, r2
    50f8:	0ac3      	lsrs	r3, r0, #11
    50fa:	428b      	cmp	r3, r1
    50fc:	d301      	bcc.n	5102 <__aeabi_uidiv+0x76>
    50fe:	02cb      	lsls	r3, r1, #11
    5100:	1ac0      	subs	r0, r0, r3
    5102:	4152      	adcs	r2, r2
    5104:	0a83      	lsrs	r3, r0, #10
    5106:	428b      	cmp	r3, r1
    5108:	d301      	bcc.n	510e <__aeabi_uidiv+0x82>
    510a:	028b      	lsls	r3, r1, #10
    510c:	1ac0      	subs	r0, r0, r3
    510e:	4152      	adcs	r2, r2
    5110:	0a43      	lsrs	r3, r0, #9
    5112:	428b      	cmp	r3, r1
    5114:	d301      	bcc.n	511a <__aeabi_uidiv+0x8e>
    5116:	024b      	lsls	r3, r1, #9
    5118:	1ac0      	subs	r0, r0, r3
    511a:	4152      	adcs	r2, r2
    511c:	0a03      	lsrs	r3, r0, #8
    511e:	428b      	cmp	r3, r1
    5120:	d301      	bcc.n	5126 <__aeabi_uidiv+0x9a>
    5122:	020b      	lsls	r3, r1, #8
    5124:	1ac0      	subs	r0, r0, r3
    5126:	4152      	adcs	r2, r2
    5128:	d2cd      	bcs.n	50c6 <__aeabi_uidiv+0x3a>
    512a:	09c3      	lsrs	r3, r0, #7
    512c:	428b      	cmp	r3, r1
    512e:	d301      	bcc.n	5134 <__aeabi_uidiv+0xa8>
    5130:	01cb      	lsls	r3, r1, #7
    5132:	1ac0      	subs	r0, r0, r3
    5134:	4152      	adcs	r2, r2
    5136:	0983      	lsrs	r3, r0, #6
    5138:	428b      	cmp	r3, r1
    513a:	d301      	bcc.n	5140 <__aeabi_uidiv+0xb4>
    513c:	018b      	lsls	r3, r1, #6
    513e:	1ac0      	subs	r0, r0, r3
    5140:	4152      	adcs	r2, r2
    5142:	0943      	lsrs	r3, r0, #5
    5144:	428b      	cmp	r3, r1
    5146:	d301      	bcc.n	514c <__aeabi_uidiv+0xc0>
    5148:	014b      	lsls	r3, r1, #5
    514a:	1ac0      	subs	r0, r0, r3
    514c:	4152      	adcs	r2, r2
    514e:	0903      	lsrs	r3, r0, #4
    5150:	428b      	cmp	r3, r1
    5152:	d301      	bcc.n	5158 <__aeabi_uidiv+0xcc>
    5154:	010b      	lsls	r3, r1, #4
    5156:	1ac0      	subs	r0, r0, r3
    5158:	4152      	adcs	r2, r2
    515a:	08c3      	lsrs	r3, r0, #3
    515c:	428b      	cmp	r3, r1
    515e:	d301      	bcc.n	5164 <__aeabi_uidiv+0xd8>
    5160:	00cb      	lsls	r3, r1, #3
    5162:	1ac0      	subs	r0, r0, r3
    5164:	4152      	adcs	r2, r2
    5166:	0883      	lsrs	r3, r0, #2
    5168:	428b      	cmp	r3, r1
    516a:	d301      	bcc.n	5170 <__aeabi_uidiv+0xe4>
    516c:	008b      	lsls	r3, r1, #2
    516e:	1ac0      	subs	r0, r0, r3
    5170:	4152      	adcs	r2, r2
    5172:	0843      	lsrs	r3, r0, #1
    5174:	428b      	cmp	r3, r1
    5176:	d301      	bcc.n	517c <__aeabi_uidiv+0xf0>
    5178:	004b      	lsls	r3, r1, #1
    517a:	1ac0      	subs	r0, r0, r3
    517c:	4152      	adcs	r2, r2
    517e:	1a41      	subs	r1, r0, r1
    5180:	d200      	bcs.n	5184 <__aeabi_uidiv+0xf8>
    5182:	4601      	mov	r1, r0
    5184:	4152      	adcs	r2, r2
    5186:	4610      	mov	r0, r2
    5188:	4770      	bx	lr
    518a:	e7ff      	b.n	518c <__aeabi_uidiv+0x100>
    518c:	b501      	push	{r0, lr}
    518e:	2000      	movs	r0, #0
    5190:	f000 f80c 	bl	51ac <__aeabi_idiv0>
    5194:	bd02      	pop	{r1, pc}
    5196:	46c0      	nop			; (mov r8, r8)

00005198 <__aeabi_uidivmod>:
    5198:	2900      	cmp	r1, #0
    519a:	d0f7      	beq.n	518c <__aeabi_uidiv+0x100>
    519c:	b503      	push	{r0, r1, lr}
    519e:	f7ff ff75 	bl	508c <__aeabi_uidiv>
    51a2:	bc0e      	pop	{r1, r2, r3}
    51a4:	4342      	muls	r2, r0
    51a6:	1a89      	subs	r1, r1, r2
    51a8:	4718      	bx	r3
    51aa:	46c0      	nop			; (mov r8, r8)

000051ac <__aeabi_idiv0>:
    51ac:	4770      	bx	lr
    51ae:	46c0      	nop			; (mov r8, r8)

000051b0 <__libc_init_array>:
    51b0:	4b0e      	ldr	r3, [pc, #56]	; (51ec <__libc_init_array+0x3c>)
    51b2:	b570      	push	{r4, r5, r6, lr}
    51b4:	2500      	movs	r5, #0
    51b6:	1c1e      	adds	r6, r3, #0
    51b8:	4c0d      	ldr	r4, [pc, #52]	; (51f0 <__libc_init_array+0x40>)
    51ba:	1ae4      	subs	r4, r4, r3
    51bc:	10a4      	asrs	r4, r4, #2
    51be:	42a5      	cmp	r5, r4
    51c0:	d004      	beq.n	51cc <__libc_init_array+0x1c>
    51c2:	00ab      	lsls	r3, r5, #2
    51c4:	58f3      	ldr	r3, [r6, r3]
    51c6:	4798      	blx	r3
    51c8:	3501      	adds	r5, #1
    51ca:	e7f8      	b.n	51be <__libc_init_array+0xe>
    51cc:	f000 f8a0 	bl	5310 <_init>
    51d0:	4b08      	ldr	r3, [pc, #32]	; (51f4 <__libc_init_array+0x44>)
    51d2:	2500      	movs	r5, #0
    51d4:	1c1e      	adds	r6, r3, #0
    51d6:	4c08      	ldr	r4, [pc, #32]	; (51f8 <__libc_init_array+0x48>)
    51d8:	1ae4      	subs	r4, r4, r3
    51da:	10a4      	asrs	r4, r4, #2
    51dc:	42a5      	cmp	r5, r4
    51de:	d004      	beq.n	51ea <__libc_init_array+0x3a>
    51e0:	00ab      	lsls	r3, r5, #2
    51e2:	58f3      	ldr	r3, [r6, r3]
    51e4:	4798      	blx	r3
    51e6:	3501      	adds	r5, #1
    51e8:	e7f8      	b.n	51dc <__libc_init_array+0x2c>
    51ea:	bd70      	pop	{r4, r5, r6, pc}
    51ec:	0000531c 	.word	0x0000531c
    51f0:	0000531c 	.word	0x0000531c
    51f4:	0000531c 	.word	0x0000531c
    51f8:	00005320 	.word	0x00005320

000051fc <memcpy>:
    51fc:	2300      	movs	r3, #0
    51fe:	b510      	push	{r4, lr}
    5200:	4293      	cmp	r3, r2
    5202:	d003      	beq.n	520c <memcpy+0x10>
    5204:	5ccc      	ldrb	r4, [r1, r3]
    5206:	54c4      	strb	r4, [r0, r3]
    5208:	3301      	adds	r3, #1
    520a:	e7f9      	b.n	5200 <memcpy+0x4>
    520c:	bd10      	pop	{r4, pc}

0000520e <memset>:
    520e:	1c03      	adds	r3, r0, #0
    5210:	1882      	adds	r2, r0, r2
    5212:	4293      	cmp	r3, r2
    5214:	d002      	beq.n	521c <memset+0xe>
    5216:	7019      	strb	r1, [r3, #0]
    5218:	3301      	adds	r3, #1
    521a:	e7fa      	b.n	5212 <memset+0x4>
    521c:	4770      	bx	lr
	...

00005220 <tcc_modules>:
    5220:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0000522c <_tcc_gclk_ids>:
    522c:	1a1a 001b                                   ....

00005230 <_tcc_apbcmasks>:
    5230:	0100 0000 0200 0000 0400 0000               ............

0000523c <_tcc_maxs>:
    523c:	ffff 00ff ffff 00ff ffff 0000               ............

00005248 <_tcc_cc_nums>:
    5248:	0204 0002                                   ....

0000524c <_tcc_ow_nums>:
    524c:	0408 0002                                   ....

00005250 <_tcc_intflag>:
    5250:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    5260:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    5270:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    5280:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    5290:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
    52a0:	2eea 0000 2f66 0000 2f66 0000 2f0c 0000     ....f/..f/.../..
    52b0:	2f06 0000 2f12 0000 2ef0 0000 2f18 0000     ./.../......./..
    52c0:	2f4c 0000 310c 0000 315c 0000 315c 0000     L/...1..\1..\1..
    52d0:	3158 0000 30fe 0000 311e 0000 30ee 0000     X1...0...1...0..
    52e0:	3130 0000 3142 0000 4726 0000 46fe 0000     01..B1..&G...F..
    52f0:	46d6 0000 469c 0000 4662 0000 4f54 5350     .F...F..bF..TOPS
    5300:	4345 4552 5054 5341 5753 4452 0000 0000     ECRETPASSWRD....

00005310 <_init>:
    5310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5316:	bc08      	pop	{r3}
    5318:	469e      	mov	lr, r3
    531a:	4770      	bx	lr

0000531c <__init_array_start>:
    531c:	000000dd 	.word	0x000000dd

00005320 <_fini>:
    5320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5326:	bc08      	pop	{r3}
    5328:	469e      	mov	lr, r3
    532a:	4770      	bx	lr

0000532c <__fini_array_start>:
    532c:	000000b5 	.word	0x000000b5
